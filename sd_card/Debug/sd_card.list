
sd_card.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b9c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000598  08005cd8  08005cd8  00015cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006270  08006270  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08006270  08006270  00016270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006278  08006278  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006278  08006278  00016278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800627c  0800627c  0001627c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08006280  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  20000024  080062a4  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000031c  080062a4  0002031c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ae22  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ded  00000000  00000000  0002ae6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b40  00000000  00000000  0002cc60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a68  00000000  00000000  0002d7a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003734  00000000  00000000  0002e208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eda3  00000000  00000000  0003193c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087adb  00000000  00000000  000406df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c81ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ea0  00000000  00000000  000c820c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000024 	.word	0x20000024
 8000158:	00000000 	.word	0x00000000
 800015c:	08005cc0 	.word	0x08005cc0

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000028 	.word	0x20000028
 8000178:	08005cc0 	.word	0x08005cc0

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_dmul>:
 800018c:	b570      	push	{r4, r5, r6, lr}
 800018e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000192:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000196:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800019a:	bf1d      	ittte	ne
 800019c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001a0:	ea94 0f0c 	teqne	r4, ip
 80001a4:	ea95 0f0c 	teqne	r5, ip
 80001a8:	f000 f8de 	bleq	8000368 <__aeabi_dmul+0x1dc>
 80001ac:	442c      	add	r4, r5
 80001ae:	ea81 0603 	eor.w	r6, r1, r3
 80001b2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001b6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001ba:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001be:	bf18      	it	ne
 80001c0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80001c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80001c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001cc:	d038      	beq.n	8000240 <__aeabi_dmul+0xb4>
 80001ce:	fba0 ce02 	umull	ip, lr, r0, r2
 80001d2:	f04f 0500 	mov.w	r5, #0
 80001d6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001da:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001de:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001e2:	f04f 0600 	mov.w	r6, #0
 80001e6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ea:	f09c 0f00 	teq	ip, #0
 80001ee:	bf18      	it	ne
 80001f0:	f04e 0e01 	orrne.w	lr, lr, #1
 80001f4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001f8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001fc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000200:	d204      	bcs.n	800020c <__aeabi_dmul+0x80>
 8000202:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000206:	416d      	adcs	r5, r5
 8000208:	eb46 0606 	adc.w	r6, r6, r6
 800020c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000210:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000214:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000218:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800021c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000220:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000224:	bf88      	it	hi
 8000226:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800022a:	d81e      	bhi.n	800026a <__aeabi_dmul+0xde>
 800022c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000230:	bf08      	it	eq
 8000232:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000236:	f150 0000 	adcs.w	r0, r0, #0
 800023a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800023e:	bd70      	pop	{r4, r5, r6, pc}
 8000240:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000244:	ea46 0101 	orr.w	r1, r6, r1
 8000248:	ea40 0002 	orr.w	r0, r0, r2
 800024c:	ea81 0103 	eor.w	r1, r1, r3
 8000250:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000254:	bfc2      	ittt	gt
 8000256:	ebd4 050c 	rsbsgt	r5, r4, ip
 800025a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800025e:	bd70      	popgt	{r4, r5, r6, pc}
 8000260:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000264:	f04f 0e00 	mov.w	lr, #0
 8000268:	3c01      	subs	r4, #1
 800026a:	f300 80ab 	bgt.w	80003c4 <__aeabi_dmul+0x238>
 800026e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000272:	bfde      	ittt	le
 8000274:	2000      	movle	r0, #0
 8000276:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800027a:	bd70      	pople	{r4, r5, r6, pc}
 800027c:	f1c4 0400 	rsb	r4, r4, #0
 8000280:	3c20      	subs	r4, #32
 8000282:	da35      	bge.n	80002f0 <__aeabi_dmul+0x164>
 8000284:	340c      	adds	r4, #12
 8000286:	dc1b      	bgt.n	80002c0 <__aeabi_dmul+0x134>
 8000288:	f104 0414 	add.w	r4, r4, #20
 800028c:	f1c4 0520 	rsb	r5, r4, #32
 8000290:	fa00 f305 	lsl.w	r3, r0, r5
 8000294:	fa20 f004 	lsr.w	r0, r0, r4
 8000298:	fa01 f205 	lsl.w	r2, r1, r5
 800029c:	ea40 0002 	orr.w	r0, r0, r2
 80002a0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002ac:	fa21 f604 	lsr.w	r6, r1, r4
 80002b0:	eb42 0106 	adc.w	r1, r2, r6
 80002b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002b8:	bf08      	it	eq
 80002ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002be:	bd70      	pop	{r4, r5, r6, pc}
 80002c0:	f1c4 040c 	rsb	r4, r4, #12
 80002c4:	f1c4 0520 	rsb	r5, r4, #32
 80002c8:	fa00 f304 	lsl.w	r3, r0, r4
 80002cc:	fa20 f005 	lsr.w	r0, r0, r5
 80002d0:	fa01 f204 	lsl.w	r2, r1, r4
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e0:	f141 0100 	adc.w	r1, r1, #0
 80002e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e8:	bf08      	it	eq
 80002ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ee:	bd70      	pop	{r4, r5, r6, pc}
 80002f0:	f1c4 0520 	rsb	r5, r4, #32
 80002f4:	fa00 f205 	lsl.w	r2, r0, r5
 80002f8:	ea4e 0e02 	orr.w	lr, lr, r2
 80002fc:	fa20 f304 	lsr.w	r3, r0, r4
 8000300:	fa01 f205 	lsl.w	r2, r1, r5
 8000304:	ea43 0302 	orr.w	r3, r3, r2
 8000308:	fa21 f004 	lsr.w	r0, r1, r4
 800030c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000310:	fa21 f204 	lsr.w	r2, r1, r4
 8000314:	ea20 0002 	bic.w	r0, r0, r2
 8000318:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800031c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000320:	bf08      	it	eq
 8000322:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000326:	bd70      	pop	{r4, r5, r6, pc}
 8000328:	f094 0f00 	teq	r4, #0
 800032c:	d10f      	bne.n	800034e <__aeabi_dmul+0x1c2>
 800032e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000332:	0040      	lsls	r0, r0, #1
 8000334:	eb41 0101 	adc.w	r1, r1, r1
 8000338:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800033c:	bf08      	it	eq
 800033e:	3c01      	subeq	r4, #1
 8000340:	d0f7      	beq.n	8000332 <__aeabi_dmul+0x1a6>
 8000342:	ea41 0106 	orr.w	r1, r1, r6
 8000346:	f095 0f00 	teq	r5, #0
 800034a:	bf18      	it	ne
 800034c:	4770      	bxne	lr
 800034e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000352:	0052      	lsls	r2, r2, #1
 8000354:	eb43 0303 	adc.w	r3, r3, r3
 8000358:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800035c:	bf08      	it	eq
 800035e:	3d01      	subeq	r5, #1
 8000360:	d0f7      	beq.n	8000352 <__aeabi_dmul+0x1c6>
 8000362:	ea43 0306 	orr.w	r3, r3, r6
 8000366:	4770      	bx	lr
 8000368:	ea94 0f0c 	teq	r4, ip
 800036c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000370:	bf18      	it	ne
 8000372:	ea95 0f0c 	teqne	r5, ip
 8000376:	d00c      	beq.n	8000392 <__aeabi_dmul+0x206>
 8000378:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800037c:	bf18      	it	ne
 800037e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000382:	d1d1      	bne.n	8000328 <__aeabi_dmul+0x19c>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f04f 0000 	mov.w	r0, #0
 8000390:	bd70      	pop	{r4, r5, r6, pc}
 8000392:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000396:	bf06      	itte	eq
 8000398:	4610      	moveq	r0, r2
 800039a:	4619      	moveq	r1, r3
 800039c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003a0:	d019      	beq.n	80003d6 <__aeabi_dmul+0x24a>
 80003a2:	ea94 0f0c 	teq	r4, ip
 80003a6:	d102      	bne.n	80003ae <__aeabi_dmul+0x222>
 80003a8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003ac:	d113      	bne.n	80003d6 <__aeabi_dmul+0x24a>
 80003ae:	ea95 0f0c 	teq	r5, ip
 80003b2:	d105      	bne.n	80003c0 <__aeabi_dmul+0x234>
 80003b4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003b8:	bf1c      	itt	ne
 80003ba:	4610      	movne	r0, r2
 80003bc:	4619      	movne	r1, r3
 80003be:	d10a      	bne.n	80003d6 <__aeabi_dmul+0x24a>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d0:	f04f 0000 	mov.w	r0, #0
 80003d4:	bd70      	pop	{r4, r5, r6, pc}
 80003d6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003da:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003de:	bd70      	pop	{r4, r5, r6, pc}

080003e0 <__aeabi_drsub>:
 80003e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003e4:	e002      	b.n	80003ec <__adddf3>
 80003e6:	bf00      	nop

080003e8 <__aeabi_dsub>:
 80003e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003ec <__adddf3>:
 80003ec:	b530      	push	{r4, r5, lr}
 80003ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	bf1f      	itttt	ne
 8000402:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000406:	ea55 0c02 	orrsne.w	ip, r5, r2
 800040a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800040e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000412:	f000 80e2 	beq.w	80005da <__adddf3+0x1ee>
 8000416:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800041a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800041e:	bfb8      	it	lt
 8000420:	426d      	neglt	r5, r5
 8000422:	dd0c      	ble.n	800043e <__adddf3+0x52>
 8000424:	442c      	add	r4, r5
 8000426:	ea80 0202 	eor.w	r2, r0, r2
 800042a:	ea81 0303 	eor.w	r3, r1, r3
 800042e:	ea82 0000 	eor.w	r0, r2, r0
 8000432:	ea83 0101 	eor.w	r1, r3, r1
 8000436:	ea80 0202 	eor.w	r2, r0, r2
 800043a:	ea81 0303 	eor.w	r3, r1, r3
 800043e:	2d36      	cmp	r5, #54	; 0x36
 8000440:	bf88      	it	hi
 8000442:	bd30      	pophi	{r4, r5, pc}
 8000444:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000448:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800044c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000450:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000454:	d002      	beq.n	800045c <__adddf3+0x70>
 8000456:	4240      	negs	r0, r0
 8000458:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800045c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000460:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000464:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000468:	d002      	beq.n	8000470 <__adddf3+0x84>
 800046a:	4252      	negs	r2, r2
 800046c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000470:	ea94 0f05 	teq	r4, r5
 8000474:	f000 80a7 	beq.w	80005c6 <__adddf3+0x1da>
 8000478:	f1a4 0401 	sub.w	r4, r4, #1
 800047c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000480:	db0d      	blt.n	800049e <__adddf3+0xb2>
 8000482:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000486:	fa22 f205 	lsr.w	r2, r2, r5
 800048a:	1880      	adds	r0, r0, r2
 800048c:	f141 0100 	adc.w	r1, r1, #0
 8000490:	fa03 f20e 	lsl.w	r2, r3, lr
 8000494:	1880      	adds	r0, r0, r2
 8000496:	fa43 f305 	asr.w	r3, r3, r5
 800049a:	4159      	adcs	r1, r3
 800049c:	e00e      	b.n	80004bc <__adddf3+0xd0>
 800049e:	f1a5 0520 	sub.w	r5, r5, #32
 80004a2:	f10e 0e20 	add.w	lr, lr, #32
 80004a6:	2a01      	cmp	r2, #1
 80004a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004ac:	bf28      	it	cs
 80004ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004b2:	fa43 f305 	asr.w	r3, r3, r5
 80004b6:	18c0      	adds	r0, r0, r3
 80004b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c0:	d507      	bpl.n	80004d2 <__adddf3+0xe6>
 80004c2:	f04f 0e00 	mov.w	lr, #0
 80004c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80004d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004d6:	d31b      	bcc.n	8000510 <__adddf3+0x124>
 80004d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004dc:	d30c      	bcc.n	80004f8 <__adddf3+0x10c>
 80004de:	0849      	lsrs	r1, r1, #1
 80004e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004e8:	f104 0401 	add.w	r4, r4, #1
 80004ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004f4:	f080 809a 	bcs.w	800062c <__adddf3+0x240>
 80004f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004fc:	bf08      	it	eq
 80004fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000502:	f150 0000 	adcs.w	r0, r0, #0
 8000506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800050a:	ea41 0105 	orr.w	r1, r1, r5
 800050e:	bd30      	pop	{r4, r5, pc}
 8000510:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000514:	4140      	adcs	r0, r0
 8000516:	eb41 0101 	adc.w	r1, r1, r1
 800051a:	3c01      	subs	r4, #1
 800051c:	bf28      	it	cs
 800051e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000522:	d2e9      	bcs.n	80004f8 <__adddf3+0x10c>
 8000524:	f091 0f00 	teq	r1, #0
 8000528:	bf04      	itt	eq
 800052a:	4601      	moveq	r1, r0
 800052c:	2000      	moveq	r0, #0
 800052e:	fab1 f381 	clz	r3, r1
 8000532:	bf08      	it	eq
 8000534:	3320      	addeq	r3, #32
 8000536:	f1a3 030b 	sub.w	r3, r3, #11
 800053a:	f1b3 0220 	subs.w	r2, r3, #32
 800053e:	da0c      	bge.n	800055a <__adddf3+0x16e>
 8000540:	320c      	adds	r2, #12
 8000542:	dd08      	ble.n	8000556 <__adddf3+0x16a>
 8000544:	f102 0c14 	add.w	ip, r2, #20
 8000548:	f1c2 020c 	rsb	r2, r2, #12
 800054c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000550:	fa21 f102 	lsr.w	r1, r1, r2
 8000554:	e00c      	b.n	8000570 <__adddf3+0x184>
 8000556:	f102 0214 	add.w	r2, r2, #20
 800055a:	bfd8      	it	le
 800055c:	f1c2 0c20 	rsble	ip, r2, #32
 8000560:	fa01 f102 	lsl.w	r1, r1, r2
 8000564:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000568:	bfdc      	itt	le
 800056a:	ea41 010c 	orrle.w	r1, r1, ip
 800056e:	4090      	lslle	r0, r2
 8000570:	1ae4      	subs	r4, r4, r3
 8000572:	bfa2      	ittt	ge
 8000574:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000578:	4329      	orrge	r1, r5
 800057a:	bd30      	popge	{r4, r5, pc}
 800057c:	ea6f 0404 	mvn.w	r4, r4
 8000580:	3c1f      	subs	r4, #31
 8000582:	da1c      	bge.n	80005be <__adddf3+0x1d2>
 8000584:	340c      	adds	r4, #12
 8000586:	dc0e      	bgt.n	80005a6 <__adddf3+0x1ba>
 8000588:	f104 0414 	add.w	r4, r4, #20
 800058c:	f1c4 0220 	rsb	r2, r4, #32
 8000590:	fa20 f004 	lsr.w	r0, r0, r4
 8000594:	fa01 f302 	lsl.w	r3, r1, r2
 8000598:	ea40 0003 	orr.w	r0, r0, r3
 800059c:	fa21 f304 	lsr.w	r3, r1, r4
 80005a0:	ea45 0103 	orr.w	r1, r5, r3
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f1c4 040c 	rsb	r4, r4, #12
 80005aa:	f1c4 0220 	rsb	r2, r4, #32
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 f304 	lsl.w	r3, r1, r4
 80005b6:	ea40 0003 	orr.w	r0, r0, r3
 80005ba:	4629      	mov	r1, r5
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	fa21 f004 	lsr.w	r0, r1, r4
 80005c2:	4629      	mov	r1, r5
 80005c4:	bd30      	pop	{r4, r5, pc}
 80005c6:	f094 0f00 	teq	r4, #0
 80005ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005ce:	bf06      	itte	eq
 80005d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005d4:	3401      	addeq	r4, #1
 80005d6:	3d01      	subne	r5, #1
 80005d8:	e74e      	b.n	8000478 <__adddf3+0x8c>
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf18      	it	ne
 80005e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005e4:	d029      	beq.n	800063a <__adddf3+0x24e>
 80005e6:	ea94 0f05 	teq	r4, r5
 80005ea:	bf08      	it	eq
 80005ec:	ea90 0f02 	teqeq	r0, r2
 80005f0:	d005      	beq.n	80005fe <__adddf3+0x212>
 80005f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005f6:	bf04      	itt	eq
 80005f8:	4619      	moveq	r1, r3
 80005fa:	4610      	moveq	r0, r2
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea91 0f03 	teq	r1, r3
 8000602:	bf1e      	ittt	ne
 8000604:	2100      	movne	r1, #0
 8000606:	2000      	movne	r0, #0
 8000608:	bd30      	popne	{r4, r5, pc}
 800060a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800060e:	d105      	bne.n	800061c <__adddf3+0x230>
 8000610:	0040      	lsls	r0, r0, #1
 8000612:	4149      	adcs	r1, r1
 8000614:	bf28      	it	cs
 8000616:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800061a:	bd30      	pop	{r4, r5, pc}
 800061c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000620:	bf3c      	itt	cc
 8000622:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000626:	bd30      	popcc	{r4, r5, pc}
 8000628:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800062c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000630:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000634:	f04f 0000 	mov.w	r0, #0
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063e:	bf1a      	itte	ne
 8000640:	4619      	movne	r1, r3
 8000642:	4610      	movne	r0, r2
 8000644:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000648:	bf1c      	itt	ne
 800064a:	460b      	movne	r3, r1
 800064c:	4602      	movne	r2, r0
 800064e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000652:	bf06      	itte	eq
 8000654:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000658:	ea91 0f03 	teqeq	r1, r3
 800065c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	bf00      	nop

08000664 <__aeabi_ui2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000678:	f04f 0500 	mov.w	r5, #0
 800067c:	f04f 0100 	mov.w	r1, #0
 8000680:	e750      	b.n	8000524 <__adddf3+0x138>
 8000682:	bf00      	nop

08000684 <__aeabi_i2d>:
 8000684:	f090 0f00 	teq	r0, #0
 8000688:	bf04      	itt	eq
 800068a:	2100      	moveq	r1, #0
 800068c:	4770      	bxeq	lr
 800068e:	b530      	push	{r4, r5, lr}
 8000690:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000694:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000698:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800069c:	bf48      	it	mi
 800069e:	4240      	negmi	r0, r0
 80006a0:	f04f 0100 	mov.w	r1, #0
 80006a4:	e73e      	b.n	8000524 <__adddf3+0x138>
 80006a6:	bf00      	nop

080006a8 <__aeabi_f2d>:
 80006a8:	0042      	lsls	r2, r0, #1
 80006aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80006b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006b6:	bf1f      	itttt	ne
 80006b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006c4:	4770      	bxne	lr
 80006c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006ca:	bf08      	it	eq
 80006cc:	4770      	bxeq	lr
 80006ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006d2:	bf04      	itt	eq
 80006d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	e71c      	b.n	8000524 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_ul2d>:
 80006ec:	ea50 0201 	orrs.w	r2, r0, r1
 80006f0:	bf08      	it	eq
 80006f2:	4770      	bxeq	lr
 80006f4:	b530      	push	{r4, r5, lr}
 80006f6:	f04f 0500 	mov.w	r5, #0
 80006fa:	e00a      	b.n	8000712 <__aeabi_l2d+0x16>

080006fc <__aeabi_l2d>:
 80006fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000700:	bf08      	it	eq
 8000702:	4770      	bxeq	lr
 8000704:	b530      	push	{r4, r5, lr}
 8000706:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800070a:	d502      	bpl.n	8000712 <__aeabi_l2d+0x16>
 800070c:	4240      	negs	r0, r0
 800070e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000712:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000716:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800071a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800071e:	f43f aed8 	beq.w	80004d2 <__adddf3+0xe6>
 8000722:	f04f 0203 	mov.w	r2, #3
 8000726:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800072a:	bf18      	it	ne
 800072c:	3203      	addne	r2, #3
 800072e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000732:	bf18      	it	ne
 8000734:	3203      	addne	r2, #3
 8000736:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800073a:	f1c2 0320 	rsb	r3, r2, #32
 800073e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000742:	fa20 f002 	lsr.w	r0, r0, r2
 8000746:	fa01 fe03 	lsl.w	lr, r1, r3
 800074a:	ea40 000e 	orr.w	r0, r0, lr
 800074e:	fa21 f102 	lsr.w	r1, r1, r2
 8000752:	4414      	add	r4, r2
 8000754:	e6bd      	b.n	80004d2 <__adddf3+0xe6>
 8000756:	bf00      	nop

08000758 <__aeabi_d2uiz>:
 8000758:	004a      	lsls	r2, r1, #1
 800075a:	d211      	bcs.n	8000780 <__aeabi_d2uiz+0x28>
 800075c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000760:	d211      	bcs.n	8000786 <__aeabi_d2uiz+0x2e>
 8000762:	d50d      	bpl.n	8000780 <__aeabi_d2uiz+0x28>
 8000764:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000768:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800076c:	d40e      	bmi.n	800078c <__aeabi_d2uiz+0x34>
 800076e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000772:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000776:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800077a:	fa23 f002 	lsr.w	r0, r3, r2
 800077e:	4770      	bx	lr
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	4770      	bx	lr
 8000786:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800078a:	d102      	bne.n	8000792 <__aeabi_d2uiz+0x3a>
 800078c:	f04f 30ff 	mov.w	r0, #4294967295
 8000790:	4770      	bx	lr
 8000792:	f04f 0000 	mov.w	r0, #0
 8000796:	4770      	bx	lr

08000798 <__aeabi_uldivmod>:
 8000798:	b953      	cbnz	r3, 80007b0 <__aeabi_uldivmod+0x18>
 800079a:	b94a      	cbnz	r2, 80007b0 <__aeabi_uldivmod+0x18>
 800079c:	2900      	cmp	r1, #0
 800079e:	bf08      	it	eq
 80007a0:	2800      	cmpeq	r0, #0
 80007a2:	bf1c      	itt	ne
 80007a4:	f04f 31ff 	movne.w	r1, #4294967295
 80007a8:	f04f 30ff 	movne.w	r0, #4294967295
 80007ac:	f000 b976 	b.w	8000a9c <__aeabi_idiv0>
 80007b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80007b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007b8:	f000 f806 	bl	80007c8 <__udivmoddi4>
 80007bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007c4:	b004      	add	sp, #16
 80007c6:	4770      	bx	lr

080007c8 <__udivmoddi4>:
 80007c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007cc:	9e08      	ldr	r6, [sp, #32]
 80007ce:	460d      	mov	r5, r1
 80007d0:	4604      	mov	r4, r0
 80007d2:	4688      	mov	r8, r1
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d14d      	bne.n	8000874 <__udivmoddi4+0xac>
 80007d8:	428a      	cmp	r2, r1
 80007da:	4694      	mov	ip, r2
 80007dc:	d968      	bls.n	80008b0 <__udivmoddi4+0xe8>
 80007de:	fab2 f282 	clz	r2, r2
 80007e2:	b152      	cbz	r2, 80007fa <__udivmoddi4+0x32>
 80007e4:	fa01 f302 	lsl.w	r3, r1, r2
 80007e8:	f1c2 0120 	rsb	r1, r2, #32
 80007ec:	fa20 f101 	lsr.w	r1, r0, r1
 80007f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80007f4:	ea41 0803 	orr.w	r8, r1, r3
 80007f8:	4094      	lsls	r4, r2
 80007fa:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80007fe:	fbb8 f7f1 	udiv	r7, r8, r1
 8000802:	fa1f fe8c 	uxth.w	lr, ip
 8000806:	fb01 8817 	mls	r8, r1, r7, r8
 800080a:	fb07 f00e 	mul.w	r0, r7, lr
 800080e:	0c23      	lsrs	r3, r4, #16
 8000810:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000814:	4298      	cmp	r0, r3
 8000816:	d90a      	bls.n	800082e <__udivmoddi4+0x66>
 8000818:	eb1c 0303 	adds.w	r3, ip, r3
 800081c:	f107 35ff 	add.w	r5, r7, #4294967295
 8000820:	f080 811e 	bcs.w	8000a60 <__udivmoddi4+0x298>
 8000824:	4298      	cmp	r0, r3
 8000826:	f240 811b 	bls.w	8000a60 <__udivmoddi4+0x298>
 800082a:	3f02      	subs	r7, #2
 800082c:	4463      	add	r3, ip
 800082e:	1a1b      	subs	r3, r3, r0
 8000830:	fbb3 f0f1 	udiv	r0, r3, r1
 8000834:	fb01 3310 	mls	r3, r1, r0, r3
 8000838:	fb00 fe0e 	mul.w	lr, r0, lr
 800083c:	b2a4      	uxth	r4, r4
 800083e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000842:	45a6      	cmp	lr, r4
 8000844:	d90a      	bls.n	800085c <__udivmoddi4+0x94>
 8000846:	eb1c 0404 	adds.w	r4, ip, r4
 800084a:	f100 33ff 	add.w	r3, r0, #4294967295
 800084e:	f080 8109 	bcs.w	8000a64 <__udivmoddi4+0x29c>
 8000852:	45a6      	cmp	lr, r4
 8000854:	f240 8106 	bls.w	8000a64 <__udivmoddi4+0x29c>
 8000858:	4464      	add	r4, ip
 800085a:	3802      	subs	r0, #2
 800085c:	2100      	movs	r1, #0
 800085e:	eba4 040e 	sub.w	r4, r4, lr
 8000862:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000866:	b11e      	cbz	r6, 8000870 <__udivmoddi4+0xa8>
 8000868:	2300      	movs	r3, #0
 800086a:	40d4      	lsrs	r4, r2
 800086c:	e9c6 4300 	strd	r4, r3, [r6]
 8000870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000874:	428b      	cmp	r3, r1
 8000876:	d908      	bls.n	800088a <__udivmoddi4+0xc2>
 8000878:	2e00      	cmp	r6, #0
 800087a:	f000 80ee 	beq.w	8000a5a <__udivmoddi4+0x292>
 800087e:	2100      	movs	r1, #0
 8000880:	e9c6 0500 	strd	r0, r5, [r6]
 8000884:	4608      	mov	r0, r1
 8000886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800088a:	fab3 f183 	clz	r1, r3
 800088e:	2900      	cmp	r1, #0
 8000890:	d14a      	bne.n	8000928 <__udivmoddi4+0x160>
 8000892:	42ab      	cmp	r3, r5
 8000894:	d302      	bcc.n	800089c <__udivmoddi4+0xd4>
 8000896:	4282      	cmp	r2, r0
 8000898:	f200 80fc 	bhi.w	8000a94 <__udivmoddi4+0x2cc>
 800089c:	1a84      	subs	r4, r0, r2
 800089e:	eb65 0303 	sbc.w	r3, r5, r3
 80008a2:	2001      	movs	r0, #1
 80008a4:	4698      	mov	r8, r3
 80008a6:	2e00      	cmp	r6, #0
 80008a8:	d0e2      	beq.n	8000870 <__udivmoddi4+0xa8>
 80008aa:	e9c6 4800 	strd	r4, r8, [r6]
 80008ae:	e7df      	b.n	8000870 <__udivmoddi4+0xa8>
 80008b0:	b902      	cbnz	r2, 80008b4 <__udivmoddi4+0xec>
 80008b2:	deff      	udf	#255	; 0xff
 80008b4:	fab2 f282 	clz	r2, r2
 80008b8:	2a00      	cmp	r2, #0
 80008ba:	f040 8091 	bne.w	80009e0 <__udivmoddi4+0x218>
 80008be:	eba1 000c 	sub.w	r0, r1, ip
 80008c2:	2101      	movs	r1, #1
 80008c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008c8:	fa1f fe8c 	uxth.w	lr, ip
 80008cc:	fbb0 f3f7 	udiv	r3, r0, r7
 80008d0:	fb07 0013 	mls	r0, r7, r3, r0
 80008d4:	0c25      	lsrs	r5, r4, #16
 80008d6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80008da:	fb0e f003 	mul.w	r0, lr, r3
 80008de:	42a8      	cmp	r0, r5
 80008e0:	d908      	bls.n	80008f4 <__udivmoddi4+0x12c>
 80008e2:	eb1c 0505 	adds.w	r5, ip, r5
 80008e6:	f103 38ff 	add.w	r8, r3, #4294967295
 80008ea:	d202      	bcs.n	80008f2 <__udivmoddi4+0x12a>
 80008ec:	42a8      	cmp	r0, r5
 80008ee:	f200 80ce 	bhi.w	8000a8e <__udivmoddi4+0x2c6>
 80008f2:	4643      	mov	r3, r8
 80008f4:	1a2d      	subs	r5, r5, r0
 80008f6:	fbb5 f0f7 	udiv	r0, r5, r7
 80008fa:	fb07 5510 	mls	r5, r7, r0, r5
 80008fe:	fb0e fe00 	mul.w	lr, lr, r0
 8000902:	b2a4      	uxth	r4, r4
 8000904:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000908:	45a6      	cmp	lr, r4
 800090a:	d908      	bls.n	800091e <__udivmoddi4+0x156>
 800090c:	eb1c 0404 	adds.w	r4, ip, r4
 8000910:	f100 35ff 	add.w	r5, r0, #4294967295
 8000914:	d202      	bcs.n	800091c <__udivmoddi4+0x154>
 8000916:	45a6      	cmp	lr, r4
 8000918:	f200 80b6 	bhi.w	8000a88 <__udivmoddi4+0x2c0>
 800091c:	4628      	mov	r0, r5
 800091e:	eba4 040e 	sub.w	r4, r4, lr
 8000922:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000926:	e79e      	b.n	8000866 <__udivmoddi4+0x9e>
 8000928:	f1c1 0720 	rsb	r7, r1, #32
 800092c:	408b      	lsls	r3, r1
 800092e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000932:	ea4c 0c03 	orr.w	ip, ip, r3
 8000936:	fa25 fa07 	lsr.w	sl, r5, r7
 800093a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800093e:	fbba f8f9 	udiv	r8, sl, r9
 8000942:	fa20 f307 	lsr.w	r3, r0, r7
 8000946:	fb09 aa18 	mls	sl, r9, r8, sl
 800094a:	408d      	lsls	r5, r1
 800094c:	fa1f fe8c 	uxth.w	lr, ip
 8000950:	431d      	orrs	r5, r3
 8000952:	fa00 f301 	lsl.w	r3, r0, r1
 8000956:	fb08 f00e 	mul.w	r0, r8, lr
 800095a:	0c2c      	lsrs	r4, r5, #16
 800095c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000960:	42a0      	cmp	r0, r4
 8000962:	fa02 f201 	lsl.w	r2, r2, r1
 8000966:	d90b      	bls.n	8000980 <__udivmoddi4+0x1b8>
 8000968:	eb1c 0404 	adds.w	r4, ip, r4
 800096c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000970:	f080 8088 	bcs.w	8000a84 <__udivmoddi4+0x2bc>
 8000974:	42a0      	cmp	r0, r4
 8000976:	f240 8085 	bls.w	8000a84 <__udivmoddi4+0x2bc>
 800097a:	f1a8 0802 	sub.w	r8, r8, #2
 800097e:	4464      	add	r4, ip
 8000980:	1a24      	subs	r4, r4, r0
 8000982:	fbb4 f0f9 	udiv	r0, r4, r9
 8000986:	fb09 4410 	mls	r4, r9, r0, r4
 800098a:	fb00 fe0e 	mul.w	lr, r0, lr
 800098e:	b2ad      	uxth	r5, r5
 8000990:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000994:	45a6      	cmp	lr, r4
 8000996:	d908      	bls.n	80009aa <__udivmoddi4+0x1e2>
 8000998:	eb1c 0404 	adds.w	r4, ip, r4
 800099c:	f100 35ff 	add.w	r5, r0, #4294967295
 80009a0:	d26c      	bcs.n	8000a7c <__udivmoddi4+0x2b4>
 80009a2:	45a6      	cmp	lr, r4
 80009a4:	d96a      	bls.n	8000a7c <__udivmoddi4+0x2b4>
 80009a6:	3802      	subs	r0, #2
 80009a8:	4464      	add	r4, ip
 80009aa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80009ae:	fba0 9502 	umull	r9, r5, r0, r2
 80009b2:	eba4 040e 	sub.w	r4, r4, lr
 80009b6:	42ac      	cmp	r4, r5
 80009b8:	46c8      	mov	r8, r9
 80009ba:	46ae      	mov	lr, r5
 80009bc:	d356      	bcc.n	8000a6c <__udivmoddi4+0x2a4>
 80009be:	d053      	beq.n	8000a68 <__udivmoddi4+0x2a0>
 80009c0:	2e00      	cmp	r6, #0
 80009c2:	d069      	beq.n	8000a98 <__udivmoddi4+0x2d0>
 80009c4:	ebb3 0208 	subs.w	r2, r3, r8
 80009c8:	eb64 040e 	sbc.w	r4, r4, lr
 80009cc:	fa22 f301 	lsr.w	r3, r2, r1
 80009d0:	fa04 f707 	lsl.w	r7, r4, r7
 80009d4:	431f      	orrs	r7, r3
 80009d6:	40cc      	lsrs	r4, r1
 80009d8:	e9c6 7400 	strd	r7, r4, [r6]
 80009dc:	2100      	movs	r1, #0
 80009de:	e747      	b.n	8000870 <__udivmoddi4+0xa8>
 80009e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80009e4:	f1c2 0120 	rsb	r1, r2, #32
 80009e8:	fa25 f301 	lsr.w	r3, r5, r1
 80009ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009f0:	fa20 f101 	lsr.w	r1, r0, r1
 80009f4:	4095      	lsls	r5, r2
 80009f6:	430d      	orrs	r5, r1
 80009f8:	fbb3 f1f7 	udiv	r1, r3, r7
 80009fc:	fb07 3311 	mls	r3, r7, r1, r3
 8000a00:	fa1f fe8c 	uxth.w	lr, ip
 8000a04:	0c28      	lsrs	r0, r5, #16
 8000a06:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a0a:	fb01 f30e 	mul.w	r3, r1, lr
 8000a0e:	4283      	cmp	r3, r0
 8000a10:	fa04 f402 	lsl.w	r4, r4, r2
 8000a14:	d908      	bls.n	8000a28 <__udivmoddi4+0x260>
 8000a16:	eb1c 0000 	adds.w	r0, ip, r0
 8000a1a:	f101 38ff 	add.w	r8, r1, #4294967295
 8000a1e:	d22f      	bcs.n	8000a80 <__udivmoddi4+0x2b8>
 8000a20:	4283      	cmp	r3, r0
 8000a22:	d92d      	bls.n	8000a80 <__udivmoddi4+0x2b8>
 8000a24:	3902      	subs	r1, #2
 8000a26:	4460      	add	r0, ip
 8000a28:	1ac0      	subs	r0, r0, r3
 8000a2a:	fbb0 f3f7 	udiv	r3, r0, r7
 8000a2e:	fb07 0013 	mls	r0, r7, r3, r0
 8000a32:	b2ad      	uxth	r5, r5
 8000a34:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000a38:	fb03 f00e 	mul.w	r0, r3, lr
 8000a3c:	42a8      	cmp	r0, r5
 8000a3e:	d908      	bls.n	8000a52 <__udivmoddi4+0x28a>
 8000a40:	eb1c 0505 	adds.w	r5, ip, r5
 8000a44:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a48:	d216      	bcs.n	8000a78 <__udivmoddi4+0x2b0>
 8000a4a:	42a8      	cmp	r0, r5
 8000a4c:	d914      	bls.n	8000a78 <__udivmoddi4+0x2b0>
 8000a4e:	3b02      	subs	r3, #2
 8000a50:	4465      	add	r5, ip
 8000a52:	1a28      	subs	r0, r5, r0
 8000a54:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a58:	e738      	b.n	80008cc <__udivmoddi4+0x104>
 8000a5a:	4631      	mov	r1, r6
 8000a5c:	4630      	mov	r0, r6
 8000a5e:	e707      	b.n	8000870 <__udivmoddi4+0xa8>
 8000a60:	462f      	mov	r7, r5
 8000a62:	e6e4      	b.n	800082e <__udivmoddi4+0x66>
 8000a64:	4618      	mov	r0, r3
 8000a66:	e6f9      	b.n	800085c <__udivmoddi4+0x94>
 8000a68:	454b      	cmp	r3, r9
 8000a6a:	d2a9      	bcs.n	80009c0 <__udivmoddi4+0x1f8>
 8000a6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a70:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000a74:	3801      	subs	r0, #1
 8000a76:	e7a3      	b.n	80009c0 <__udivmoddi4+0x1f8>
 8000a78:	4643      	mov	r3, r8
 8000a7a:	e7ea      	b.n	8000a52 <__udivmoddi4+0x28a>
 8000a7c:	4628      	mov	r0, r5
 8000a7e:	e794      	b.n	80009aa <__udivmoddi4+0x1e2>
 8000a80:	4641      	mov	r1, r8
 8000a82:	e7d1      	b.n	8000a28 <__udivmoddi4+0x260>
 8000a84:	46d0      	mov	r8, sl
 8000a86:	e77b      	b.n	8000980 <__udivmoddi4+0x1b8>
 8000a88:	4464      	add	r4, ip
 8000a8a:	3802      	subs	r0, #2
 8000a8c:	e747      	b.n	800091e <__udivmoddi4+0x156>
 8000a8e:	3b02      	subs	r3, #2
 8000a90:	4465      	add	r5, ip
 8000a92:	e72f      	b.n	80008f4 <__udivmoddi4+0x12c>
 8000a94:	4608      	mov	r0, r1
 8000a96:	e706      	b.n	80008a6 <__udivmoddi4+0xde>
 8000a98:	4631      	mov	r1, r6
 8000a9a:	e6e9      	b.n	8000870 <__udivmoddi4+0xa8>

08000a9c <__aeabi_idiv0>:
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <send_uart>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */
void send_uart(char *string)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
	uint8_t len=strlen(string);
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f7ff fb67 	bl	800017c <strlen>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1,(uint8_t *)string,len,100);
 8000ab2:	7bfb      	ldrb	r3, [r7, #15]
 8000ab4:	b29a      	uxth	r2, r3
 8000ab6:	2364      	movs	r3, #100	; 0x64
 8000ab8:	6879      	ldr	r1, [r7, #4]
 8000aba:	4803      	ldr	r0, [pc, #12]	; (8000ac8 <send_uart+0x28>)
 8000abc:	f001 fc8c 	bl	80023d8 <HAL_UART_Transmit>
}
 8000ac0:	bf00      	nop
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000098 	.word	0x20000098

08000acc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	f5ad 5d03 	sub.w	sp, sp, #8384	; 0x20c0
 8000ad2:	b088      	sub	sp, #32
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ad6:	f000 fafa 	bl	80010ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ada:	f000 f8f1 	bl	8000cc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ade:	f000 f997 	bl	8000e10 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000ae2:	f000 f935 	bl	8000d50 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000ae6:	f000 f969 	bl	8000dbc <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8000aea:	f001 fe35 	bl	8002758 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  process_SD_card();
 8000aee:	f000 f9d9 	bl	8000ea4 <process_SD_card>
  	   char        buf[100];

  	   do
  	   {
  	     //Mount the SD Card
  	     fres = f_mount(&FatFs, "", 1);    //1=mount now
 8000af2:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8000af6:	3b04      	subs	r3, #4
 8000af8:	2201      	movs	r2, #1
 8000afa:	4965      	ldr	r1, [pc, #404]	; (8000c90 <main+0x1c4>)
 8000afc:	4618      	mov	r0, r3
 8000afe:	f004 f85d 	bl	8004bbc <f_mount>
 8000b02:	4603      	mov	r3, r0
 8000b04:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8000b08:	f102 021f 	add.w	r2, r2, #31
 8000b0c:	7013      	strb	r3, [r2, #0]
  	     if (fres != FR_OK)
 8000b0e:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8000b12:	f103 031f 	add.w	r3, r3, #31
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d003      	beq.n	8000b24 <main+0x58>
  	     {
  	    	 send_uart("No SD Card found\n");
 8000b1c:	485d      	ldr	r0, [pc, #372]	; (8000c94 <main+0x1c8>)
 8000b1e:	f7ff ffbf 	bl	8000aa0 <send_uart>
//  	    	HAL_UART_Transmit(&huart1,"No SD CARD found",len,100);
  	       break;
 8000b22:	e0ab      	b.n	8000c7c <main+0x1b0>
  	     }
  	     send_uart("SD Card Mounted Successfully!!!\r\n");
 8000b24:	485c      	ldr	r0, [pc, #368]	; (8000c98 <main+0x1cc>)
 8000b26:	f7ff ffbb 	bl	8000aa0 <send_uart>
  	     //Read the SD Card Total size and Free Size
  	     FATFS *pfs;
  	     DWORD fre_clust;
  	     uint32_t totalSpace, freeSpace;

  	     f_getfree("", &fre_clust, &pfs);
 8000b2a:	f107 0220 	add.w	r2, r7, #32
 8000b2e:	3a1c      	subs	r2, #28
 8000b30:	f107 0320 	add.w	r3, r7, #32
 8000b34:	3b20      	subs	r3, #32
 8000b36:	4619      	mov	r1, r3
 8000b38:	4855      	ldr	r0, [pc, #340]	; (8000c90 <main+0x1c4>)
 8000b3a:	f004 fdec 	bl	8005716 <f_getfree>
  	     totalSpace = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8000b3e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000b42:	f853 3cdc 	ldr.w	r3, [r3, #-220]
 8000b46:	69db      	ldr	r3, [r3, #28]
 8000b48:	3b02      	subs	r3, #2
 8000b4a:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8000b4e:	f852 2cdc 	ldr.w	r2, [r2, #-220]
 8000b52:	8952      	ldrh	r2, [r2, #10]
 8000b54:	fb02 f303 	mul.w	r3, r2, r3
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff fd83 	bl	8000664 <__aeabi_ui2d>
 8000b5e:	f04f 0200 	mov.w	r2, #0
 8000b62:	4b4e      	ldr	r3, [pc, #312]	; (8000c9c <main+0x1d0>)
 8000b64:	f7ff fb12 	bl	800018c <__aeabi_dmul>
 8000b68:	4602      	mov	r2, r0
 8000b6a:	460b      	mov	r3, r1
 8000b6c:	4610      	mov	r0, r2
 8000b6e:	4619      	mov	r1, r3
 8000b70:	f7ff fdf2 	bl	8000758 <__aeabi_d2uiz>
 8000b74:	4603      	mov	r3, r0
 8000b76:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8000b7a:	f102 0218 	add.w	r2, r2, #24
 8000b7e:	6013      	str	r3, [r2, #0]
  	     freeSpace = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8000b80:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000b84:	f853 3cdc 	ldr.w	r3, [r3, #-220]
 8000b88:	895b      	ldrh	r3, [r3, #10]
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000b90:	f853 3ce0 	ldr.w	r3, [r3, #-224]
 8000b94:	fb02 f303 	mul.w	r3, r2, r3
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff fd63 	bl	8000664 <__aeabi_ui2d>
 8000b9e:	f04f 0200 	mov.w	r2, #0
 8000ba2:	4b3e      	ldr	r3, [pc, #248]	; (8000c9c <main+0x1d0>)
 8000ba4:	f7ff faf2 	bl	800018c <__aeabi_dmul>
 8000ba8:	4602      	mov	r2, r0
 8000baa:	460b      	mov	r3, r1
 8000bac:	4610      	mov	r0, r2
 8000bae:	4619      	mov	r1, r3
 8000bb0:	f7ff fdd2 	bl	8000758 <__aeabi_d2uiz>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8000bba:	f102 0214 	add.w	r2, r2, #20
 8000bbe:	6013      	str	r3, [r2, #0]

  //	     send_uart("TotalSpace : %lu bytes, FreeSpace = %lu bytes\n");

  	     //Open the file
  	     fres = f_open(&fil, "CDAC.txt", FA_WRITE | FA_READ | FA_CREATE_ALWAYS);
 8000bc0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000bc4:	3b34      	subs	r3, #52	; 0x34
 8000bc6:	220b      	movs	r2, #11
 8000bc8:	4935      	ldr	r1, [pc, #212]	; (8000ca0 <main+0x1d4>)
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f004 f83c 	bl	8004c48 <f_open>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8000bd6:	f102 021f 	add.w	r2, r2, #31
 8000bda:	7013      	strb	r3, [r2, #0]
  	     if(fres != FR_OK)
 8000bdc:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8000be0:	f103 031f 	add.w	r3, r3, #31
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d003      	beq.n	8000bf2 <main+0x126>
  	     {
  	    	 send_uart("File creation/open Error\n");
 8000bea:	482e      	ldr	r0, [pc, #184]	; (8000ca4 <main+0x1d8>)
 8000bec:	f7ff ff58 	bl	8000aa0 <send_uart>
  	       break;
 8000bf0:	e044      	b.n	8000c7c <main+0x1b0>
  	     }

  	     send_uart("Writing data!!!\r\n");
 8000bf2:	482d      	ldr	r0, [pc, #180]	; (8000ca8 <main+0x1dc>)
 8000bf4:	f7ff ff54 	bl	8000aa0 <send_uart>
  	     //write the data
  	     f_puts("Saishiva Reddy Gatla", &fil);
 8000bf8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000bfc:	3b34      	subs	r3, #52	; 0x34
 8000bfe:	4619      	mov	r1, r3
 8000c00:	482a      	ldr	r0, [pc, #168]	; (8000cac <main+0x1e0>)
 8000c02:	f004 fef0 	bl	80059e6 <f_puts>

  	     //close your file
  	     f_close(&fil);
 8000c06:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000c0a:	3b34      	subs	r3, #52	; 0x34
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f004 fd58 	bl	80056c2 <f_close>

  	     //Open the file
  	     fres = f_open(&fil, "CDAC.txt", FA_READ);
 8000c12:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000c16:	3b34      	subs	r3, #52	; 0x34
 8000c18:	2201      	movs	r2, #1
 8000c1a:	4921      	ldr	r1, [pc, #132]	; (8000ca0 <main+0x1d4>)
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f004 f813 	bl	8004c48 <f_open>
 8000c22:	4603      	mov	r3, r0
 8000c24:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8000c28:	f102 021f 	add.w	r2, r2, #31
 8000c2c:	7013      	strb	r3, [r2, #0]
  	     if(fres != FR_OK)
 8000c2e:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8000c32:	f103 031f 	add.w	r3, r3, #31
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d003      	beq.n	8000c44 <main+0x178>
  	     {
  	    	 send_uart("File opening Error \n");
 8000c3c:	481c      	ldr	r0, [pc, #112]	; (8000cb0 <main+0x1e4>)
 8000c3e:	f7ff ff2f 	bl	8000aa0 <send_uart>
  	       break;
 8000c42:	e01b      	b.n	8000c7c <main+0x1b0>
  	     }

  	     //read the data
  	     f_gets(buf, sizeof(buf), &fil);
 8000c44:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000c48:	3a34      	subs	r2, #52	; 0x34
 8000c4a:	f107 0320 	add.w	r3, r7, #32
 8000c4e:	3b18      	subs	r3, #24
 8000c50:	2164      	movs	r1, #100	; 0x64
 8000c52:	4618      	mov	r0, r3
 8000c54:	f004 fe14 	bl	8005880 <f_gets>

  	     send_uart("Read Data :");
 8000c58:	4816      	ldr	r0, [pc, #88]	; (8000cb4 <main+0x1e8>)
 8000c5a:	f7ff ff21 	bl	8000aa0 <send_uart>
  	     send_uart(buf);
 8000c5e:	f107 0320 	add.w	r3, r7, #32
 8000c62:	3b18      	subs	r3, #24
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff ff1b 	bl	8000aa0 <send_uart>

  	     //close your file
  	     f_close(&fil);
 8000c6a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000c6e:	3b34      	subs	r3, #52	; 0x34
 8000c70:	4618      	mov	r0, r3
 8000c72:	f004 fd26 	bl	80056c2 <f_close>
  	     send_uart("Closing File!!!\r\n");
 8000c76:	4810      	ldr	r0, [pc, #64]	; (8000cb8 <main+0x1ec>)
 8000c78:	f7ff ff12 	bl	8000aa0 <send_uart>
  	     }
  	 #endif
  	   } while( false );

  	   //We're done, so de-mount the drive
  	   f_mount(NULL, "", 0);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	4904      	ldr	r1, [pc, #16]	; (8000c90 <main+0x1c4>)
 8000c80:	2000      	movs	r0, #0
 8000c82:	f003 ff9b 	bl	8004bbc <f_mount>
  	   send_uart("SD Card Unmounted Successfully!!!\r\n");
 8000c86:	480d      	ldr	r0, [pc, #52]	; (8000cbc <main+0x1f0>)
 8000c88:	f7ff ff0a 	bl	8000aa0 <send_uart>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <main+0x1c0>
 8000c8e:	bf00      	nop
 8000c90:	08005cd8 	.word	0x08005cd8
 8000c94:	08005cdc 	.word	0x08005cdc
 8000c98:	08005cf0 	.word	0x08005cf0
 8000c9c:	3fe00000 	.word	0x3fe00000
 8000ca0:	08005d14 	.word	0x08005d14
 8000ca4:	08005d20 	.word	0x08005d20
 8000ca8:	08005d3c 	.word	0x08005d3c
 8000cac:	08005d50 	.word	0x08005d50
 8000cb0:	08005d68 	.word	0x08005d68
 8000cb4:	08005d80 	.word	0x08005d80
 8000cb8:	08005d8c 	.word	0x08005d8c
 8000cbc:	08005da0 	.word	0x08005da0

08000cc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b092      	sub	sp, #72	; 0x48
 8000cc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	2234      	movs	r2, #52	; 0x34
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f004 ffee 	bl	8005cb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cd4:	463b      	mov	r3, r7
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
 8000cde:	60da      	str	r2, [r3, #12]
 8000ce0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ce2:	4b1a      	ldr	r3, [pc, #104]	; (8000d4c <SystemClock_Config+0x8c>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000cea:	4a18      	ldr	r2, [pc, #96]	; (8000d4c <SystemClock_Config+0x8c>)
 8000cec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cf0:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000cf2:	2310      	movs	r3, #16
 8000cf4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000cfe:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000d02:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d04:	2300      	movs	r3, #0
 8000d06:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f000 fcd9 	bl	80016c4 <HAL_RCC_OscConfig>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000d18:	f000 f8ca 	bl	8000eb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d1c:	230f      	movs	r3, #15
 8000d1e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000d20:	2300      	movs	r3, #0
 8000d22:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d24:	2300      	movs	r3, #0
 8000d26:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d30:	463b      	mov	r3, r7
 8000d32:	2100      	movs	r1, #0
 8000d34:	4618      	mov	r0, r3
 8000d36:	f000 fff5 	bl	8001d24 <HAL_RCC_ClockConfig>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000d40:	f000 f8b6 	bl	8000eb0 <Error_Handler>
  }
}
 8000d44:	bf00      	nop
 8000d46:	3748      	adds	r7, #72	; 0x48
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40007000 	.word	0x40007000

08000d50 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d54:	4b17      	ldr	r3, [pc, #92]	; (8000db4 <MX_SPI1_Init+0x64>)
 8000d56:	4a18      	ldr	r2, [pc, #96]	; (8000db8 <MX_SPI1_Init+0x68>)
 8000d58:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d5a:	4b16      	ldr	r3, [pc, #88]	; (8000db4 <MX_SPI1_Init+0x64>)
 8000d5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d60:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d62:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <MX_SPI1_Init+0x64>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d68:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <MX_SPI1_Init+0x64>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d6e:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <MX_SPI1_Init+0x64>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d74:	4b0f      	ldr	r3, [pc, #60]	; (8000db4 <MX_SPI1_Init+0x64>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d7a:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <MX_SPI1_Init+0x64>)
 8000d7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d80:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d82:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <MX_SPI1_Init+0x64>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d88:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <MX_SPI1_Init+0x64>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d8e:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <MX_SPI1_Init+0x64>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d94:	4b07      	ldr	r3, [pc, #28]	; (8000db4 <MX_SPI1_Init+0x64>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d9a:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <MX_SPI1_Init+0x64>)
 8000d9c:	220a      	movs	r2, #10
 8000d9e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000da0:	4804      	ldr	r0, [pc, #16]	; (8000db4 <MX_SPI1_Init+0x64>)
 8000da2:	f001 fa43 	bl	800222c <HAL_SPI_Init>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000dac:	f000 f880 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000db0:	bf00      	nop
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20000040 	.word	0x20000040
 8000db8:	40013000 	.word	0x40013000

08000dbc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000dc0:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <MX_USART1_UART_Init+0x4c>)
 8000dc2:	4a12      	ldr	r2, [pc, #72]	; (8000e0c <MX_USART1_UART_Init+0x50>)
 8000dc4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000dc6:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <MX_USART1_UART_Init+0x4c>)
 8000dc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dcc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dce:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <MX_USART1_UART_Init+0x4c>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <MX_USART1_UART_Init+0x4c>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dda:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <MX_USART1_UART_Init+0x4c>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000de0:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <MX_USART1_UART_Init+0x4c>)
 8000de2:	220c      	movs	r2, #12
 8000de4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000de6:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <MX_USART1_UART_Init+0x4c>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dec:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <MX_USART1_UART_Init+0x4c>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000df2:	4805      	ldr	r0, [pc, #20]	; (8000e08 <MX_USART1_UART_Init+0x4c>)
 8000df4:	f001 faa3 	bl	800233e <HAL_UART_Init>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000dfe:	f000 f857 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20000098 	.word	0x20000098
 8000e0c:	40013800 	.word	0x40013800

08000e10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b088      	sub	sp, #32
 8000e14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e16:	f107 030c 	add.w	r3, r7, #12
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	605a      	str	r2, [r3, #4]
 8000e20:	609a      	str	r2, [r3, #8]
 8000e22:	60da      	str	r2, [r3, #12]
 8000e24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e26:	4b1d      	ldr	r3, [pc, #116]	; (8000e9c <MX_GPIO_Init+0x8c>)
 8000e28:	69db      	ldr	r3, [r3, #28]
 8000e2a:	4a1c      	ldr	r2, [pc, #112]	; (8000e9c <MX_GPIO_Init+0x8c>)
 8000e2c:	f043 0320 	orr.w	r3, r3, #32
 8000e30:	61d3      	str	r3, [r2, #28]
 8000e32:	4b1a      	ldr	r3, [pc, #104]	; (8000e9c <MX_GPIO_Init+0x8c>)
 8000e34:	69db      	ldr	r3, [r3, #28]
 8000e36:	f003 0320 	and.w	r3, r3, #32
 8000e3a:	60bb      	str	r3, [r7, #8]
 8000e3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3e:	4b17      	ldr	r3, [pc, #92]	; (8000e9c <MX_GPIO_Init+0x8c>)
 8000e40:	69db      	ldr	r3, [r3, #28]
 8000e42:	4a16      	ldr	r2, [pc, #88]	; (8000e9c <MX_GPIO_Init+0x8c>)
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	61d3      	str	r3, [r2, #28]
 8000e4a:	4b14      	ldr	r3, [pc, #80]	; (8000e9c <MX_GPIO_Init+0x8c>)
 8000e4c:	69db      	ldr	r3, [r3, #28]
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	607b      	str	r3, [r7, #4]
 8000e54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e56:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <MX_GPIO_Init+0x8c>)
 8000e58:	69db      	ldr	r3, [r3, #28]
 8000e5a:	4a10      	ldr	r2, [pc, #64]	; (8000e9c <MX_GPIO_Init+0x8c>)
 8000e5c:	f043 0302 	orr.w	r3, r3, #2
 8000e60:	61d3      	str	r3, [r2, #28]
 8000e62:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <MX_GPIO_Init+0x8c>)
 8000e64:	69db      	ldr	r3, [r3, #28]
 8000e66:	f003 0302 	and.w	r3, r3, #2
 8000e6a:	603b      	str	r3, [r7, #0]
 8000e6c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2140      	movs	r1, #64	; 0x40
 8000e72:	480b      	ldr	r0, [pc, #44]	; (8000ea0 <MX_GPIO_Init+0x90>)
 8000e74:	f000 fc0e 	bl	8001694 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e78:	2340      	movs	r3, #64	; 0x40
 8000e7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e84:	2300      	movs	r3, #0
 8000e86:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e88:	f107 030c 	add.w	r3, r7, #12
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4804      	ldr	r0, [pc, #16]	; (8000ea0 <MX_GPIO_Init+0x90>)
 8000e90:	f000 fa70 	bl	8001374 <HAL_GPIO_Init>

}
 8000e94:	bf00      	nop
 8000e96:	3720      	adds	r7, #32
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	40023800 	.word	0x40023800
 8000ea0:	40020400 	.word	0x40020400

08000ea4 <process_SD_card>:

/* USER CODE BEGIN 4 */
void process_SD_card( void )
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0

}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bc80      	pop	{r7}
 8000eae:	4770      	bx	lr

08000eb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb4:	b672      	cpsid	i
}
 8000eb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <Error_Handler+0x8>
	...

08000ebc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000ec2:	4b14      	ldr	r3, [pc, #80]	; (8000f14 <HAL_MspInit+0x58>)
 8000ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec6:	4a13      	ldr	r2, [pc, #76]	; (8000f14 <HAL_MspInit+0x58>)
 8000ec8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ecc:	6253      	str	r3, [r2, #36]	; 0x24
 8000ece:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <HAL_MspInit+0x58>)
 8000ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eda:	4b0e      	ldr	r3, [pc, #56]	; (8000f14 <HAL_MspInit+0x58>)
 8000edc:	6a1b      	ldr	r3, [r3, #32]
 8000ede:	4a0d      	ldr	r2, [pc, #52]	; (8000f14 <HAL_MspInit+0x58>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	6213      	str	r3, [r2, #32]
 8000ee6:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <HAL_MspInit+0x58>)
 8000ee8:	6a1b      	ldr	r3, [r3, #32]
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	60bb      	str	r3, [r7, #8]
 8000ef0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef2:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <HAL_MspInit+0x58>)
 8000ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef6:	4a07      	ldr	r2, [pc, #28]	; (8000f14 <HAL_MspInit+0x58>)
 8000ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000efc:	6253      	str	r3, [r2, #36]	; 0x24
 8000efe:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <HAL_MspInit+0x58>)
 8000f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f06:	607b      	str	r3, [r7, #4]
 8000f08:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	3714      	adds	r7, #20
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bc80      	pop	{r7}
 8000f12:	4770      	bx	lr
 8000f14:	40023800 	.word	0x40023800

08000f18 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08a      	sub	sp, #40	; 0x28
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f20:	f107 0314 	add.w	r3, r7, #20
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a17      	ldr	r2, [pc, #92]	; (8000f94 <HAL_SPI_MspInit+0x7c>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d127      	bne.n	8000f8a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f3a:	4b17      	ldr	r3, [pc, #92]	; (8000f98 <HAL_SPI_MspInit+0x80>)
 8000f3c:	6a1b      	ldr	r3, [r3, #32]
 8000f3e:	4a16      	ldr	r2, [pc, #88]	; (8000f98 <HAL_SPI_MspInit+0x80>)
 8000f40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f44:	6213      	str	r3, [r2, #32]
 8000f46:	4b14      	ldr	r3, [pc, #80]	; (8000f98 <HAL_SPI_MspInit+0x80>)
 8000f48:	6a1b      	ldr	r3, [r3, #32]
 8000f4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f4e:	613b      	str	r3, [r7, #16]
 8000f50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f52:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <HAL_SPI_MspInit+0x80>)
 8000f54:	69db      	ldr	r3, [r3, #28]
 8000f56:	4a10      	ldr	r2, [pc, #64]	; (8000f98 <HAL_SPI_MspInit+0x80>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	61d3      	str	r3, [r2, #28]
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <HAL_SPI_MspInit+0x80>)
 8000f60:	69db      	ldr	r3, [r3, #28]
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f6a:	23e0      	movs	r3, #224	; 0xe0
 8000f6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f76:	2303      	movs	r3, #3
 8000f78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f7a:	2305      	movs	r3, #5
 8000f7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7e:	f107 0314 	add.w	r3, r7, #20
 8000f82:	4619      	mov	r1, r3
 8000f84:	4805      	ldr	r0, [pc, #20]	; (8000f9c <HAL_SPI_MspInit+0x84>)
 8000f86:	f000 f9f5 	bl	8001374 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f8a:	bf00      	nop
 8000f8c:	3728      	adds	r7, #40	; 0x28
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40013000 	.word	0x40013000
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	40020000 	.word	0x40020000

08000fa0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08a      	sub	sp, #40	; 0x28
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
 8000fb6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a17      	ldr	r2, [pc, #92]	; (800101c <HAL_UART_MspInit+0x7c>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d128      	bne.n	8001014 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fc2:	4b17      	ldr	r3, [pc, #92]	; (8001020 <HAL_UART_MspInit+0x80>)
 8000fc4:	6a1b      	ldr	r3, [r3, #32]
 8000fc6:	4a16      	ldr	r2, [pc, #88]	; (8001020 <HAL_UART_MspInit+0x80>)
 8000fc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fcc:	6213      	str	r3, [r2, #32]
 8000fce:	4b14      	ldr	r3, [pc, #80]	; (8001020 <HAL_UART_MspInit+0x80>)
 8000fd0:	6a1b      	ldr	r3, [r3, #32]
 8000fd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fda:	4b11      	ldr	r3, [pc, #68]	; (8001020 <HAL_UART_MspInit+0x80>)
 8000fdc:	69db      	ldr	r3, [r3, #28]
 8000fde:	4a10      	ldr	r2, [pc, #64]	; (8001020 <HAL_UART_MspInit+0x80>)
 8000fe0:	f043 0301 	orr.w	r3, r3, #1
 8000fe4:	61d3      	str	r3, [r2, #28]
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <HAL_UART_MspInit+0x80>)
 8000fe8:	69db      	ldr	r3, [r3, #28]
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ff2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ff6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001000:	2303      	movs	r3, #3
 8001002:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001004:	2307      	movs	r3, #7
 8001006:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001008:	f107 0314 	add.w	r3, r7, #20
 800100c:	4619      	mov	r1, r3
 800100e:	4805      	ldr	r0, [pc, #20]	; (8001024 <HAL_UART_MspInit+0x84>)
 8001010:	f000 f9b0 	bl	8001374 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001014:	bf00      	nop
 8001016:	3728      	adds	r7, #40	; 0x28
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40013800 	.word	0x40013800
 8001020:	40023800 	.word	0x40023800
 8001024:	40020000 	.word	0x40020000

08001028 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800102c:	e7fe      	b.n	800102c <NMI_Handler+0x4>

0800102e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001032:	e7fe      	b.n	8001032 <HardFault_Handler+0x4>

08001034 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001038:	e7fe      	b.n	8001038 <MemManage_Handler+0x4>

0800103a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800103e:	e7fe      	b.n	800103e <BusFault_Handler+0x4>

08001040 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001044:	e7fe      	b.n	8001044 <UsageFault_Handler+0x4>

08001046 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	46bd      	mov	sp, r7
 800104e:	bc80      	pop	{r7}
 8001050:	4770      	bx	lr

08001052 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001052:	b480      	push	{r7}
 8001054:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	46bd      	mov	sp, r7
 800105a:	bc80      	pop	{r7}
 800105c:	4770      	bx	lr

0800105e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800105e:	b480      	push	{r7}
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	46bd      	mov	sp, r7
 8001066:	bc80      	pop	{r7}
 8001068:	4770      	bx	lr

0800106a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800106e:	f000 f881 	bl	8001174 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}

08001076 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800107a:	bf00      	nop
 800107c:	46bd      	mov	sp, r7
 800107e:	bc80      	pop	{r7}
 8001080:	4770      	bx	lr
	...

08001084 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001084:	480c      	ldr	r0, [pc, #48]	; (80010b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001086:	490d      	ldr	r1, [pc, #52]	; (80010bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001088:	4a0d      	ldr	r2, [pc, #52]	; (80010c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800108a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800108c:	e002      	b.n	8001094 <LoopCopyDataInit>

0800108e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800108e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001090:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001092:	3304      	adds	r3, #4

08001094 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001094:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001096:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001098:	d3f9      	bcc.n	800108e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800109a:	4a0a      	ldr	r2, [pc, #40]	; (80010c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800109c:	4c0a      	ldr	r4, [pc, #40]	; (80010c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800109e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a0:	e001      	b.n	80010a6 <LoopFillZerobss>

080010a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a4:	3204      	adds	r2, #4

080010a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a8:	d3fb      	bcc.n	80010a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010aa:	f7ff ffe4 	bl	8001076 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010ae:	f004 fddb 	bl	8005c68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010b2:	f7ff fd0b 	bl	8000acc <main>
  bx lr
 80010b6:	4770      	bx	lr
  ldr r0, =_sdata
 80010b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010bc:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80010c0:	08006280 	.word	0x08006280
  ldr r2, =_sbss
 80010c4:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80010c8:	2000031c 	.word	0x2000031c

080010cc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010cc:	e7fe      	b.n	80010cc <ADC1_IRQHandler>

080010ce <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b082      	sub	sp, #8
 80010d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010d4:	2300      	movs	r3, #0
 80010d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d8:	2003      	movs	r0, #3
 80010da:	f000 f917 	bl	800130c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010de:	200f      	movs	r0, #15
 80010e0:	f000 f80e 	bl	8001100 <HAL_InitTick>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d002      	beq.n	80010f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	71fb      	strb	r3, [r7, #7]
 80010ee:	e001      	b.n	80010f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010f0:	f7ff fee4 	bl	8000ebc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010f4:	79fb      	ldrb	r3, [r7, #7]
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
	...

08001100 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001108:	2300      	movs	r3, #0
 800110a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800110c:	4b16      	ldr	r3, [pc, #88]	; (8001168 <HAL_InitTick+0x68>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d022      	beq.n	800115a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001114:	4b15      	ldr	r3, [pc, #84]	; (800116c <HAL_InitTick+0x6c>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	4b13      	ldr	r3, [pc, #76]	; (8001168 <HAL_InitTick+0x68>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001120:	fbb1 f3f3 	udiv	r3, r1, r3
 8001124:	fbb2 f3f3 	udiv	r3, r2, r3
 8001128:	4618      	mov	r0, r3
 800112a:	f000 f916 	bl	800135a <HAL_SYSTICK_Config>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d10f      	bne.n	8001154 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2b0f      	cmp	r3, #15
 8001138:	d809      	bhi.n	800114e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800113a:	2200      	movs	r2, #0
 800113c:	6879      	ldr	r1, [r7, #4]
 800113e:	f04f 30ff 	mov.w	r0, #4294967295
 8001142:	f000 f8ee 	bl	8001322 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001146:	4a0a      	ldr	r2, [pc, #40]	; (8001170 <HAL_InitTick+0x70>)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6013      	str	r3, [r2, #0]
 800114c:	e007      	b.n	800115e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	73fb      	strb	r3, [r7, #15]
 8001152:	e004      	b.n	800115e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	73fb      	strb	r3, [r7, #15]
 8001158:	e001      	b.n	800115e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800115e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001160:	4618      	mov	r0, r3
 8001162:	3710      	adds	r7, #16
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20000008 	.word	0x20000008
 800116c:	20000000 	.word	0x20000000
 8001170:	20000004 	.word	0x20000004

08001174 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001178:	4b05      	ldr	r3, [pc, #20]	; (8001190 <HAL_IncTick+0x1c>)
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	4b05      	ldr	r3, [pc, #20]	; (8001194 <HAL_IncTick+0x20>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4413      	add	r3, r2
 8001182:	4a03      	ldr	r2, [pc, #12]	; (8001190 <HAL_IncTick+0x1c>)
 8001184:	6013      	str	r3, [r2, #0]
}
 8001186:	bf00      	nop
 8001188:	46bd      	mov	sp, r7
 800118a:	bc80      	pop	{r7}
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	200000dc 	.word	0x200000dc
 8001194:	20000008 	.word	0x20000008

08001198 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  return uwTick;
 800119c:	4b02      	ldr	r3, [pc, #8]	; (80011a8 <HAL_GetTick+0x10>)
 800119e:	681b      	ldr	r3, [r3, #0]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc80      	pop	{r7}
 80011a6:	4770      	bx	lr
 80011a8:	200000dc 	.word	0x200000dc

080011ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f003 0307 	and.w	r3, r3, #7
 80011ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011bc:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <__NVIC_SetPriorityGrouping+0x44>)
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011c2:	68ba      	ldr	r2, [r7, #8]
 80011c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011c8:	4013      	ands	r3, r2
 80011ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011de:	4a04      	ldr	r2, [pc, #16]	; (80011f0 <__NVIC_SetPriorityGrouping+0x44>)
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	60d3      	str	r3, [r2, #12]
}
 80011e4:	bf00      	nop
 80011e6:	3714      	adds	r7, #20
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bc80      	pop	{r7}
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011f8:	4b04      	ldr	r3, [pc, #16]	; (800120c <__NVIC_GetPriorityGrouping+0x18>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	0a1b      	lsrs	r3, r3, #8
 80011fe:	f003 0307 	and.w	r3, r3, #7
}
 8001202:	4618      	mov	r0, r3
 8001204:	46bd      	mov	sp, r7
 8001206:	bc80      	pop	{r7}
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	6039      	str	r1, [r7, #0]
 800121a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800121c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001220:	2b00      	cmp	r3, #0
 8001222:	db0a      	blt.n	800123a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	b2da      	uxtb	r2, r3
 8001228:	490c      	ldr	r1, [pc, #48]	; (800125c <__NVIC_SetPriority+0x4c>)
 800122a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122e:	0112      	lsls	r2, r2, #4
 8001230:	b2d2      	uxtb	r2, r2
 8001232:	440b      	add	r3, r1
 8001234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001238:	e00a      	b.n	8001250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	b2da      	uxtb	r2, r3
 800123e:	4908      	ldr	r1, [pc, #32]	; (8001260 <__NVIC_SetPriority+0x50>)
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	f003 030f 	and.w	r3, r3, #15
 8001246:	3b04      	subs	r3, #4
 8001248:	0112      	lsls	r2, r2, #4
 800124a:	b2d2      	uxtb	r2, r2
 800124c:	440b      	add	r3, r1
 800124e:	761a      	strb	r2, [r3, #24]
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	bc80      	pop	{r7}
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	e000e100 	.word	0xe000e100
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001264:	b480      	push	{r7}
 8001266:	b089      	sub	sp, #36	; 0x24
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	f003 0307 	and.w	r3, r3, #7
 8001276:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	f1c3 0307 	rsb	r3, r3, #7
 800127e:	2b04      	cmp	r3, #4
 8001280:	bf28      	it	cs
 8001282:	2304      	movcs	r3, #4
 8001284:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	3304      	adds	r3, #4
 800128a:	2b06      	cmp	r3, #6
 800128c:	d902      	bls.n	8001294 <NVIC_EncodePriority+0x30>
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	3b03      	subs	r3, #3
 8001292:	e000      	b.n	8001296 <NVIC_EncodePriority+0x32>
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001298:	f04f 32ff 	mov.w	r2, #4294967295
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	43da      	mvns	r2, r3
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	401a      	ands	r2, r3
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012ac:	f04f 31ff 	mov.w	r1, #4294967295
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	fa01 f303 	lsl.w	r3, r1, r3
 80012b6:	43d9      	mvns	r1, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012bc:	4313      	orrs	r3, r2
         );
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3724      	adds	r7, #36	; 0x24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc80      	pop	{r7}
 80012c6:	4770      	bx	lr

080012c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3b01      	subs	r3, #1
 80012d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012d8:	d301      	bcc.n	80012de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012da:	2301      	movs	r3, #1
 80012dc:	e00f      	b.n	80012fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012de:	4a0a      	ldr	r2, [pc, #40]	; (8001308 <SysTick_Config+0x40>)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012e6:	210f      	movs	r1, #15
 80012e8:	f04f 30ff 	mov.w	r0, #4294967295
 80012ec:	f7ff ff90 	bl	8001210 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012f0:	4b05      	ldr	r3, [pc, #20]	; (8001308 <SysTick_Config+0x40>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012f6:	4b04      	ldr	r3, [pc, #16]	; (8001308 <SysTick_Config+0x40>)
 80012f8:	2207      	movs	r2, #7
 80012fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012fc:	2300      	movs	r3, #0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	e000e010 	.word	0xe000e010

0800130c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f7ff ff49 	bl	80011ac <__NVIC_SetPriorityGrouping>
}
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b086      	sub	sp, #24
 8001326:	af00      	add	r7, sp, #0
 8001328:	4603      	mov	r3, r0
 800132a:	60b9      	str	r1, [r7, #8]
 800132c:	607a      	str	r2, [r7, #4]
 800132e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001330:	2300      	movs	r3, #0
 8001332:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001334:	f7ff ff5e 	bl	80011f4 <__NVIC_GetPriorityGrouping>
 8001338:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	68b9      	ldr	r1, [r7, #8]
 800133e:	6978      	ldr	r0, [r7, #20]
 8001340:	f7ff ff90 	bl	8001264 <NVIC_EncodePriority>
 8001344:	4602      	mov	r2, r0
 8001346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800134a:	4611      	mov	r1, r2
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff ff5f 	bl	8001210 <__NVIC_SetPriority>
}
 8001352:	bf00      	nop
 8001354:	3718      	adds	r7, #24
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b082      	sub	sp, #8
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff ffb0 	bl	80012c8 <SysTick_Config>
 8001368:	4603      	mov	r3, r0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
	...

08001374 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001374:	b480      	push	{r7}
 8001376:	b087      	sub	sp, #28
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800137e:	2300      	movs	r3, #0
 8001380:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001382:	2300      	movs	r3, #0
 8001384:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001386:	2300      	movs	r3, #0
 8001388:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800138a:	e160      	b.n	800164e <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	2101      	movs	r1, #1
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	fa01 f303 	lsl.w	r3, r1, r3
 8001398:	4013      	ands	r3, r2
 800139a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	f000 8152 	beq.w	8001648 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f003 0303 	and.w	r3, r3, #3
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d005      	beq.n	80013bc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d130      	bne.n	800141e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	2203      	movs	r2, #3
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	43db      	mvns	r3, r3
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	4013      	ands	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	68da      	ldr	r2, [r3, #12]
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80013f2:	2201      	movs	r2, #1
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43db      	mvns	r3, r3
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	4013      	ands	r3, r2
 8001400:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	091b      	lsrs	r3, r3, #4
 8001408:	f003 0201 	and.w	r2, r3, #1
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	4313      	orrs	r3, r2
 8001416:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f003 0303 	and.w	r3, r3, #3
 8001426:	2b03      	cmp	r3, #3
 8001428:	d017      	beq.n	800145a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	68db      	ldr	r3, [r3, #12]
 800142e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	2203      	movs	r2, #3
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	43db      	mvns	r3, r3
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	4013      	ands	r3, r2
 8001440:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	689a      	ldr	r2, [r3, #8]
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	4313      	orrs	r3, r2
 8001452:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f003 0303 	and.w	r3, r3, #3
 8001462:	2b02      	cmp	r3, #2
 8001464:	d123      	bne.n	80014ae <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	08da      	lsrs	r2, r3, #3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	3208      	adds	r2, #8
 800146e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001472:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	f003 0307 	and.w	r3, r3, #7
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	220f      	movs	r2, #15
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	43db      	mvns	r3, r3
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	4013      	ands	r3, r2
 8001488:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	691a      	ldr	r2, [r3, #16]
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	f003 0307 	and.w	r3, r3, #7
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	4313      	orrs	r3, r2
 800149e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	08da      	lsrs	r2, r3, #3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	3208      	adds	r2, #8
 80014a8:	6939      	ldr	r1, [r7, #16]
 80014aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	2203      	movs	r2, #3
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	43db      	mvns	r3, r3
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	4013      	ands	r3, r2
 80014c4:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f003 0203 	and.w	r2, r3, #3
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	4313      	orrs	r3, r2
 80014da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	f000 80ac 	beq.w	8001648 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f0:	4b5e      	ldr	r3, [pc, #376]	; (800166c <HAL_GPIO_Init+0x2f8>)
 80014f2:	6a1b      	ldr	r3, [r3, #32]
 80014f4:	4a5d      	ldr	r2, [pc, #372]	; (800166c <HAL_GPIO_Init+0x2f8>)
 80014f6:	f043 0301 	orr.w	r3, r3, #1
 80014fa:	6213      	str	r3, [r2, #32]
 80014fc:	4b5b      	ldr	r3, [pc, #364]	; (800166c <HAL_GPIO_Init+0x2f8>)
 80014fe:	6a1b      	ldr	r3, [r3, #32]
 8001500:	f003 0301 	and.w	r3, r3, #1
 8001504:	60bb      	str	r3, [r7, #8]
 8001506:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001508:	4a59      	ldr	r2, [pc, #356]	; (8001670 <HAL_GPIO_Init+0x2fc>)
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	089b      	lsrs	r3, r3, #2
 800150e:	3302      	adds	r3, #2
 8001510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001514:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	f003 0303 	and.w	r3, r3, #3
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	220f      	movs	r2, #15
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	43db      	mvns	r3, r3
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	4013      	ands	r3, r2
 800152a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4a51      	ldr	r2, [pc, #324]	; (8001674 <HAL_GPIO_Init+0x300>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d025      	beq.n	8001580 <HAL_GPIO_Init+0x20c>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	4a50      	ldr	r2, [pc, #320]	; (8001678 <HAL_GPIO_Init+0x304>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d01f      	beq.n	800157c <HAL_GPIO_Init+0x208>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4a4f      	ldr	r2, [pc, #316]	; (800167c <HAL_GPIO_Init+0x308>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d019      	beq.n	8001578 <HAL_GPIO_Init+0x204>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	4a4e      	ldr	r2, [pc, #312]	; (8001680 <HAL_GPIO_Init+0x30c>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d013      	beq.n	8001574 <HAL_GPIO_Init+0x200>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	4a4d      	ldr	r2, [pc, #308]	; (8001684 <HAL_GPIO_Init+0x310>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d00d      	beq.n	8001570 <HAL_GPIO_Init+0x1fc>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	4a4c      	ldr	r2, [pc, #304]	; (8001688 <HAL_GPIO_Init+0x314>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d007      	beq.n	800156c <HAL_GPIO_Init+0x1f8>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	4a4b      	ldr	r2, [pc, #300]	; (800168c <HAL_GPIO_Init+0x318>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d101      	bne.n	8001568 <HAL_GPIO_Init+0x1f4>
 8001564:	2306      	movs	r3, #6
 8001566:	e00c      	b.n	8001582 <HAL_GPIO_Init+0x20e>
 8001568:	2307      	movs	r3, #7
 800156a:	e00a      	b.n	8001582 <HAL_GPIO_Init+0x20e>
 800156c:	2305      	movs	r3, #5
 800156e:	e008      	b.n	8001582 <HAL_GPIO_Init+0x20e>
 8001570:	2304      	movs	r3, #4
 8001572:	e006      	b.n	8001582 <HAL_GPIO_Init+0x20e>
 8001574:	2303      	movs	r3, #3
 8001576:	e004      	b.n	8001582 <HAL_GPIO_Init+0x20e>
 8001578:	2302      	movs	r3, #2
 800157a:	e002      	b.n	8001582 <HAL_GPIO_Init+0x20e>
 800157c:	2301      	movs	r3, #1
 800157e:	e000      	b.n	8001582 <HAL_GPIO_Init+0x20e>
 8001580:	2300      	movs	r3, #0
 8001582:	697a      	ldr	r2, [r7, #20]
 8001584:	f002 0203 	and.w	r2, r2, #3
 8001588:	0092      	lsls	r2, r2, #2
 800158a:	4093      	lsls	r3, r2
 800158c:	693a      	ldr	r2, [r7, #16]
 800158e:	4313      	orrs	r3, r2
 8001590:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001592:	4937      	ldr	r1, [pc, #220]	; (8001670 <HAL_GPIO_Init+0x2fc>)
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	089b      	lsrs	r3, r3, #2
 8001598:	3302      	adds	r3, #2
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015a0:	4b3b      	ldr	r3, [pc, #236]	; (8001690 <HAL_GPIO_Init+0x31c>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	43db      	mvns	r3, r3
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	4013      	ands	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d003      	beq.n	80015c4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80015c4:	4a32      	ldr	r2, [pc, #200]	; (8001690 <HAL_GPIO_Init+0x31c>)
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80015ca:	4b31      	ldr	r3, [pc, #196]	; (8001690 <HAL_GPIO_Init+0x31c>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	43db      	mvns	r3, r3
 80015d4:	693a      	ldr	r2, [r7, #16]
 80015d6:	4013      	ands	r3, r2
 80015d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d003      	beq.n	80015ee <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80015ee:	4a28      	ldr	r2, [pc, #160]	; (8001690 <HAL_GPIO_Init+0x31c>)
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015f4:	4b26      	ldr	r3, [pc, #152]	; (8001690 <HAL_GPIO_Init+0x31c>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	43db      	mvns	r3, r3
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	4013      	ands	r3, r2
 8001602:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d003      	beq.n	8001618 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	4313      	orrs	r3, r2
 8001616:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001618:	4a1d      	ldr	r2, [pc, #116]	; (8001690 <HAL_GPIO_Init+0x31c>)
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800161e:	4b1c      	ldr	r3, [pc, #112]	; (8001690 <HAL_GPIO_Init+0x31c>)
 8001620:	68db      	ldr	r3, [r3, #12]
 8001622:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	43db      	mvns	r3, r3
 8001628:	693a      	ldr	r2, [r7, #16]
 800162a:	4013      	ands	r3, r2
 800162c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d003      	beq.n	8001642 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	4313      	orrs	r3, r2
 8001640:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001642:	4a13      	ldr	r2, [pc, #76]	; (8001690 <HAL_GPIO_Init+0x31c>)
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	3301      	adds	r3, #1
 800164c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	fa22 f303 	lsr.w	r3, r2, r3
 8001658:	2b00      	cmp	r3, #0
 800165a:	f47f ae97 	bne.w	800138c <HAL_GPIO_Init+0x18>
  }
}
 800165e:	bf00      	nop
 8001660:	bf00      	nop
 8001662:	371c      	adds	r7, #28
 8001664:	46bd      	mov	sp, r7
 8001666:	bc80      	pop	{r7}
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	40023800 	.word	0x40023800
 8001670:	40010000 	.word	0x40010000
 8001674:	40020000 	.word	0x40020000
 8001678:	40020400 	.word	0x40020400
 800167c:	40020800 	.word	0x40020800
 8001680:	40020c00 	.word	0x40020c00
 8001684:	40021000 	.word	0x40021000
 8001688:	40021400 	.word	0x40021400
 800168c:	40021800 	.word	0x40021800
 8001690:	40010400 	.word	0x40010400

08001694 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	460b      	mov	r3, r1
 800169e:	807b      	strh	r3, [r7, #2]
 80016a0:	4613      	mov	r3, r2
 80016a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016a4:	787b      	ldrb	r3, [r7, #1]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d003      	beq.n	80016b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016aa:	887a      	ldrh	r2, [r7, #2]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80016b0:	e003      	b.n	80016ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80016b2:	887b      	ldrh	r3, [r7, #2]
 80016b4:	041a      	lsls	r2, r3, #16
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	619a      	str	r2, [r3, #24]
}
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr

080016c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b088      	sub	sp, #32
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d101      	bne.n	80016d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e31d      	b.n	8001d12 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016d6:	4b94      	ldr	r3, [pc, #592]	; (8001928 <HAL_RCC_OscConfig+0x264>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f003 030c 	and.w	r3, r3, #12
 80016de:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016e0:	4b91      	ldr	r3, [pc, #580]	; (8001928 <HAL_RCC_OscConfig+0x264>)
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016e8:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d07b      	beq.n	80017ee <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	2b08      	cmp	r3, #8
 80016fa:	d006      	beq.n	800170a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	2b0c      	cmp	r3, #12
 8001700:	d10f      	bne.n	8001722 <HAL_RCC_OscConfig+0x5e>
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001708:	d10b      	bne.n	8001722 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800170a:	4b87      	ldr	r3, [pc, #540]	; (8001928 <HAL_RCC_OscConfig+0x264>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d06a      	beq.n	80017ec <HAL_RCC_OscConfig+0x128>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d166      	bne.n	80017ec <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e2f7      	b.n	8001d12 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d106      	bne.n	8001738 <HAL_RCC_OscConfig+0x74>
 800172a:	4b7f      	ldr	r3, [pc, #508]	; (8001928 <HAL_RCC_OscConfig+0x264>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a7e      	ldr	r2, [pc, #504]	; (8001928 <HAL_RCC_OscConfig+0x264>)
 8001730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001734:	6013      	str	r3, [r2, #0]
 8001736:	e02d      	b.n	8001794 <HAL_RCC_OscConfig+0xd0>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d10c      	bne.n	800175a <HAL_RCC_OscConfig+0x96>
 8001740:	4b79      	ldr	r3, [pc, #484]	; (8001928 <HAL_RCC_OscConfig+0x264>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a78      	ldr	r2, [pc, #480]	; (8001928 <HAL_RCC_OscConfig+0x264>)
 8001746:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800174a:	6013      	str	r3, [r2, #0]
 800174c:	4b76      	ldr	r3, [pc, #472]	; (8001928 <HAL_RCC_OscConfig+0x264>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a75      	ldr	r2, [pc, #468]	; (8001928 <HAL_RCC_OscConfig+0x264>)
 8001752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001756:	6013      	str	r3, [r2, #0]
 8001758:	e01c      	b.n	8001794 <HAL_RCC_OscConfig+0xd0>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	2b05      	cmp	r3, #5
 8001760:	d10c      	bne.n	800177c <HAL_RCC_OscConfig+0xb8>
 8001762:	4b71      	ldr	r3, [pc, #452]	; (8001928 <HAL_RCC_OscConfig+0x264>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a70      	ldr	r2, [pc, #448]	; (8001928 <HAL_RCC_OscConfig+0x264>)
 8001768:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800176c:	6013      	str	r3, [r2, #0]
 800176e:	4b6e      	ldr	r3, [pc, #440]	; (8001928 <HAL_RCC_OscConfig+0x264>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a6d      	ldr	r2, [pc, #436]	; (8001928 <HAL_RCC_OscConfig+0x264>)
 8001774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001778:	6013      	str	r3, [r2, #0]
 800177a:	e00b      	b.n	8001794 <HAL_RCC_OscConfig+0xd0>
 800177c:	4b6a      	ldr	r3, [pc, #424]	; (8001928 <HAL_RCC_OscConfig+0x264>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a69      	ldr	r2, [pc, #420]	; (8001928 <HAL_RCC_OscConfig+0x264>)
 8001782:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001786:	6013      	str	r3, [r2, #0]
 8001788:	4b67      	ldr	r3, [pc, #412]	; (8001928 <HAL_RCC_OscConfig+0x264>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a66      	ldr	r2, [pc, #408]	; (8001928 <HAL_RCC_OscConfig+0x264>)
 800178e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001792:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d013      	beq.n	80017c4 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800179c:	f7ff fcfc 	bl	8001198 <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017a4:	f7ff fcf8 	bl	8001198 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b64      	cmp	r3, #100	; 0x64
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e2ad      	b.n	8001d12 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80017b6:	4b5c      	ldr	r3, [pc, #368]	; (8001928 <HAL_RCC_OscConfig+0x264>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d0f0      	beq.n	80017a4 <HAL_RCC_OscConfig+0xe0>
 80017c2:	e014      	b.n	80017ee <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c4:	f7ff fce8 	bl	8001198 <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017cc:	f7ff fce4 	bl	8001198 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b64      	cmp	r3, #100	; 0x64
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e299      	b.n	8001d12 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80017de:	4b52      	ldr	r3, [pc, #328]	; (8001928 <HAL_RCC_OscConfig+0x264>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1f0      	bne.n	80017cc <HAL_RCC_OscConfig+0x108>
 80017ea:	e000      	b.n	80017ee <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d05a      	beq.n	80018b0 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	2b04      	cmp	r3, #4
 80017fe:	d005      	beq.n	800180c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	2b0c      	cmp	r3, #12
 8001804:	d119      	bne.n	800183a <HAL_RCC_OscConfig+0x176>
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d116      	bne.n	800183a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800180c:	4b46      	ldr	r3, [pc, #280]	; (8001928 <HAL_RCC_OscConfig+0x264>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0302 	and.w	r3, r3, #2
 8001814:	2b00      	cmp	r3, #0
 8001816:	d005      	beq.n	8001824 <HAL_RCC_OscConfig+0x160>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d001      	beq.n	8001824 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e276      	b.n	8001d12 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001824:	4b40      	ldr	r3, [pc, #256]	; (8001928 <HAL_RCC_OscConfig+0x264>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	691b      	ldr	r3, [r3, #16]
 8001830:	021b      	lsls	r3, r3, #8
 8001832:	493d      	ldr	r1, [pc, #244]	; (8001928 <HAL_RCC_OscConfig+0x264>)
 8001834:	4313      	orrs	r3, r2
 8001836:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001838:	e03a      	b.n	80018b0 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d020      	beq.n	8001884 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001842:	4b3a      	ldr	r3, [pc, #232]	; (800192c <HAL_RCC_OscConfig+0x268>)
 8001844:	2201      	movs	r2, #1
 8001846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001848:	f7ff fca6 	bl	8001198 <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001850:	f7ff fca2 	bl	8001198 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e257      	b.n	8001d12 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001862:	4b31      	ldr	r3, [pc, #196]	; (8001928 <HAL_RCC_OscConfig+0x264>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d0f0      	beq.n	8001850 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800186e:	4b2e      	ldr	r3, [pc, #184]	; (8001928 <HAL_RCC_OscConfig+0x264>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	691b      	ldr	r3, [r3, #16]
 800187a:	021b      	lsls	r3, r3, #8
 800187c:	492a      	ldr	r1, [pc, #168]	; (8001928 <HAL_RCC_OscConfig+0x264>)
 800187e:	4313      	orrs	r3, r2
 8001880:	604b      	str	r3, [r1, #4]
 8001882:	e015      	b.n	80018b0 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001884:	4b29      	ldr	r3, [pc, #164]	; (800192c <HAL_RCC_OscConfig+0x268>)
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800188a:	f7ff fc85 	bl	8001198 <HAL_GetTick>
 800188e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001890:	e008      	b.n	80018a4 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001892:	f7ff fc81 	bl	8001198 <HAL_GetTick>
 8001896:	4602      	mov	r2, r0
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	2b02      	cmp	r3, #2
 800189e:	d901      	bls.n	80018a4 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e236      	b.n	8001d12 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80018a4:	4b20      	ldr	r3, [pc, #128]	; (8001928 <HAL_RCC_OscConfig+0x264>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0302 	and.w	r3, r3, #2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d1f0      	bne.n	8001892 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0310 	and.w	r3, r3, #16
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	f000 80b8 	beq.w	8001a2e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d170      	bne.n	80019a6 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018c4:	4b18      	ldr	r3, [pc, #96]	; (8001928 <HAL_RCC_OscConfig+0x264>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d005      	beq.n	80018dc <HAL_RCC_OscConfig+0x218>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d101      	bne.n	80018dc <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e21a      	b.n	8001d12 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a1a      	ldr	r2, [r3, #32]
 80018e0:	4b11      	ldr	r3, [pc, #68]	; (8001928 <HAL_RCC_OscConfig+0x264>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d921      	bls.n	8001930 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a1b      	ldr	r3, [r3, #32]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f000 fc3b 	bl	800216c <RCC_SetFlashLatencyFromMSIRange>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e208      	b.n	8001d12 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001900:	4b09      	ldr	r3, [pc, #36]	; (8001928 <HAL_RCC_OscConfig+0x264>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a1b      	ldr	r3, [r3, #32]
 800190c:	4906      	ldr	r1, [pc, #24]	; (8001928 <HAL_RCC_OscConfig+0x264>)
 800190e:	4313      	orrs	r3, r2
 8001910:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001912:	4b05      	ldr	r3, [pc, #20]	; (8001928 <HAL_RCC_OscConfig+0x264>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	69db      	ldr	r3, [r3, #28]
 800191e:	061b      	lsls	r3, r3, #24
 8001920:	4901      	ldr	r1, [pc, #4]	; (8001928 <HAL_RCC_OscConfig+0x264>)
 8001922:	4313      	orrs	r3, r2
 8001924:	604b      	str	r3, [r1, #4]
 8001926:	e020      	b.n	800196a <HAL_RCC_OscConfig+0x2a6>
 8001928:	40023800 	.word	0x40023800
 800192c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001930:	4b99      	ldr	r3, [pc, #612]	; (8001b98 <HAL_RCC_OscConfig+0x4d4>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6a1b      	ldr	r3, [r3, #32]
 800193c:	4996      	ldr	r1, [pc, #600]	; (8001b98 <HAL_RCC_OscConfig+0x4d4>)
 800193e:	4313      	orrs	r3, r2
 8001940:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001942:	4b95      	ldr	r3, [pc, #596]	; (8001b98 <HAL_RCC_OscConfig+0x4d4>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	69db      	ldr	r3, [r3, #28]
 800194e:	061b      	lsls	r3, r3, #24
 8001950:	4991      	ldr	r1, [pc, #580]	; (8001b98 <HAL_RCC_OscConfig+0x4d4>)
 8001952:	4313      	orrs	r3, r2
 8001954:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a1b      	ldr	r3, [r3, #32]
 800195a:	4618      	mov	r0, r3
 800195c:	f000 fc06 	bl	800216c <RCC_SetFlashLatencyFromMSIRange>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e1d3      	b.n	8001d12 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a1b      	ldr	r3, [r3, #32]
 800196e:	0b5b      	lsrs	r3, r3, #13
 8001970:	3301      	adds	r3, #1
 8001972:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800197a:	4a87      	ldr	r2, [pc, #540]	; (8001b98 <HAL_RCC_OscConfig+0x4d4>)
 800197c:	6892      	ldr	r2, [r2, #8]
 800197e:	0912      	lsrs	r2, r2, #4
 8001980:	f002 020f 	and.w	r2, r2, #15
 8001984:	4985      	ldr	r1, [pc, #532]	; (8001b9c <HAL_RCC_OscConfig+0x4d8>)
 8001986:	5c8a      	ldrb	r2, [r1, r2]
 8001988:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800198a:	4a85      	ldr	r2, [pc, #532]	; (8001ba0 <HAL_RCC_OscConfig+0x4dc>)
 800198c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800198e:	4b85      	ldr	r3, [pc, #532]	; (8001ba4 <HAL_RCC_OscConfig+0x4e0>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff fbb4 	bl	8001100 <HAL_InitTick>
 8001998:	4603      	mov	r3, r0
 800199a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800199c:	7bfb      	ldrb	r3, [r7, #15]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d045      	beq.n	8001a2e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80019a2:	7bfb      	ldrb	r3, [r7, #15]
 80019a4:	e1b5      	b.n	8001d12 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	699b      	ldr	r3, [r3, #24]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d029      	beq.n	8001a02 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80019ae:	4b7e      	ldr	r3, [pc, #504]	; (8001ba8 <HAL_RCC_OscConfig+0x4e4>)
 80019b0:	2201      	movs	r2, #1
 80019b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b4:	f7ff fbf0 	bl	8001198 <HAL_GetTick>
 80019b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80019ba:	e008      	b.n	80019ce <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019bc:	f7ff fbec 	bl	8001198 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e1a1      	b.n	8001d12 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80019ce:	4b72      	ldr	r3, [pc, #456]	; (8001b98 <HAL_RCC_OscConfig+0x4d4>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d0f0      	beq.n	80019bc <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019da:	4b6f      	ldr	r3, [pc, #444]	; (8001b98 <HAL_RCC_OscConfig+0x4d4>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a1b      	ldr	r3, [r3, #32]
 80019e6:	496c      	ldr	r1, [pc, #432]	; (8001b98 <HAL_RCC_OscConfig+0x4d4>)
 80019e8:	4313      	orrs	r3, r2
 80019ea:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019ec:	4b6a      	ldr	r3, [pc, #424]	; (8001b98 <HAL_RCC_OscConfig+0x4d4>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	69db      	ldr	r3, [r3, #28]
 80019f8:	061b      	lsls	r3, r3, #24
 80019fa:	4967      	ldr	r1, [pc, #412]	; (8001b98 <HAL_RCC_OscConfig+0x4d4>)
 80019fc:	4313      	orrs	r3, r2
 80019fe:	604b      	str	r3, [r1, #4]
 8001a00:	e015      	b.n	8001a2e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a02:	4b69      	ldr	r3, [pc, #420]	; (8001ba8 <HAL_RCC_OscConfig+0x4e4>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a08:	f7ff fbc6 	bl	8001198 <HAL_GetTick>
 8001a0c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001a0e:	e008      	b.n	8001a22 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a10:	f7ff fbc2 	bl	8001198 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e177      	b.n	8001d12 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001a22:	4b5d      	ldr	r3, [pc, #372]	; (8001b98 <HAL_RCC_OscConfig+0x4d4>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1f0      	bne.n	8001a10 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0308 	and.w	r3, r3, #8
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d030      	beq.n	8001a9c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	695b      	ldr	r3, [r3, #20]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d016      	beq.n	8001a70 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a42:	4b5a      	ldr	r3, [pc, #360]	; (8001bac <HAL_RCC_OscConfig+0x4e8>)
 8001a44:	2201      	movs	r2, #1
 8001a46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a48:	f7ff fba6 	bl	8001198 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a50:	f7ff fba2 	bl	8001198 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e157      	b.n	8001d12 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a62:	4b4d      	ldr	r3, [pc, #308]	; (8001b98 <HAL_RCC_OscConfig+0x4d4>)
 8001a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d0f0      	beq.n	8001a50 <HAL_RCC_OscConfig+0x38c>
 8001a6e:	e015      	b.n	8001a9c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a70:	4b4e      	ldr	r3, [pc, #312]	; (8001bac <HAL_RCC_OscConfig+0x4e8>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a76:	f7ff fb8f 	bl	8001198 <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a7c:	e008      	b.n	8001a90 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a7e:	f7ff fb8b 	bl	8001198 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e140      	b.n	8001d12 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a90:	4b41      	ldr	r3, [pc, #260]	; (8001b98 <HAL_RCC_OscConfig+0x4d4>)
 8001a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d1f0      	bne.n	8001a7e <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0304 	and.w	r3, r3, #4
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f000 80b5 	beq.w	8001c14 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aae:	4b3a      	ldr	r3, [pc, #232]	; (8001b98 <HAL_RCC_OscConfig+0x4d4>)
 8001ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d10d      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aba:	4b37      	ldr	r3, [pc, #220]	; (8001b98 <HAL_RCC_OscConfig+0x4d4>)
 8001abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001abe:	4a36      	ldr	r2, [pc, #216]	; (8001b98 <HAL_RCC_OscConfig+0x4d4>)
 8001ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac4:	6253      	str	r3, [r2, #36]	; 0x24
 8001ac6:	4b34      	ldr	r3, [pc, #208]	; (8001b98 <HAL_RCC_OscConfig+0x4d4>)
 8001ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ace:	60bb      	str	r3, [r7, #8]
 8001ad0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad6:	4b36      	ldr	r3, [pc, #216]	; (8001bb0 <HAL_RCC_OscConfig+0x4ec>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d118      	bne.n	8001b14 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ae2:	4b33      	ldr	r3, [pc, #204]	; (8001bb0 <HAL_RCC_OscConfig+0x4ec>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a32      	ldr	r2, [pc, #200]	; (8001bb0 <HAL_RCC_OscConfig+0x4ec>)
 8001ae8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aee:	f7ff fb53 	bl	8001198 <HAL_GetTick>
 8001af2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af4:	e008      	b.n	8001b08 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001af6:	f7ff fb4f 	bl	8001198 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b64      	cmp	r3, #100	; 0x64
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e104      	b.n	8001d12 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b08:	4b29      	ldr	r3, [pc, #164]	; (8001bb0 <HAL_RCC_OscConfig+0x4ec>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d0f0      	beq.n	8001af6 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d106      	bne.n	8001b2a <HAL_RCC_OscConfig+0x466>
 8001b1c:	4b1e      	ldr	r3, [pc, #120]	; (8001b98 <HAL_RCC_OscConfig+0x4d4>)
 8001b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b20:	4a1d      	ldr	r2, [pc, #116]	; (8001b98 <HAL_RCC_OscConfig+0x4d4>)
 8001b22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b26:	6353      	str	r3, [r2, #52]	; 0x34
 8001b28:	e02d      	b.n	8001b86 <HAL_RCC_OscConfig+0x4c2>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d10c      	bne.n	8001b4c <HAL_RCC_OscConfig+0x488>
 8001b32:	4b19      	ldr	r3, [pc, #100]	; (8001b98 <HAL_RCC_OscConfig+0x4d4>)
 8001b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b36:	4a18      	ldr	r2, [pc, #96]	; (8001b98 <HAL_RCC_OscConfig+0x4d4>)
 8001b38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b3c:	6353      	str	r3, [r2, #52]	; 0x34
 8001b3e:	4b16      	ldr	r3, [pc, #88]	; (8001b98 <HAL_RCC_OscConfig+0x4d4>)
 8001b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b42:	4a15      	ldr	r2, [pc, #84]	; (8001b98 <HAL_RCC_OscConfig+0x4d4>)
 8001b44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001b48:	6353      	str	r3, [r2, #52]	; 0x34
 8001b4a:	e01c      	b.n	8001b86 <HAL_RCC_OscConfig+0x4c2>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	2b05      	cmp	r3, #5
 8001b52:	d10c      	bne.n	8001b6e <HAL_RCC_OscConfig+0x4aa>
 8001b54:	4b10      	ldr	r3, [pc, #64]	; (8001b98 <HAL_RCC_OscConfig+0x4d4>)
 8001b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b58:	4a0f      	ldr	r2, [pc, #60]	; (8001b98 <HAL_RCC_OscConfig+0x4d4>)
 8001b5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b5e:	6353      	str	r3, [r2, #52]	; 0x34
 8001b60:	4b0d      	ldr	r3, [pc, #52]	; (8001b98 <HAL_RCC_OscConfig+0x4d4>)
 8001b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b64:	4a0c      	ldr	r2, [pc, #48]	; (8001b98 <HAL_RCC_OscConfig+0x4d4>)
 8001b66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b6a:	6353      	str	r3, [r2, #52]	; 0x34
 8001b6c:	e00b      	b.n	8001b86 <HAL_RCC_OscConfig+0x4c2>
 8001b6e:	4b0a      	ldr	r3, [pc, #40]	; (8001b98 <HAL_RCC_OscConfig+0x4d4>)
 8001b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b72:	4a09      	ldr	r2, [pc, #36]	; (8001b98 <HAL_RCC_OscConfig+0x4d4>)
 8001b74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b78:	6353      	str	r3, [r2, #52]	; 0x34
 8001b7a:	4b07      	ldr	r3, [pc, #28]	; (8001b98 <HAL_RCC_OscConfig+0x4d4>)
 8001b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b7e:	4a06      	ldr	r2, [pc, #24]	; (8001b98 <HAL_RCC_OscConfig+0x4d4>)
 8001b80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001b84:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d024      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b8e:	f7ff fb03 	bl	8001198 <HAL_GetTick>
 8001b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b94:	e019      	b.n	8001bca <HAL_RCC_OscConfig+0x506>
 8001b96:	bf00      	nop
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	08005e18 	.word	0x08005e18
 8001ba0:	20000000 	.word	0x20000000
 8001ba4:	20000004 	.word	0x20000004
 8001ba8:	42470020 	.word	0x42470020
 8001bac:	42470680 	.word	0x42470680
 8001bb0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bb4:	f7ff faf0 	bl	8001198 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e0a3      	b.n	8001d12 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001bca:	4b54      	ldr	r3, [pc, #336]	; (8001d1c <HAL_RCC_OscConfig+0x658>)
 8001bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d0ee      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x4f0>
 8001bd6:	e014      	b.n	8001c02 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd8:	f7ff fade 	bl	8001198 <HAL_GetTick>
 8001bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001bde:	e00a      	b.n	8001bf6 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001be0:	f7ff fada 	bl	8001198 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e08d      	b.n	8001d12 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001bf6:	4b49      	ldr	r3, [pc, #292]	; (8001d1c <HAL_RCC_OscConfig+0x658>)
 8001bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1ee      	bne.n	8001be0 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c02:	7ffb      	ldrb	r3, [r7, #31]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d105      	bne.n	8001c14 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c08:	4b44      	ldr	r3, [pc, #272]	; (8001d1c <HAL_RCC_OscConfig+0x658>)
 8001c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0c:	4a43      	ldr	r2, [pc, #268]	; (8001d1c <HAL_RCC_OscConfig+0x658>)
 8001c0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c12:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d079      	beq.n	8001d10 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	2b0c      	cmp	r3, #12
 8001c20:	d056      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d13b      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c2a:	4b3d      	ldr	r3, [pc, #244]	; (8001d20 <HAL_RCC_OscConfig+0x65c>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c30:	f7ff fab2 	bl	8001198 <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c38:	f7ff faae 	bl	8001198 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e063      	b.n	8001d12 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c4a:	4b34      	ldr	r3, [pc, #208]	; (8001d1c <HAL_RCC_OscConfig+0x658>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1f0      	bne.n	8001c38 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c56:	4b31      	ldr	r3, [pc, #196]	; (8001d1c <HAL_RCC_OscConfig+0x658>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c66:	4319      	orrs	r1, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6c:	430b      	orrs	r3, r1
 8001c6e:	492b      	ldr	r1, [pc, #172]	; (8001d1c <HAL_RCC_OscConfig+0x658>)
 8001c70:	4313      	orrs	r3, r2
 8001c72:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c74:	4b2a      	ldr	r3, [pc, #168]	; (8001d20 <HAL_RCC_OscConfig+0x65c>)
 8001c76:	2201      	movs	r2, #1
 8001c78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c7a:	f7ff fa8d 	bl	8001198 <HAL_GetTick>
 8001c7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c80:	e008      	b.n	8001c94 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c82:	f7ff fa89 	bl	8001198 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d901      	bls.n	8001c94 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e03e      	b.n	8001d12 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c94:	4b21      	ldr	r3, [pc, #132]	; (8001d1c <HAL_RCC_OscConfig+0x658>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d0f0      	beq.n	8001c82 <HAL_RCC_OscConfig+0x5be>
 8001ca0:	e036      	b.n	8001d10 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ca2:	4b1f      	ldr	r3, [pc, #124]	; (8001d20 <HAL_RCC_OscConfig+0x65c>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca8:	f7ff fa76 	bl	8001198 <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cb0:	f7ff fa72 	bl	8001198 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e027      	b.n	8001d12 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001cc2:	4b16      	ldr	r3, [pc, #88]	; (8001d1c <HAL_RCC_OscConfig+0x658>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1f0      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x5ec>
 8001cce:	e01f      	b.n	8001d10 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d101      	bne.n	8001cdc <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e01a      	b.n	8001d12 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cdc:	4b0f      	ldr	r3, [pc, #60]	; (8001d1c <HAL_RCC_OscConfig+0x658>)
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d10d      	bne.n	8001d0c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d106      	bne.n	8001d0c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d001      	beq.n	8001d10 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e000      	b.n	8001d12 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3720      	adds	r7, #32
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	42470060 	.word	0x42470060

08001d24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d101      	bne.n	8001d38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e11a      	b.n	8001f6e <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d38:	4b8f      	ldr	r3, [pc, #572]	; (8001f78 <HAL_RCC_ClockConfig+0x254>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0301 	and.w	r3, r3, #1
 8001d40:	683a      	ldr	r2, [r7, #0]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d919      	bls.n	8001d7a <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d105      	bne.n	8001d58 <HAL_RCC_ClockConfig+0x34>
 8001d4c:	4b8a      	ldr	r3, [pc, #552]	; (8001f78 <HAL_RCC_ClockConfig+0x254>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a89      	ldr	r2, [pc, #548]	; (8001f78 <HAL_RCC_ClockConfig+0x254>)
 8001d52:	f043 0304 	orr.w	r3, r3, #4
 8001d56:	6013      	str	r3, [r2, #0]
 8001d58:	4b87      	ldr	r3, [pc, #540]	; (8001f78 <HAL_RCC_ClockConfig+0x254>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f023 0201 	bic.w	r2, r3, #1
 8001d60:	4985      	ldr	r1, [pc, #532]	; (8001f78 <HAL_RCC_ClockConfig+0x254>)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d68:	4b83      	ldr	r3, [pc, #524]	; (8001f78 <HAL_RCC_ClockConfig+0x254>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	683a      	ldr	r2, [r7, #0]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d001      	beq.n	8001d7a <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e0f9      	b.n	8001f6e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d008      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d86:	4b7d      	ldr	r3, [pc, #500]	; (8001f7c <HAL_RCC_ClockConfig+0x258>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	497a      	ldr	r1, [pc, #488]	; (8001f7c <HAL_RCC_ClockConfig+0x258>)
 8001d94:	4313      	orrs	r3, r2
 8001d96:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0301 	and.w	r3, r3, #1
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f000 808e 	beq.w	8001ec2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d107      	bne.n	8001dbe <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001dae:	4b73      	ldr	r3, [pc, #460]	; (8001f7c <HAL_RCC_ClockConfig+0x258>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d121      	bne.n	8001dfe <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e0d7      	b.n	8001f6e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	2b03      	cmp	r3, #3
 8001dc4:	d107      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001dc6:	4b6d      	ldr	r3, [pc, #436]	; (8001f7c <HAL_RCC_ClockConfig+0x258>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d115      	bne.n	8001dfe <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e0cb      	b.n	8001f6e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d107      	bne.n	8001dee <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001dde:	4b67      	ldr	r3, [pc, #412]	; (8001f7c <HAL_RCC_ClockConfig+0x258>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d109      	bne.n	8001dfe <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e0bf      	b.n	8001f6e <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001dee:	4b63      	ldr	r3, [pc, #396]	; (8001f7c <HAL_RCC_ClockConfig+0x258>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e0b7      	b.n	8001f6e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dfe:	4b5f      	ldr	r3, [pc, #380]	; (8001f7c <HAL_RCC_ClockConfig+0x258>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f023 0203 	bic.w	r2, r3, #3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	495c      	ldr	r1, [pc, #368]	; (8001f7c <HAL_RCC_ClockConfig+0x258>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e10:	f7ff f9c2 	bl	8001198 <HAL_GetTick>
 8001e14:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d112      	bne.n	8001e44 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e1e:	e00a      	b.n	8001e36 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e20:	f7ff f9ba 	bl	8001198 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e09b      	b.n	8001f6e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e36:	4b51      	ldr	r3, [pc, #324]	; (8001f7c <HAL_RCC_ClockConfig+0x258>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f003 030c 	and.w	r3, r3, #12
 8001e3e:	2b08      	cmp	r3, #8
 8001e40:	d1ee      	bne.n	8001e20 <HAL_RCC_ClockConfig+0xfc>
 8001e42:	e03e      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	2b03      	cmp	r3, #3
 8001e4a:	d112      	bne.n	8001e72 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e4c:	e00a      	b.n	8001e64 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e4e:	f7ff f9a3 	bl	8001198 <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e084      	b.n	8001f6e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e64:	4b45      	ldr	r3, [pc, #276]	; (8001f7c <HAL_RCC_ClockConfig+0x258>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f003 030c 	and.w	r3, r3, #12
 8001e6c:	2b0c      	cmp	r3, #12
 8001e6e:	d1ee      	bne.n	8001e4e <HAL_RCC_ClockConfig+0x12a>
 8001e70:	e027      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d11d      	bne.n	8001eb6 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e7a:	e00a      	b.n	8001e92 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e7c:	f7ff f98c 	bl	8001198 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e06d      	b.n	8001f6e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e92:	4b3a      	ldr	r3, [pc, #232]	; (8001f7c <HAL_RCC_ClockConfig+0x258>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f003 030c 	and.w	r3, r3, #12
 8001e9a:	2b04      	cmp	r3, #4
 8001e9c:	d1ee      	bne.n	8001e7c <HAL_RCC_ClockConfig+0x158>
 8001e9e:	e010      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ea0:	f7ff f97a 	bl	8001198 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e05b      	b.n	8001f6e <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001eb6:	4b31      	ldr	r3, [pc, #196]	; (8001f7c <HAL_RCC_ClockConfig+0x258>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f003 030c 	and.w	r3, r3, #12
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1ee      	bne.n	8001ea0 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ec2:	4b2d      	ldr	r3, [pc, #180]	; (8001f78 <HAL_RCC_ClockConfig+0x254>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	683a      	ldr	r2, [r7, #0]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d219      	bcs.n	8001f04 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d105      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0x1be>
 8001ed6:	4b28      	ldr	r3, [pc, #160]	; (8001f78 <HAL_RCC_ClockConfig+0x254>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a27      	ldr	r2, [pc, #156]	; (8001f78 <HAL_RCC_ClockConfig+0x254>)
 8001edc:	f043 0304 	orr.w	r3, r3, #4
 8001ee0:	6013      	str	r3, [r2, #0]
 8001ee2:	4b25      	ldr	r3, [pc, #148]	; (8001f78 <HAL_RCC_ClockConfig+0x254>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f023 0201 	bic.w	r2, r3, #1
 8001eea:	4923      	ldr	r1, [pc, #140]	; (8001f78 <HAL_RCC_ClockConfig+0x254>)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef2:	4b21      	ldr	r3, [pc, #132]	; (8001f78 <HAL_RCC_ClockConfig+0x254>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d001      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e034      	b.n	8001f6e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0304 	and.w	r3, r3, #4
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d008      	beq.n	8001f22 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f10:	4b1a      	ldr	r3, [pc, #104]	; (8001f7c <HAL_RCC_ClockConfig+0x258>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	4917      	ldr	r1, [pc, #92]	; (8001f7c <HAL_RCC_ClockConfig+0x258>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0308 	and.w	r3, r3, #8
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d009      	beq.n	8001f42 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f2e:	4b13      	ldr	r3, [pc, #76]	; (8001f7c <HAL_RCC_ClockConfig+0x258>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	490f      	ldr	r1, [pc, #60]	; (8001f7c <HAL_RCC_ClockConfig+0x258>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f42:	f000 f823 	bl	8001f8c <HAL_RCC_GetSysClockFreq>
 8001f46:	4602      	mov	r2, r0
 8001f48:	4b0c      	ldr	r3, [pc, #48]	; (8001f7c <HAL_RCC_ClockConfig+0x258>)
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	091b      	lsrs	r3, r3, #4
 8001f4e:	f003 030f 	and.w	r3, r3, #15
 8001f52:	490b      	ldr	r1, [pc, #44]	; (8001f80 <HAL_RCC_ClockConfig+0x25c>)
 8001f54:	5ccb      	ldrb	r3, [r1, r3]
 8001f56:	fa22 f303 	lsr.w	r3, r2, r3
 8001f5a:	4a0a      	ldr	r2, [pc, #40]	; (8001f84 <HAL_RCC_ClockConfig+0x260>)
 8001f5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f5e:	4b0a      	ldr	r3, [pc, #40]	; (8001f88 <HAL_RCC_ClockConfig+0x264>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff f8cc 	bl	8001100 <HAL_InitTick>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f6c:	7afb      	ldrb	r3, [r7, #11]
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40023c00 	.word	0x40023c00
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	08005e18 	.word	0x08005e18
 8001f84:	20000000 	.word	0x20000000
 8001f88:	20000004 	.word	0x20000004

08001f8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f90:	b08e      	sub	sp, #56	; 0x38
 8001f92:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8001f94:	4b58      	ldr	r3, [pc, #352]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x16c>)
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f9c:	f003 030c 	and.w	r3, r3, #12
 8001fa0:	2b0c      	cmp	r3, #12
 8001fa2:	d00d      	beq.n	8001fc0 <HAL_RCC_GetSysClockFreq+0x34>
 8001fa4:	2b0c      	cmp	r3, #12
 8001fa6:	f200 8092 	bhi.w	80020ce <HAL_RCC_GetSysClockFreq+0x142>
 8001faa:	2b04      	cmp	r3, #4
 8001fac:	d002      	beq.n	8001fb4 <HAL_RCC_GetSysClockFreq+0x28>
 8001fae:	2b08      	cmp	r3, #8
 8001fb0:	d003      	beq.n	8001fba <HAL_RCC_GetSysClockFreq+0x2e>
 8001fb2:	e08c      	b.n	80020ce <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fb4:	4b51      	ldr	r3, [pc, #324]	; (80020fc <HAL_RCC_GetSysClockFreq+0x170>)
 8001fb6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001fb8:	e097      	b.n	80020ea <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fba:	4b51      	ldr	r3, [pc, #324]	; (8002100 <HAL_RCC_GetSysClockFreq+0x174>)
 8001fbc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001fbe:	e094      	b.n	80020ea <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fc2:	0c9b      	lsrs	r3, r3, #18
 8001fc4:	f003 020f 	and.w	r2, r3, #15
 8001fc8:	4b4e      	ldr	r3, [pc, #312]	; (8002104 <HAL_RCC_GetSysClockFreq+0x178>)
 8001fca:	5c9b      	ldrb	r3, [r3, r2]
 8001fcc:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fd0:	0d9b      	lsrs	r3, r3, #22
 8001fd2:	f003 0303 	and.w	r3, r3, #3
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fda:	4b47      	ldr	r3, [pc, #284]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x16c>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d021      	beq.n	800202a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe8:	2200      	movs	r2, #0
 8001fea:	61bb      	str	r3, [r7, #24]
 8001fec:	61fa      	str	r2, [r7, #28]
 8001fee:	4b44      	ldr	r3, [pc, #272]	; (8002100 <HAL_RCC_GetSysClockFreq+0x174>)
 8001ff0:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001ff4:	464a      	mov	r2, r9
 8001ff6:	fb03 f202 	mul.w	r2, r3, r2
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	4644      	mov	r4, r8
 8001ffe:	fb04 f303 	mul.w	r3, r4, r3
 8002002:	4413      	add	r3, r2
 8002004:	4a3e      	ldr	r2, [pc, #248]	; (8002100 <HAL_RCC_GetSysClockFreq+0x174>)
 8002006:	4644      	mov	r4, r8
 8002008:	fba4 0102 	umull	r0, r1, r4, r2
 800200c:	440b      	add	r3, r1
 800200e:	4619      	mov	r1, r3
 8002010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002012:	2200      	movs	r2, #0
 8002014:	613b      	str	r3, [r7, #16]
 8002016:	617a      	str	r2, [r7, #20]
 8002018:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800201c:	f7fe fbbc 	bl	8000798 <__aeabi_uldivmod>
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
 8002024:	4613      	mov	r3, r2
 8002026:	637b      	str	r3, [r7, #52]	; 0x34
 8002028:	e04e      	b.n	80020c8 <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800202a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800202c:	2200      	movs	r2, #0
 800202e:	469a      	mov	sl, r3
 8002030:	4693      	mov	fp, r2
 8002032:	4652      	mov	r2, sl
 8002034:	465b      	mov	r3, fp
 8002036:	f04f 0000 	mov.w	r0, #0
 800203a:	f04f 0100 	mov.w	r1, #0
 800203e:	0159      	lsls	r1, r3, #5
 8002040:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002044:	0150      	lsls	r0, r2, #5
 8002046:	4602      	mov	r2, r0
 8002048:	460b      	mov	r3, r1
 800204a:	ebb2 080a 	subs.w	r8, r2, sl
 800204e:	eb63 090b 	sbc.w	r9, r3, fp
 8002052:	f04f 0200 	mov.w	r2, #0
 8002056:	f04f 0300 	mov.w	r3, #0
 800205a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800205e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002062:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002066:	ebb2 0408 	subs.w	r4, r2, r8
 800206a:	eb63 0509 	sbc.w	r5, r3, r9
 800206e:	f04f 0200 	mov.w	r2, #0
 8002072:	f04f 0300 	mov.w	r3, #0
 8002076:	00eb      	lsls	r3, r5, #3
 8002078:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800207c:	00e2      	lsls	r2, r4, #3
 800207e:	4614      	mov	r4, r2
 8002080:	461d      	mov	r5, r3
 8002082:	eb14 030a 	adds.w	r3, r4, sl
 8002086:	603b      	str	r3, [r7, #0]
 8002088:	eb45 030b 	adc.w	r3, r5, fp
 800208c:	607b      	str	r3, [r7, #4]
 800208e:	f04f 0200 	mov.w	r2, #0
 8002092:	f04f 0300 	mov.w	r3, #0
 8002096:	e9d7 4500 	ldrd	r4, r5, [r7]
 800209a:	4629      	mov	r1, r5
 800209c:	028b      	lsls	r3, r1, #10
 800209e:	4620      	mov	r0, r4
 80020a0:	4629      	mov	r1, r5
 80020a2:	4604      	mov	r4, r0
 80020a4:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80020a8:	4601      	mov	r1, r0
 80020aa:	028a      	lsls	r2, r1, #10
 80020ac:	4610      	mov	r0, r2
 80020ae:	4619      	mov	r1, r3
 80020b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b2:	2200      	movs	r2, #0
 80020b4:	60bb      	str	r3, [r7, #8]
 80020b6:	60fa      	str	r2, [r7, #12]
 80020b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020bc:	f7fe fb6c 	bl	8000798 <__aeabi_uldivmod>
 80020c0:	4602      	mov	r2, r0
 80020c2:	460b      	mov	r3, r1
 80020c4:	4613      	mov	r3, r2
 80020c6:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllvco;
 80020c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ca:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80020cc:	e00d      	b.n	80020ea <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80020ce:	4b0a      	ldr	r3, [pc, #40]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x16c>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	0b5b      	lsrs	r3, r3, #13
 80020d4:	f003 0307 	and.w	r3, r3, #7
 80020d8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80020da:	6a3b      	ldr	r3, [r7, #32]
 80020dc:	3301      	adds	r3, #1
 80020de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80020e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3738      	adds	r7, #56	; 0x38
 80020f0:	46bd      	mov	sp, r7
 80020f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020f6:	bf00      	nop
 80020f8:	40023800 	.word	0x40023800
 80020fc:	00f42400 	.word	0x00f42400
 8002100:	016e3600 	.word	0x016e3600
 8002104:	08005e0c 	.word	0x08005e0c

08002108 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800210c:	4b02      	ldr	r3, [pc, #8]	; (8002118 <HAL_RCC_GetHCLKFreq+0x10>)
 800210e:	681b      	ldr	r3, [r3, #0]
}
 8002110:	4618      	mov	r0, r3
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr
 8002118:	20000000 	.word	0x20000000

0800211c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002120:	f7ff fff2 	bl	8002108 <HAL_RCC_GetHCLKFreq>
 8002124:	4602      	mov	r2, r0
 8002126:	4b05      	ldr	r3, [pc, #20]	; (800213c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	0a1b      	lsrs	r3, r3, #8
 800212c:	f003 0307 	and.w	r3, r3, #7
 8002130:	4903      	ldr	r1, [pc, #12]	; (8002140 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002132:	5ccb      	ldrb	r3, [r1, r3]
 8002134:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002138:	4618      	mov	r0, r3
 800213a:	bd80      	pop	{r7, pc}
 800213c:	40023800 	.word	0x40023800
 8002140:	08005e28 	.word	0x08005e28

08002144 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002148:	f7ff ffde 	bl	8002108 <HAL_RCC_GetHCLKFreq>
 800214c:	4602      	mov	r2, r0
 800214e:	4b05      	ldr	r3, [pc, #20]	; (8002164 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	0adb      	lsrs	r3, r3, #11
 8002154:	f003 0307 	and.w	r3, r3, #7
 8002158:	4903      	ldr	r1, [pc, #12]	; (8002168 <HAL_RCC_GetPCLK2Freq+0x24>)
 800215a:	5ccb      	ldrb	r3, [r1, r3]
 800215c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002160:	4618      	mov	r0, r3
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40023800 	.word	0x40023800
 8002168:	08005e28 	.word	0x08005e28

0800216c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 800216c:	b480      	push	{r7}
 800216e:	b087      	sub	sp, #28
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002174:	2300      	movs	r3, #0
 8002176:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002178:	4b29      	ldr	r3, [pc, #164]	; (8002220 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d12c      	bne.n	80021de <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002184:	4b26      	ldr	r3, [pc, #152]	; (8002220 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002188:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d005      	beq.n	800219c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002190:	4b24      	ldr	r3, [pc, #144]	; (8002224 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002198:	617b      	str	r3, [r7, #20]
 800219a:	e016      	b.n	80021ca <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800219c:	4b20      	ldr	r3, [pc, #128]	; (8002220 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800219e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a0:	4a1f      	ldr	r2, [pc, #124]	; (8002220 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80021a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021a6:	6253      	str	r3, [r2, #36]	; 0x24
 80021a8:	4b1d      	ldr	r3, [pc, #116]	; (8002220 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80021aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80021b4:	4b1b      	ldr	r3, [pc, #108]	; (8002224 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80021bc:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80021be:	4b18      	ldr	r3, [pc, #96]	; (8002220 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80021c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c2:	4a17      	ldr	r2, [pc, #92]	; (8002220 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80021c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021c8:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80021d0:	d105      	bne.n	80021de <RCC_SetFlashLatencyFromMSIRange+0x72>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80021d8:	d101      	bne.n	80021de <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80021da:	2301      	movs	r3, #1
 80021dc:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d105      	bne.n	80021f0 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80021e4:	4b10      	ldr	r3, [pc, #64]	; (8002228 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a0f      	ldr	r2, [pc, #60]	; (8002228 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021ea:	f043 0304 	orr.w	r3, r3, #4
 80021ee:	6013      	str	r3, [r2, #0]
 80021f0:	4b0d      	ldr	r3, [pc, #52]	; (8002228 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f023 0201 	bic.w	r2, r3, #1
 80021f8:	490b      	ldr	r1, [pc, #44]	; (8002228 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002200:	4b09      	ldr	r3, [pc, #36]	; (8002228 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	429a      	cmp	r2, r3
 800220c:	d001      	beq.n	8002212 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e000      	b.n	8002214 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8002212:	2300      	movs	r3, #0
}
 8002214:	4618      	mov	r0, r3
 8002216:	371c      	adds	r7, #28
 8002218:	46bd      	mov	sp, r7
 800221a:	bc80      	pop	{r7}
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	40023800 	.word	0x40023800
 8002224:	40007000 	.word	0x40007000
 8002228:	40023c00 	.word	0x40023c00

0800222c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e07b      	b.n	8002336 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002242:	2b00      	cmp	r3, #0
 8002244:	d108      	bne.n	8002258 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800224e:	d009      	beq.n	8002264 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	61da      	str	r2, [r3, #28]
 8002256:	e005      	b.n	8002264 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d106      	bne.n	8002284 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f7fe fe4a 	bl	8000f18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2202      	movs	r2, #2
 8002288:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800229a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80022ac:	431a      	orrs	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022b6:	431a      	orrs	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	431a      	orrs	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	431a      	orrs	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022d4:	431a      	orrs	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	69db      	ldr	r3, [r3, #28]
 80022da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80022de:	431a      	orrs	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a1b      	ldr	r3, [r3, #32]
 80022e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022e8:	ea42 0103 	orr.w	r1, r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	430a      	orrs	r2, r1
 80022fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	0c1b      	lsrs	r3, r3, #16
 8002302:	f003 0104 	and.w	r1, r3, #4
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230a:	f003 0210 	and.w	r2, r3, #16
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	430a      	orrs	r2, r1
 8002314:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	69da      	ldr	r2, [r3, #28]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002324:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b082      	sub	sp, #8
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d101      	bne.n	8002350 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e03f      	b.n	80023d0 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002356:	b2db      	uxtb	r3, r3
 8002358:	2b00      	cmp	r3, #0
 800235a:	d106      	bne.n	800236a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f7fe fe1b 	bl	8000fa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2224      	movs	r2, #36	; 0x24
 800236e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68da      	ldr	r2, [r3, #12]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002380:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f000 f904 	bl	8002590 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	691a      	ldr	r2, [r3, #16]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002396:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	695a      	ldr	r2, [r3, #20]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023a6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68da      	ldr	r2, [r3, #12]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023b6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2220      	movs	r2, #32
 80023c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2220      	movs	r2, #32
 80023ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b08a      	sub	sp, #40	; 0x28
 80023dc:	af02      	add	r7, sp, #8
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	603b      	str	r3, [r7, #0]
 80023e4:	4613      	mov	r3, r2
 80023e6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80023e8:	2300      	movs	r3, #0
 80023ea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	2b20      	cmp	r3, #32
 80023f6:	d17c      	bne.n	80024f2 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d002      	beq.n	8002404 <HAL_UART_Transmit+0x2c>
 80023fe:	88fb      	ldrh	r3, [r7, #6]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d101      	bne.n	8002408 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e075      	b.n	80024f4 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800240e:	2b01      	cmp	r3, #1
 8002410:	d101      	bne.n	8002416 <HAL_UART_Transmit+0x3e>
 8002412:	2302      	movs	r3, #2
 8002414:	e06e      	b.n	80024f4 <HAL_UART_Transmit+0x11c>
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2201      	movs	r2, #1
 800241a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2221      	movs	r2, #33	; 0x21
 8002428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800242c:	f7fe feb4 	bl	8001198 <HAL_GetTick>
 8002430:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	88fa      	ldrh	r2, [r7, #6]
 8002436:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	88fa      	ldrh	r2, [r7, #6]
 800243c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002446:	d108      	bne.n	800245a <HAL_UART_Transmit+0x82>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d104      	bne.n	800245a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002450:	2300      	movs	r3, #0
 8002452:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	61bb      	str	r3, [r7, #24]
 8002458:	e003      	b.n	8002462 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800245e:	2300      	movs	r3, #0
 8002460:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800246a:	e02a      	b.n	80024c2 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	9300      	str	r3, [sp, #0]
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	2200      	movs	r2, #0
 8002474:	2180      	movs	r1, #128	; 0x80
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f000 f840 	bl	80024fc <UART_WaitOnFlagUntilTimeout>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e036      	b.n	80024f4 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d10b      	bne.n	80024a4 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	881b      	ldrh	r3, [r3, #0]
 8002490:	461a      	mov	r2, r3
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800249a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	3302      	adds	r3, #2
 80024a0:	61bb      	str	r3, [r7, #24]
 80024a2:	e007      	b.n	80024b4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	781a      	ldrb	r2, [r3, #0]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	3301      	adds	r3, #1
 80024b2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	3b01      	subs	r3, #1
 80024bc:	b29a      	uxth	r2, r3
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d1cf      	bne.n	800246c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	2200      	movs	r2, #0
 80024d4:	2140      	movs	r1, #64	; 0x40
 80024d6:	68f8      	ldr	r0, [r7, #12]
 80024d8:	f000 f810 	bl	80024fc <UART_WaitOnFlagUntilTimeout>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e006      	b.n	80024f4 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2220      	movs	r2, #32
 80024ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80024ee:	2300      	movs	r3, #0
 80024f0:	e000      	b.n	80024f4 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80024f2:	2302      	movs	r3, #2
  }
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3720      	adds	r7, #32
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	603b      	str	r3, [r7, #0]
 8002508:	4613      	mov	r3, r2
 800250a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800250c:	e02c      	b.n	8002568 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002514:	d028      	beq.n	8002568 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d007      	beq.n	800252c <UART_WaitOnFlagUntilTimeout+0x30>
 800251c:	f7fe fe3c 	bl	8001198 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	429a      	cmp	r2, r3
 800252a:	d21d      	bcs.n	8002568 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68da      	ldr	r2, [r3, #12]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800253a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	695a      	ldr	r2, [r3, #20]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f022 0201 	bic.w	r2, r2, #1
 800254a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2220      	movs	r2, #32
 8002550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2220      	movs	r2, #32
 8002558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e00f      	b.n	8002588 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	4013      	ands	r3, r2
 8002572:	68ba      	ldr	r2, [r7, #8]
 8002574:	429a      	cmp	r2, r3
 8002576:	bf0c      	ite	eq
 8002578:	2301      	moveq	r3, #1
 800257a:	2300      	movne	r3, #0
 800257c:	b2db      	uxtb	r3, r3
 800257e:	461a      	mov	r2, r3
 8002580:	79fb      	ldrb	r3, [r7, #7]
 8002582:	429a      	cmp	r2, r3
 8002584:	d0c3      	beq.n	800250e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	3710      	adds	r7, #16
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	68da      	ldr	r2, [r3, #12]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	430a      	orrs	r2, r1
 80025ac:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	689a      	ldr	r2, [r3, #8]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	431a      	orrs	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	695b      	ldr	r3, [r3, #20]
 80025bc:	431a      	orrs	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80025d0:	f023 030c 	bic.w	r3, r3, #12
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	6812      	ldr	r2, [r2, #0]
 80025d8:	68b9      	ldr	r1, [r7, #8]
 80025da:	430b      	orrs	r3, r1
 80025dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	695b      	ldr	r3, [r3, #20]
 80025e4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	699a      	ldr	r2, [r3, #24]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	430a      	orrs	r2, r1
 80025f2:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a55      	ldr	r2, [pc, #340]	; (8002750 <UART_SetConfig+0x1c0>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d103      	bne.n	8002606 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80025fe:	f7ff fda1 	bl	8002144 <HAL_RCC_GetPCLK2Freq>
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	e002      	b.n	800260c <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002606:	f7ff fd89 	bl	800211c <HAL_RCC_GetPCLK1Freq>
 800260a:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	69db      	ldr	r3, [r3, #28]
 8002610:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002614:	d14c      	bne.n	80026b0 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	4613      	mov	r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	4413      	add	r3, r2
 800261e:	009a      	lsls	r2, r3, #2
 8002620:	441a      	add	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	fbb2 f3f3 	udiv	r3, r2, r3
 800262c:	4a49      	ldr	r2, [pc, #292]	; (8002754 <UART_SetConfig+0x1c4>)
 800262e:	fba2 2303 	umull	r2, r3, r2, r3
 8002632:	095b      	lsrs	r3, r3, #5
 8002634:	0119      	lsls	r1, r3, #4
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	4613      	mov	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	4413      	add	r3, r2
 800263e:	009a      	lsls	r2, r3, #2
 8002640:	441a      	add	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	fbb2 f2f3 	udiv	r2, r2, r3
 800264c:	4b41      	ldr	r3, [pc, #260]	; (8002754 <UART_SetConfig+0x1c4>)
 800264e:	fba3 0302 	umull	r0, r3, r3, r2
 8002652:	095b      	lsrs	r3, r3, #5
 8002654:	2064      	movs	r0, #100	; 0x64
 8002656:	fb00 f303 	mul.w	r3, r0, r3
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	3332      	adds	r3, #50	; 0x32
 8002660:	4a3c      	ldr	r2, [pc, #240]	; (8002754 <UART_SetConfig+0x1c4>)
 8002662:	fba2 2303 	umull	r2, r3, r2, r3
 8002666:	095b      	lsrs	r3, r3, #5
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800266e:	4419      	add	r1, r3
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	4613      	mov	r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	4413      	add	r3, r2
 8002678:	009a      	lsls	r2, r3, #2
 800267a:	441a      	add	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	fbb2 f2f3 	udiv	r2, r2, r3
 8002686:	4b33      	ldr	r3, [pc, #204]	; (8002754 <UART_SetConfig+0x1c4>)
 8002688:	fba3 0302 	umull	r0, r3, r3, r2
 800268c:	095b      	lsrs	r3, r3, #5
 800268e:	2064      	movs	r0, #100	; 0x64
 8002690:	fb00 f303 	mul.w	r3, r0, r3
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	3332      	adds	r3, #50	; 0x32
 800269a:	4a2e      	ldr	r2, [pc, #184]	; (8002754 <UART_SetConfig+0x1c4>)
 800269c:	fba2 2303 	umull	r2, r3, r2, r3
 80026a0:	095b      	lsrs	r3, r3, #5
 80026a2:	f003 0207 	and.w	r2, r3, #7
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	440a      	add	r2, r1
 80026ac:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80026ae:	e04a      	b.n	8002746 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	4613      	mov	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	4413      	add	r3, r2
 80026b8:	009a      	lsls	r2, r3, #2
 80026ba:	441a      	add	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c6:	4a23      	ldr	r2, [pc, #140]	; (8002754 <UART_SetConfig+0x1c4>)
 80026c8:	fba2 2303 	umull	r2, r3, r2, r3
 80026cc:	095b      	lsrs	r3, r3, #5
 80026ce:	0119      	lsls	r1, r3, #4
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	4613      	mov	r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	4413      	add	r3, r2
 80026d8:	009a      	lsls	r2, r3, #2
 80026da:	441a      	add	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	fbb2 f2f3 	udiv	r2, r2, r3
 80026e6:	4b1b      	ldr	r3, [pc, #108]	; (8002754 <UART_SetConfig+0x1c4>)
 80026e8:	fba3 0302 	umull	r0, r3, r3, r2
 80026ec:	095b      	lsrs	r3, r3, #5
 80026ee:	2064      	movs	r0, #100	; 0x64
 80026f0:	fb00 f303 	mul.w	r3, r0, r3
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	011b      	lsls	r3, r3, #4
 80026f8:	3332      	adds	r3, #50	; 0x32
 80026fa:	4a16      	ldr	r2, [pc, #88]	; (8002754 <UART_SetConfig+0x1c4>)
 80026fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002700:	095b      	lsrs	r3, r3, #5
 8002702:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002706:	4419      	add	r1, r3
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	4613      	mov	r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	4413      	add	r3, r2
 8002710:	009a      	lsls	r2, r3, #2
 8002712:	441a      	add	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	fbb2 f2f3 	udiv	r2, r2, r3
 800271e:	4b0d      	ldr	r3, [pc, #52]	; (8002754 <UART_SetConfig+0x1c4>)
 8002720:	fba3 0302 	umull	r0, r3, r3, r2
 8002724:	095b      	lsrs	r3, r3, #5
 8002726:	2064      	movs	r0, #100	; 0x64
 8002728:	fb00 f303 	mul.w	r3, r0, r3
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	011b      	lsls	r3, r3, #4
 8002730:	3332      	adds	r3, #50	; 0x32
 8002732:	4a08      	ldr	r2, [pc, #32]	; (8002754 <UART_SetConfig+0x1c4>)
 8002734:	fba2 2303 	umull	r2, r3, r2, r3
 8002738:	095b      	lsrs	r3, r3, #5
 800273a:	f003 020f 	and.w	r2, r3, #15
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	440a      	add	r2, r1
 8002744:	609a      	str	r2, [r3, #8]
}
 8002746:	bf00      	nop
 8002748:	3710      	adds	r7, #16
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	40013800 	.word	0x40013800
 8002754:	51eb851f 	.word	0x51eb851f

08002758 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800275c:	4904      	ldr	r1, [pc, #16]	; (8002770 <MX_FATFS_Init+0x18>)
 800275e:	4805      	ldr	r0, [pc, #20]	; (8002774 <MX_FATFS_Init+0x1c>)
 8002760:	f003 f9b0 	bl	8005ac4 <FATFS_LinkDriver>
 8002764:	4603      	mov	r3, r0
 8002766:	461a      	mov	r2, r3
 8002768:	4b03      	ldr	r3, [pc, #12]	; (8002778 <MX_FATFS_Init+0x20>)
 800276a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800276c:	bf00      	nop
 800276e:	bd80      	pop	{r7, pc}
 8002770:	200000e4 	.word	0x200000e4
 8002774:	20000010 	.word	0x20000010
 8002778:	200000e0 	.word	0x200000e0

0800277c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8002780:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8002782:	4618      	mov	r0, r3
 8002784:	46bd      	mov	sp, r7
 8002786:	bc80      	pop	{r7}
 8002788:	4770      	bx	lr
	...

0800278c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	4603      	mov	r3, r0
 8002794:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8002796:	4b05      	ldr	r3, [pc, #20]	; (80027ac <USER_initialize+0x20>)
 8002798:	2201      	movs	r2, #1
 800279a:	701a      	strb	r2, [r3, #0]
    return Stat;
 800279c:	4b03      	ldr	r3, [pc, #12]	; (80027ac <USER_initialize+0x20>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bc80      	pop	{r7}
 80027aa:	4770      	bx	lr
 80027ac:	2000000c 	.word	0x2000000c

080027b0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	4603      	mov	r3, r0
 80027b8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 80027ba:	4b05      	ldr	r3, [pc, #20]	; (80027d0 <USER_status+0x20>)
 80027bc:	2201      	movs	r2, #1
 80027be:	701a      	strb	r2, [r3, #0]
    return Stat;
 80027c0:	4b03      	ldr	r3, [pc, #12]	; (80027d0 <USER_status+0x20>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bc80      	pop	{r7}
 80027ce:	4770      	bx	lr
 80027d0:	2000000c 	.word	0x2000000c

080027d4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60b9      	str	r1, [r7, #8]
 80027dc:	607a      	str	r2, [r7, #4]
 80027de:	603b      	str	r3, [r7, #0]
 80027e0:	4603      	mov	r3, r0
 80027e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 80027e4:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3714      	adds	r7, #20
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr

080027f0 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60b9      	str	r1, [r7, #8]
 80027f8:	607a      	str	r2, [r7, #4]
 80027fa:	603b      	str	r3, [r7, #0]
 80027fc:	4603      	mov	r3, r0
 80027fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8002800:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8002802:	4618      	mov	r0, r3
 8002804:	3714      	adds	r7, #20
 8002806:	46bd      	mov	sp, r7
 8002808:	bc80      	pop	{r7}
 800280a:	4770      	bx	lr

0800280c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	4603      	mov	r3, r0
 8002814:	603a      	str	r2, [r7, #0]
 8002816:	71fb      	strb	r3, [r7, #7]
 8002818:	460b      	mov	r3, r1
 800281a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	73fb      	strb	r3, [r7, #15]
    return res;
 8002820:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8002822:	4618      	mov	r0, r3
 8002824:	3714      	adds	r7, #20
 8002826:	46bd      	mov	sp, r7
 8002828:	bc80      	pop	{r7}
 800282a:	4770      	bx	lr

0800282c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	4603      	mov	r3, r0
 8002834:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8002836:	79fb      	ldrb	r3, [r7, #7]
 8002838:	4a08      	ldr	r2, [pc, #32]	; (800285c <disk_status+0x30>)
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	4413      	add	r3, r2
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	79fa      	ldrb	r2, [r7, #7]
 8002844:	4905      	ldr	r1, [pc, #20]	; (800285c <disk_status+0x30>)
 8002846:	440a      	add	r2, r1
 8002848:	7a12      	ldrb	r2, [r2, #8]
 800284a:	4610      	mov	r0, r2
 800284c:	4798      	blx	r3
 800284e:	4603      	mov	r3, r0
 8002850:	73fb      	strb	r3, [r7, #15]
  return stat;
 8002852:	7bfb      	ldrb	r3, [r7, #15]
}
 8002854:	4618      	mov	r0, r3
 8002856:	3710      	adds	r7, #16
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	20000310 	.word	0x20000310

08002860 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	4603      	mov	r3, r0
 8002868:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800286a:	2300      	movs	r3, #0
 800286c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800286e:	79fb      	ldrb	r3, [r7, #7]
 8002870:	4a0d      	ldr	r2, [pc, #52]	; (80028a8 <disk_initialize+0x48>)
 8002872:	5cd3      	ldrb	r3, [r2, r3]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d111      	bne.n	800289c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8002878:	79fb      	ldrb	r3, [r7, #7]
 800287a:	4a0b      	ldr	r2, [pc, #44]	; (80028a8 <disk_initialize+0x48>)
 800287c:	2101      	movs	r1, #1
 800287e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8002880:	79fb      	ldrb	r3, [r7, #7]
 8002882:	4a09      	ldr	r2, [pc, #36]	; (80028a8 <disk_initialize+0x48>)
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	4413      	add	r3, r2
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	79fa      	ldrb	r2, [r7, #7]
 800288e:	4906      	ldr	r1, [pc, #24]	; (80028a8 <disk_initialize+0x48>)
 8002890:	440a      	add	r2, r1
 8002892:	7a12      	ldrb	r2, [r2, #8]
 8002894:	4610      	mov	r0, r2
 8002896:	4798      	blx	r3
 8002898:	4603      	mov	r3, r0
 800289a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800289c:	7bfb      	ldrb	r3, [r7, #15]
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3710      	adds	r7, #16
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	20000310 	.word	0x20000310

080028ac <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80028ac:	b590      	push	{r4, r7, lr}
 80028ae:	b087      	sub	sp, #28
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60b9      	str	r1, [r7, #8]
 80028b4:	607a      	str	r2, [r7, #4]
 80028b6:	603b      	str	r3, [r7, #0]
 80028b8:	4603      	mov	r3, r0
 80028ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80028bc:	7bfb      	ldrb	r3, [r7, #15]
 80028be:	4a0a      	ldr	r2, [pc, #40]	; (80028e8 <disk_read+0x3c>)
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	689c      	ldr	r4, [r3, #8]
 80028c8:	7bfb      	ldrb	r3, [r7, #15]
 80028ca:	4a07      	ldr	r2, [pc, #28]	; (80028e8 <disk_read+0x3c>)
 80028cc:	4413      	add	r3, r2
 80028ce:	7a18      	ldrb	r0, [r3, #8]
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	68b9      	ldr	r1, [r7, #8]
 80028d6:	47a0      	blx	r4
 80028d8:	4603      	mov	r3, r0
 80028da:	75fb      	strb	r3, [r7, #23]
  return res;
 80028dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80028de:	4618      	mov	r0, r3
 80028e0:	371c      	adds	r7, #28
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd90      	pop	{r4, r7, pc}
 80028e6:	bf00      	nop
 80028e8:	20000310 	.word	0x20000310

080028ec <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80028ec:	b590      	push	{r4, r7, lr}
 80028ee:	b087      	sub	sp, #28
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60b9      	str	r1, [r7, #8]
 80028f4:	607a      	str	r2, [r7, #4]
 80028f6:	603b      	str	r3, [r7, #0]
 80028f8:	4603      	mov	r3, r0
 80028fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80028fc:	7bfb      	ldrb	r3, [r7, #15]
 80028fe:	4a0a      	ldr	r2, [pc, #40]	; (8002928 <disk_write+0x3c>)
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	4413      	add	r3, r2
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	68dc      	ldr	r4, [r3, #12]
 8002908:	7bfb      	ldrb	r3, [r7, #15]
 800290a:	4a07      	ldr	r2, [pc, #28]	; (8002928 <disk_write+0x3c>)
 800290c:	4413      	add	r3, r2
 800290e:	7a18      	ldrb	r0, [r3, #8]
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	68b9      	ldr	r1, [r7, #8]
 8002916:	47a0      	blx	r4
 8002918:	4603      	mov	r3, r0
 800291a:	75fb      	strb	r3, [r7, #23]
  return res;
 800291c:	7dfb      	ldrb	r3, [r7, #23]
}
 800291e:	4618      	mov	r0, r3
 8002920:	371c      	adds	r7, #28
 8002922:	46bd      	mov	sp, r7
 8002924:	bd90      	pop	{r4, r7, pc}
 8002926:	bf00      	nop
 8002928:	20000310 	.word	0x20000310

0800292c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	4603      	mov	r3, r0
 8002934:	603a      	str	r2, [r7, #0]
 8002936:	71fb      	strb	r3, [r7, #7]
 8002938:	460b      	mov	r3, r1
 800293a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800293c:	79fb      	ldrb	r3, [r7, #7]
 800293e:	4a09      	ldr	r2, [pc, #36]	; (8002964 <disk_ioctl+0x38>)
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	4413      	add	r3, r2
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	79fa      	ldrb	r2, [r7, #7]
 800294a:	4906      	ldr	r1, [pc, #24]	; (8002964 <disk_ioctl+0x38>)
 800294c:	440a      	add	r2, r1
 800294e:	7a10      	ldrb	r0, [r2, #8]
 8002950:	79b9      	ldrb	r1, [r7, #6]
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	4798      	blx	r3
 8002956:	4603      	mov	r3, r0
 8002958:	73fb      	strb	r3, [r7, #15]
  return res;
 800295a:	7bfb      	ldrb	r3, [r7, #15]
}
 800295c:	4618      	mov	r0, r3
 800295e:	3710      	adds	r7, #16
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	20000310 	.word	0x20000310

08002968 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	3301      	adds	r3, #1
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8002978:	89fb      	ldrh	r3, [r7, #14]
 800297a:	021b      	lsls	r3, r3, #8
 800297c:	b21a      	sxth	r2, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	b21b      	sxth	r3, r3
 8002984:	4313      	orrs	r3, r2
 8002986:	b21b      	sxth	r3, r3
 8002988:	81fb      	strh	r3, [r7, #14]
	return rv;
 800298a:	89fb      	ldrh	r3, [r7, #14]
}
 800298c:	4618      	mov	r0, r3
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	bc80      	pop	{r7}
 8002994:	4770      	bx	lr

08002996 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8002996:	b480      	push	{r7}
 8002998:	b085      	sub	sp, #20
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	3303      	adds	r3, #3
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	021b      	lsls	r3, r3, #8
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	3202      	adds	r2, #2
 80029ae:	7812      	ldrb	r2, [r2, #0]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	021b      	lsls	r3, r3, #8
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	3201      	adds	r2, #1
 80029bc:	7812      	ldrb	r2, [r2, #0]
 80029be:	4313      	orrs	r3, r2
 80029c0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	021b      	lsls	r3, r3, #8
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	7812      	ldrb	r2, [r2, #0]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	60fb      	str	r3, [r7, #12]
	return rv;
 80029ce:	68fb      	ldr	r3, [r7, #12]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3714      	adds	r7, #20
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bc80      	pop	{r7}
 80029d8:	4770      	bx	lr

080029da <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80029da:	b480      	push	{r7}
 80029dc:	b083      	sub	sp, #12
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
 80029e2:	460b      	mov	r3, r1
 80029e4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	1c5a      	adds	r2, r3, #1
 80029ea:	607a      	str	r2, [r7, #4]
 80029ec:	887a      	ldrh	r2, [r7, #2]
 80029ee:	b2d2      	uxtb	r2, r2
 80029f0:	701a      	strb	r2, [r3, #0]
 80029f2:	887b      	ldrh	r3, [r7, #2]
 80029f4:	0a1b      	lsrs	r3, r3, #8
 80029f6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	1c5a      	adds	r2, r3, #1
 80029fc:	607a      	str	r2, [r7, #4]
 80029fe:	887a      	ldrh	r2, [r7, #2]
 8002a00:	b2d2      	uxtb	r2, r2
 8002a02:	701a      	strb	r2, [r3, #0]
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bc80      	pop	{r7}
 8002a0c:	4770      	bx	lr

08002a0e <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8002a0e:	b480      	push	{r7}
 8002a10:	b083      	sub	sp, #12
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
 8002a16:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	1c5a      	adds	r2, r3, #1
 8002a1c:	607a      	str	r2, [r7, #4]
 8002a1e:	683a      	ldr	r2, [r7, #0]
 8002a20:	b2d2      	uxtb	r2, r2
 8002a22:	701a      	strb	r2, [r3, #0]
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	0a1b      	lsrs	r3, r3, #8
 8002a28:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	1c5a      	adds	r2, r3, #1
 8002a2e:	607a      	str	r2, [r7, #4]
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	b2d2      	uxtb	r2, r2
 8002a34:	701a      	strb	r2, [r3, #0]
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	0a1b      	lsrs	r3, r3, #8
 8002a3a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	1c5a      	adds	r2, r3, #1
 8002a40:	607a      	str	r2, [r7, #4]
 8002a42:	683a      	ldr	r2, [r7, #0]
 8002a44:	b2d2      	uxtb	r2, r2
 8002a46:	701a      	strb	r2, [r3, #0]
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	0a1b      	lsrs	r3, r3, #8
 8002a4c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	1c5a      	adds	r2, r3, #1
 8002a52:	607a      	str	r2, [r7, #4]
 8002a54:	683a      	ldr	r2, [r7, #0]
 8002a56:	b2d2      	uxtb	r2, r2
 8002a58:	701a      	strb	r2, [r3, #0]
}
 8002a5a:	bf00      	nop
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bc80      	pop	{r7}
 8002a62:	4770      	bx	lr

08002a64 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8002a64:	b480      	push	{r7}
 8002a66:	b087      	sub	sp, #28
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d00d      	beq.n	8002a9a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	1c53      	adds	r3, r2, #1
 8002a82:	613b      	str	r3, [r7, #16]
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	1c59      	adds	r1, r3, #1
 8002a88:	6179      	str	r1, [r7, #20]
 8002a8a:	7812      	ldrb	r2, [r2, #0]
 8002a8c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	3b01      	subs	r3, #1
 8002a92:	607b      	str	r3, [r7, #4]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1f1      	bne.n	8002a7e <mem_cpy+0x1a>
	}
}
 8002a9a:	bf00      	nop
 8002a9c:	371c      	adds	r7, #28
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bc80      	pop	{r7}
 8002aa2:	4770      	bx	lr

08002aa4 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8002aa4:	b480      	push	{r7}
 8002aa6:	b087      	sub	sp, #28
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	1c5a      	adds	r2, r3, #1
 8002ab8:	617a      	str	r2, [r7, #20]
 8002aba:	68ba      	ldr	r2, [r7, #8]
 8002abc:	b2d2      	uxtb	r2, r2
 8002abe:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	607b      	str	r3, [r7, #4]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d1f3      	bne.n	8002ab4 <mem_set+0x10>
}
 8002acc:	bf00      	nop
 8002ace:	bf00      	nop
 8002ad0:	371c      	adds	r7, #28
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bc80      	pop	{r7}
 8002ad6:	4770      	bx	lr

08002ad8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8002ad8:	b480      	push	{r7}
 8002ada:	b089      	sub	sp, #36	; 0x24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	61fb      	str	r3, [r7, #28]
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8002aec:	2300      	movs	r3, #0
 8002aee:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	1c5a      	adds	r2, r3, #1
 8002af4:	61fa      	str	r2, [r7, #28]
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	4619      	mov	r1, r3
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	1c5a      	adds	r2, r3, #1
 8002afe:	61ba      	str	r2, [r7, #24]
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	1acb      	subs	r3, r1, r3
 8002b04:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	3b01      	subs	r3, #1
 8002b0a:	607b      	str	r3, [r7, #4]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d002      	beq.n	8002b18 <mem_cmp+0x40>
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d0eb      	beq.n	8002af0 <mem_cmp+0x18>

	return r;
 8002b18:	697b      	ldr	r3, [r7, #20]
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3724      	adds	r7, #36	; 0x24
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr

08002b24 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8002b2e:	e002      	b.n	8002b36 <chk_chr+0x12>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	3301      	adds	r3, #1
 8002b34:	607b      	str	r3, [r7, #4]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d005      	beq.n	8002b4a <chk_chr+0x26>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	461a      	mov	r2, r3
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d1f2      	bne.n	8002b30 <chk_chr+0xc>
	return *str;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	781b      	ldrb	r3, [r3, #0]
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bc80      	pop	{r7}
 8002b56:	4770      	bx	lr

08002b58 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002b62:	2300      	movs	r3, #0
 8002b64:	60bb      	str	r3, [r7, #8]
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	60fb      	str	r3, [r7, #12]
 8002b6a:	e029      	b.n	8002bc0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8002b6c:	4a26      	ldr	r2, [pc, #152]	; (8002c08 <chk_lock+0xb0>)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	011b      	lsls	r3, r3, #4
 8002b72:	4413      	add	r3, r2
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d01d      	beq.n	8002bb6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8002b7a:	4a23      	ldr	r2, [pc, #140]	; (8002c08 <chk_lock+0xb0>)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	011b      	lsls	r3, r3, #4
 8002b80:	4413      	add	r3, r2
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d116      	bne.n	8002bba <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8002b8c:	4a1e      	ldr	r2, [pc, #120]	; (8002c08 <chk_lock+0xb0>)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	011b      	lsls	r3, r3, #4
 8002b92:	4413      	add	r3, r2
 8002b94:	3304      	adds	r3, #4
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d10c      	bne.n	8002bba <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8002ba0:	4a19      	ldr	r2, [pc, #100]	; (8002c08 <chk_lock+0xb0>)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	011b      	lsls	r3, r3, #4
 8002ba6:	4413      	add	r3, r2
 8002ba8:	3308      	adds	r3, #8
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d102      	bne.n	8002bba <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8002bb4:	e007      	b.n	8002bc6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d9d2      	bls.n	8002b6c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d109      	bne.n	8002be0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d102      	bne.n	8002bd8 <chk_lock+0x80>
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d101      	bne.n	8002bdc <chk_lock+0x84>
 8002bd8:	2300      	movs	r3, #0
 8002bda:	e010      	b.n	8002bfe <chk_lock+0xa6>
 8002bdc:	2312      	movs	r3, #18
 8002bde:	e00e      	b.n	8002bfe <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d108      	bne.n	8002bf8 <chk_lock+0xa0>
 8002be6:	4a08      	ldr	r2, [pc, #32]	; (8002c08 <chk_lock+0xb0>)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	011b      	lsls	r3, r3, #4
 8002bec:	4413      	add	r3, r2
 8002bee:	330c      	adds	r3, #12
 8002bf0:	881b      	ldrh	r3, [r3, #0]
 8002bf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bf6:	d101      	bne.n	8002bfc <chk_lock+0xa4>
 8002bf8:	2310      	movs	r3, #16
 8002bfa:	e000      	b.n	8002bfe <chk_lock+0xa6>
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3714      	adds	r7, #20
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bc80      	pop	{r7}
 8002c06:	4770      	bx	lr
 8002c08:	200000f0 	.word	0x200000f0

08002c0c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8002c12:	2300      	movs	r3, #0
 8002c14:	607b      	str	r3, [r7, #4]
 8002c16:	e002      	b.n	8002c1e <enq_lock+0x12>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	607b      	str	r3, [r7, #4]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d806      	bhi.n	8002c32 <enq_lock+0x26>
 8002c24:	4a08      	ldr	r2, [pc, #32]	; (8002c48 <enq_lock+0x3c>)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	011b      	lsls	r3, r3, #4
 8002c2a:	4413      	add	r3, r2
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1f2      	bne.n	8002c18 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	bf14      	ite	ne
 8002c38:	2301      	movne	r3, #1
 8002c3a:	2300      	moveq	r3, #0
 8002c3c:	b2db      	uxtb	r3, r3
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bc80      	pop	{r7}
 8002c46:	4770      	bx	lr
 8002c48:	200000f0 	.word	0x200000f0

08002c4c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b085      	sub	sp, #20
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8002c56:	2300      	movs	r3, #0
 8002c58:	60fb      	str	r3, [r7, #12]
 8002c5a:	e01f      	b.n	8002c9c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8002c5c:	4a41      	ldr	r2, [pc, #260]	; (8002d64 <inc_lock+0x118>)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	011b      	lsls	r3, r3, #4
 8002c62:	4413      	add	r3, r2
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d113      	bne.n	8002c96 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8002c6e:	4a3d      	ldr	r2, [pc, #244]	; (8002d64 <inc_lock+0x118>)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	011b      	lsls	r3, r3, #4
 8002c74:	4413      	add	r3, r2
 8002c76:	3304      	adds	r3, #4
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d109      	bne.n	8002c96 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8002c82:	4a38      	ldr	r2, [pc, #224]	; (8002d64 <inc_lock+0x118>)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	011b      	lsls	r3, r3, #4
 8002c88:	4413      	add	r3, r2
 8002c8a:	3308      	adds	r3, #8
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d006      	beq.n	8002ca4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	3301      	adds	r3, #1
 8002c9a:	60fb      	str	r3, [r7, #12]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d9dc      	bls.n	8002c5c <inc_lock+0x10>
 8002ca2:	e000      	b.n	8002ca6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8002ca4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d132      	bne.n	8002d12 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8002cac:	2300      	movs	r3, #0
 8002cae:	60fb      	str	r3, [r7, #12]
 8002cb0:	e002      	b.n	8002cb8 <inc_lock+0x6c>
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	60fb      	str	r3, [r7, #12]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d806      	bhi.n	8002ccc <inc_lock+0x80>
 8002cbe:	4a29      	ldr	r2, [pc, #164]	; (8002d64 <inc_lock+0x118>)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	011b      	lsls	r3, r3, #4
 8002cc4:	4413      	add	r3, r2
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1f2      	bne.n	8002cb2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d101      	bne.n	8002cd6 <inc_lock+0x8a>
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	e040      	b.n	8002d58 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	4922      	ldr	r1, [pc, #136]	; (8002d64 <inc_lock+0x118>)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	011b      	lsls	r3, r3, #4
 8002ce0:	440b      	add	r3, r1
 8002ce2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689a      	ldr	r2, [r3, #8]
 8002ce8:	491e      	ldr	r1, [pc, #120]	; (8002d64 <inc_lock+0x118>)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	011b      	lsls	r3, r3, #4
 8002cee:	440b      	add	r3, r1
 8002cf0:	3304      	adds	r3, #4
 8002cf2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	695a      	ldr	r2, [r3, #20]
 8002cf8:	491a      	ldr	r1, [pc, #104]	; (8002d64 <inc_lock+0x118>)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	011b      	lsls	r3, r3, #4
 8002cfe:	440b      	add	r3, r1
 8002d00:	3308      	adds	r3, #8
 8002d02:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8002d04:	4a17      	ldr	r2, [pc, #92]	; (8002d64 <inc_lock+0x118>)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	011b      	lsls	r3, r3, #4
 8002d0a:	4413      	add	r3, r2
 8002d0c:	330c      	adds	r3, #12
 8002d0e:	2200      	movs	r2, #0
 8002d10:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d009      	beq.n	8002d2c <inc_lock+0xe0>
 8002d18:	4a12      	ldr	r2, [pc, #72]	; (8002d64 <inc_lock+0x118>)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	011b      	lsls	r3, r3, #4
 8002d1e:	4413      	add	r3, r2
 8002d20:	330c      	adds	r3, #12
 8002d22:	881b      	ldrh	r3, [r3, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <inc_lock+0xe0>
 8002d28:	2300      	movs	r3, #0
 8002d2a:	e015      	b.n	8002d58 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d108      	bne.n	8002d44 <inc_lock+0xf8>
 8002d32:	4a0c      	ldr	r2, [pc, #48]	; (8002d64 <inc_lock+0x118>)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	011b      	lsls	r3, r3, #4
 8002d38:	4413      	add	r3, r2
 8002d3a:	330c      	adds	r3, #12
 8002d3c:	881b      	ldrh	r3, [r3, #0]
 8002d3e:	3301      	adds	r3, #1
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	e001      	b.n	8002d48 <inc_lock+0xfc>
 8002d44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d48:	4906      	ldr	r1, [pc, #24]	; (8002d64 <inc_lock+0x118>)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	011b      	lsls	r3, r3, #4
 8002d4e:	440b      	add	r3, r1
 8002d50:	330c      	adds	r3, #12
 8002d52:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	3301      	adds	r3, #1
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3714      	adds	r7, #20
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bc80      	pop	{r7}
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	200000f0 	.word	0x200000f0

08002d68 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	3b01      	subs	r3, #1
 8002d74:	607b      	str	r3, [r7, #4]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d825      	bhi.n	8002dc8 <dec_lock+0x60>
		n = Files[i].ctr;
 8002d7c:	4a16      	ldr	r2, [pc, #88]	; (8002dd8 <dec_lock+0x70>)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	011b      	lsls	r3, r3, #4
 8002d82:	4413      	add	r3, r2
 8002d84:	330c      	adds	r3, #12
 8002d86:	881b      	ldrh	r3, [r3, #0]
 8002d88:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8002d8a:	89fb      	ldrh	r3, [r7, #14]
 8002d8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d90:	d101      	bne.n	8002d96 <dec_lock+0x2e>
 8002d92:	2300      	movs	r3, #0
 8002d94:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8002d96:	89fb      	ldrh	r3, [r7, #14]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d002      	beq.n	8002da2 <dec_lock+0x3a>
 8002d9c:	89fb      	ldrh	r3, [r7, #14]
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8002da2:	4a0d      	ldr	r2, [pc, #52]	; (8002dd8 <dec_lock+0x70>)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	011b      	lsls	r3, r3, #4
 8002da8:	4413      	add	r3, r2
 8002daa:	330c      	adds	r3, #12
 8002dac:	89fa      	ldrh	r2, [r7, #14]
 8002dae:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8002db0:	89fb      	ldrh	r3, [r7, #14]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d105      	bne.n	8002dc2 <dec_lock+0x5a>
 8002db6:	4a08      	ldr	r2, [pc, #32]	; (8002dd8 <dec_lock+0x70>)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	011b      	lsls	r3, r3, #4
 8002dbc:	4413      	add	r3, r2
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	737b      	strb	r3, [r7, #13]
 8002dc6:	e001      	b.n	8002dcc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8002dc8:	2302      	movs	r3, #2
 8002dca:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8002dcc:	7b7b      	ldrb	r3, [r7, #13]
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3714      	adds	r7, #20
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bc80      	pop	{r7}
 8002dd6:	4770      	bx	lr
 8002dd8:	200000f0 	.word	0x200000f0

08002ddc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b085      	sub	sp, #20
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8002de4:	2300      	movs	r3, #0
 8002de6:	60fb      	str	r3, [r7, #12]
 8002de8:	e010      	b.n	8002e0c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8002dea:	4a0d      	ldr	r2, [pc, #52]	; (8002e20 <clear_lock+0x44>)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	011b      	lsls	r3, r3, #4
 8002df0:	4413      	add	r3, r2
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d105      	bne.n	8002e06 <clear_lock+0x2a>
 8002dfa:	4a09      	ldr	r2, [pc, #36]	; (8002e20 <clear_lock+0x44>)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	011b      	lsls	r3, r3, #4
 8002e00:	4413      	add	r3, r2
 8002e02:	2200      	movs	r2, #0
 8002e04:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	3301      	adds	r3, #1
 8002e0a:	60fb      	str	r3, [r7, #12]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d9eb      	bls.n	8002dea <clear_lock+0xe>
	}
}
 8002e12:	bf00      	nop
 8002e14:	bf00      	nop
 8002e16:	3714      	adds	r7, #20
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bc80      	pop	{r7}
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	200000f0 	.word	0x200000f0

08002e24 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b086      	sub	sp, #24
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	78db      	ldrb	r3, [r3, #3]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d034      	beq.n	8002ea2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e3c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	7858      	ldrb	r0, [r3, #1]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8002e48:	2301      	movs	r3, #1
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	f7ff fd4e 	bl	80028ec <disk_write>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d002      	beq.n	8002e5c <sync_window+0x38>
			res = FR_DISK_ERR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	73fb      	strb	r3, [r7, #15]
 8002e5a:	e022      	b.n	8002ea2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	1ad2      	subs	r2, r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d217      	bcs.n	8002ea2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	789b      	ldrb	r3, [r3, #2]
 8002e76:	613b      	str	r3, [r7, #16]
 8002e78:	e010      	b.n	8002e9c <sync_window+0x78>
					wsect += fs->fsize;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a1b      	ldr	r3, [r3, #32]
 8002e7e:	697a      	ldr	r2, [r7, #20]
 8002e80:	4413      	add	r3, r2
 8002e82:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	7858      	ldrb	r0, [r3, #1]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8002e8e:	2301      	movs	r3, #1
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	f7ff fd2b 	bl	80028ec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	613b      	str	r3, [r7, #16]
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d8eb      	bhi.n	8002e7a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8002ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3718      	adds	r7, #24
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ebe:	683a      	ldr	r2, [r7, #0]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d01b      	beq.n	8002efc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f7ff ffad 	bl	8002e24 <sync_window>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8002ece:	7bfb      	ldrb	r3, [r7, #15]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d113      	bne.n	8002efc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	7858      	ldrb	r0, [r3, #1]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8002ede:	2301      	movs	r3, #1
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	f7ff fce3 	bl	80028ac <disk_read>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d004      	beq.n	8002ef6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8002eec:	f04f 33ff 	mov.w	r3, #4294967295
 8002ef0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8002efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3710      	adds	r7, #16
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
	...

08002f08 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f7ff ff87 	bl	8002e24 <sync_window>
 8002f16:	4603      	mov	r3, r0
 8002f18:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8002f1a:	7bfb      	ldrb	r3, [r7, #15]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d159      	bne.n	8002fd4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	2b03      	cmp	r3, #3
 8002f26:	d149      	bne.n	8002fbc <sync_fs+0xb4>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	791b      	ldrb	r3, [r3, #4]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d145      	bne.n	8002fbc <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	899b      	ldrh	r3, [r3, #12]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	f7ff fdb1 	bl	8002aa4 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	3338      	adds	r3, #56	; 0x38
 8002f46:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8002f4a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7ff fd43 	bl	80029da <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	3338      	adds	r3, #56	; 0x38
 8002f58:	4921      	ldr	r1, [pc, #132]	; (8002fe0 <sync_fs+0xd8>)
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7ff fd57 	bl	8002a0e <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	3338      	adds	r3, #56	; 0x38
 8002f64:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8002f68:	491e      	ldr	r1, [pc, #120]	; (8002fe4 <sync_fs+0xdc>)
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7ff fd4f 	bl	8002a0e <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	3338      	adds	r3, #56	; 0x38
 8002f74:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	4610      	mov	r0, r2
 8002f80:	f7ff fd45 	bl	8002a0e <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	3338      	adds	r3, #56	; 0x38
 8002f88:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	695b      	ldr	r3, [r3, #20]
 8002f90:	4619      	mov	r1, r3
 8002f92:	4610      	mov	r0, r2
 8002f94:	f7ff fd3b 	bl	8002a0e <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9c:	1c5a      	adds	r2, r3, #1
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	7858      	ldrb	r0, [r3, #1]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	f7ff fc9b 	bl	80028ec <disk_write>
			fs->fsi_flag = 0;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	785b      	ldrb	r3, [r3, #1]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff fcb1 	bl	800292c <disk_ioctl>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <sync_fs+0xcc>
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8002fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	41615252 	.word	0x41615252
 8002fe4:	61417272 	.word	0x61417272

08002fe8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	3b02      	subs	r3, #2
 8002ff6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	69db      	ldr	r3, [r3, #28]
 8002ffc:	3b02      	subs	r3, #2
 8002ffe:	683a      	ldr	r2, [r7, #0]
 8003000:	429a      	cmp	r2, r3
 8003002:	d301      	bcc.n	8003008 <clust2sect+0x20>
 8003004:	2300      	movs	r3, #0
 8003006:	e008      	b.n	800301a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	895b      	ldrh	r3, [r3, #10]
 800300c:	461a      	mov	r2, r3
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	fb03 f202 	mul.w	r2, r3, r2
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003018:	4413      	add	r3, r2
}
 800301a:	4618      	mov	r0, r3
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	bc80      	pop	{r7}
 8003022:	4770      	bx	lr

08003024 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b086      	sub	sp, #24
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d904      	bls.n	8003044 <get_fat+0x20>
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	69db      	ldr	r3, [r3, #28]
 800303e:	683a      	ldr	r2, [r7, #0]
 8003040:	429a      	cmp	r2, r3
 8003042:	d302      	bcc.n	800304a <get_fat+0x26>
		val = 1;	/* Internal error */
 8003044:	2301      	movs	r3, #1
 8003046:	617b      	str	r3, [r7, #20]
 8003048:	e0bb      	b.n	80031c2 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800304a:	f04f 33ff 	mov.w	r3, #4294967295
 800304e:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	2b03      	cmp	r3, #3
 8003056:	f000 8083 	beq.w	8003160 <get_fat+0x13c>
 800305a:	2b03      	cmp	r3, #3
 800305c:	f300 80a7 	bgt.w	80031ae <get_fat+0x18a>
 8003060:	2b01      	cmp	r3, #1
 8003062:	d002      	beq.n	800306a <get_fat+0x46>
 8003064:	2b02      	cmp	r3, #2
 8003066:	d056      	beq.n	8003116 <get_fat+0xf2>
 8003068:	e0a1      	b.n	80031ae <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	60fb      	str	r3, [r7, #12]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	085b      	lsrs	r3, r3, #1
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	4413      	add	r3, r2
 8003076:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	899b      	ldrh	r3, [r3, #12]
 8003080:	4619      	mov	r1, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	fbb3 f3f1 	udiv	r3, r3, r1
 8003088:	4413      	add	r3, r2
 800308a:	4619      	mov	r1, r3
 800308c:	6938      	ldr	r0, [r7, #16]
 800308e:	f7ff ff0d 	bl	8002eac <move_window>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	f040 808d 	bne.w	80031b4 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	1c5a      	adds	r2, r3, #1
 800309e:	60fa      	str	r2, [r7, #12]
 80030a0:	693a      	ldr	r2, [r7, #16]
 80030a2:	8992      	ldrh	r2, [r2, #12]
 80030a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80030a8:	fb01 f202 	mul.w	r2, r1, r2
 80030ac:	1a9b      	subs	r3, r3, r2
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	4413      	add	r3, r2
 80030b2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80030b6:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	899b      	ldrh	r3, [r3, #12]
 80030c0:	4619      	mov	r1, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	fbb3 f3f1 	udiv	r3, r3, r1
 80030c8:	4413      	add	r3, r2
 80030ca:	4619      	mov	r1, r3
 80030cc:	6938      	ldr	r0, [r7, #16]
 80030ce:	f7ff feed 	bl	8002eac <move_window>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d16f      	bne.n	80031b8 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	899b      	ldrh	r3, [r3, #12]
 80030dc:	461a      	mov	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80030e4:	fb01 f202 	mul.w	r2, r1, r2
 80030e8:	1a9b      	subs	r3, r3, r2
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	4413      	add	r3, r2
 80030ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80030f2:	021b      	lsls	r3, r3, #8
 80030f4:	461a      	mov	r2, r3
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	2b00      	cmp	r3, #0
 8003104:	d002      	beq.n	800310c <get_fat+0xe8>
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	091b      	lsrs	r3, r3, #4
 800310a:	e002      	b.n	8003112 <get_fat+0xee>
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003112:	617b      	str	r3, [r7, #20]
			break;
 8003114:	e055      	b.n	80031c2 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	899b      	ldrh	r3, [r3, #12]
 800311e:	085b      	lsrs	r3, r3, #1
 8003120:	b29b      	uxth	r3, r3
 8003122:	4619      	mov	r1, r3
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	fbb3 f3f1 	udiv	r3, r3, r1
 800312a:	4413      	add	r3, r2
 800312c:	4619      	mov	r1, r3
 800312e:	6938      	ldr	r0, [r7, #16]
 8003130:	f7ff febc 	bl	8002eac <move_window>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d140      	bne.n	80031bc <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	8992      	ldrh	r2, [r2, #12]
 8003148:	fbb3 f0f2 	udiv	r0, r3, r2
 800314c:	fb00 f202 	mul.w	r2, r0, r2
 8003150:	1a9b      	subs	r3, r3, r2
 8003152:	440b      	add	r3, r1
 8003154:	4618      	mov	r0, r3
 8003156:	f7ff fc07 	bl	8002968 <ld_word>
 800315a:	4603      	mov	r3, r0
 800315c:	617b      	str	r3, [r7, #20]
			break;
 800315e:	e030      	b.n	80031c2 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	899b      	ldrh	r3, [r3, #12]
 8003168:	089b      	lsrs	r3, r3, #2
 800316a:	b29b      	uxth	r3, r3
 800316c:	4619      	mov	r1, r3
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	fbb3 f3f1 	udiv	r3, r3, r1
 8003174:	4413      	add	r3, r2
 8003176:	4619      	mov	r1, r3
 8003178:	6938      	ldr	r0, [r7, #16]
 800317a:	f7ff fe97 	bl	8002eac <move_window>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d11d      	bne.n	80031c0 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	8992      	ldrh	r2, [r2, #12]
 8003192:	fbb3 f0f2 	udiv	r0, r3, r2
 8003196:	fb00 f202 	mul.w	r2, r0, r2
 800319a:	1a9b      	subs	r3, r3, r2
 800319c:	440b      	add	r3, r1
 800319e:	4618      	mov	r0, r3
 80031a0:	f7ff fbf9 	bl	8002996 <ld_dword>
 80031a4:	4603      	mov	r3, r0
 80031a6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80031aa:	617b      	str	r3, [r7, #20]
			break;
 80031ac:	e009      	b.n	80031c2 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80031ae:	2301      	movs	r3, #1
 80031b0:	617b      	str	r3, [r7, #20]
 80031b2:	e006      	b.n	80031c2 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80031b4:	bf00      	nop
 80031b6:	e004      	b.n	80031c2 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80031b8:	bf00      	nop
 80031ba:	e002      	b.n	80031c2 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80031bc:	bf00      	nop
 80031be:	e000      	b.n	80031c2 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80031c0:	bf00      	nop
		}
	}

	return val;
 80031c2:	697b      	ldr	r3, [r7, #20]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3718      	adds	r7, #24
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80031cc:	b590      	push	{r4, r7, lr}
 80031ce:	b089      	sub	sp, #36	; 0x24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80031d8:	2302      	movs	r3, #2
 80031da:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	f240 8102 	bls.w	80033e8 <put_fat+0x21c>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	69db      	ldr	r3, [r3, #28]
 80031e8:	68ba      	ldr	r2, [r7, #8]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	f080 80fc 	bcs.w	80033e8 <put_fat+0x21c>
		switch (fs->fs_type) {
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	2b03      	cmp	r3, #3
 80031f6:	f000 80b6 	beq.w	8003366 <put_fat+0x19a>
 80031fa:	2b03      	cmp	r3, #3
 80031fc:	f300 80fd 	bgt.w	80033fa <put_fat+0x22e>
 8003200:	2b01      	cmp	r3, #1
 8003202:	d003      	beq.n	800320c <put_fat+0x40>
 8003204:	2b02      	cmp	r3, #2
 8003206:	f000 8083 	beq.w	8003310 <put_fat+0x144>
 800320a:	e0f6      	b.n	80033fa <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	61bb      	str	r3, [r7, #24]
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	085b      	lsrs	r3, r3, #1
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	4413      	add	r3, r2
 8003218:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	899b      	ldrh	r3, [r3, #12]
 8003222:	4619      	mov	r1, r3
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	fbb3 f3f1 	udiv	r3, r3, r1
 800322a:	4413      	add	r3, r2
 800322c:	4619      	mov	r1, r3
 800322e:	68f8      	ldr	r0, [r7, #12]
 8003230:	f7ff fe3c 	bl	8002eac <move_window>
 8003234:	4603      	mov	r3, r0
 8003236:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003238:	7ffb      	ldrb	r3, [r7, #31]
 800323a:	2b00      	cmp	r3, #0
 800323c:	f040 80d6 	bne.w	80033ec <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	1c5a      	adds	r2, r3, #1
 800324a:	61ba      	str	r2, [r7, #24]
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	8992      	ldrh	r2, [r2, #12]
 8003250:	fbb3 f0f2 	udiv	r0, r3, r2
 8003254:	fb00 f202 	mul.w	r2, r0, r2
 8003258:	1a9b      	subs	r3, r3, r2
 800325a:	440b      	add	r3, r1
 800325c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	f003 0301 	and.w	r3, r3, #1
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00d      	beq.n	8003284 <put_fat+0xb8>
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	b25b      	sxtb	r3, r3
 800326e:	f003 030f 	and.w	r3, r3, #15
 8003272:	b25a      	sxtb	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	b2db      	uxtb	r3, r3
 8003278:	011b      	lsls	r3, r3, #4
 800327a:	b25b      	sxtb	r3, r3
 800327c:	4313      	orrs	r3, r2
 800327e:	b25b      	sxtb	r3, r3
 8003280:	b2db      	uxtb	r3, r3
 8003282:	e001      	b.n	8003288 <put_fat+0xbc>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	b2db      	uxtb	r3, r3
 8003288:	697a      	ldr	r2, [r7, #20]
 800328a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2201      	movs	r2, #1
 8003290:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	899b      	ldrh	r3, [r3, #12]
 800329a:	4619      	mov	r1, r3
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	fbb3 f3f1 	udiv	r3, r3, r1
 80032a2:	4413      	add	r3, r2
 80032a4:	4619      	mov	r1, r3
 80032a6:	68f8      	ldr	r0, [r7, #12]
 80032a8:	f7ff fe00 	bl	8002eac <move_window>
 80032ac:	4603      	mov	r3, r0
 80032ae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80032b0:	7ffb      	ldrb	r3, [r7, #31]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f040 809c 	bne.w	80033f0 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	899b      	ldrh	r3, [r3, #12]
 80032c2:	461a      	mov	r2, r3
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	fbb3 f0f2 	udiv	r0, r3, r2
 80032ca:	fb00 f202 	mul.w	r2, r0, r2
 80032ce:	1a9b      	subs	r3, r3, r2
 80032d0:	440b      	add	r3, r1
 80032d2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d003      	beq.n	80032e6 <put_fat+0x11a>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	091b      	lsrs	r3, r3, #4
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	e00e      	b.n	8003304 <put_fat+0x138>
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	b25b      	sxtb	r3, r3
 80032ec:	f023 030f 	bic.w	r3, r3, #15
 80032f0:	b25a      	sxtb	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	0a1b      	lsrs	r3, r3, #8
 80032f6:	b25b      	sxtb	r3, r3
 80032f8:	f003 030f 	and.w	r3, r3, #15
 80032fc:	b25b      	sxtb	r3, r3
 80032fe:	4313      	orrs	r3, r2
 8003300:	b25b      	sxtb	r3, r3
 8003302:	b2db      	uxtb	r3, r3
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2201      	movs	r2, #1
 800330c:	70da      	strb	r2, [r3, #3]
			break;
 800330e:	e074      	b.n	80033fa <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	899b      	ldrh	r3, [r3, #12]
 8003318:	085b      	lsrs	r3, r3, #1
 800331a:	b29b      	uxth	r3, r3
 800331c:	4619      	mov	r1, r3
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	fbb3 f3f1 	udiv	r3, r3, r1
 8003324:	4413      	add	r3, r2
 8003326:	4619      	mov	r1, r3
 8003328:	68f8      	ldr	r0, [r7, #12]
 800332a:	f7ff fdbf 	bl	8002eac <move_window>
 800332e:	4603      	mov	r3, r0
 8003330:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003332:	7ffb      	ldrb	r3, [r7, #31]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d15d      	bne.n	80033f4 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	8992      	ldrh	r2, [r2, #12]
 8003346:	fbb3 f0f2 	udiv	r0, r3, r2
 800334a:	fb00 f202 	mul.w	r2, r0, r2
 800334e:	1a9b      	subs	r3, r3, r2
 8003350:	440b      	add	r3, r1
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	b292      	uxth	r2, r2
 8003356:	4611      	mov	r1, r2
 8003358:	4618      	mov	r0, r3
 800335a:	f7ff fb3e 	bl	80029da <st_word>
			fs->wflag = 1;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2201      	movs	r2, #1
 8003362:	70da      	strb	r2, [r3, #3]
			break;
 8003364:	e049      	b.n	80033fa <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	899b      	ldrh	r3, [r3, #12]
 800336e:	089b      	lsrs	r3, r3, #2
 8003370:	b29b      	uxth	r3, r3
 8003372:	4619      	mov	r1, r3
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	fbb3 f3f1 	udiv	r3, r3, r1
 800337a:	4413      	add	r3, r2
 800337c:	4619      	mov	r1, r3
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f7ff fd94 	bl	8002eac <move_window>
 8003384:	4603      	mov	r3, r0
 8003386:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003388:	7ffb      	ldrb	r3, [r7, #31]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d134      	bne.n	80033f8 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	8992      	ldrh	r2, [r2, #12]
 80033a2:	fbb3 f0f2 	udiv	r0, r3, r2
 80033a6:	fb00 f202 	mul.w	r2, r0, r2
 80033aa:	1a9b      	subs	r3, r3, r2
 80033ac:	440b      	add	r3, r1
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7ff faf1 	bl	8002996 <ld_dword>
 80033b4:	4603      	mov	r3, r0
 80033b6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80033ba:	4323      	orrs	r3, r4
 80033bc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	68fa      	ldr	r2, [r7, #12]
 80033ca:	8992      	ldrh	r2, [r2, #12]
 80033cc:	fbb3 f0f2 	udiv	r0, r3, r2
 80033d0:	fb00 f202 	mul.w	r2, r0, r2
 80033d4:	1a9b      	subs	r3, r3, r2
 80033d6:	440b      	add	r3, r1
 80033d8:	6879      	ldr	r1, [r7, #4]
 80033da:	4618      	mov	r0, r3
 80033dc:	f7ff fb17 	bl	8002a0e <st_dword>
			fs->wflag = 1;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2201      	movs	r2, #1
 80033e4:	70da      	strb	r2, [r3, #3]
			break;
 80033e6:	e008      	b.n	80033fa <put_fat+0x22e>
		}
	}
 80033e8:	bf00      	nop
 80033ea:	e006      	b.n	80033fa <put_fat+0x22e>
			if (res != FR_OK) break;
 80033ec:	bf00      	nop
 80033ee:	e004      	b.n	80033fa <put_fat+0x22e>
			if (res != FR_OK) break;
 80033f0:	bf00      	nop
 80033f2:	e002      	b.n	80033fa <put_fat+0x22e>
			if (res != FR_OK) break;
 80033f4:	bf00      	nop
 80033f6:	e000      	b.n	80033fa <put_fat+0x22e>
			if (res != FR_OK) break;
 80033f8:	bf00      	nop
	return res;
 80033fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3724      	adds	r7, #36	; 0x24
 8003400:	46bd      	mov	sp, r7
 8003402:	bd90      	pop	{r4, r7, pc}

08003404 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b088      	sub	sp, #32
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8003410:	2300      	movs	r3, #0
 8003412:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d904      	bls.n	800342a <remove_chain+0x26>
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	69db      	ldr	r3, [r3, #28]
 8003424:	68ba      	ldr	r2, [r7, #8]
 8003426:	429a      	cmp	r2, r3
 8003428:	d301      	bcc.n	800342e <remove_chain+0x2a>
 800342a:	2302      	movs	r3, #2
 800342c:	e04b      	b.n	80034c6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00c      	beq.n	800344e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8003434:	f04f 32ff 	mov.w	r2, #4294967295
 8003438:	6879      	ldr	r1, [r7, #4]
 800343a:	69b8      	ldr	r0, [r7, #24]
 800343c:	f7ff fec6 	bl	80031cc <put_fat>
 8003440:	4603      	mov	r3, r0
 8003442:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8003444:	7ffb      	ldrb	r3, [r7, #31]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <remove_chain+0x4a>
 800344a:	7ffb      	ldrb	r3, [r7, #31]
 800344c:	e03b      	b.n	80034c6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800344e:	68b9      	ldr	r1, [r7, #8]
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f7ff fde7 	bl	8003024 <get_fat>
 8003456:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d031      	beq.n	80034c2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d101      	bne.n	8003468 <remove_chain+0x64>
 8003464:	2302      	movs	r3, #2
 8003466:	e02e      	b.n	80034c6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800346e:	d101      	bne.n	8003474 <remove_chain+0x70>
 8003470:	2301      	movs	r3, #1
 8003472:	e028      	b.n	80034c6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8003474:	2200      	movs	r2, #0
 8003476:	68b9      	ldr	r1, [r7, #8]
 8003478:	69b8      	ldr	r0, [r7, #24]
 800347a:	f7ff fea7 	bl	80031cc <put_fat>
 800347e:	4603      	mov	r3, r0
 8003480:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8003482:	7ffb      	ldrb	r3, [r7, #31]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d001      	beq.n	800348c <remove_chain+0x88>
 8003488:	7ffb      	ldrb	r3, [r7, #31]
 800348a:	e01c      	b.n	80034c6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	699a      	ldr	r2, [r3, #24]
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	69db      	ldr	r3, [r3, #28]
 8003494:	3b02      	subs	r3, #2
 8003496:	429a      	cmp	r2, r3
 8003498:	d20b      	bcs.n	80034b2 <remove_chain+0xae>
			fs->free_clst++;
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	1c5a      	adds	r2, r3, #1
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	791b      	ldrb	r3, [r3, #4]
 80034a8:	f043 0301 	orr.w	r3, r3, #1
 80034ac:	b2da      	uxtb	r2, r3
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	69db      	ldr	r3, [r3, #28]
 80034ba:	68ba      	ldr	r2, [r7, #8]
 80034bc:	429a      	cmp	r2, r3
 80034be:	d3c6      	bcc.n	800344e <remove_chain+0x4a>
 80034c0:	e000      	b.n	80034c4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80034c2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3720      	adds	r7, #32
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b088      	sub	sp, #32
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
 80034d6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d10d      	bne.n	8003500 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d004      	beq.n	80034fa <create_chain+0x2c>
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	69db      	ldr	r3, [r3, #28]
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d31b      	bcc.n	8003532 <create_chain+0x64>
 80034fa:	2301      	movs	r3, #1
 80034fc:	61bb      	str	r3, [r7, #24]
 80034fe:	e018      	b.n	8003532 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8003500:	6839      	ldr	r1, [r7, #0]
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f7ff fd8e 	bl	8003024 <get_fat>
 8003508:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2b01      	cmp	r3, #1
 800350e:	d801      	bhi.n	8003514 <create_chain+0x46>
 8003510:	2301      	movs	r3, #1
 8003512:	e070      	b.n	80035f6 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800351a:	d101      	bne.n	8003520 <create_chain+0x52>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	e06a      	b.n	80035f6 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	69db      	ldr	r3, [r3, #28]
 8003524:	68fa      	ldr	r2, [r7, #12]
 8003526:	429a      	cmp	r2, r3
 8003528:	d201      	bcs.n	800352e <create_chain+0x60>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	e063      	b.n	80035f6 <create_chain+0x128>
		scl = clst;
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	3301      	adds	r3, #1
 800353a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	69db      	ldr	r3, [r3, #28]
 8003540:	69fa      	ldr	r2, [r7, #28]
 8003542:	429a      	cmp	r2, r3
 8003544:	d307      	bcc.n	8003556 <create_chain+0x88>
				ncl = 2;
 8003546:	2302      	movs	r3, #2
 8003548:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800354a:	69fa      	ldr	r2, [r7, #28]
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	429a      	cmp	r2, r3
 8003550:	d901      	bls.n	8003556 <create_chain+0x88>
 8003552:	2300      	movs	r3, #0
 8003554:	e04f      	b.n	80035f6 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8003556:	69f9      	ldr	r1, [r7, #28]
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f7ff fd63 	bl	8003024 <get_fat>
 800355e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00e      	beq.n	8003584 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2b01      	cmp	r3, #1
 800356a:	d003      	beq.n	8003574 <create_chain+0xa6>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003572:	d101      	bne.n	8003578 <create_chain+0xaa>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	e03e      	b.n	80035f6 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8003578:	69fa      	ldr	r2, [r7, #28]
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	429a      	cmp	r2, r3
 800357e:	d1da      	bne.n	8003536 <create_chain+0x68>
 8003580:	2300      	movs	r3, #0
 8003582:	e038      	b.n	80035f6 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8003584:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8003586:	f04f 32ff 	mov.w	r2, #4294967295
 800358a:	69f9      	ldr	r1, [r7, #28]
 800358c:	6938      	ldr	r0, [r7, #16]
 800358e:	f7ff fe1d 	bl	80031cc <put_fat>
 8003592:	4603      	mov	r3, r0
 8003594:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8003596:	7dfb      	ldrb	r3, [r7, #23]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d109      	bne.n	80035b0 <create_chain+0xe2>
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d006      	beq.n	80035b0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80035a2:	69fa      	ldr	r2, [r7, #28]
 80035a4:	6839      	ldr	r1, [r7, #0]
 80035a6:	6938      	ldr	r0, [r7, #16]
 80035a8:	f7ff fe10 	bl	80031cc <put_fat>
 80035ac:	4603      	mov	r3, r0
 80035ae:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80035b0:	7dfb      	ldrb	r3, [r7, #23]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d116      	bne.n	80035e4 <create_chain+0x116>
		fs->last_clst = ncl;
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	69fa      	ldr	r2, [r7, #28]
 80035ba:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	699a      	ldr	r2, [r3, #24]
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	69db      	ldr	r3, [r3, #28]
 80035c4:	3b02      	subs	r3, #2
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d804      	bhi.n	80035d4 <create_chain+0x106>
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	1e5a      	subs	r2, r3, #1
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	791b      	ldrb	r3, [r3, #4]
 80035d8:	f043 0301 	orr.w	r3, r3, #1
 80035dc:	b2da      	uxtb	r2, r3
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	711a      	strb	r2, [r3, #4]
 80035e2:	e007      	b.n	80035f4 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80035e4:	7dfb      	ldrb	r3, [r7, #23]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d102      	bne.n	80035f0 <create_chain+0x122>
 80035ea:	f04f 33ff 	mov.w	r3, #4294967295
 80035ee:	e000      	b.n	80035f2 <create_chain+0x124>
 80035f0:	2301      	movs	r3, #1
 80035f2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80035f4:	69fb      	ldr	r3, [r7, #28]
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3720      	adds	r7, #32
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80035fe:	b480      	push	{r7}
 8003600:	b087      	sub	sp, #28
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
 8003606:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003612:	3304      	adds	r3, #4
 8003614:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	899b      	ldrh	r3, [r3, #12]
 800361a:	461a      	mov	r2, r3
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	8952      	ldrh	r2, [r2, #10]
 8003626:	fbb3 f3f2 	udiv	r3, r3, r2
 800362a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	1d1a      	adds	r2, r3, #4
 8003630:	613a      	str	r2, [r7, #16]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d101      	bne.n	8003640 <clmt_clust+0x42>
 800363c:	2300      	movs	r3, #0
 800363e:	e010      	b.n	8003662 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8003640:	697a      	ldr	r2, [r7, #20]
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	429a      	cmp	r2, r3
 8003646:	d307      	bcc.n	8003658 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8003648:	697a      	ldr	r2, [r7, #20]
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	617b      	str	r3, [r7, #20]
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	3304      	adds	r3, #4
 8003654:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003656:	e7e9      	b.n	800362c <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8003658:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	4413      	add	r3, r2
}
 8003662:	4618      	mov	r0, r3
 8003664:	371c      	adds	r7, #28
 8003666:	46bd      	mov	sp, r7
 8003668:	bc80      	pop	{r7}
 800366a:	4770      	bx	lr

0800366c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b086      	sub	sp, #24
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003682:	d204      	bcs.n	800368e <dir_sdi+0x22>
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	f003 031f 	and.w	r3, r3, #31
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <dir_sdi+0x26>
		return FR_INT_ERR;
 800368e:	2302      	movs	r3, #2
 8003690:	e071      	b.n	8003776 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	683a      	ldr	r2, [r7, #0]
 8003696:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d106      	bne.n	80036b2 <dir_sdi+0x46>
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d902      	bls.n	80036b2 <dir_sdi+0x46>
		clst = fs->dirbase;
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d10c      	bne.n	80036d2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	095b      	lsrs	r3, r3, #5
 80036bc:	693a      	ldr	r2, [r7, #16]
 80036be:	8912      	ldrh	r2, [r2, #8]
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d301      	bcc.n	80036c8 <dir_sdi+0x5c>
 80036c4:	2302      	movs	r3, #2
 80036c6:	e056      	b.n	8003776 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	61da      	str	r2, [r3, #28]
 80036d0:	e02d      	b.n	800372e <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	895b      	ldrh	r3, [r3, #10]
 80036d6:	461a      	mov	r2, r3
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	899b      	ldrh	r3, [r3, #12]
 80036dc:	fb02 f303 	mul.w	r3, r2, r3
 80036e0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80036e2:	e019      	b.n	8003718 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6979      	ldr	r1, [r7, #20]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7ff fc9b 	bl	8003024 <get_fat>
 80036ee:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f6:	d101      	bne.n	80036fc <dir_sdi+0x90>
 80036f8:	2301      	movs	r3, #1
 80036fa:	e03c      	b.n	8003776 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d904      	bls.n	800370c <dir_sdi+0xa0>
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	69db      	ldr	r3, [r3, #28]
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	429a      	cmp	r2, r3
 800370a:	d301      	bcc.n	8003710 <dir_sdi+0xa4>
 800370c:	2302      	movs	r3, #2
 800370e:	e032      	b.n	8003776 <dir_sdi+0x10a>
			ofs -= csz;
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8003718:	683a      	ldr	r2, [r7, #0]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	429a      	cmp	r2, r3
 800371e:	d2e1      	bcs.n	80036e4 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8003720:	6979      	ldr	r1, [r7, #20]
 8003722:	6938      	ldr	r0, [r7, #16]
 8003724:	f7ff fc60 	bl	8002fe8 <clust2sect>
 8003728:	4602      	mov	r2, r0
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	697a      	ldr	r2, [r7, #20]
 8003732:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	69db      	ldr	r3, [r3, #28]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d101      	bne.n	8003740 <dir_sdi+0xd4>
 800373c:	2302      	movs	r3, #2
 800373e:	e01a      	b.n	8003776 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	69da      	ldr	r2, [r3, #28]
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	899b      	ldrh	r3, [r3, #12]
 8003748:	4619      	mov	r1, r3
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	fbb3 f3f1 	udiv	r3, r3, r1
 8003750:	441a      	add	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	899b      	ldrh	r3, [r3, #12]
 8003760:	461a      	mov	r2, r3
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	fbb3 f0f2 	udiv	r0, r3, r2
 8003768:	fb00 f202 	mul.w	r2, r0, r2
 800376c:	1a9b      	subs	r3, r3, r2
 800376e:	18ca      	adds	r2, r1, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3718      	adds	r7, #24
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b086      	sub	sp, #24
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
 8003786:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	3320      	adds	r3, #32
 8003794:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	69db      	ldr	r3, [r3, #28]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d003      	beq.n	80037a6 <dir_next+0x28>
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037a4:	d301      	bcc.n	80037aa <dir_next+0x2c>
 80037a6:	2304      	movs	r3, #4
 80037a8:	e0bb      	b.n	8003922 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	899b      	ldrh	r3, [r3, #12]
 80037ae:	461a      	mov	r2, r3
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80037b6:	fb01 f202 	mul.w	r2, r1, r2
 80037ba:	1a9b      	subs	r3, r3, r2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f040 809d 	bne.w	80038fc <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	69db      	ldr	r3, [r3, #28]
 80037c6:	1c5a      	adds	r2, r3, #1
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	699b      	ldr	r3, [r3, #24]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d10b      	bne.n	80037ec <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	095b      	lsrs	r3, r3, #5
 80037d8:	68fa      	ldr	r2, [r7, #12]
 80037da:	8912      	ldrh	r2, [r2, #8]
 80037dc:	4293      	cmp	r3, r2
 80037de:	f0c0 808d 	bcc.w	80038fc <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	61da      	str	r2, [r3, #28]
 80037e8:	2304      	movs	r3, #4
 80037ea:	e09a      	b.n	8003922 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	899b      	ldrh	r3, [r3, #12]
 80037f0:	461a      	mov	r2, r3
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	8952      	ldrh	r2, [r2, #10]
 80037fc:	3a01      	subs	r2, #1
 80037fe:	4013      	ands	r3, r2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d17b      	bne.n	80038fc <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	4619      	mov	r1, r3
 800380c:	4610      	mov	r0, r2
 800380e:	f7ff fc09 	bl	8003024 <get_fat>
 8003812:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d801      	bhi.n	800381e <dir_next+0xa0>
 800381a:	2302      	movs	r3, #2
 800381c:	e081      	b.n	8003922 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003824:	d101      	bne.n	800382a <dir_next+0xac>
 8003826:	2301      	movs	r3, #1
 8003828:	e07b      	b.n	8003922 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	69db      	ldr	r3, [r3, #28]
 800382e:	697a      	ldr	r2, [r7, #20]
 8003830:	429a      	cmp	r2, r3
 8003832:	d359      	bcc.n	80038e8 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d104      	bne.n	8003844 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	61da      	str	r2, [r3, #28]
 8003840:	2304      	movs	r3, #4
 8003842:	e06e      	b.n	8003922 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	4619      	mov	r1, r3
 800384c:	4610      	mov	r0, r2
 800384e:	f7ff fe3e 	bl	80034ce <create_chain>
 8003852:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <dir_next+0xe0>
 800385a:	2307      	movs	r3, #7
 800385c:	e061      	b.n	8003922 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d101      	bne.n	8003868 <dir_next+0xea>
 8003864:	2302      	movs	r3, #2
 8003866:	e05c      	b.n	8003922 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800386e:	d101      	bne.n	8003874 <dir_next+0xf6>
 8003870:	2301      	movs	r3, #1
 8003872:	e056      	b.n	8003922 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8003874:	68f8      	ldr	r0, [r7, #12]
 8003876:	f7ff fad5 	bl	8002e24 <sync_window>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d001      	beq.n	8003884 <dir_next+0x106>
 8003880:	2301      	movs	r3, #1
 8003882:	e04e      	b.n	8003922 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	899b      	ldrh	r3, [r3, #12]
 800388e:	461a      	mov	r2, r3
 8003890:	2100      	movs	r1, #0
 8003892:	f7ff f907 	bl	8002aa4 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8003896:	2300      	movs	r3, #0
 8003898:	613b      	str	r3, [r7, #16]
 800389a:	6979      	ldr	r1, [r7, #20]
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	f7ff fba3 	bl	8002fe8 <clust2sect>
 80038a2:	4602      	mov	r2, r0
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	635a      	str	r2, [r3, #52]	; 0x34
 80038a8:	e012      	b.n	80038d0 <dir_next+0x152>
						fs->wflag = 1;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2201      	movs	r2, #1
 80038ae:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80038b0:	68f8      	ldr	r0, [r7, #12]
 80038b2:	f7ff fab7 	bl	8002e24 <sync_window>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d001      	beq.n	80038c0 <dir_next+0x142>
 80038bc:	2301      	movs	r3, #1
 80038be:	e030      	b.n	8003922 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	3301      	adds	r3, #1
 80038c4:	613b      	str	r3, [r7, #16]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ca:	1c5a      	adds	r2, r3, #1
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	635a      	str	r2, [r3, #52]	; 0x34
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	895b      	ldrh	r3, [r3, #10]
 80038d4:	461a      	mov	r2, r3
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	4293      	cmp	r3, r2
 80038da:	d3e6      	bcc.n	80038aa <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	1ad2      	subs	r2, r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80038ee:	6979      	ldr	r1, [r7, #20]
 80038f0:	68f8      	ldr	r0, [r7, #12]
 80038f2:	f7ff fb79 	bl	8002fe8 <clust2sect>
 80038f6:	4602      	mov	r2, r0
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	68ba      	ldr	r2, [r7, #8]
 8003900:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	899b      	ldrh	r3, [r3, #12]
 800390c:	461a      	mov	r2, r3
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	fbb3 f0f2 	udiv	r0, r3, r2
 8003914:	fb00 f202 	mul.w	r2, r0, r2
 8003918:	1a9b      	subs	r3, r3, r2
 800391a:	18ca      	adds	r2, r1, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3718      	adds	r7, #24
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800392a:	b580      	push	{r7, lr}
 800392c:	b086      	sub	sp, #24
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
 8003932:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800393a:	2100      	movs	r1, #0
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f7ff fe95 	bl	800366c <dir_sdi>
 8003942:	4603      	mov	r3, r0
 8003944:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8003946:	7dfb      	ldrb	r3, [r7, #23]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d12b      	bne.n	80039a4 <dir_alloc+0x7a>
		n = 0;
 800394c:	2300      	movs	r3, #0
 800394e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	69db      	ldr	r3, [r3, #28]
 8003954:	4619      	mov	r1, r3
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	f7ff faa8 	bl	8002eac <move_window>
 800395c:	4603      	mov	r3, r0
 800395e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8003960:	7dfb      	ldrb	r3, [r7, #23]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d11d      	bne.n	80039a2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	2be5      	cmp	r3, #229	; 0xe5
 800396e:	d004      	beq.n	800397a <dir_alloc+0x50>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a1b      	ldr	r3, [r3, #32]
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d107      	bne.n	800398a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	3301      	adds	r3, #1
 800397e:	613b      	str	r3, [r7, #16]
 8003980:	693a      	ldr	r2, [r7, #16]
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	429a      	cmp	r2, r3
 8003986:	d102      	bne.n	800398e <dir_alloc+0x64>
 8003988:	e00c      	b.n	80039a4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800398a:	2300      	movs	r3, #0
 800398c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800398e:	2101      	movs	r1, #1
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f7ff fef4 	bl	800377e <dir_next>
 8003996:	4603      	mov	r3, r0
 8003998:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800399a:	7dfb      	ldrb	r3, [r7, #23]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d0d7      	beq.n	8003950 <dir_alloc+0x26>
 80039a0:	e000      	b.n	80039a4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80039a2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80039a4:	7dfb      	ldrb	r3, [r7, #23]
 80039a6:	2b04      	cmp	r3, #4
 80039a8:	d101      	bne.n	80039ae <dir_alloc+0x84>
 80039aa:	2307      	movs	r3, #7
 80039ac:	75fb      	strb	r3, [r7, #23]
	return res;
 80039ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3718      	adds	r7, #24
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	331a      	adds	r3, #26
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7fe ffce 	bl	8002968 <ld_word>
 80039cc:	4603      	mov	r3, r0
 80039ce:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	2b03      	cmp	r3, #3
 80039d6:	d109      	bne.n	80039ec <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	3314      	adds	r3, #20
 80039dc:	4618      	mov	r0, r3
 80039de:	f7fe ffc3 	bl	8002968 <ld_word>
 80039e2:	4603      	mov	r3, r0
 80039e4:	041b      	lsls	r3, r3, #16
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80039ec:	68fb      	ldr	r3, [r7, #12]
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b084      	sub	sp, #16
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	60f8      	str	r0, [r7, #12]
 80039fe:	60b9      	str	r1, [r7, #8]
 8003a00:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	331a      	adds	r3, #26
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	b292      	uxth	r2, r2
 8003a0a:	4611      	mov	r1, r2
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7fe ffe4 	bl	80029da <st_word>
	if (fs->fs_type == FS_FAT32) {
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	2b03      	cmp	r3, #3
 8003a18:	d109      	bne.n	8003a2e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	f103 0214 	add.w	r2, r3, #20
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	0c1b      	lsrs	r3, r3, #16
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	4619      	mov	r1, r3
 8003a28:	4610      	mov	r0, r2
 8003a2a:	f7fe ffd6 	bl	80029da <st_word>
	}
}
 8003a2e:	bf00      	nop
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
	...

08003a38 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8003a38:	b590      	push	{r4, r7, lr}
 8003a3a:	b087      	sub	sp, #28
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	331a      	adds	r3, #26
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7fe ff8e 	bl	8002968 <ld_word>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <cmp_lfn+0x1e>
 8003a52:	2300      	movs	r3, #0
 8003a54:	e059      	b.n	8003b0a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a5e:	1e5a      	subs	r2, r3, #1
 8003a60:	4613      	mov	r3, r2
 8003a62:	005b      	lsls	r3, r3, #1
 8003a64:	4413      	add	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4413      	add	r3, r2
 8003a6a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	81fb      	strh	r3, [r7, #14]
 8003a70:	2300      	movs	r3, #0
 8003a72:	613b      	str	r3, [r7, #16]
 8003a74:	e033      	b.n	8003ade <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8003a76:	4a27      	ldr	r2, [pc, #156]	; (8003b14 <cmp_lfn+0xdc>)
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	461a      	mov	r2, r3
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	4413      	add	r3, r2
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7fe ff6f 	bl	8002968 <ld_word>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8003a8e:	89fb      	ldrh	r3, [r7, #14]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d01a      	beq.n	8003aca <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	2bfe      	cmp	r3, #254	; 0xfe
 8003a98:	d812      	bhi.n	8003ac0 <cmp_lfn+0x88>
 8003a9a:	89bb      	ldrh	r3, [r7, #12]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f002 f85b 	bl	8005b58 <ff_wtoupper>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	461c      	mov	r4, r3
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	1c5a      	adds	r2, r3, #1
 8003aaa:	617a      	str	r2, [r7, #20]
 8003aac:	005b      	lsls	r3, r3, #1
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	4413      	add	r3, r2
 8003ab2:	881b      	ldrh	r3, [r3, #0]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f002 f84f 	bl	8005b58 <ff_wtoupper>
 8003aba:	4603      	mov	r3, r0
 8003abc:	429c      	cmp	r4, r3
 8003abe:	d001      	beq.n	8003ac4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	e022      	b.n	8003b0a <cmp_lfn+0xd2>
			}
			wc = uc;
 8003ac4:	89bb      	ldrh	r3, [r7, #12]
 8003ac6:	81fb      	strh	r3, [r7, #14]
 8003ac8:	e006      	b.n	8003ad8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8003aca:	89bb      	ldrh	r3, [r7, #12]
 8003acc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d001      	beq.n	8003ad8 <cmp_lfn+0xa0>
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	e018      	b.n	8003b0a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	3301      	adds	r3, #1
 8003adc:	613b      	str	r3, [r7, #16]
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	2b0c      	cmp	r3, #12
 8003ae2:	d9c8      	bls.n	8003a76 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00b      	beq.n	8003b08 <cmp_lfn+0xd0>
 8003af0:	89fb      	ldrh	r3, [r7, #14]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d008      	beq.n	8003b08 <cmp_lfn+0xd0>
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	005b      	lsls	r3, r3, #1
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	4413      	add	r3, r2
 8003afe:	881b      	ldrh	r3, [r3, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d001      	beq.n	8003b08 <cmp_lfn+0xd0>
 8003b04:	2300      	movs	r3, #0
 8003b06:	e000      	b.n	8003b0a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8003b08:	2301      	movs	r3, #1
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	371c      	adds	r7, #28
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd90      	pop	{r4, r7, pc}
 8003b12:	bf00      	nop
 8003b14:	08005eb0 	.word	0x08005eb0

08003b18 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b088      	sub	sp, #32
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	4611      	mov	r1, r2
 8003b24:	461a      	mov	r2, r3
 8003b26:	460b      	mov	r3, r1
 8003b28:	71fb      	strb	r3, [r7, #7]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	330d      	adds	r3, #13
 8003b32:	79ba      	ldrb	r2, [r7, #6]
 8003b34:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	330b      	adds	r3, #11
 8003b3a:	220f      	movs	r2, #15
 8003b3c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	330c      	adds	r3, #12
 8003b42:	2200      	movs	r2, #0
 8003b44:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	331a      	adds	r3, #26
 8003b4a:	2100      	movs	r1, #0
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7fe ff44 	bl	80029da <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8003b52:	79fb      	ldrb	r3, [r7, #7]
 8003b54:	1e5a      	subs	r2, r3, #1
 8003b56:	4613      	mov	r3, r2
 8003b58:	005b      	lsls	r3, r3, #1
 8003b5a:	4413      	add	r3, r2
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	4413      	add	r3, r2
 8003b60:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8003b62:	2300      	movs	r3, #0
 8003b64:	82fb      	strh	r3, [r7, #22]
 8003b66:	2300      	movs	r3, #0
 8003b68:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8003b6a:	8afb      	ldrh	r3, [r7, #22]
 8003b6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d007      	beq.n	8003b84 <put_lfn+0x6c>
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	1c5a      	adds	r2, r3, #1
 8003b78:	61fa      	str	r2, [r7, #28]
 8003b7a:	005b      	lsls	r3, r3, #1
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	4413      	add	r3, r2
 8003b80:	881b      	ldrh	r3, [r3, #0]
 8003b82:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8003b84:	4a17      	ldr	r2, [pc, #92]	; (8003be4 <put_lfn+0xcc>)
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	4413      	add	r3, r2
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	4413      	add	r3, r2
 8003b92:	8afa      	ldrh	r2, [r7, #22]
 8003b94:	4611      	mov	r1, r2
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7fe ff1f 	bl	80029da <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8003b9c:	8afb      	ldrh	r3, [r7, #22]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d102      	bne.n	8003ba8 <put_lfn+0x90>
 8003ba2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ba6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	3301      	adds	r3, #1
 8003bac:	61bb      	str	r3, [r7, #24]
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	2b0c      	cmp	r3, #12
 8003bb2:	d9da      	bls.n	8003b6a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8003bb4:	8afb      	ldrh	r3, [r7, #22]
 8003bb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d006      	beq.n	8003bcc <put_lfn+0xb4>
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	68fa      	ldr	r2, [r7, #12]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	881b      	ldrh	r3, [r3, #0]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d103      	bne.n	8003bd4 <put_lfn+0xbc>
 8003bcc:	79fb      	ldrb	r3, [r7, #7]
 8003bce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bd2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	79fa      	ldrb	r2, [r7, #7]
 8003bd8:	701a      	strb	r2, [r3, #0]
}
 8003bda:	bf00      	nop
 8003bdc:	3720      	adds	r7, #32
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	08005eb0 	.word	0x08005eb0

08003be8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b08c      	sub	sp, #48	; 0x30
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
 8003bf4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8003bf6:	220b      	movs	r2, #11
 8003bf8:	68b9      	ldr	r1, [r7, #8]
 8003bfa:	68f8      	ldr	r0, [r7, #12]
 8003bfc:	f7fe ff32 	bl	8002a64 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	2b05      	cmp	r3, #5
 8003c04:	d92b      	bls.n	8003c5e <gen_numname+0x76>
		sr = seq;
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8003c0a:	e022      	b.n	8003c52 <gen_numname+0x6a>
			wc = *lfn++;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	1c9a      	adds	r2, r3, #2
 8003c10:	607a      	str	r2, [r7, #4]
 8003c12:	881b      	ldrh	r3, [r3, #0]
 8003c14:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8003c16:	2300      	movs	r3, #0
 8003c18:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c1a:	e017      	b.n	8003c4c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	005a      	lsls	r2, r3, #1
 8003c20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	4413      	add	r3, r2
 8003c28:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8003c2a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003c2c:	085b      	lsrs	r3, r3, #1
 8003c2e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d005      	beq.n	8003c46 <gen_numname+0x5e>
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8003c40:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8003c44:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8003c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c48:	3301      	adds	r3, #1
 8003c4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c4e:	2b0f      	cmp	r3, #15
 8003c50:	d9e4      	bls.n	8003c1c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	881b      	ldrh	r3, [r3, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1d8      	bne.n	8003c0c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8003c5e:	2307      	movs	r3, #7
 8003c60:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	f003 030f 	and.w	r3, r3, #15
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	3330      	adds	r3, #48	; 0x30
 8003c6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8003c72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003c76:	2b39      	cmp	r3, #57	; 0x39
 8003c78:	d904      	bls.n	8003c84 <gen_numname+0x9c>
 8003c7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003c7e:	3307      	adds	r3, #7
 8003c80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8003c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c86:	1e5a      	subs	r2, r3, #1
 8003c88:	62ba      	str	r2, [r7, #40]	; 0x28
 8003c8a:	3330      	adds	r3, #48	; 0x30
 8003c8c:	443b      	add	r3, r7
 8003c8e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003c92:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	091b      	lsrs	r3, r3, #4
 8003c9a:	603b      	str	r3, [r7, #0]
	} while (seq);
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1df      	bne.n	8003c62 <gen_numname+0x7a>
	ns[i] = '~';
 8003ca2:	f107 0214 	add.w	r2, r7, #20
 8003ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca8:	4413      	add	r3, r2
 8003caa:	227e      	movs	r2, #126	; 0x7e
 8003cac:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8003cae:	2300      	movs	r3, #0
 8003cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8003cb2:	e002      	b.n	8003cba <gen_numname+0xd2>
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8003cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d205      	bcs.n	8003cce <gen_numname+0xe6>
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc6:	4413      	add	r3, r2
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	2b20      	cmp	r3, #32
 8003ccc:	d1f2      	bne.n	8003cb4 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8003cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd0:	2b07      	cmp	r3, #7
 8003cd2:	d807      	bhi.n	8003ce4 <gen_numname+0xfc>
 8003cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd6:	1c5a      	adds	r2, r3, #1
 8003cd8:	62ba      	str	r2, [r7, #40]	; 0x28
 8003cda:	3330      	adds	r3, #48	; 0x30
 8003cdc:	443b      	add	r3, r7
 8003cde:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8003ce2:	e000      	b.n	8003ce6 <gen_numname+0xfe>
 8003ce4:	2120      	movs	r1, #32
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce8:	1c5a      	adds	r2, r3, #1
 8003cea:	627a      	str	r2, [r7, #36]	; 0x24
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	4413      	add	r3, r2
 8003cf0:	460a      	mov	r2, r1
 8003cf2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8003cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf6:	2b07      	cmp	r3, #7
 8003cf8:	d9e9      	bls.n	8003cce <gen_numname+0xe6>
}
 8003cfa:	bf00      	nop
 8003cfc:	bf00      	nop
 8003cfe:	3730      	adds	r7, #48	; 0x30
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b085      	sub	sp, #20
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8003d10:	230b      	movs	r3, #11
 8003d12:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8003d14:	7bfb      	ldrb	r3, [r7, #15]
 8003d16:	b2da      	uxtb	r2, r3
 8003d18:	0852      	lsrs	r2, r2, #1
 8003d1a:	01db      	lsls	r3, r3, #7
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	b2da      	uxtb	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	1c59      	adds	r1, r3, #1
 8003d24:	6079      	str	r1, [r7, #4]
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	4413      	add	r3, r2
 8003d2a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	60bb      	str	r3, [r7, #8]
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1ed      	bne.n	8003d14 <sum_sfn+0x10>
	return sum;
 8003d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3714      	adds	r7, #20
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bc80      	pop	{r7}
 8003d42:	4770      	bx	lr

08003d44 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b086      	sub	sp, #24
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8003d52:	2100      	movs	r1, #0
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f7ff fc89 	bl	800366c <dir_sdi>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8003d5e:	7dfb      	ldrb	r3, [r7, #23]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d001      	beq.n	8003d68 <dir_find+0x24>
 8003d64:	7dfb      	ldrb	r3, [r7, #23]
 8003d66:	e0a9      	b.n	8003ebc <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8003d68:	23ff      	movs	r3, #255	; 0xff
 8003d6a:	753b      	strb	r3, [r7, #20]
 8003d6c:	7d3b      	ldrb	r3, [r7, #20]
 8003d6e:	757b      	strb	r3, [r7, #21]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f04f 32ff 	mov.w	r2, #4294967295
 8003d76:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	69db      	ldr	r3, [r3, #28]
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	6938      	ldr	r0, [r7, #16]
 8003d80:	f7ff f894 	bl	8002eac <move_window>
 8003d84:	4603      	mov	r3, r0
 8003d86:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8003d88:	7dfb      	ldrb	r3, [r7, #23]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	f040 8090 	bne.w	8003eb0 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a1b      	ldr	r3, [r3, #32]
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003d98:	7dbb      	ldrb	r3, [r7, #22]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d102      	bne.n	8003da4 <dir_find+0x60>
 8003d9e:	2304      	movs	r3, #4
 8003da0:	75fb      	strb	r3, [r7, #23]
 8003da2:	e08a      	b.n	8003eba <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a1b      	ldr	r3, [r3, #32]
 8003da8:	330b      	adds	r3, #11
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003db0:	73fb      	strb	r3, [r7, #15]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	7bfa      	ldrb	r2, [r7, #15]
 8003db6:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8003db8:	7dbb      	ldrb	r3, [r7, #22]
 8003dba:	2be5      	cmp	r3, #229	; 0xe5
 8003dbc:	d007      	beq.n	8003dce <dir_find+0x8a>
 8003dbe:	7bfb      	ldrb	r3, [r7, #15]
 8003dc0:	f003 0308 	and.w	r3, r3, #8
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d009      	beq.n	8003ddc <dir_find+0x98>
 8003dc8:	7bfb      	ldrb	r3, [r7, #15]
 8003dca:	2b0f      	cmp	r3, #15
 8003dcc:	d006      	beq.n	8003ddc <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8003dce:	23ff      	movs	r3, #255	; 0xff
 8003dd0:	757b      	strb	r3, [r7, #21]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8003dd8:	631a      	str	r2, [r3, #48]	; 0x30
 8003dda:	e05e      	b.n	8003e9a <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8003ddc:	7bfb      	ldrb	r3, [r7, #15]
 8003dde:	2b0f      	cmp	r3, #15
 8003de0:	d136      	bne.n	8003e50 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d154      	bne.n	8003e9a <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8003df0:	7dbb      	ldrb	r3, [r7, #22]
 8003df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00d      	beq.n	8003e16 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	7b5b      	ldrb	r3, [r3, #13]
 8003e00:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8003e02:	7dbb      	ldrb	r3, [r7, #22]
 8003e04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e08:	75bb      	strb	r3, [r7, #22]
 8003e0a:	7dbb      	ldrb	r3, [r7, #22]
 8003e0c:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	695a      	ldr	r2, [r3, #20]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8003e16:	7dba      	ldrb	r2, [r7, #22]
 8003e18:	7d7b      	ldrb	r3, [r7, #21]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d115      	bne.n	8003e4a <dir_find+0x106>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	330d      	adds	r3, #13
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	7d3a      	ldrb	r2, [r7, #20]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d10e      	bne.n	8003e4a <dir_find+0x106>
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	691a      	ldr	r2, [r3, #16]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a1b      	ldr	r3, [r3, #32]
 8003e34:	4619      	mov	r1, r3
 8003e36:	4610      	mov	r0, r2
 8003e38:	f7ff fdfe 	bl	8003a38 <cmp_lfn>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d003      	beq.n	8003e4a <dir_find+0x106>
 8003e42:	7d7b      	ldrb	r3, [r7, #21]
 8003e44:	3b01      	subs	r3, #1
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	e000      	b.n	8003e4c <dir_find+0x108>
 8003e4a:	23ff      	movs	r3, #255	; 0xff
 8003e4c:	757b      	strb	r3, [r7, #21]
 8003e4e:	e024      	b.n	8003e9a <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8003e50:	7d7b      	ldrb	r3, [r7, #21]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d109      	bne.n	8003e6a <dir_find+0x126>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7ff ff52 	bl	8003d04 <sum_sfn>
 8003e60:	4603      	mov	r3, r0
 8003e62:	461a      	mov	r2, r3
 8003e64:	7d3b      	ldrb	r3, [r7, #20]
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d024      	beq.n	8003eb4 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003e70:	f003 0301 	and.w	r3, r3, #1
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d10a      	bne.n	8003e8e <dir_find+0x14a>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a18      	ldr	r0, [r3, #32]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	3324      	adds	r3, #36	; 0x24
 8003e80:	220b      	movs	r2, #11
 8003e82:	4619      	mov	r1, r3
 8003e84:	f7fe fe28 	bl	8002ad8 <mem_cmp>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d014      	beq.n	8003eb8 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8003e8e:	23ff      	movs	r3, #255	; 0xff
 8003e90:	757b      	strb	r3, [r7, #21]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f04f 32ff 	mov.w	r2, #4294967295
 8003e98:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8003e9a:	2100      	movs	r1, #0
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f7ff fc6e 	bl	800377e <dir_next>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8003ea6:	7dfb      	ldrb	r3, [r7, #23]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	f43f af65 	beq.w	8003d78 <dir_find+0x34>
 8003eae:	e004      	b.n	8003eba <dir_find+0x176>
		if (res != FR_OK) break;
 8003eb0:	bf00      	nop
 8003eb2:	e002      	b.n	8003eba <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8003eb4:	bf00      	nop
 8003eb6:	e000      	b.n	8003eba <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8003eb8:	bf00      	nop

	return res;
 8003eba:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3718      	adds	r7, #24
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b08c      	sub	sp, #48	; 0x30
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003ed8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d001      	beq.n	8003ee4 <dir_register+0x20>
 8003ee0:	2306      	movs	r3, #6
 8003ee2:	e0e0      	b.n	80040a6 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ee8:	e002      	b.n	8003ef0 <dir_register+0x2c>
 8003eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eec:	3301      	adds	r3, #1
 8003eee:	627b      	str	r3, [r7, #36]	; 0x24
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	691a      	ldr	r2, [r3, #16]
 8003ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef6:	005b      	lsls	r3, r3, #1
 8003ef8:	4413      	add	r3, r2
 8003efa:	881b      	ldrh	r3, [r3, #0]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1f4      	bne.n	8003eea <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8003f06:	f107 030c 	add.w	r3, r7, #12
 8003f0a:	220c      	movs	r2, #12
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7fe fda9 	bl	8002a64 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8003f12:	7dfb      	ldrb	r3, [r7, #23]
 8003f14:	f003 0301 	and.w	r3, r3, #1
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d032      	beq.n	8003f82 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2240      	movs	r2, #64	; 0x40
 8003f20:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8003f24:	2301      	movs	r3, #1
 8003f26:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f28:	e016      	b.n	8003f58 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	691a      	ldr	r2, [r3, #16]
 8003f34:	f107 010c 	add.w	r1, r7, #12
 8003f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f3a:	f7ff fe55 	bl	8003be8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f7ff ff00 	bl	8003d44 <dir_find>
 8003f44:	4603      	mov	r3, r0
 8003f46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8003f4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d106      	bne.n	8003f60 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8003f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f54:	3301      	adds	r3, #1
 8003f56:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f5a:	2b63      	cmp	r3, #99	; 0x63
 8003f5c:	d9e5      	bls.n	8003f2a <dir_register+0x66>
 8003f5e:	e000      	b.n	8003f62 <dir_register+0x9e>
			if (res != FR_OK) break;
 8003f60:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8003f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f64:	2b64      	cmp	r3, #100	; 0x64
 8003f66:	d101      	bne.n	8003f6c <dir_register+0xa8>
 8003f68:	2307      	movs	r3, #7
 8003f6a:	e09c      	b.n	80040a6 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8003f6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003f70:	2b04      	cmp	r3, #4
 8003f72:	d002      	beq.n	8003f7a <dir_register+0xb6>
 8003f74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003f78:	e095      	b.n	80040a6 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8003f7a:	7dfa      	ldrb	r2, [r7, #23]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8003f82:	7dfb      	ldrb	r3, [r7, #23]
 8003f84:	f003 0302 	and.w	r3, r3, #2
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d007      	beq.n	8003f9c <dir_register+0xd8>
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8e:	330c      	adds	r3, #12
 8003f90:	4a47      	ldr	r2, [pc, #284]	; (80040b0 <dir_register+0x1ec>)
 8003f92:	fba2 2303 	umull	r2, r3, r2, r3
 8003f96:	089b      	lsrs	r3, r3, #2
 8003f98:	3301      	adds	r3, #1
 8003f9a:	e000      	b.n	8003f9e <dir_register+0xda>
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8003fa0:	6a39      	ldr	r1, [r7, #32]
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f7ff fcc1 	bl	800392a <dir_alloc>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8003fae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d148      	bne.n	8004048 <dir_register+0x184>
 8003fb6:	6a3b      	ldr	r3, [r7, #32]
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	623b      	str	r3, [r7, #32]
 8003fbc:	6a3b      	ldr	r3, [r7, #32]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d042      	beq.n	8004048 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	695a      	ldr	r2, [r3, #20]
 8003fc6:	6a3b      	ldr	r3, [r7, #32]
 8003fc8:	015b      	lsls	r3, r3, #5
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	4619      	mov	r1, r3
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f7ff fb4c 	bl	800366c <dir_sdi>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8003fda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d132      	bne.n	8004048 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	3324      	adds	r3, #36	; 0x24
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7ff fe8c 	bl	8003d04 <sum_sfn>
 8003fec:	4603      	mov	r3, r0
 8003fee:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	69db      	ldr	r3, [r3, #28]
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	69f8      	ldr	r0, [r7, #28]
 8003ff8:	f7fe ff58 	bl	8002eac <move_window>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8004002:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004006:	2b00      	cmp	r3, #0
 8004008:	d11d      	bne.n	8004046 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	6918      	ldr	r0, [r3, #16]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a19      	ldr	r1, [r3, #32]
 8004012:	6a3b      	ldr	r3, [r7, #32]
 8004014:	b2da      	uxtb	r2, r3
 8004016:	7efb      	ldrb	r3, [r7, #27]
 8004018:	f7ff fd7e 	bl	8003b18 <put_lfn>
				fs->wflag = 1;
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	2201      	movs	r2, #1
 8004020:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8004022:	2100      	movs	r1, #0
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f7ff fbaa 	bl	800377e <dir_next>
 800402a:	4603      	mov	r3, r0
 800402c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8004030:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004034:	2b00      	cmp	r3, #0
 8004036:	d107      	bne.n	8004048 <dir_register+0x184>
 8004038:	6a3b      	ldr	r3, [r7, #32]
 800403a:	3b01      	subs	r3, #1
 800403c:	623b      	str	r3, [r7, #32]
 800403e:	6a3b      	ldr	r3, [r7, #32]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1d5      	bne.n	8003ff0 <dir_register+0x12c>
 8004044:	e000      	b.n	8004048 <dir_register+0x184>
				if (res != FR_OK) break;
 8004046:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8004048:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800404c:	2b00      	cmp	r3, #0
 800404e:	d128      	bne.n	80040a2 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	69db      	ldr	r3, [r3, #28]
 8004054:	4619      	mov	r1, r3
 8004056:	69f8      	ldr	r0, [r7, #28]
 8004058:	f7fe ff28 	bl	8002eac <move_window>
 800405c:	4603      	mov	r3, r0
 800405e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8004062:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004066:	2b00      	cmp	r3, #0
 8004068:	d11b      	bne.n	80040a2 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	2220      	movs	r2, #32
 8004070:	2100      	movs	r1, #0
 8004072:	4618      	mov	r0, r3
 8004074:	f7fe fd16 	bl	8002aa4 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a18      	ldr	r0, [r3, #32]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	3324      	adds	r3, #36	; 0x24
 8004080:	220b      	movs	r2, #11
 8004082:	4619      	mov	r1, r3
 8004084:	f7fe fcee 	bl	8002a64 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a1b      	ldr	r3, [r3, #32]
 8004092:	330c      	adds	r3, #12
 8004094:	f002 0218 	and.w	r2, r2, #24
 8004098:	b2d2      	uxtb	r2, r2
 800409a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	2201      	movs	r2, #1
 80040a0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80040a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3730      	adds	r7, #48	; 0x30
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	4ec4ec4f 	.word	0x4ec4ec4f

080040b4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b08a      	sub	sp, #40	; 0x28
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	613b      	str	r3, [r7, #16]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	60fb      	str	r3, [r7, #12]
 80040cc:	2300      	movs	r3, #0
 80040ce:	617b      	str	r3, [r7, #20]
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	1c5a      	adds	r2, r3, #1
 80040d8:	61ba      	str	r2, [r7, #24]
 80040da:	693a      	ldr	r2, [r7, #16]
 80040dc:	4413      	add	r3, r2
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80040e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80040e4:	2b1f      	cmp	r3, #31
 80040e6:	d940      	bls.n	800416a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80040e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80040ea:	2b2f      	cmp	r3, #47	; 0x2f
 80040ec:	d006      	beq.n	80040fc <create_name+0x48>
 80040ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80040f0:	2b5c      	cmp	r3, #92	; 0x5c
 80040f2:	d110      	bne.n	8004116 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80040f4:	e002      	b.n	80040fc <create_name+0x48>
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	3301      	adds	r3, #1
 80040fa:	61bb      	str	r3, [r7, #24]
 80040fc:	693a      	ldr	r2, [r7, #16]
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	4413      	add	r3, r2
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	2b2f      	cmp	r3, #47	; 0x2f
 8004106:	d0f6      	beq.n	80040f6 <create_name+0x42>
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	4413      	add	r3, r2
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	2b5c      	cmp	r3, #92	; 0x5c
 8004112:	d0f0      	beq.n	80040f6 <create_name+0x42>
			break;
 8004114:	e02a      	b.n	800416c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	2bfe      	cmp	r3, #254	; 0xfe
 800411a:	d901      	bls.n	8004120 <create_name+0x6c>
 800411c:	2306      	movs	r3, #6
 800411e:	e17d      	b.n	800441c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8004120:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004122:	b2db      	uxtb	r3, r3
 8004124:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8004126:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004128:	2101      	movs	r1, #1
 800412a:	4618      	mov	r0, r3
 800412c:	f001 fcda 	bl	8005ae4 <ff_convert>
 8004130:	4603      	mov	r3, r0
 8004132:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8004134:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004136:	2b00      	cmp	r3, #0
 8004138:	d101      	bne.n	800413e <create_name+0x8a>
 800413a:	2306      	movs	r3, #6
 800413c:	e16e      	b.n	800441c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800413e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004140:	2b7f      	cmp	r3, #127	; 0x7f
 8004142:	d809      	bhi.n	8004158 <create_name+0xa4>
 8004144:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004146:	4619      	mov	r1, r3
 8004148:	488d      	ldr	r0, [pc, #564]	; (8004380 <create_name+0x2cc>)
 800414a:	f7fe fceb 	bl	8002b24 <chk_chr>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d001      	beq.n	8004158 <create_name+0xa4>
 8004154:	2306      	movs	r3, #6
 8004156:	e161      	b.n	800441c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	1c5a      	adds	r2, r3, #1
 800415c:	617a      	str	r2, [r7, #20]
 800415e:	005b      	lsls	r3, r3, #1
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	4413      	add	r3, r2
 8004164:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004166:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8004168:	e7b4      	b.n	80040d4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800416a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	441a      	add	r2, r3
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8004176:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004178:	2b1f      	cmp	r3, #31
 800417a:	d801      	bhi.n	8004180 <create_name+0xcc>
 800417c:	2304      	movs	r3, #4
 800417e:	e000      	b.n	8004182 <create_name+0xce>
 8004180:	2300      	movs	r3, #0
 8004182:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8004186:	e011      	b.n	80041ac <create_name+0xf8>
		w = lfn[di - 1];
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800418e:	3b01      	subs	r3, #1
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	4413      	add	r3, r2
 8004196:	881b      	ldrh	r3, [r3, #0]
 8004198:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800419a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800419c:	2b20      	cmp	r3, #32
 800419e:	d002      	beq.n	80041a6 <create_name+0xf2>
 80041a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80041a2:	2b2e      	cmp	r3, #46	; 0x2e
 80041a4:	d106      	bne.n	80041b4 <create_name+0x100>
		di--;
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	3b01      	subs	r3, #1
 80041aa:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1ea      	bne.n	8004188 <create_name+0xd4>
 80041b2:	e000      	b.n	80041b6 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80041b4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	005b      	lsls	r3, r3, #1
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	4413      	add	r3, r2
 80041be:	2200      	movs	r2, #0
 80041c0:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d101      	bne.n	80041cc <create_name+0x118>
 80041c8:	2306      	movs	r3, #6
 80041ca:	e127      	b.n	800441c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	3324      	adds	r3, #36	; 0x24
 80041d0:	220b      	movs	r2, #11
 80041d2:	2120      	movs	r1, #32
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7fe fc65 	bl	8002aa4 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80041da:	2300      	movs	r3, #0
 80041dc:	61bb      	str	r3, [r7, #24]
 80041de:	e002      	b.n	80041e6 <create_name+0x132>
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	3301      	adds	r3, #1
 80041e4:	61bb      	str	r3, [r7, #24]
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	005b      	lsls	r3, r3, #1
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	4413      	add	r3, r2
 80041ee:	881b      	ldrh	r3, [r3, #0]
 80041f0:	2b20      	cmp	r3, #32
 80041f2:	d0f5      	beq.n	80041e0 <create_name+0x12c>
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	005b      	lsls	r3, r3, #1
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	4413      	add	r3, r2
 80041fc:	881b      	ldrh	r3, [r3, #0]
 80041fe:	2b2e      	cmp	r3, #46	; 0x2e
 8004200:	d0ee      	beq.n	80041e0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d009      	beq.n	800421c <create_name+0x168>
 8004208:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800420c:	f043 0303 	orr.w	r3, r3, #3
 8004210:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8004214:	e002      	b.n	800421c <create_name+0x168>
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	3b01      	subs	r3, #1
 800421a:	617b      	str	r3, [r7, #20]
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d009      	beq.n	8004236 <create_name+0x182>
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004228:	3b01      	subs	r3, #1
 800422a:	005b      	lsls	r3, r3, #1
 800422c:	68fa      	ldr	r2, [r7, #12]
 800422e:	4413      	add	r3, r2
 8004230:	881b      	ldrh	r3, [r3, #0]
 8004232:	2b2e      	cmp	r3, #46	; 0x2e
 8004234:	d1ef      	bne.n	8004216 <create_name+0x162>

	i = b = 0; ni = 8;
 8004236:	2300      	movs	r3, #0
 8004238:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800423c:	2300      	movs	r3, #0
 800423e:	623b      	str	r3, [r7, #32]
 8004240:	2308      	movs	r3, #8
 8004242:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	1c5a      	adds	r2, r3, #1
 8004248:	61ba      	str	r2, [r7, #24]
 800424a:	005b      	lsls	r3, r3, #1
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	4413      	add	r3, r2
 8004250:	881b      	ldrh	r3, [r3, #0]
 8004252:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8004254:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004256:	2b00      	cmp	r3, #0
 8004258:	f000 8090 	beq.w	800437c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800425c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800425e:	2b20      	cmp	r3, #32
 8004260:	d006      	beq.n	8004270 <create_name+0x1bc>
 8004262:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004264:	2b2e      	cmp	r3, #46	; 0x2e
 8004266:	d10a      	bne.n	800427e <create_name+0x1ca>
 8004268:	69ba      	ldr	r2, [r7, #24]
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	429a      	cmp	r2, r3
 800426e:	d006      	beq.n	800427e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8004270:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004274:	f043 0303 	orr.w	r3, r3, #3
 8004278:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800427c:	e07d      	b.n	800437a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800427e:	6a3a      	ldr	r2, [r7, #32]
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	429a      	cmp	r2, r3
 8004284:	d203      	bcs.n	800428e <create_name+0x1da>
 8004286:	69ba      	ldr	r2, [r7, #24]
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	429a      	cmp	r2, r3
 800428c:	d123      	bne.n	80042d6 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	2b0b      	cmp	r3, #11
 8004292:	d106      	bne.n	80042a2 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8004294:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004298:	f043 0303 	orr.w	r3, r3, #3
 800429c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80042a0:	e075      	b.n	800438e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80042a2:	69ba      	ldr	r2, [r7, #24]
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d005      	beq.n	80042b6 <create_name+0x202>
 80042aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042ae:	f043 0303 	orr.w	r3, r3, #3
 80042b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80042b6:	69ba      	ldr	r2, [r7, #24]
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d866      	bhi.n	800438c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	61bb      	str	r3, [r7, #24]
 80042c2:	2308      	movs	r3, #8
 80042c4:	623b      	str	r3, [r7, #32]
 80042c6:	230b      	movs	r3, #11
 80042c8:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80042ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80042d4:	e051      	b.n	800437a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80042d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80042d8:	2b7f      	cmp	r3, #127	; 0x7f
 80042da:	d914      	bls.n	8004306 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80042dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80042de:	2100      	movs	r1, #0
 80042e0:	4618      	mov	r0, r3
 80042e2:	f001 fbff 	bl	8005ae4 <ff_convert>
 80042e6:	4603      	mov	r3, r0
 80042e8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80042ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d004      	beq.n	80042fa <create_name+0x246>
 80042f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80042f2:	3b80      	subs	r3, #128	; 0x80
 80042f4:	4a23      	ldr	r2, [pc, #140]	; (8004384 <create_name+0x2d0>)
 80042f6:	5cd3      	ldrb	r3, [r2, r3]
 80042f8:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80042fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042fe:	f043 0302 	orr.w	r3, r3, #2
 8004302:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8004306:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004308:	2b00      	cmp	r3, #0
 800430a:	d007      	beq.n	800431c <create_name+0x268>
 800430c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800430e:	4619      	mov	r1, r3
 8004310:	481d      	ldr	r0, [pc, #116]	; (8004388 <create_name+0x2d4>)
 8004312:	f7fe fc07 	bl	8002b24 <chk_chr>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d008      	beq.n	800432e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800431c:	235f      	movs	r3, #95	; 0x5f
 800431e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004320:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004324:	f043 0303 	orr.w	r3, r3, #3
 8004328:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800432c:	e01b      	b.n	8004366 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800432e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004330:	2b40      	cmp	r3, #64	; 0x40
 8004332:	d909      	bls.n	8004348 <create_name+0x294>
 8004334:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004336:	2b5a      	cmp	r3, #90	; 0x5a
 8004338:	d806      	bhi.n	8004348 <create_name+0x294>
					b |= 2;
 800433a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800433e:	f043 0302 	orr.w	r3, r3, #2
 8004342:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004346:	e00e      	b.n	8004366 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8004348:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800434a:	2b60      	cmp	r3, #96	; 0x60
 800434c:	d90b      	bls.n	8004366 <create_name+0x2b2>
 800434e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004350:	2b7a      	cmp	r3, #122	; 0x7a
 8004352:	d808      	bhi.n	8004366 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8004354:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004358:	f043 0301 	orr.w	r3, r3, #1
 800435c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004360:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004362:	3b20      	subs	r3, #32
 8004364:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8004366:	6a3b      	ldr	r3, [r7, #32]
 8004368:	1c5a      	adds	r2, r3, #1
 800436a:	623a      	str	r2, [r7, #32]
 800436c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800436e:	b2d1      	uxtb	r1, r2
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	4413      	add	r3, r2
 8004374:	460a      	mov	r2, r1
 8004376:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800437a:	e763      	b.n	8004244 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800437c:	bf00      	nop
 800437e:	e006      	b.n	800438e <create_name+0x2da>
 8004380:	08005dc4 	.word	0x08005dc4
 8004384:	08005e30 	.word	0x08005e30
 8004388:	08005dd0 	.word	0x08005dd0
			if (si > di) break;			/* No extension */
 800438c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004394:	2be5      	cmp	r3, #229	; 0xe5
 8004396:	d103      	bne.n	80043a0 <create_name+0x2ec>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2205      	movs	r2, #5
 800439c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	2b08      	cmp	r3, #8
 80043a4:	d104      	bne.n	80043b0 <create_name+0x2fc>
 80043a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80043b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80043b4:	f003 030c 	and.w	r3, r3, #12
 80043b8:	2b0c      	cmp	r3, #12
 80043ba:	d005      	beq.n	80043c8 <create_name+0x314>
 80043bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80043c0:	f003 0303 	and.w	r3, r3, #3
 80043c4:	2b03      	cmp	r3, #3
 80043c6:	d105      	bne.n	80043d4 <create_name+0x320>
 80043c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80043cc:	f043 0302 	orr.w	r3, r3, #2
 80043d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80043d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80043d8:	f003 0302 	and.w	r3, r3, #2
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d117      	bne.n	8004410 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80043e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80043e4:	f003 0303 	and.w	r3, r3, #3
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d105      	bne.n	80043f8 <create_name+0x344>
 80043ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80043f0:	f043 0310 	orr.w	r3, r3, #16
 80043f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80043f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80043fc:	f003 030c 	and.w	r3, r3, #12
 8004400:	2b04      	cmp	r3, #4
 8004402:	d105      	bne.n	8004410 <create_name+0x35c>
 8004404:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004408:	f043 0308 	orr.w	r3, r3, #8
 800440c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004416:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800441a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800441c:	4618      	mov	r0, r3
 800441e:	3728      	adds	r7, #40	; 0x28
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b086      	sub	sp, #24
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8004438:	e002      	b.n	8004440 <follow_path+0x1c>
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	3301      	adds	r3, #1
 800443e:	603b      	str	r3, [r7, #0]
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	2b2f      	cmp	r3, #47	; 0x2f
 8004446:	d0f8      	beq.n	800443a <follow_path+0x16>
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	2b5c      	cmp	r3, #92	; 0x5c
 800444e:	d0f4      	beq.n	800443a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	2200      	movs	r2, #0
 8004454:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	2b1f      	cmp	r3, #31
 800445c:	d80a      	bhi.n	8004474 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2280      	movs	r2, #128	; 0x80
 8004462:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8004466:	2100      	movs	r1, #0
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f7ff f8ff 	bl	800366c <dir_sdi>
 800446e:	4603      	mov	r3, r0
 8004470:	75fb      	strb	r3, [r7, #23]
 8004472:	e048      	b.n	8004506 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004474:	463b      	mov	r3, r7
 8004476:	4619      	mov	r1, r3
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f7ff fe1b 	bl	80040b4 <create_name>
 800447e:	4603      	mov	r3, r0
 8004480:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004482:	7dfb      	ldrb	r3, [r7, #23]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d139      	bne.n	80044fc <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f7ff fc5b 	bl	8003d44 <dir_find>
 800448e:	4603      	mov	r3, r0
 8004490:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004498:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800449a:	7dfb      	ldrb	r3, [r7, #23]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00a      	beq.n	80044b6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80044a0:	7dfb      	ldrb	r3, [r7, #23]
 80044a2:	2b04      	cmp	r3, #4
 80044a4:	d12c      	bne.n	8004500 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80044a6:	7afb      	ldrb	r3, [r7, #11]
 80044a8:	f003 0304 	and.w	r3, r3, #4
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d127      	bne.n	8004500 <follow_path+0xdc>
 80044b0:	2305      	movs	r3, #5
 80044b2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80044b4:	e024      	b.n	8004500 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80044b6:	7afb      	ldrb	r3, [r7, #11]
 80044b8:	f003 0304 	and.w	r3, r3, #4
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d121      	bne.n	8004504 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	799b      	ldrb	r3, [r3, #6]
 80044c4:	f003 0310 	and.w	r3, r3, #16
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d102      	bne.n	80044d2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80044cc:	2305      	movs	r3, #5
 80044ce:	75fb      	strb	r3, [r7, #23]
 80044d0:	e019      	b.n	8004506 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	695b      	ldr	r3, [r3, #20]
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	8992      	ldrh	r2, [r2, #12]
 80044e0:	fbb3 f0f2 	udiv	r0, r3, r2
 80044e4:	fb00 f202 	mul.w	r2, r0, r2
 80044e8:	1a9b      	subs	r3, r3, r2
 80044ea:	440b      	add	r3, r1
 80044ec:	4619      	mov	r1, r3
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f7ff fa62 	bl	80039b8 <ld_clust>
 80044f4:	4602      	mov	r2, r0
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80044fa:	e7bb      	b.n	8004474 <follow_path+0x50>
			if (res != FR_OK) break;
 80044fc:	bf00      	nop
 80044fe:	e002      	b.n	8004506 <follow_path+0xe2>
				break;
 8004500:	bf00      	nop
 8004502:	e000      	b.n	8004506 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004504:	bf00      	nop
			}
		}
	}

	return res;
 8004506:	7dfb      	ldrb	r3, [r7, #23]
}
 8004508:	4618      	mov	r0, r3
 800450a:	3718      	adds	r7, #24
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8004510:	b480      	push	{r7}
 8004512:	b087      	sub	sp, #28
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8004518:	f04f 33ff 	mov.w	r3, #4294967295
 800451c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d031      	beq.n	800458a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	617b      	str	r3, [r7, #20]
 800452c:	e002      	b.n	8004534 <get_ldnumber+0x24>
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	3301      	adds	r3, #1
 8004532:	617b      	str	r3, [r7, #20]
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	2b1f      	cmp	r3, #31
 800453a:	d903      	bls.n	8004544 <get_ldnumber+0x34>
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	2b3a      	cmp	r3, #58	; 0x3a
 8004542:	d1f4      	bne.n	800452e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	2b3a      	cmp	r3, #58	; 0x3a
 800454a:	d11c      	bne.n	8004586 <get_ldnumber+0x76>
			tp = *path;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	1c5a      	adds	r2, r3, #1
 8004556:	60fa      	str	r2, [r7, #12]
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	3b30      	subs	r3, #48	; 0x30
 800455c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	2b09      	cmp	r3, #9
 8004562:	d80e      	bhi.n	8004582 <get_ldnumber+0x72>
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	429a      	cmp	r2, r3
 800456a:	d10a      	bne.n	8004582 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d107      	bne.n	8004582 <get_ldnumber+0x72>
					vol = (int)i;
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	3301      	adds	r3, #1
 800457a:	617b      	str	r3, [r7, #20]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	697a      	ldr	r2, [r7, #20]
 8004580:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	e002      	b.n	800458c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004586:	2300      	movs	r3, #0
 8004588:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800458a:	693b      	ldr	r3, [r7, #16]
}
 800458c:	4618      	mov	r0, r3
 800458e:	371c      	adds	r7, #28
 8004590:	46bd      	mov	sp, r7
 8004592:	bc80      	pop	{r7}
 8004594:	4770      	bx	lr
	...

08004598 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	70da      	strb	r2, [r3, #3]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f04f 32ff 	mov.w	r2, #4294967295
 80045ae:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80045b0:	6839      	ldr	r1, [r7, #0]
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f7fe fc7a 	bl	8002eac <move_window>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d001      	beq.n	80045c2 <check_fs+0x2a>
 80045be:	2304      	movs	r3, #4
 80045c0:	e038      	b.n	8004634 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	3338      	adds	r3, #56	; 0x38
 80045c6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7fe f9cc 	bl	8002968 <ld_word>
 80045d0:	4603      	mov	r3, r0
 80045d2:	461a      	mov	r2, r3
 80045d4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80045d8:	429a      	cmp	r2, r3
 80045da:	d001      	beq.n	80045e0 <check_fs+0x48>
 80045dc:	2303      	movs	r3, #3
 80045de:	e029      	b.n	8004634 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80045e6:	2be9      	cmp	r3, #233	; 0xe9
 80045e8:	d009      	beq.n	80045fe <check_fs+0x66>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80045f0:	2beb      	cmp	r3, #235	; 0xeb
 80045f2:	d11e      	bne.n	8004632 <check_fs+0x9a>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80045fa:	2b90      	cmp	r3, #144	; 0x90
 80045fc:	d119      	bne.n	8004632 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	3338      	adds	r3, #56	; 0x38
 8004602:	3336      	adds	r3, #54	; 0x36
 8004604:	4618      	mov	r0, r3
 8004606:	f7fe f9c6 	bl	8002996 <ld_dword>
 800460a:	4603      	mov	r3, r0
 800460c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004610:	4a0a      	ldr	r2, [pc, #40]	; (800463c <check_fs+0xa4>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d101      	bne.n	800461a <check_fs+0x82>
 8004616:	2300      	movs	r3, #0
 8004618:	e00c      	b.n	8004634 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	3338      	adds	r3, #56	; 0x38
 800461e:	3352      	adds	r3, #82	; 0x52
 8004620:	4618      	mov	r0, r3
 8004622:	f7fe f9b8 	bl	8002996 <ld_dword>
 8004626:	4603      	mov	r3, r0
 8004628:	4a05      	ldr	r2, [pc, #20]	; (8004640 <check_fs+0xa8>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d101      	bne.n	8004632 <check_fs+0x9a>
 800462e:	2300      	movs	r3, #0
 8004630:	e000      	b.n	8004634 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8004632:	2302      	movs	r3, #2
}
 8004634:	4618      	mov	r0, r3
 8004636:	3708      	adds	r7, #8
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	00544146 	.word	0x00544146
 8004640:	33544146 	.word	0x33544146

08004644 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b096      	sub	sp, #88	; 0x58
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	4613      	mov	r3, r2
 8004650:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	2200      	movs	r2, #0
 8004656:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8004658:	68f8      	ldr	r0, [r7, #12]
 800465a:	f7ff ff59 	bl	8004510 <get_ldnumber>
 800465e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8004660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004662:	2b00      	cmp	r3, #0
 8004664:	da01      	bge.n	800466a <find_volume+0x26>
 8004666:	230b      	movs	r3, #11
 8004668:	e265      	b.n	8004b36 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800466a:	4a9f      	ldr	r2, [pc, #636]	; (80048e8 <find_volume+0x2a4>)
 800466c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800466e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004672:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004676:	2b00      	cmp	r3, #0
 8004678:	d101      	bne.n	800467e <find_volume+0x3a>
 800467a:	230c      	movs	r3, #12
 800467c:	e25b      	b.n	8004b36 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004682:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8004684:	79fb      	ldrb	r3, [r7, #7]
 8004686:	f023 0301 	bic.w	r3, r3, #1
 800468a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800468c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d01a      	beq.n	80046ca <find_volume+0x86>
		stat = disk_status(fs->drv);
 8004694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004696:	785b      	ldrb	r3, [r3, #1]
 8004698:	4618      	mov	r0, r3
 800469a:	f7fe f8c7 	bl	800282c <disk_status>
 800469e:	4603      	mov	r3, r0
 80046a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80046a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80046a8:	f003 0301 	and.w	r3, r3, #1
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d10c      	bne.n	80046ca <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80046b0:	79fb      	ldrb	r3, [r7, #7]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d007      	beq.n	80046c6 <find_volume+0x82>
 80046b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80046ba:	f003 0304 	and.w	r3, r3, #4
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d001      	beq.n	80046c6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80046c2:	230a      	movs	r3, #10
 80046c4:	e237      	b.n	8004b36 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 80046c6:	2300      	movs	r3, #0
 80046c8:	e235      	b.n	8004b36 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80046ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046cc:	2200      	movs	r2, #0
 80046ce:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80046d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046d2:	b2da      	uxtb	r2, r3
 80046d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046d6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80046d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046da:	785b      	ldrb	r3, [r3, #1]
 80046dc:	4618      	mov	r0, r3
 80046de:	f7fe f8bf 	bl	8002860 <disk_initialize>
 80046e2:	4603      	mov	r3, r0
 80046e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80046e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80046ec:	f003 0301 	and.w	r3, r3, #1
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d001      	beq.n	80046f8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80046f4:	2303      	movs	r3, #3
 80046f6:	e21e      	b.n	8004b36 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80046f8:	79fb      	ldrb	r3, [r7, #7]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d007      	beq.n	800470e <find_volume+0xca>
 80046fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004702:	f003 0304 	and.w	r3, r3, #4
 8004706:	2b00      	cmp	r3, #0
 8004708:	d001      	beq.n	800470e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800470a:	230a      	movs	r3, #10
 800470c:	e213      	b.n	8004b36 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800470e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004710:	7858      	ldrb	r0, [r3, #1]
 8004712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004714:	330c      	adds	r3, #12
 8004716:	461a      	mov	r2, r3
 8004718:	2102      	movs	r1, #2
 800471a:	f7fe f907 	bl	800292c <disk_ioctl>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d001      	beq.n	8004728 <find_volume+0xe4>
 8004724:	2301      	movs	r3, #1
 8004726:	e206      	b.n	8004b36 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8004728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800472a:	899b      	ldrh	r3, [r3, #12]
 800472c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004730:	d80d      	bhi.n	800474e <find_volume+0x10a>
 8004732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004734:	899b      	ldrh	r3, [r3, #12]
 8004736:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800473a:	d308      	bcc.n	800474e <find_volume+0x10a>
 800473c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800473e:	899b      	ldrh	r3, [r3, #12]
 8004740:	461a      	mov	r2, r3
 8004742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004744:	899b      	ldrh	r3, [r3, #12]
 8004746:	3b01      	subs	r3, #1
 8004748:	4013      	ands	r3, r2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d001      	beq.n	8004752 <find_volume+0x10e>
 800474e:	2301      	movs	r3, #1
 8004750:	e1f1      	b.n	8004b36 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8004752:	2300      	movs	r3, #0
 8004754:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8004756:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004758:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800475a:	f7ff ff1d 	bl	8004598 <check_fs>
 800475e:	4603      	mov	r3, r0
 8004760:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8004764:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004768:	2b02      	cmp	r3, #2
 800476a:	d149      	bne.n	8004800 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800476c:	2300      	movs	r3, #0
 800476e:	643b      	str	r3, [r7, #64]	; 0x40
 8004770:	e01e      	b.n	80047b0 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8004772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004774:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004778:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800477a:	011b      	lsls	r3, r3, #4
 800477c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8004780:	4413      	add	r3, r2
 8004782:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8004784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004786:	3304      	adds	r3, #4
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d006      	beq.n	800479c <find_volume+0x158>
 800478e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004790:	3308      	adds	r3, #8
 8004792:	4618      	mov	r0, r3
 8004794:	f7fe f8ff 	bl	8002996 <ld_dword>
 8004798:	4602      	mov	r2, r0
 800479a:	e000      	b.n	800479e <find_volume+0x15a>
 800479c:	2200      	movs	r2, #0
 800479e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	3358      	adds	r3, #88	; 0x58
 80047a4:	443b      	add	r3, r7
 80047a6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80047aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047ac:	3301      	adds	r3, #1
 80047ae:	643b      	str	r3, [r7, #64]	; 0x40
 80047b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047b2:	2b03      	cmp	r3, #3
 80047b4:	d9dd      	bls.n	8004772 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80047b6:	2300      	movs	r3, #0
 80047b8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80047ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d002      	beq.n	80047c6 <find_volume+0x182>
 80047c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047c2:	3b01      	subs	r3, #1
 80047c4:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80047c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	3358      	adds	r3, #88	; 0x58
 80047cc:	443b      	add	r3, r7
 80047ce:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80047d2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80047d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d005      	beq.n	80047e6 <find_volume+0x1a2>
 80047da:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80047dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80047de:	f7ff fedb 	bl	8004598 <check_fs>
 80047e2:	4603      	mov	r3, r0
 80047e4:	e000      	b.n	80047e8 <find_volume+0x1a4>
 80047e6:	2303      	movs	r3, #3
 80047e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80047ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d905      	bls.n	8004800 <find_volume+0x1bc>
 80047f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047f6:	3301      	adds	r3, #1
 80047f8:	643b      	str	r3, [r7, #64]	; 0x40
 80047fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047fc:	2b03      	cmp	r3, #3
 80047fe:	d9e2      	bls.n	80047c6 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004800:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004804:	2b04      	cmp	r3, #4
 8004806:	d101      	bne.n	800480c <find_volume+0x1c8>
 8004808:	2301      	movs	r3, #1
 800480a:	e194      	b.n	8004b36 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800480c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004810:	2b01      	cmp	r3, #1
 8004812:	d901      	bls.n	8004818 <find_volume+0x1d4>
 8004814:	230d      	movs	r3, #13
 8004816:	e18e      	b.n	8004b36 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800481a:	3338      	adds	r3, #56	; 0x38
 800481c:	330b      	adds	r3, #11
 800481e:	4618      	mov	r0, r3
 8004820:	f7fe f8a2 	bl	8002968 <ld_word>
 8004824:	4603      	mov	r3, r0
 8004826:	461a      	mov	r2, r3
 8004828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800482a:	899b      	ldrh	r3, [r3, #12]
 800482c:	429a      	cmp	r2, r3
 800482e:	d001      	beq.n	8004834 <find_volume+0x1f0>
 8004830:	230d      	movs	r3, #13
 8004832:	e180      	b.n	8004b36 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8004834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004836:	3338      	adds	r3, #56	; 0x38
 8004838:	3316      	adds	r3, #22
 800483a:	4618      	mov	r0, r3
 800483c:	f7fe f894 	bl	8002968 <ld_word>
 8004840:	4603      	mov	r3, r0
 8004842:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8004844:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004846:	2b00      	cmp	r3, #0
 8004848:	d106      	bne.n	8004858 <find_volume+0x214>
 800484a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800484c:	3338      	adds	r3, #56	; 0x38
 800484e:	3324      	adds	r3, #36	; 0x24
 8004850:	4618      	mov	r0, r3
 8004852:	f7fe f8a0 	bl	8002996 <ld_dword>
 8004856:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8004858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800485a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800485c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800485e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004860:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8004864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004866:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8004868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800486a:	789b      	ldrb	r3, [r3, #2]
 800486c:	2b01      	cmp	r3, #1
 800486e:	d005      	beq.n	800487c <find_volume+0x238>
 8004870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004872:	789b      	ldrb	r3, [r3, #2]
 8004874:	2b02      	cmp	r3, #2
 8004876:	d001      	beq.n	800487c <find_volume+0x238>
 8004878:	230d      	movs	r3, #13
 800487a:	e15c      	b.n	8004b36 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800487c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800487e:	789b      	ldrb	r3, [r3, #2]
 8004880:	461a      	mov	r2, r3
 8004882:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004884:	fb02 f303 	mul.w	r3, r2, r3
 8004888:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800488a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800488c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004890:	b29a      	uxth	r2, r3
 8004892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004894:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8004896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004898:	895b      	ldrh	r3, [r3, #10]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d008      	beq.n	80048b0 <find_volume+0x26c>
 800489e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048a0:	895b      	ldrh	r3, [r3, #10]
 80048a2:	461a      	mov	r2, r3
 80048a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048a6:	895b      	ldrh	r3, [r3, #10]
 80048a8:	3b01      	subs	r3, #1
 80048aa:	4013      	ands	r3, r2
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d001      	beq.n	80048b4 <find_volume+0x270>
 80048b0:	230d      	movs	r3, #13
 80048b2:	e140      	b.n	8004b36 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80048b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b6:	3338      	adds	r3, #56	; 0x38
 80048b8:	3311      	adds	r3, #17
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7fe f854 	bl	8002968 <ld_word>
 80048c0:	4603      	mov	r3, r0
 80048c2:	461a      	mov	r2, r3
 80048c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80048c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ca:	891b      	ldrh	r3, [r3, #8]
 80048cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048ce:	8992      	ldrh	r2, [r2, #12]
 80048d0:	0952      	lsrs	r2, r2, #5
 80048d2:	b292      	uxth	r2, r2
 80048d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80048d8:	fb01 f202 	mul.w	r2, r1, r2
 80048dc:	1a9b      	subs	r3, r3, r2
 80048de:	b29b      	uxth	r3, r3
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d003      	beq.n	80048ec <find_volume+0x2a8>
 80048e4:	230d      	movs	r3, #13
 80048e6:	e126      	b.n	8004b36 <find_volume+0x4f2>
 80048e8:	200000e8 	.word	0x200000e8

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80048ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ee:	3338      	adds	r3, #56	; 0x38
 80048f0:	3313      	adds	r3, #19
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7fe f838 	bl	8002968 <ld_word>
 80048f8:	4603      	mov	r3, r0
 80048fa:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80048fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d106      	bne.n	8004910 <find_volume+0x2cc>
 8004902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004904:	3338      	adds	r3, #56	; 0x38
 8004906:	3320      	adds	r3, #32
 8004908:	4618      	mov	r0, r3
 800490a:	f7fe f844 	bl	8002996 <ld_dword>
 800490e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8004910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004912:	3338      	adds	r3, #56	; 0x38
 8004914:	330e      	adds	r3, #14
 8004916:	4618      	mov	r0, r3
 8004918:	f7fe f826 	bl	8002968 <ld_word>
 800491c:	4603      	mov	r3, r0
 800491e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8004920:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004922:	2b00      	cmp	r3, #0
 8004924:	d101      	bne.n	800492a <find_volume+0x2e6>
 8004926:	230d      	movs	r3, #13
 8004928:	e105      	b.n	8004b36 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800492a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800492c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800492e:	4413      	add	r3, r2
 8004930:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004932:	8911      	ldrh	r1, [r2, #8]
 8004934:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004936:	8992      	ldrh	r2, [r2, #12]
 8004938:	0952      	lsrs	r2, r2, #5
 800493a:	b292      	uxth	r2, r2
 800493c:	fbb1 f2f2 	udiv	r2, r1, r2
 8004940:	b292      	uxth	r2, r2
 8004942:	4413      	add	r3, r2
 8004944:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8004946:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800494a:	429a      	cmp	r2, r3
 800494c:	d201      	bcs.n	8004952 <find_volume+0x30e>
 800494e:	230d      	movs	r3, #13
 8004950:	e0f1      	b.n	8004b36 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8004952:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800495a:	8952      	ldrh	r2, [r2, #10]
 800495c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004960:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8004962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004964:	2b00      	cmp	r3, #0
 8004966:	d101      	bne.n	800496c <find_volume+0x328>
 8004968:	230d      	movs	r3, #13
 800496a:	e0e4      	b.n	8004b36 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800496c:	2303      	movs	r3, #3
 800496e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8004972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004974:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8004978:	4293      	cmp	r3, r2
 800497a:	d802      	bhi.n	8004982 <find_volume+0x33e>
 800497c:	2302      	movs	r3, #2
 800497e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8004982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004984:	f640 72f5 	movw	r2, #4085	; 0xff5
 8004988:	4293      	cmp	r3, r2
 800498a:	d802      	bhi.n	8004992 <find_volume+0x34e>
 800498c:	2301      	movs	r3, #1
 800498e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8004992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004994:	1c9a      	adds	r2, r3, #2
 8004996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004998:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800499a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800499c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800499e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80049a0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80049a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049a4:	441a      	add	r2, r3
 80049a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a8:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80049aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80049ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ae:	441a      	add	r2, r3
 80049b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b2:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80049b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80049b8:	2b03      	cmp	r3, #3
 80049ba:	d11e      	bne.n	80049fa <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80049bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049be:	3338      	adds	r3, #56	; 0x38
 80049c0:	332a      	adds	r3, #42	; 0x2a
 80049c2:	4618      	mov	r0, r3
 80049c4:	f7fd ffd0 	bl	8002968 <ld_word>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d001      	beq.n	80049d2 <find_volume+0x38e>
 80049ce:	230d      	movs	r3, #13
 80049d0:	e0b1      	b.n	8004b36 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80049d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d4:	891b      	ldrh	r3, [r3, #8]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d001      	beq.n	80049de <find_volume+0x39a>
 80049da:	230d      	movs	r3, #13
 80049dc:	e0ab      	b.n	8004b36 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80049de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e0:	3338      	adds	r3, #56	; 0x38
 80049e2:	332c      	adds	r3, #44	; 0x2c
 80049e4:	4618      	mov	r0, r3
 80049e6:	f7fd ffd6 	bl	8002996 <ld_dword>
 80049ea:	4602      	mov	r2, r0
 80049ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ee:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80049f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f2:	69db      	ldr	r3, [r3, #28]
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	647b      	str	r3, [r7, #68]	; 0x44
 80049f8:	e01f      	b.n	8004a3a <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80049fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049fc:	891b      	ldrh	r3, [r3, #8]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d101      	bne.n	8004a06 <find_volume+0x3c2>
 8004a02:	230d      	movs	r3, #13
 8004a04:	e097      	b.n	8004b36 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8004a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a0c:	441a      	add	r2, r3
 8004a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a10:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004a12:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d103      	bne.n	8004a22 <find_volume+0x3de>
 8004a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a1c:	69db      	ldr	r3, [r3, #28]
 8004a1e:	005b      	lsls	r3, r3, #1
 8004a20:	e00a      	b.n	8004a38 <find_volume+0x3f4>
 8004a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a24:	69da      	ldr	r2, [r3, #28]
 8004a26:	4613      	mov	r3, r2
 8004a28:	005b      	lsls	r3, r3, #1
 8004a2a:	4413      	add	r3, r2
 8004a2c:	085a      	lsrs	r2, r3, #1
 8004a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a30:	69db      	ldr	r3, [r3, #28]
 8004a32:	f003 0301 	and.w	r3, r3, #1
 8004a36:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8004a38:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8004a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a3c:	6a1a      	ldr	r2, [r3, #32]
 8004a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a40:	899b      	ldrh	r3, [r3, #12]
 8004a42:	4619      	mov	r1, r3
 8004a44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a46:	440b      	add	r3, r1
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004a4c:	8989      	ldrh	r1, [r1, #12]
 8004a4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d201      	bcs.n	8004a5a <find_volume+0x416>
 8004a56:	230d      	movs	r3, #13
 8004a58:	e06d      	b.n	8004b36 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8004a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a60:	619a      	str	r2, [r3, #24]
 8004a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a64:	699a      	ldr	r2, [r3, #24]
 8004a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a68:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8004a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a6c:	2280      	movs	r2, #128	; 0x80
 8004a6e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8004a70:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a74:	2b03      	cmp	r3, #3
 8004a76:	d149      	bne.n	8004b0c <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8004a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a7a:	3338      	adds	r3, #56	; 0x38
 8004a7c:	3330      	adds	r3, #48	; 0x30
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7fd ff72 	bl	8002968 <ld_word>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d140      	bne.n	8004b0c <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8004a8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	4619      	mov	r1, r3
 8004a90:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004a92:	f7fe fa0b 	bl	8002eac <move_window>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d137      	bne.n	8004b0c <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8004a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8004aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa4:	3338      	adds	r3, #56	; 0x38
 8004aa6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f7fd ff5c 	bl	8002968 <ld_word>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d127      	bne.n	8004b0c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8004abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004abe:	3338      	adds	r3, #56	; 0x38
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f7fd ff68 	bl	8002996 <ld_dword>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	4a1d      	ldr	r2, [pc, #116]	; (8004b40 <find_volume+0x4fc>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d11e      	bne.n	8004b0c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8004ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad0:	3338      	adds	r3, #56	; 0x38
 8004ad2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f7fd ff5d 	bl	8002996 <ld_dword>
 8004adc:	4603      	mov	r3, r0
 8004ade:	4a19      	ldr	r2, [pc, #100]	; (8004b44 <find_volume+0x500>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d113      	bne.n	8004b0c <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8004ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae6:	3338      	adds	r3, #56	; 0x38
 8004ae8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8004aec:	4618      	mov	r0, r3
 8004aee:	f7fd ff52 	bl	8002996 <ld_dword>
 8004af2:	4602      	mov	r2, r0
 8004af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af6:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8004af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004afa:	3338      	adds	r3, #56	; 0x38
 8004afc:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8004b00:	4618      	mov	r0, r3
 8004b02:	f7fd ff48 	bl	8002996 <ld_dword>
 8004b06:	4602      	mov	r2, r0
 8004b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b0a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8004b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b0e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004b12:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8004b14:	4b0c      	ldr	r3, [pc, #48]	; (8004b48 <find_volume+0x504>)
 8004b16:	881b      	ldrh	r3, [r3, #0]
 8004b18:	3301      	adds	r3, #1
 8004b1a:	b29a      	uxth	r2, r3
 8004b1c:	4b0a      	ldr	r3, [pc, #40]	; (8004b48 <find_volume+0x504>)
 8004b1e:	801a      	strh	r2, [r3, #0]
 8004b20:	4b09      	ldr	r3, [pc, #36]	; (8004b48 <find_volume+0x504>)
 8004b22:	881a      	ldrh	r2, [r3, #0]
 8004b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b26:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8004b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b2a:	4a08      	ldr	r2, [pc, #32]	; (8004b4c <find_volume+0x508>)
 8004b2c:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8004b2e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004b30:	f7fe f954 	bl	8002ddc <clear_lock>
#endif
	return FR_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3758      	adds	r7, #88	; 0x58
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	41615252 	.word	0x41615252
 8004b44:	61417272 	.word	0x61417272
 8004b48:	200000ec 	.word	0x200000ec
 8004b4c:	20000110 	.word	0x20000110

08004b50 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8004b5a:	2309      	movs	r3, #9
 8004b5c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d01c      	beq.n	8004b9e <validate+0x4e>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d018      	beq.n	8004b9e <validate+0x4e>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d013      	beq.n	8004b9e <validate+0x4e>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	889a      	ldrh	r2, [r3, #4]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	88db      	ldrh	r3, [r3, #6]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d10c      	bne.n	8004b9e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	785b      	ldrb	r3, [r3, #1]
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7fd fe4e 	bl	800282c <disk_status>
 8004b90:	4603      	mov	r3, r0
 8004b92:	f003 0301 	and.w	r3, r3, #1
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d101      	bne.n	8004b9e <validate+0x4e>
			res = FR_OK;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8004b9e:	7bfb      	ldrb	r3, [r7, #15]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d102      	bne.n	8004baa <validate+0x5a>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	e000      	b.n	8004bac <validate+0x5c>
 8004baa:	2300      	movs	r3, #0
 8004bac:	683a      	ldr	r2, [r7, #0]
 8004bae:	6013      	str	r3, [r2, #0]
	return res;
 8004bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3710      	adds	r7, #16
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
	...

08004bbc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b088      	sub	sp, #32
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8004bce:	f107 0310 	add.w	r3, r7, #16
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f7ff fc9c 	bl	8004510 <get_ldnumber>
 8004bd8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	da01      	bge.n	8004be4 <f_mount+0x28>
 8004be0:	230b      	movs	r3, #11
 8004be2:	e02b      	b.n	8004c3c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8004be4:	4a17      	ldr	r2, [pc, #92]	; (8004c44 <f_mount+0x88>)
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bec:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8004bee:	69bb      	ldr	r3, [r7, #24]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d005      	beq.n	8004c00 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8004bf4:	69b8      	ldr	r0, [r7, #24]
 8004bf6:	f7fe f8f1 	bl	8002ddc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d002      	beq.n	8004c0c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	490d      	ldr	r1, [pc, #52]	; (8004c44 <f_mount+0x88>)
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d002      	beq.n	8004c22 <f_mount+0x66>
 8004c1c:	79fb      	ldrb	r3, [r7, #7]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d001      	beq.n	8004c26 <f_mount+0x6a>
 8004c22:	2300      	movs	r3, #0
 8004c24:	e00a      	b.n	8004c3c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8004c26:	f107 010c 	add.w	r1, r7, #12
 8004c2a:	f107 0308 	add.w	r3, r7, #8
 8004c2e:	2200      	movs	r2, #0
 8004c30:	4618      	mov	r0, r3
 8004c32:	f7ff fd07 	bl	8004644 <find_volume>
 8004c36:	4603      	mov	r3, r0
 8004c38:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8004c3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3720      	adds	r7, #32
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	200000e8 	.word	0x200000e8

08004c48 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b09a      	sub	sp, #104	; 0x68
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	4613      	mov	r3, r2
 8004c54:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d101      	bne.n	8004c60 <f_open+0x18>
 8004c5c:	2309      	movs	r3, #9
 8004c5e:	e1bb      	b.n	8004fd8 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8004c60:	79fb      	ldrb	r3, [r7, #7]
 8004c62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c66:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8004c68:	79fa      	ldrb	r2, [r7, #7]
 8004c6a:	f107 0114 	add.w	r1, r7, #20
 8004c6e:	f107 0308 	add.w	r3, r7, #8
 8004c72:	4618      	mov	r0, r3
 8004c74:	f7ff fce6 	bl	8004644 <find_volume>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8004c7e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	f040 819f 	bne.w	8004fc6 <f_open+0x37e>
		dj.obj.fs = fs;
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8004c8c:	68ba      	ldr	r2, [r7, #8]
 8004c8e:	f107 0318 	add.w	r3, r7, #24
 8004c92:	4611      	mov	r1, r2
 8004c94:	4618      	mov	r0, r3
 8004c96:	f7ff fbc5 	bl	8004424 <follow_path>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8004ca0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d11a      	bne.n	8004cde <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8004ca8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004cac:	b25b      	sxtb	r3, r3
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	da03      	bge.n	8004cba <f_open+0x72>
				res = FR_INVALID_NAME;
 8004cb2:	2306      	movs	r3, #6
 8004cb4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004cb8:	e011      	b.n	8004cde <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004cba:	79fb      	ldrb	r3, [r7, #7]
 8004cbc:	f023 0301 	bic.w	r3, r3, #1
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	bf14      	ite	ne
 8004cc4:	2301      	movne	r3, #1
 8004cc6:	2300      	moveq	r3, #0
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	461a      	mov	r2, r3
 8004ccc:	f107 0318 	add.w	r3, r7, #24
 8004cd0:	4611      	mov	r1, r2
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7fd ff40 	bl	8002b58 <chk_lock>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8004cde:	79fb      	ldrb	r3, [r7, #7]
 8004ce0:	f003 031c 	and.w	r3, r3, #28
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d07f      	beq.n	8004de8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8004ce8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d017      	beq.n	8004d20 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8004cf0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004cf4:	2b04      	cmp	r3, #4
 8004cf6:	d10e      	bne.n	8004d16 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8004cf8:	f7fd ff88 	bl	8002c0c <enq_lock>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d006      	beq.n	8004d10 <f_open+0xc8>
 8004d02:	f107 0318 	add.w	r3, r7, #24
 8004d06:	4618      	mov	r0, r3
 8004d08:	f7ff f8dc 	bl	8003ec4 <dir_register>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	e000      	b.n	8004d12 <f_open+0xca>
 8004d10:	2312      	movs	r3, #18
 8004d12:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8004d16:	79fb      	ldrb	r3, [r7, #7]
 8004d18:	f043 0308 	orr.w	r3, r3, #8
 8004d1c:	71fb      	strb	r3, [r7, #7]
 8004d1e:	e010      	b.n	8004d42 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8004d20:	7fbb      	ldrb	r3, [r7, #30]
 8004d22:	f003 0311 	and.w	r3, r3, #17
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d003      	beq.n	8004d32 <f_open+0xea>
					res = FR_DENIED;
 8004d2a:	2307      	movs	r3, #7
 8004d2c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004d30:	e007      	b.n	8004d42 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8004d32:	79fb      	ldrb	r3, [r7, #7]
 8004d34:	f003 0304 	and.w	r3, r3, #4
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d002      	beq.n	8004d42 <f_open+0xfa>
 8004d3c:	2308      	movs	r3, #8
 8004d3e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8004d42:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d168      	bne.n	8004e1c <f_open+0x1d4>
 8004d4a:	79fb      	ldrb	r3, [r7, #7]
 8004d4c:	f003 0308 	and.w	r3, r3, #8
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d063      	beq.n	8004e1c <f_open+0x1d4>
				dw = GET_FATTIME();
 8004d54:	f7fd fd12 	bl	800277c <get_fattime>
 8004d58:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8004d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d5c:	330e      	adds	r3, #14
 8004d5e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004d60:	4618      	mov	r0, r3
 8004d62:	f7fd fe54 	bl	8002a0e <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8004d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d68:	3316      	adds	r3, #22
 8004d6a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f7fd fe4e 	bl	8002a0e <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8004d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d74:	330b      	adds	r3, #11
 8004d76:	2220      	movs	r2, #32
 8004d78:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d7e:	4611      	mov	r1, r2
 8004d80:	4618      	mov	r0, r3
 8004d82:	f7fe fe19 	bl	80039b8 <ld_clust>
 8004d86:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f7fe fe31 	bl	80039f6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8004d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d96:	331c      	adds	r3, #28
 8004d98:	2100      	movs	r1, #0
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f7fd fe37 	bl	8002a0e <st_dword>
					fs->wflag = 1;
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	2201      	movs	r2, #1
 8004da4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8004da6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d037      	beq.n	8004e1c <f_open+0x1d4>
						dw = fs->winsect;
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004db0:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8004db2:	f107 0318 	add.w	r3, r7, #24
 8004db6:	2200      	movs	r2, #0
 8004db8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f7fe fb22 	bl	8003404 <remove_chain>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8004dc6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d126      	bne.n	8004e1c <f_open+0x1d4>
							res = move_window(fs, dw);
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7fe f86a 	bl	8002eac <move_window>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004de2:	3a01      	subs	r2, #1
 8004de4:	615a      	str	r2, [r3, #20]
 8004de6:	e019      	b.n	8004e1c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8004de8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d115      	bne.n	8004e1c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8004df0:	7fbb      	ldrb	r3, [r7, #30]
 8004df2:	f003 0310 	and.w	r3, r3, #16
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d003      	beq.n	8004e02 <f_open+0x1ba>
					res = FR_NO_FILE;
 8004dfa:	2304      	movs	r3, #4
 8004dfc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004e00:	e00c      	b.n	8004e1c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8004e02:	79fb      	ldrb	r3, [r7, #7]
 8004e04:	f003 0302 	and.w	r3, r3, #2
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d007      	beq.n	8004e1c <f_open+0x1d4>
 8004e0c:	7fbb      	ldrb	r3, [r7, #30]
 8004e0e:	f003 0301 	and.w	r3, r3, #1
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d002      	beq.n	8004e1c <f_open+0x1d4>
						res = FR_DENIED;
 8004e16:	2307      	movs	r3, #7
 8004e18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8004e1c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d128      	bne.n	8004e76 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8004e24:	79fb      	ldrb	r3, [r7, #7]
 8004e26:	f003 0308 	and.w	r3, r3, #8
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d003      	beq.n	8004e36 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8004e2e:	79fb      	ldrb	r3, [r7, #7]
 8004e30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e34:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8004e3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004e44:	79fb      	ldrb	r3, [r7, #7]
 8004e46:	f023 0301 	bic.w	r3, r3, #1
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	bf14      	ite	ne
 8004e4e:	2301      	movne	r3, #1
 8004e50:	2300      	moveq	r3, #0
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	461a      	mov	r2, r3
 8004e56:	f107 0318 	add.w	r3, r7, #24
 8004e5a:	4611      	mov	r1, r2
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f7fd fef5 	bl	8002c4c <inc_lock>
 8004e62:	4602      	mov	r2, r0
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d102      	bne.n	8004e76 <f_open+0x22e>
 8004e70:	2302      	movs	r3, #2
 8004e72:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8004e76:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	f040 80a3 	bne.w	8004fc6 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e84:	4611      	mov	r1, r2
 8004e86:	4618      	mov	r0, r3
 8004e88:	f7fe fd96 	bl	80039b8 <ld_clust>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8004e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e94:	331c      	adds	r3, #28
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7fd fd7d 	bl	8002996 <ld_dword>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	88da      	ldrh	r2, [r3, #6]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	79fa      	ldrb	r2, [r7, #7]
 8004eba:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	3330      	adds	r3, #48	; 0x30
 8004ed2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004ed6:	2100      	movs	r1, #0
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f7fd fde3 	bl	8002aa4 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8004ede:	79fb      	ldrb	r3, [r7, #7]
 8004ee0:	f003 0320 	and.w	r3, r3, #32
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d06e      	beq.n	8004fc6 <f_open+0x37e>
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d06a      	beq.n	8004fc6 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	68da      	ldr	r2, [r3, #12]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	895b      	ldrh	r3, [r3, #10]
 8004efc:	461a      	mov	r2, r3
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	899b      	ldrh	r3, [r3, #12]
 8004f02:	fb02 f303 	mul.w	r3, r2, r3
 8004f06:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f14:	e016      	b.n	8004f44 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7fe f882 	bl	8003024 <get_fat>
 8004f20:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8004f22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d802      	bhi.n	8004f2e <f_open+0x2e6>
 8004f28:	2302      	movs	r3, #2
 8004f2a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8004f2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f34:	d102      	bne.n	8004f3c <f_open+0x2f4>
 8004f36:	2301      	movs	r3, #1
 8004f38:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004f3c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004f3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f44:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d103      	bne.n	8004f54 <f_open+0x30c>
 8004f4c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004f4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d8e0      	bhi.n	8004f16 <f_open+0x2ce>
				}
				fp->clust = clst;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f58:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8004f5a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d131      	bne.n	8004fc6 <f_open+0x37e>
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	899b      	ldrh	r3, [r3, #12]
 8004f66:	461a      	mov	r2, r3
 8004f68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f6a:	fbb3 f1f2 	udiv	r1, r3, r2
 8004f6e:	fb01 f202 	mul.w	r2, r1, r2
 8004f72:	1a9b      	subs	r3, r3, r2
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d026      	beq.n	8004fc6 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f7fe f833 	bl	8002fe8 <clust2sect>
 8004f82:	64f8      	str	r0, [r7, #76]	; 0x4c
 8004f84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d103      	bne.n	8004f92 <f_open+0x34a>
						res = FR_INT_ERR;
 8004f8a:	2302      	movs	r3, #2
 8004f8c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004f90:	e019      	b.n	8004fc6 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	899b      	ldrh	r3, [r3, #12]
 8004f96:	461a      	mov	r2, r3
 8004f98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f9a:	fbb3 f2f2 	udiv	r2, r3, r2
 8004f9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fa0:	441a      	add	r2, r3
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	7858      	ldrb	r0, [r3, #1]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6a1a      	ldr	r2, [r3, #32]
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	f7fd fc79 	bl	80028ac <disk_read>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d002      	beq.n	8004fc6 <f_open+0x37e>
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8004fc6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d002      	beq.n	8004fd4 <f_open+0x38c>
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8004fd4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3768      	adds	r7, #104	; 0x68
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b08e      	sub	sp, #56	; 0x38
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	60b9      	str	r1, [r7, #8]
 8004fea:	607a      	str	r2, [r7, #4]
 8004fec:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f107 0214 	add.w	r2, r7, #20
 8004ffe:	4611      	mov	r1, r2
 8005000:	4618      	mov	r0, r3
 8005002:	f7ff fda5 	bl	8004b50 <validate>
 8005006:	4603      	mov	r3, r0
 8005008:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800500c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005010:	2b00      	cmp	r3, #0
 8005012:	d107      	bne.n	8005024 <f_read+0x44>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	7d5b      	ldrb	r3, [r3, #21]
 8005018:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800501c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005020:	2b00      	cmp	r3, #0
 8005022:	d002      	beq.n	800502a <f_read+0x4a>
 8005024:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005028:	e135      	b.n	8005296 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	7d1b      	ldrb	r3, [r3, #20]
 800502e:	f003 0301 	and.w	r3, r3, #1
 8005032:	2b00      	cmp	r3, #0
 8005034:	d101      	bne.n	800503a <f_read+0x5a>
 8005036:	2307      	movs	r3, #7
 8005038:	e12d      	b.n	8005296 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	68da      	ldr	r2, [r3, #12]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	1ad3      	subs	r3, r2, r3
 8005044:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	6a3b      	ldr	r3, [r7, #32]
 800504a:	429a      	cmp	r2, r3
 800504c:	f240 811e 	bls.w	800528c <f_read+0x2ac>
 8005050:	6a3b      	ldr	r3, [r7, #32]
 8005052:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8005054:	e11a      	b.n	800528c <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	697a      	ldr	r2, [r7, #20]
 800505c:	8992      	ldrh	r2, [r2, #12]
 800505e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005062:	fb01 f202 	mul.w	r2, r1, r2
 8005066:	1a9b      	subs	r3, r3, r2
 8005068:	2b00      	cmp	r3, #0
 800506a:	f040 80d5 	bne.w	8005218 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	697a      	ldr	r2, [r7, #20]
 8005074:	8992      	ldrh	r2, [r2, #12]
 8005076:	fbb3 f3f2 	udiv	r3, r3, r2
 800507a:	697a      	ldr	r2, [r7, #20]
 800507c:	8952      	ldrh	r2, [r2, #10]
 800507e:	3a01      	subs	r2, #1
 8005080:	4013      	ands	r3, r2
 8005082:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d12f      	bne.n	80050ea <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d103      	bne.n	800509a <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	633b      	str	r3, [r7, #48]	; 0x30
 8005098:	e013      	b.n	80050c2 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d007      	beq.n	80050b2 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	699b      	ldr	r3, [r3, #24]
 80050a6:	4619      	mov	r1, r3
 80050a8:	68f8      	ldr	r0, [r7, #12]
 80050aa:	f7fe faa8 	bl	80035fe <clmt_clust>
 80050ae:	6338      	str	r0, [r7, #48]	; 0x30
 80050b0:	e007      	b.n	80050c2 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	69db      	ldr	r3, [r3, #28]
 80050b8:	4619      	mov	r1, r3
 80050ba:	4610      	mov	r0, r2
 80050bc:	f7fd ffb2 	bl	8003024 <get_fat>
 80050c0:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80050c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d804      	bhi.n	80050d2 <f_read+0xf2>
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2202      	movs	r2, #2
 80050cc:	755a      	strb	r2, [r3, #21]
 80050ce:	2302      	movs	r3, #2
 80050d0:	e0e1      	b.n	8005296 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80050d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d8:	d104      	bne.n	80050e4 <f_read+0x104>
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2201      	movs	r2, #1
 80050de:	755a      	strb	r2, [r3, #21]
 80050e0:	2301      	movs	r3, #1
 80050e2:	e0d8      	b.n	8005296 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050e8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	69db      	ldr	r3, [r3, #28]
 80050f0:	4619      	mov	r1, r3
 80050f2:	4610      	mov	r0, r2
 80050f4:	f7fd ff78 	bl	8002fe8 <clust2sect>
 80050f8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d104      	bne.n	800510a <f_read+0x12a>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2202      	movs	r2, #2
 8005104:	755a      	strb	r2, [r3, #21]
 8005106:	2302      	movs	r3, #2
 8005108:	e0c5      	b.n	8005296 <f_read+0x2b6>
			sect += csect;
 800510a:	69ba      	ldr	r2, [r7, #24]
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	4413      	add	r3, r2
 8005110:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	899b      	ldrh	r3, [r3, #12]
 8005116:	461a      	mov	r2, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	fbb3 f3f2 	udiv	r3, r3, r2
 800511e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8005120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005122:	2b00      	cmp	r3, #0
 8005124:	d041      	beq.n	80051aa <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005126:	69fa      	ldr	r2, [r7, #28]
 8005128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800512a:	4413      	add	r3, r2
 800512c:	697a      	ldr	r2, [r7, #20]
 800512e:	8952      	ldrh	r2, [r2, #10]
 8005130:	4293      	cmp	r3, r2
 8005132:	d905      	bls.n	8005140 <f_read+0x160>
					cc = fs->csize - csect;
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	895b      	ldrh	r3, [r3, #10]
 8005138:	461a      	mov	r2, r3
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	7858      	ldrb	r0, [r3, #1]
 8005144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005146:	69ba      	ldr	r2, [r7, #24]
 8005148:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800514a:	f7fd fbaf 	bl	80028ac <disk_read>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d004      	beq.n	800515e <f_read+0x17e>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2201      	movs	r2, #1
 8005158:	755a      	strb	r2, [r3, #21]
 800515a:	2301      	movs	r3, #1
 800515c:	e09b      	b.n	8005296 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	7d1b      	ldrb	r3, [r3, #20]
 8005162:	b25b      	sxtb	r3, r3
 8005164:	2b00      	cmp	r3, #0
 8005166:	da18      	bge.n	800519a <f_read+0x1ba>
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6a1a      	ldr	r2, [r3, #32]
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005172:	429a      	cmp	r2, r3
 8005174:	d911      	bls.n	800519a <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6a1a      	ldr	r2, [r3, #32]
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	697a      	ldr	r2, [r7, #20]
 8005180:	8992      	ldrh	r2, [r2, #12]
 8005182:	fb02 f303 	mul.w	r3, r2, r3
 8005186:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005188:	18d0      	adds	r0, r2, r3
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	899b      	ldrh	r3, [r3, #12]
 8005194:	461a      	mov	r2, r3
 8005196:	f7fd fc65 	bl	8002a64 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	899b      	ldrh	r3, [r3, #12]
 800519e:	461a      	mov	r2, r3
 80051a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a2:	fb02 f303 	mul.w	r3, r2, r3
 80051a6:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80051a8:	e05c      	b.n	8005264 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6a1b      	ldr	r3, [r3, #32]
 80051ae:	69ba      	ldr	r2, [r7, #24]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d02e      	beq.n	8005212 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	7d1b      	ldrb	r3, [r3, #20]
 80051b8:	b25b      	sxtb	r3, r3
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	da18      	bge.n	80051f0 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	7858      	ldrb	r0, [r3, #1]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6a1a      	ldr	r2, [r3, #32]
 80051cc:	2301      	movs	r3, #1
 80051ce:	f7fd fb8d 	bl	80028ec <disk_write>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d004      	beq.n	80051e2 <f_read+0x202>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2201      	movs	r2, #1
 80051dc:	755a      	strb	r2, [r3, #21]
 80051de:	2301      	movs	r3, #1
 80051e0:	e059      	b.n	8005296 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	7d1b      	ldrb	r3, [r3, #20]
 80051e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051ea:	b2da      	uxtb	r2, r3
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	7858      	ldrb	r0, [r3, #1]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80051fa:	2301      	movs	r3, #1
 80051fc:	69ba      	ldr	r2, [r7, #24]
 80051fe:	f7fd fb55 	bl	80028ac <disk_read>
 8005202:	4603      	mov	r3, r0
 8005204:	2b00      	cmp	r3, #0
 8005206:	d004      	beq.n	8005212 <f_read+0x232>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2201      	movs	r2, #1
 800520c:	755a      	strb	r2, [r3, #21]
 800520e:	2301      	movs	r3, #1
 8005210:	e041      	b.n	8005296 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	69ba      	ldr	r2, [r7, #24]
 8005216:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	899b      	ldrh	r3, [r3, #12]
 800521c:	4618      	mov	r0, r3
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	8992      	ldrh	r2, [r2, #12]
 8005226:	fbb3 f1f2 	udiv	r1, r3, r2
 800522a:	fb01 f202 	mul.w	r2, r1, r2
 800522e:	1a9b      	subs	r3, r3, r2
 8005230:	1ac3      	subs	r3, r0, r3
 8005232:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8005234:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	429a      	cmp	r2, r3
 800523a:	d901      	bls.n	8005240 <f_read+0x260>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	699b      	ldr	r3, [r3, #24]
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	8992      	ldrh	r2, [r2, #12]
 800524e:	fbb3 f0f2 	udiv	r0, r3, r2
 8005252:	fb00 f202 	mul.w	r2, r0, r2
 8005256:	1a9b      	subs	r3, r3, r2
 8005258:	440b      	add	r3, r1
 800525a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800525c:	4619      	mov	r1, r3
 800525e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005260:	f7fd fc00 	bl	8002a64 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8005264:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005268:	4413      	add	r3, r2
 800526a:	627b      	str	r3, [r7, #36]	; 0x24
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	699a      	ldr	r2, [r3, #24]
 8005270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005272:	441a      	add	r2, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	619a      	str	r2, [r3, #24]
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800527e:	441a      	add	r2, r3
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	601a      	str	r2, [r3, #0]
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	f47f aee1 	bne.w	8005056 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3738      	adds	r7, #56	; 0x38
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}

0800529e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800529e:	b580      	push	{r7, lr}
 80052a0:	b08c      	sub	sp, #48	; 0x30
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	60f8      	str	r0, [r7, #12]
 80052a6:	60b9      	str	r1, [r7, #8]
 80052a8:	607a      	str	r2, [r7, #4]
 80052aa:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	2200      	movs	r2, #0
 80052b4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f107 0210 	add.w	r2, r7, #16
 80052bc:	4611      	mov	r1, r2
 80052be:	4618      	mov	r0, r3
 80052c0:	f7ff fc46 	bl	8004b50 <validate>
 80052c4:	4603      	mov	r3, r0
 80052c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80052ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d107      	bne.n	80052e2 <f_write+0x44>
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	7d5b      	ldrb	r3, [r3, #21]
 80052d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80052da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d002      	beq.n	80052e8 <f_write+0x4a>
 80052e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80052e6:	e16a      	b.n	80055be <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	7d1b      	ldrb	r3, [r3, #20]
 80052ec:	f003 0302 	and.w	r3, r3, #2
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d101      	bne.n	80052f8 <f_write+0x5a>
 80052f4:	2307      	movs	r3, #7
 80052f6:	e162      	b.n	80055be <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	699a      	ldr	r2, [r3, #24]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	441a      	add	r2, r3
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	699b      	ldr	r3, [r3, #24]
 8005304:	429a      	cmp	r2, r3
 8005306:	f080 814c 	bcs.w	80055a2 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	699b      	ldr	r3, [r3, #24]
 800530e:	43db      	mvns	r3, r3
 8005310:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8005312:	e146      	b.n	80055a2 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	699b      	ldr	r3, [r3, #24]
 8005318:	693a      	ldr	r2, [r7, #16]
 800531a:	8992      	ldrh	r2, [r2, #12]
 800531c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005320:	fb01 f202 	mul.w	r2, r1, r2
 8005324:	1a9b      	subs	r3, r3, r2
 8005326:	2b00      	cmp	r3, #0
 8005328:	f040 80f1 	bne.w	800550e <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	699b      	ldr	r3, [r3, #24]
 8005330:	693a      	ldr	r2, [r7, #16]
 8005332:	8992      	ldrh	r2, [r2, #12]
 8005334:	fbb3 f3f2 	udiv	r3, r3, r2
 8005338:	693a      	ldr	r2, [r7, #16]
 800533a:	8952      	ldrh	r2, [r2, #10]
 800533c:	3a01      	subs	r2, #1
 800533e:	4013      	ands	r3, r2
 8005340:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d143      	bne.n	80053d0 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	699b      	ldr	r3, [r3, #24]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d10c      	bne.n	800536a <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8005356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005358:	2b00      	cmp	r3, #0
 800535a:	d11a      	bne.n	8005392 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2100      	movs	r1, #0
 8005360:	4618      	mov	r0, r3
 8005362:	f7fe f8b4 	bl	80034ce <create_chain>
 8005366:	62b8      	str	r0, [r7, #40]	; 0x28
 8005368:	e013      	b.n	8005392 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536e:	2b00      	cmp	r3, #0
 8005370:	d007      	beq.n	8005382 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	4619      	mov	r1, r3
 8005378:	68f8      	ldr	r0, [r7, #12]
 800537a:	f7fe f940 	bl	80035fe <clmt_clust>
 800537e:	62b8      	str	r0, [r7, #40]	; 0x28
 8005380:	e007      	b.n	8005392 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	69db      	ldr	r3, [r3, #28]
 8005388:	4619      	mov	r1, r3
 800538a:	4610      	mov	r0, r2
 800538c:	f7fe f89f 	bl	80034ce <create_chain>
 8005390:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005394:	2b00      	cmp	r3, #0
 8005396:	f000 8109 	beq.w	80055ac <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800539a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800539c:	2b01      	cmp	r3, #1
 800539e:	d104      	bne.n	80053aa <f_write+0x10c>
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2202      	movs	r2, #2
 80053a4:	755a      	strb	r2, [r3, #21]
 80053a6:	2302      	movs	r3, #2
 80053a8:	e109      	b.n	80055be <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80053aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b0:	d104      	bne.n	80053bc <f_write+0x11e>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2201      	movs	r2, #1
 80053b6:	755a      	strb	r2, [r3, #21]
 80053b8:	2301      	movs	r3, #1
 80053ba:	e100      	b.n	80055be <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053c0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d102      	bne.n	80053d0 <f_write+0x132>
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053ce:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	7d1b      	ldrb	r3, [r3, #20]
 80053d4:	b25b      	sxtb	r3, r3
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	da18      	bge.n	800540c <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	7858      	ldrb	r0, [r3, #1]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6a1a      	ldr	r2, [r3, #32]
 80053e8:	2301      	movs	r3, #1
 80053ea:	f7fd fa7f 	bl	80028ec <disk_write>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d004      	beq.n	80053fe <f_write+0x160>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2201      	movs	r2, #1
 80053f8:	755a      	strb	r2, [r3, #21]
 80053fa:	2301      	movs	r3, #1
 80053fc:	e0df      	b.n	80055be <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	7d1b      	ldrb	r3, [r3, #20]
 8005402:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005406:	b2da      	uxtb	r2, r3
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800540c:	693a      	ldr	r2, [r7, #16]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	69db      	ldr	r3, [r3, #28]
 8005412:	4619      	mov	r1, r3
 8005414:	4610      	mov	r0, r2
 8005416:	f7fd fde7 	bl	8002fe8 <clust2sect>
 800541a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d104      	bne.n	800542c <f_write+0x18e>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2202      	movs	r2, #2
 8005426:	755a      	strb	r2, [r3, #21]
 8005428:	2302      	movs	r3, #2
 800542a:	e0c8      	b.n	80055be <f_write+0x320>
			sect += csect;
 800542c:	697a      	ldr	r2, [r7, #20]
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	4413      	add	r3, r2
 8005432:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	899b      	ldrh	r3, [r3, #12]
 8005438:	461a      	mov	r2, r3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005440:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8005442:	6a3b      	ldr	r3, [r7, #32]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d043      	beq.n	80054d0 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005448:	69ba      	ldr	r2, [r7, #24]
 800544a:	6a3b      	ldr	r3, [r7, #32]
 800544c:	4413      	add	r3, r2
 800544e:	693a      	ldr	r2, [r7, #16]
 8005450:	8952      	ldrh	r2, [r2, #10]
 8005452:	4293      	cmp	r3, r2
 8005454:	d905      	bls.n	8005462 <f_write+0x1c4>
					cc = fs->csize - csect;
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	895b      	ldrh	r3, [r3, #10]
 800545a:	461a      	mov	r2, r3
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	7858      	ldrb	r0, [r3, #1]
 8005466:	6a3b      	ldr	r3, [r7, #32]
 8005468:	697a      	ldr	r2, [r7, #20]
 800546a:	69f9      	ldr	r1, [r7, #28]
 800546c:	f7fd fa3e 	bl	80028ec <disk_write>
 8005470:	4603      	mov	r3, r0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d004      	beq.n	8005480 <f_write+0x1e2>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2201      	movs	r2, #1
 800547a:	755a      	strb	r2, [r3, #21]
 800547c:	2301      	movs	r3, #1
 800547e:	e09e      	b.n	80055be <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6a1a      	ldr	r2, [r3, #32]
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	1ad3      	subs	r3, r2, r3
 8005488:	6a3a      	ldr	r2, [r7, #32]
 800548a:	429a      	cmp	r2, r3
 800548c:	d918      	bls.n	80054c0 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6a1a      	ldr	r2, [r3, #32]
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	693a      	ldr	r2, [r7, #16]
 800549e:	8992      	ldrh	r2, [r2, #12]
 80054a0:	fb02 f303 	mul.w	r3, r2, r3
 80054a4:	69fa      	ldr	r2, [r7, #28]
 80054a6:	18d1      	adds	r1, r2, r3
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	899b      	ldrh	r3, [r3, #12]
 80054ac:	461a      	mov	r2, r3
 80054ae:	f7fd fad9 	bl	8002a64 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	7d1b      	ldrb	r3, [r3, #20]
 80054b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054ba:	b2da      	uxtb	r2, r3
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	899b      	ldrh	r3, [r3, #12]
 80054c4:	461a      	mov	r2, r3
 80054c6:	6a3b      	ldr	r3, [r7, #32]
 80054c8:	fb02 f303 	mul.w	r3, r2, r3
 80054cc:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80054ce:	e04b      	b.n	8005568 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6a1b      	ldr	r3, [r3, #32]
 80054d4:	697a      	ldr	r2, [r7, #20]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d016      	beq.n	8005508 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	699a      	ldr	r2, [r3, #24]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d210      	bcs.n	8005508 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	7858      	ldrb	r0, [r3, #1]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80054f0:	2301      	movs	r3, #1
 80054f2:	697a      	ldr	r2, [r7, #20]
 80054f4:	f7fd f9da 	bl	80028ac <disk_read>
 80054f8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d004      	beq.n	8005508 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2201      	movs	r2, #1
 8005502:	755a      	strb	r2, [r3, #21]
 8005504:	2301      	movs	r3, #1
 8005506:	e05a      	b.n	80055be <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	697a      	ldr	r2, [r7, #20]
 800550c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	899b      	ldrh	r3, [r3, #12]
 8005512:	4618      	mov	r0, r3
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	693a      	ldr	r2, [r7, #16]
 800551a:	8992      	ldrh	r2, [r2, #12]
 800551c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005520:	fb01 f202 	mul.w	r2, r1, r2
 8005524:	1a9b      	subs	r3, r3, r2
 8005526:	1ac3      	subs	r3, r0, r3
 8005528:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800552a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	429a      	cmp	r2, r3
 8005530:	d901      	bls.n	8005536 <f_write+0x298>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	699b      	ldr	r3, [r3, #24]
 8005540:	693a      	ldr	r2, [r7, #16]
 8005542:	8992      	ldrh	r2, [r2, #12]
 8005544:	fbb3 f0f2 	udiv	r0, r3, r2
 8005548:	fb00 f202 	mul.w	r2, r0, r2
 800554c:	1a9b      	subs	r3, r3, r2
 800554e:	440b      	add	r3, r1
 8005550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005552:	69f9      	ldr	r1, [r7, #28]
 8005554:	4618      	mov	r0, r3
 8005556:	f7fd fa85 	bl	8002a64 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	7d1b      	ldrb	r3, [r3, #20]
 800555e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005562:	b2da      	uxtb	r2, r3
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8005568:	69fa      	ldr	r2, [r7, #28]
 800556a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556c:	4413      	add	r3, r2
 800556e:	61fb      	str	r3, [r7, #28]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	699a      	ldr	r2, [r3, #24]
 8005574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005576:	441a      	add	r2, r3
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	619a      	str	r2, [r3, #24]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	68da      	ldr	r2, [r3, #12]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	699b      	ldr	r3, [r3, #24]
 8005584:	429a      	cmp	r2, r3
 8005586:	bf38      	it	cc
 8005588:	461a      	movcc	r2, r3
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	60da      	str	r2, [r3, #12]
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005594:	441a      	add	r2, r3
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	601a      	str	r2, [r3, #0]
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559e:	1ad3      	subs	r3, r2, r3
 80055a0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	f47f aeb5 	bne.w	8005314 <f_write+0x76>
 80055aa:	e000      	b.n	80055ae <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80055ac:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	7d1b      	ldrb	r3, [r3, #20]
 80055b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055b6:	b2da      	uxtb	r2, r3
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3730      	adds	r7, #48	; 0x30
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b086      	sub	sp, #24
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f107 0208 	add.w	r2, r7, #8
 80055d4:	4611      	mov	r1, r2
 80055d6:	4618      	mov	r0, r3
 80055d8:	f7ff faba 	bl	8004b50 <validate>
 80055dc:	4603      	mov	r3, r0
 80055de:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80055e0:	7dfb      	ldrb	r3, [r7, #23]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d168      	bne.n	80056b8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	7d1b      	ldrb	r3, [r3, #20]
 80055ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d062      	beq.n	80056b8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	7d1b      	ldrb	r3, [r3, #20]
 80055f6:	b25b      	sxtb	r3, r3
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	da15      	bge.n	8005628 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	7858      	ldrb	r0, [r3, #1]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a1a      	ldr	r2, [r3, #32]
 800560a:	2301      	movs	r3, #1
 800560c:	f7fd f96e 	bl	80028ec <disk_write>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d001      	beq.n	800561a <f_sync+0x54>
 8005616:	2301      	movs	r3, #1
 8005618:	e04f      	b.n	80056ba <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	7d1b      	ldrb	r3, [r3, #20]
 800561e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005622:	b2da      	uxtb	r2, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8005628:	f7fd f8a8 	bl	800277c <get_fattime>
 800562c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800562e:	68ba      	ldr	r2, [r7, #8]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005634:	4619      	mov	r1, r3
 8005636:	4610      	mov	r0, r2
 8005638:	f7fd fc38 	bl	8002eac <move_window>
 800563c:	4603      	mov	r3, r0
 800563e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8005640:	7dfb      	ldrb	r3, [r7, #23]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d138      	bne.n	80056b8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800564a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	330b      	adds	r3, #11
 8005650:	781a      	ldrb	r2, [r3, #0]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	330b      	adds	r3, #11
 8005656:	f042 0220 	orr.w	r2, r2, #32
 800565a:	b2d2      	uxtb	r2, r2
 800565c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6818      	ldr	r0, [r3, #0]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	461a      	mov	r2, r3
 8005668:	68f9      	ldr	r1, [r7, #12]
 800566a:	f7fe f9c4 	bl	80039f6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f103 021c 	add.w	r2, r3, #28
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	4619      	mov	r1, r3
 800567a:	4610      	mov	r0, r2
 800567c:	f7fd f9c7 	bl	8002a0e <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	3316      	adds	r3, #22
 8005684:	6939      	ldr	r1, [r7, #16]
 8005686:	4618      	mov	r0, r3
 8005688:	f7fd f9c1 	bl	8002a0e <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	3312      	adds	r3, #18
 8005690:	2100      	movs	r1, #0
 8005692:	4618      	mov	r0, r3
 8005694:	f7fd f9a1 	bl	80029da <st_word>
					fs->wflag = 1;
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	2201      	movs	r2, #1
 800569c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	4618      	mov	r0, r3
 80056a2:	f7fd fc31 	bl	8002f08 <sync_fs>
 80056a6:	4603      	mov	r3, r0
 80056a8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	7d1b      	ldrb	r3, [r3, #20]
 80056ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056b2:	b2da      	uxtb	r2, r3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80056b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3718      	adds	r7, #24
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}

080056c2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80056c2:	b580      	push	{r7, lr}
 80056c4:	b084      	sub	sp, #16
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f7ff ff7b 	bl	80055c6 <f_sync>
 80056d0:	4603      	mov	r3, r0
 80056d2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80056d4:	7bfb      	ldrb	r3, [r7, #15]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d118      	bne.n	800570c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f107 0208 	add.w	r2, r7, #8
 80056e0:	4611      	mov	r1, r2
 80056e2:	4618      	mov	r0, r3
 80056e4:	f7ff fa34 	bl	8004b50 <validate>
 80056e8:	4603      	mov	r3, r0
 80056ea:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80056ec:	7bfb      	ldrb	r3, [r7, #15]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d10c      	bne.n	800570c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	4618      	mov	r0, r3
 80056f8:	f7fd fb36 	bl	8002d68 <dec_lock>
 80056fc:	4603      	mov	r3, r0
 80056fe:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8005700:	7bfb      	ldrb	r3, [r7, #15]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d102      	bne.n	800570c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800570c:	7bfb      	ldrb	r3, [r7, #15]
}
 800570e:	4618      	mov	r0, r3
 8005710:	3710      	adds	r7, #16
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}

08005716 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8005716:	b580      	push	{r7, lr}
 8005718:	b092      	sub	sp, #72	; 0x48
 800571a:	af00      	add	r7, sp, #0
 800571c:	60f8      	str	r0, [r7, #12]
 800571e:	60b9      	str	r1, [r7, #8]
 8005720:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8005722:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005726:	f107 030c 	add.w	r3, r7, #12
 800572a:	2200      	movs	r2, #0
 800572c:	4618      	mov	r0, r3
 800572e:	f7fe ff89 	bl	8004644 <find_volume>
 8005732:	4603      	mov	r3, r0
 8005734:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8005738:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800573c:	2b00      	cmp	r3, #0
 800573e:	f040 8099 	bne.w	8005874 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8005742:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8005748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800574a:	699a      	ldr	r2, [r3, #24]
 800574c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800574e:	69db      	ldr	r3, [r3, #28]
 8005750:	3b02      	subs	r3, #2
 8005752:	429a      	cmp	r2, r3
 8005754:	d804      	bhi.n	8005760 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8005756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005758:	699a      	ldr	r2, [r3, #24]
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	601a      	str	r2, [r3, #0]
 800575e:	e089      	b.n	8005874 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8005760:	2300      	movs	r3, #0
 8005762:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8005764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	2b01      	cmp	r3, #1
 800576a:	d128      	bne.n	80057be <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800576c:	2302      	movs	r3, #2
 800576e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005772:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8005774:	f107 0314 	add.w	r3, r7, #20
 8005778:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800577a:	4618      	mov	r0, r3
 800577c:	f7fd fc52 	bl	8003024 <get_fat>
 8005780:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8005782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005788:	d103      	bne.n	8005792 <f_getfree+0x7c>
 800578a:	2301      	movs	r3, #1
 800578c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005790:	e063      	b.n	800585a <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8005792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005794:	2b01      	cmp	r3, #1
 8005796:	d103      	bne.n	80057a0 <f_getfree+0x8a>
 8005798:	2302      	movs	r3, #2
 800579a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800579e:	e05c      	b.n	800585a <f_getfree+0x144>
					if (stat == 0) nfree++;
 80057a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d102      	bne.n	80057ac <f_getfree+0x96>
 80057a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057a8:	3301      	adds	r3, #1
 80057aa:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 80057ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057ae:	3301      	adds	r3, #1
 80057b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b4:	69db      	ldr	r3, [r3, #28]
 80057b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d3db      	bcc.n	8005774 <f_getfree+0x5e>
 80057bc:	e04d      	b.n	800585a <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 80057be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c0:	69db      	ldr	r3, [r3, #28]
 80057c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c8:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 80057ca:	2300      	movs	r3, #0
 80057cc:	637b      	str	r3, [r7, #52]	; 0x34
 80057ce:	2300      	movs	r3, #0
 80057d0:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 80057d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d113      	bne.n	8005800 <f_getfree+0xea>
							res = move_window(fs, sect++);
 80057d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057dc:	1c5a      	adds	r2, r3, #1
 80057de:	63ba      	str	r2, [r7, #56]	; 0x38
 80057e0:	4619      	mov	r1, r3
 80057e2:	f7fd fb63 	bl	8002eac <move_window>
 80057e6:	4603      	mov	r3, r0
 80057e8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 80057ec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d131      	bne.n	8005858 <f_getfree+0x142>
							p = fs->win;
 80057f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f6:	3338      	adds	r3, #56	; 0x38
 80057f8:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 80057fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057fc:	899b      	ldrh	r3, [r3, #12]
 80057fe:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8005800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	2b02      	cmp	r3, #2
 8005806:	d10f      	bne.n	8005828 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8005808:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800580a:	f7fd f8ad 	bl	8002968 <ld_word>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d102      	bne.n	800581a <f_getfree+0x104>
 8005814:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005816:	3301      	adds	r3, #1
 8005818:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800581a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800581c:	3302      	adds	r3, #2
 800581e:	633b      	str	r3, [r7, #48]	; 0x30
 8005820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005822:	3b02      	subs	r3, #2
 8005824:	637b      	str	r3, [r7, #52]	; 0x34
 8005826:	e010      	b.n	800584a <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8005828:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800582a:	f7fd f8b4 	bl	8002996 <ld_dword>
 800582e:	4603      	mov	r3, r0
 8005830:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005834:	2b00      	cmp	r3, #0
 8005836:	d102      	bne.n	800583e <f_getfree+0x128>
 8005838:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800583a:	3301      	adds	r3, #1
 800583c:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800583e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005840:	3304      	adds	r3, #4
 8005842:	633b      	str	r3, [r7, #48]	; 0x30
 8005844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005846:	3b04      	subs	r3, #4
 8005848:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800584a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800584c:	3b01      	subs	r3, #1
 800584e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005852:	2b00      	cmp	r3, #0
 8005854:	d1bd      	bne.n	80057d2 <f_getfree+0xbc>
 8005856:	e000      	b.n	800585a <f_getfree+0x144>
							if (res != FR_OK) break;
 8005858:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800585e:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8005860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005862:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005864:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8005866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005868:	791a      	ldrb	r2, [r3, #4]
 800586a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800586c:	f042 0201 	orr.w	r2, r2, #1
 8005870:	b2d2      	uxtb	r2, r2
 8005872:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8005874:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8005878:	4618      	mov	r0, r3
 800587a:	3748      	adds	r7, #72	; 0x48
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b088      	sub	sp, #32
 8005884:	af00      	add	r7, sp, #0
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	607a      	str	r2, [r7, #4]
	int n = 0;
 800588c:	2300      	movs	r3, #0
 800588e:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8005894:	e01b      	b.n	80058ce <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8005896:	f107 0310 	add.w	r3, r7, #16
 800589a:	f107 0114 	add.w	r1, r7, #20
 800589e:	2201      	movs	r2, #1
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f7ff fb9d 	bl	8004fe0 <f_read>
		if (rc != 1) break;
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d116      	bne.n	80058da <f_gets+0x5a>
		c = s[0];
 80058ac:	7d3b      	ldrb	r3, [r7, #20]
 80058ae:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80058b0:	7dfb      	ldrb	r3, [r7, #23]
 80058b2:	2b0d      	cmp	r3, #13
 80058b4:	d100      	bne.n	80058b8 <f_gets+0x38>
 80058b6:	e00a      	b.n	80058ce <f_gets+0x4e>
		*p++ = c;
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	1c5a      	adds	r2, r3, #1
 80058bc:	61ba      	str	r2, [r7, #24]
 80058be:	7dfa      	ldrb	r2, [r7, #23]
 80058c0:	701a      	strb	r2, [r3, #0]
		n++;
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	3301      	adds	r3, #1
 80058c6:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80058c8:	7dfb      	ldrb	r3, [r7, #23]
 80058ca:	2b0a      	cmp	r3, #10
 80058cc:	d007      	beq.n	80058de <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	3b01      	subs	r3, #1
 80058d2:	69fa      	ldr	r2, [r7, #28]
 80058d4:	429a      	cmp	r2, r3
 80058d6:	dbde      	blt.n	8005896 <f_gets+0x16>
 80058d8:	e002      	b.n	80058e0 <f_gets+0x60>
		if (rc != 1) break;
 80058da:	bf00      	nop
 80058dc:	e000      	b.n	80058e0 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 80058de:	bf00      	nop
	}
	*p = 0;
 80058e0:	69bb      	ldr	r3, [r7, #24]
 80058e2:	2200      	movs	r2, #0
 80058e4:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d001      	beq.n	80058f0 <f_gets+0x70>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	e000      	b.n	80058f2 <f_gets+0x72>
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3720      	adds	r7, #32
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}

080058fa <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 80058fa:	b580      	push	{r7, lr}
 80058fc:	b084      	sub	sp, #16
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
 8005902:	460b      	mov	r3, r1
 8005904:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8005906:	78fb      	ldrb	r3, [r7, #3]
 8005908:	2b0a      	cmp	r3, #10
 800590a:	d103      	bne.n	8005914 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800590c:	210d      	movs	r1, #13
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f7ff fff3 	bl	80058fa <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2b00      	cmp	r3, #0
 800591e:	db25      	blt.n	800596c <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	1c5a      	adds	r2, r3, #1
 8005924:	60fa      	str	r2, [r7, #12]
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	4413      	add	r3, r2
 800592a:	78fa      	ldrb	r2, [r7, #3]
 800592c:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2b3c      	cmp	r3, #60	; 0x3c
 8005932:	dd12      	ble.n	800595a <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6818      	ldr	r0, [r3, #0]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f103 010c 	add.w	r1, r3, #12
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	f107 0308 	add.w	r3, r7, #8
 8005944:	f7ff fcab 	bl	800529e <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8005948:	68ba      	ldr	r2, [r7, #8]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	429a      	cmp	r2, r3
 800594e:	d101      	bne.n	8005954 <putc_bfd+0x5a>
 8005950:	2300      	movs	r3, #0
 8005952:	e001      	b.n	8005958 <putc_bfd+0x5e>
 8005954:	f04f 33ff 	mov.w	r3, #4294967295
 8005958:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	1c5a      	adds	r2, r3, #1
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	609a      	str	r2, [r3, #8]
 800596a:	e000      	b.n	800596e <putc_bfd+0x74>
	if (i < 0) return;
 800596c:	bf00      	nop
}
 800596e:	3710      	adds	r7, #16
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	2b00      	cmp	r3, #0
 8005982:	db16      	blt.n	80059b2 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6818      	ldr	r0, [r3, #0]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f103 010c 	add.w	r1, r3, #12
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	461a      	mov	r2, r3
 8005994:	f107 030c 	add.w	r3, r7, #12
 8005998:	f7ff fc81 	bl	800529e <f_write>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d107      	bne.n	80059b2 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	68fa      	ldr	r2, [r7, #12]
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d102      	bne.n	80059b2 <putc_flush+0x3e>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	e001      	b.n	80059b6 <putc_flush+0x42>
	return EOF;
 80059b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3710      	adds	r7, #16
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}

080059be <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 80059be:	b480      	push	{r7}
 80059c0:	b083      	sub	sp, #12
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
 80059c6:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	683a      	ldr	r2, [r7, #0]
 80059cc:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	605a      	str	r2, [r3, #4]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685a      	ldr	r2, [r3, #4]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	609a      	str	r2, [r3, #8]
}
 80059dc:	bf00      	nop
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bc80      	pop	{r7}
 80059e4:	4770      	bx	lr

080059e6 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 80059e6:	b580      	push	{r7, lr}
 80059e8:	b096      	sub	sp, #88	; 0x58
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
 80059ee:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 80059f0:	f107 030c 	add.w	r3, r7, #12
 80059f4:	6839      	ldr	r1, [r7, #0]
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7ff ffe1 	bl	80059be <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 80059fc:	e009      	b.n	8005a12 <f_puts+0x2c>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	1c5a      	adds	r2, r3, #1
 8005a02:	607a      	str	r2, [r7, #4]
 8005a04:	781a      	ldrb	r2, [r3, #0]
 8005a06:	f107 030c 	add.w	r3, r7, #12
 8005a0a:	4611      	mov	r1, r2
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f7ff ff74 	bl	80058fa <putc_bfd>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d1f1      	bne.n	80059fe <f_puts+0x18>
	return putc_flush(&pb);
 8005a1a:	f107 030c 	add.w	r3, r7, #12
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f7ff ffa8 	bl	8005974 <putc_flush>
 8005a24:	4603      	mov	r3, r0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3758      	adds	r7, #88	; 0x58
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
	...

08005a30 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b087      	sub	sp, #28
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005a42:	2300      	movs	r3, #0
 8005a44:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8005a46:	4b1e      	ldr	r3, [pc, #120]	; (8005ac0 <FATFS_LinkDriverEx+0x90>)
 8005a48:	7a5b      	ldrb	r3, [r3, #9]
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d131      	bne.n	8005ab4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005a50:	4b1b      	ldr	r3, [pc, #108]	; (8005ac0 <FATFS_LinkDriverEx+0x90>)
 8005a52:	7a5b      	ldrb	r3, [r3, #9]
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	461a      	mov	r2, r3
 8005a58:	4b19      	ldr	r3, [pc, #100]	; (8005ac0 <FATFS_LinkDriverEx+0x90>)
 8005a5a:	2100      	movs	r1, #0
 8005a5c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8005a5e:	4b18      	ldr	r3, [pc, #96]	; (8005ac0 <FATFS_LinkDriverEx+0x90>)
 8005a60:	7a5b      	ldrb	r3, [r3, #9]
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	4a16      	ldr	r2, [pc, #88]	; (8005ac0 <FATFS_LinkDriverEx+0x90>)
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	4413      	add	r3, r2
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8005a6e:	4b14      	ldr	r3, [pc, #80]	; (8005ac0 <FATFS_LinkDriverEx+0x90>)
 8005a70:	7a5b      	ldrb	r3, [r3, #9]
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	461a      	mov	r2, r3
 8005a76:	4b12      	ldr	r3, [pc, #72]	; (8005ac0 <FATFS_LinkDriverEx+0x90>)
 8005a78:	4413      	add	r3, r2
 8005a7a:	79fa      	ldrb	r2, [r7, #7]
 8005a7c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8005a7e:	4b10      	ldr	r3, [pc, #64]	; (8005ac0 <FATFS_LinkDriverEx+0x90>)
 8005a80:	7a5b      	ldrb	r3, [r3, #9]
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	1c5a      	adds	r2, r3, #1
 8005a86:	b2d1      	uxtb	r1, r2
 8005a88:	4a0d      	ldr	r2, [pc, #52]	; (8005ac0 <FATFS_LinkDriverEx+0x90>)
 8005a8a:	7251      	strb	r1, [r2, #9]
 8005a8c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8005a8e:	7dbb      	ldrb	r3, [r7, #22]
 8005a90:	3330      	adds	r3, #48	; 0x30
 8005a92:	b2da      	uxtb	r2, r3
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	223a      	movs	r2, #58	; 0x3a
 8005a9e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	3302      	adds	r3, #2
 8005aa4:	222f      	movs	r2, #47	; 0x2f
 8005aa6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	3303      	adds	r3, #3
 8005aac:	2200      	movs	r2, #0
 8005aae:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005ab4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	371c      	adds	r7, #28
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bc80      	pop	{r7}
 8005abe:	4770      	bx	lr
 8005ac0:	20000310 	.word	0x20000310

08005ac4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b082      	sub	sp, #8
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005ace:	2200      	movs	r2, #0
 8005ad0:	6839      	ldr	r1, [r7, #0]
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f7ff ffac 	bl	8005a30 <FATFS_LinkDriverEx>
 8005ad8:	4603      	mov	r3, r0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3708      	adds	r7, #8
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
	...

08005ae4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b085      	sub	sp, #20
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	4603      	mov	r3, r0
 8005aec:	6039      	str	r1, [r7, #0]
 8005aee:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8005af0:	88fb      	ldrh	r3, [r7, #6]
 8005af2:	2b7f      	cmp	r3, #127	; 0x7f
 8005af4:	d802      	bhi.n	8005afc <ff_convert+0x18>
		c = chr;
 8005af6:	88fb      	ldrh	r3, [r7, #6]
 8005af8:	81fb      	strh	r3, [r7, #14]
 8005afa:	e025      	b.n	8005b48 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d00b      	beq.n	8005b1a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8005b02:	88fb      	ldrh	r3, [r7, #6]
 8005b04:	2bff      	cmp	r3, #255	; 0xff
 8005b06:	d805      	bhi.n	8005b14 <ff_convert+0x30>
 8005b08:	88fb      	ldrh	r3, [r7, #6]
 8005b0a:	3b80      	subs	r3, #128	; 0x80
 8005b0c:	4a11      	ldr	r2, [pc, #68]	; (8005b54 <ff_convert+0x70>)
 8005b0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b12:	e000      	b.n	8005b16 <ff_convert+0x32>
 8005b14:	2300      	movs	r3, #0
 8005b16:	81fb      	strh	r3, [r7, #14]
 8005b18:	e016      	b.n	8005b48 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	81fb      	strh	r3, [r7, #14]
 8005b1e:	e009      	b.n	8005b34 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8005b20:	89fb      	ldrh	r3, [r7, #14]
 8005b22:	4a0c      	ldr	r2, [pc, #48]	; (8005b54 <ff_convert+0x70>)
 8005b24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b28:	88fa      	ldrh	r2, [r7, #6]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d006      	beq.n	8005b3c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8005b2e:	89fb      	ldrh	r3, [r7, #14]
 8005b30:	3301      	adds	r3, #1
 8005b32:	81fb      	strh	r3, [r7, #14]
 8005b34:	89fb      	ldrh	r3, [r7, #14]
 8005b36:	2b7f      	cmp	r3, #127	; 0x7f
 8005b38:	d9f2      	bls.n	8005b20 <ff_convert+0x3c>
 8005b3a:	e000      	b.n	8005b3e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8005b3c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8005b3e:	89fb      	ldrh	r3, [r7, #14]
 8005b40:	3380      	adds	r3, #128	; 0x80
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8005b48:	89fb      	ldrh	r3, [r7, #14]
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3714      	adds	r7, #20
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bc80      	pop	{r7}
 8005b52:	4770      	bx	lr
 8005b54:	08005ec0 	.word	0x08005ec0

08005b58 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b087      	sub	sp, #28
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	4603      	mov	r3, r0
 8005b60:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8005b62:	88fb      	ldrh	r3, [r7, #6]
 8005b64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b68:	d201      	bcs.n	8005b6e <ff_wtoupper+0x16>
 8005b6a:	4b3d      	ldr	r3, [pc, #244]	; (8005c60 <ff_wtoupper+0x108>)
 8005b6c:	e000      	b.n	8005b70 <ff_wtoupper+0x18>
 8005b6e:	4b3d      	ldr	r3, [pc, #244]	; (8005c64 <ff_wtoupper+0x10c>)
 8005b70:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	1c9a      	adds	r2, r3, #2
 8005b76:	617a      	str	r2, [r7, #20]
 8005b78:	881b      	ldrh	r3, [r3, #0]
 8005b7a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8005b7c:	8a7b      	ldrh	r3, [r7, #18]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d068      	beq.n	8005c54 <ff_wtoupper+0xfc>
 8005b82:	88fa      	ldrh	r2, [r7, #6]
 8005b84:	8a7b      	ldrh	r3, [r7, #18]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d364      	bcc.n	8005c54 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	1c9a      	adds	r2, r3, #2
 8005b8e:	617a      	str	r2, [r7, #20]
 8005b90:	881b      	ldrh	r3, [r3, #0]
 8005b92:	823b      	strh	r3, [r7, #16]
 8005b94:	8a3b      	ldrh	r3, [r7, #16]
 8005b96:	0a1b      	lsrs	r3, r3, #8
 8005b98:	81fb      	strh	r3, [r7, #14]
 8005b9a:	8a3b      	ldrh	r3, [r7, #16]
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8005ba0:	88fa      	ldrh	r2, [r7, #6]
 8005ba2:	8a79      	ldrh	r1, [r7, #18]
 8005ba4:	8a3b      	ldrh	r3, [r7, #16]
 8005ba6:	440b      	add	r3, r1
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	da49      	bge.n	8005c40 <ff_wtoupper+0xe8>
			switch (cmd) {
 8005bac:	89fb      	ldrh	r3, [r7, #14]
 8005bae:	2b08      	cmp	r3, #8
 8005bb0:	d84f      	bhi.n	8005c52 <ff_wtoupper+0xfa>
 8005bb2:	a201      	add	r2, pc, #4	; (adr r2, 8005bb8 <ff_wtoupper+0x60>)
 8005bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bb8:	08005bdd 	.word	0x08005bdd
 8005bbc:	08005bef 	.word	0x08005bef
 8005bc0:	08005c05 	.word	0x08005c05
 8005bc4:	08005c0d 	.word	0x08005c0d
 8005bc8:	08005c15 	.word	0x08005c15
 8005bcc:	08005c1d 	.word	0x08005c1d
 8005bd0:	08005c25 	.word	0x08005c25
 8005bd4:	08005c2d 	.word	0x08005c2d
 8005bd8:	08005c35 	.word	0x08005c35
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8005bdc:	88fa      	ldrh	r2, [r7, #6]
 8005bde:	8a7b      	ldrh	r3, [r7, #18]
 8005be0:	1ad3      	subs	r3, r2, r3
 8005be2:	005b      	lsls	r3, r3, #1
 8005be4:	697a      	ldr	r2, [r7, #20]
 8005be6:	4413      	add	r3, r2
 8005be8:	881b      	ldrh	r3, [r3, #0]
 8005bea:	80fb      	strh	r3, [r7, #6]
 8005bec:	e027      	b.n	8005c3e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8005bee:	88fa      	ldrh	r2, [r7, #6]
 8005bf0:	8a7b      	ldrh	r3, [r7, #18]
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	f003 0301 	and.w	r3, r3, #1
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	88fa      	ldrh	r2, [r7, #6]
 8005bfe:	1ad3      	subs	r3, r2, r3
 8005c00:	80fb      	strh	r3, [r7, #6]
 8005c02:	e01c      	b.n	8005c3e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8005c04:	88fb      	ldrh	r3, [r7, #6]
 8005c06:	3b10      	subs	r3, #16
 8005c08:	80fb      	strh	r3, [r7, #6]
 8005c0a:	e018      	b.n	8005c3e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8005c0c:	88fb      	ldrh	r3, [r7, #6]
 8005c0e:	3b20      	subs	r3, #32
 8005c10:	80fb      	strh	r3, [r7, #6]
 8005c12:	e014      	b.n	8005c3e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8005c14:	88fb      	ldrh	r3, [r7, #6]
 8005c16:	3b30      	subs	r3, #48	; 0x30
 8005c18:	80fb      	strh	r3, [r7, #6]
 8005c1a:	e010      	b.n	8005c3e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8005c1c:	88fb      	ldrh	r3, [r7, #6]
 8005c1e:	3b1a      	subs	r3, #26
 8005c20:	80fb      	strh	r3, [r7, #6]
 8005c22:	e00c      	b.n	8005c3e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8005c24:	88fb      	ldrh	r3, [r7, #6]
 8005c26:	3308      	adds	r3, #8
 8005c28:	80fb      	strh	r3, [r7, #6]
 8005c2a:	e008      	b.n	8005c3e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8005c2c:	88fb      	ldrh	r3, [r7, #6]
 8005c2e:	3b50      	subs	r3, #80	; 0x50
 8005c30:	80fb      	strh	r3, [r7, #6]
 8005c32:	e004      	b.n	8005c3e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8005c34:	88fb      	ldrh	r3, [r7, #6]
 8005c36:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8005c3a:	80fb      	strh	r3, [r7, #6]
 8005c3c:	bf00      	nop
			}
			break;
 8005c3e:	e008      	b.n	8005c52 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8005c40:	89fb      	ldrh	r3, [r7, #14]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d195      	bne.n	8005b72 <ff_wtoupper+0x1a>
 8005c46:	8a3b      	ldrh	r3, [r7, #16]
 8005c48:	005b      	lsls	r3, r3, #1
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8005c50:	e78f      	b.n	8005b72 <ff_wtoupper+0x1a>
			break;
 8005c52:	bf00      	nop
	}

	return chr;
 8005c54:	88fb      	ldrh	r3, [r7, #6]
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	371c      	adds	r7, #28
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bc80      	pop	{r7}
 8005c5e:	4770      	bx	lr
 8005c60:	08005fc0 	.word	0x08005fc0
 8005c64:	080061b4 	.word	0x080061b4

08005c68 <__libc_init_array>:
 8005c68:	b570      	push	{r4, r5, r6, lr}
 8005c6a:	2600      	movs	r6, #0
 8005c6c:	4d0c      	ldr	r5, [pc, #48]	; (8005ca0 <__libc_init_array+0x38>)
 8005c6e:	4c0d      	ldr	r4, [pc, #52]	; (8005ca4 <__libc_init_array+0x3c>)
 8005c70:	1b64      	subs	r4, r4, r5
 8005c72:	10a4      	asrs	r4, r4, #2
 8005c74:	42a6      	cmp	r6, r4
 8005c76:	d109      	bne.n	8005c8c <__libc_init_array+0x24>
 8005c78:	f000 f822 	bl	8005cc0 <_init>
 8005c7c:	2600      	movs	r6, #0
 8005c7e:	4d0a      	ldr	r5, [pc, #40]	; (8005ca8 <__libc_init_array+0x40>)
 8005c80:	4c0a      	ldr	r4, [pc, #40]	; (8005cac <__libc_init_array+0x44>)
 8005c82:	1b64      	subs	r4, r4, r5
 8005c84:	10a4      	asrs	r4, r4, #2
 8005c86:	42a6      	cmp	r6, r4
 8005c88:	d105      	bne.n	8005c96 <__libc_init_array+0x2e>
 8005c8a:	bd70      	pop	{r4, r5, r6, pc}
 8005c8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c90:	4798      	blx	r3
 8005c92:	3601      	adds	r6, #1
 8005c94:	e7ee      	b.n	8005c74 <__libc_init_array+0xc>
 8005c96:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c9a:	4798      	blx	r3
 8005c9c:	3601      	adds	r6, #1
 8005c9e:	e7f2      	b.n	8005c86 <__libc_init_array+0x1e>
 8005ca0:	08006278 	.word	0x08006278
 8005ca4:	08006278 	.word	0x08006278
 8005ca8:	08006278 	.word	0x08006278
 8005cac:	0800627c 	.word	0x0800627c

08005cb0 <memset>:
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	4402      	add	r2, r0
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d100      	bne.n	8005cba <memset+0xa>
 8005cb8:	4770      	bx	lr
 8005cba:	f803 1b01 	strb.w	r1, [r3], #1
 8005cbe:	e7f9      	b.n	8005cb4 <memset+0x4>

08005cc0 <_init>:
 8005cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cc2:	bf00      	nop
 8005cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cc6:	bc08      	pop	{r3}
 8005cc8:	469e      	mov	lr, r3
 8005cca:	4770      	bx	lr

08005ccc <_fini>:
 8005ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cce:	bf00      	nop
 8005cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cd2:	bc08      	pop	{r3}
 8005cd4:	469e      	mov	lr, r3
 8005cd6:	4770      	bx	lr
