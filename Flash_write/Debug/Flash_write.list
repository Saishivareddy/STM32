
Flash_write.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bd8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08002c98  08002c98  00012c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d58  08002d58  00020034  2**0
                  CONTENTS
  4 .ARM          00000008  08002d58  08002d58  00012d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002d60  08002d60  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d60  08002d60  00012d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d64  08002d64  00012d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08002d68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  20000034  08002d9c  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  08002d9c  000201d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009805  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bdb  00000000  00000000  00029861  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000860  00000000  00000000  0002b440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007b8  00000000  00000000  0002bca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001440c  00000000  00000000  0002c458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ae4c  00000000  00000000  00040864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007bed3  00000000  00000000  0004b6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c7583  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cf0  00000000  00000000  000c75d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000034 	.word	0x20000034
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002c80 	.word	0x08002c80

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000038 	.word	0x20000038
 8000104:	08002c80 	.word	0x08002c80

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	; (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	; (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f834 	bl	80002cc <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__aeabi_lmul>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	46ce      	mov	lr, r9
 8000274:	4647      	mov	r7, r8
 8000276:	b580      	push	{r7, lr}
 8000278:	0007      	movs	r7, r0
 800027a:	4699      	mov	r9, r3
 800027c:	0c3b      	lsrs	r3, r7, #16
 800027e:	469c      	mov	ip, r3
 8000280:	0413      	lsls	r3, r2, #16
 8000282:	0c1b      	lsrs	r3, r3, #16
 8000284:	001d      	movs	r5, r3
 8000286:	000e      	movs	r6, r1
 8000288:	4661      	mov	r1, ip
 800028a:	0400      	lsls	r0, r0, #16
 800028c:	0c14      	lsrs	r4, r2, #16
 800028e:	0c00      	lsrs	r0, r0, #16
 8000290:	4345      	muls	r5, r0
 8000292:	434b      	muls	r3, r1
 8000294:	4360      	muls	r0, r4
 8000296:	4361      	muls	r1, r4
 8000298:	18c0      	adds	r0, r0, r3
 800029a:	0c2c      	lsrs	r4, r5, #16
 800029c:	1820      	adds	r0, r4, r0
 800029e:	468c      	mov	ip, r1
 80002a0:	4283      	cmp	r3, r0
 80002a2:	d903      	bls.n	80002ac <__aeabi_lmul+0x3c>
 80002a4:	2380      	movs	r3, #128	; 0x80
 80002a6:	025b      	lsls	r3, r3, #9
 80002a8:	4698      	mov	r8, r3
 80002aa:	44c4      	add	ip, r8
 80002ac:	4649      	mov	r1, r9
 80002ae:	4379      	muls	r1, r7
 80002b0:	4372      	muls	r2, r6
 80002b2:	0c03      	lsrs	r3, r0, #16
 80002b4:	4463      	add	r3, ip
 80002b6:	042d      	lsls	r5, r5, #16
 80002b8:	0c2d      	lsrs	r5, r5, #16
 80002ba:	18c9      	adds	r1, r1, r3
 80002bc:	0400      	lsls	r0, r0, #16
 80002be:	1940      	adds	r0, r0, r5
 80002c0:	1889      	adds	r1, r1, r2
 80002c2:	bcc0      	pop	{r6, r7}
 80002c4:	46b9      	mov	r9, r7
 80002c6:	46b0      	mov	r8, r6
 80002c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ca:	46c0      	nop			; (mov r8, r8)

080002cc <__udivmoddi4>:
 80002cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ce:	4657      	mov	r7, sl
 80002d0:	464e      	mov	r6, r9
 80002d2:	4645      	mov	r5, r8
 80002d4:	46de      	mov	lr, fp
 80002d6:	b5e0      	push	{r5, r6, r7, lr}
 80002d8:	0004      	movs	r4, r0
 80002da:	000d      	movs	r5, r1
 80002dc:	4692      	mov	sl, r2
 80002de:	4699      	mov	r9, r3
 80002e0:	b083      	sub	sp, #12
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d830      	bhi.n	8000348 <__udivmoddi4+0x7c>
 80002e6:	d02d      	beq.n	8000344 <__udivmoddi4+0x78>
 80002e8:	4649      	mov	r1, r9
 80002ea:	4650      	mov	r0, sl
 80002ec:	f000 f8ba 	bl	8000464 <__clzdi2>
 80002f0:	0029      	movs	r1, r5
 80002f2:	0006      	movs	r6, r0
 80002f4:	0020      	movs	r0, r4
 80002f6:	f000 f8b5 	bl	8000464 <__clzdi2>
 80002fa:	1a33      	subs	r3, r6, r0
 80002fc:	4698      	mov	r8, r3
 80002fe:	3b20      	subs	r3, #32
 8000300:	469b      	mov	fp, r3
 8000302:	d433      	bmi.n	800036c <__udivmoddi4+0xa0>
 8000304:	465a      	mov	r2, fp
 8000306:	4653      	mov	r3, sl
 8000308:	4093      	lsls	r3, r2
 800030a:	4642      	mov	r2, r8
 800030c:	001f      	movs	r7, r3
 800030e:	4653      	mov	r3, sl
 8000310:	4093      	lsls	r3, r2
 8000312:	001e      	movs	r6, r3
 8000314:	42af      	cmp	r7, r5
 8000316:	d83a      	bhi.n	800038e <__udivmoddi4+0xc2>
 8000318:	42af      	cmp	r7, r5
 800031a:	d100      	bne.n	800031e <__udivmoddi4+0x52>
 800031c:	e078      	b.n	8000410 <__udivmoddi4+0x144>
 800031e:	465b      	mov	r3, fp
 8000320:	1ba4      	subs	r4, r4, r6
 8000322:	41bd      	sbcs	r5, r7
 8000324:	2b00      	cmp	r3, #0
 8000326:	da00      	bge.n	800032a <__udivmoddi4+0x5e>
 8000328:	e075      	b.n	8000416 <__udivmoddi4+0x14a>
 800032a:	2200      	movs	r2, #0
 800032c:	2300      	movs	r3, #0
 800032e:	9200      	str	r2, [sp, #0]
 8000330:	9301      	str	r3, [sp, #4]
 8000332:	2301      	movs	r3, #1
 8000334:	465a      	mov	r2, fp
 8000336:	4093      	lsls	r3, r2
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	2301      	movs	r3, #1
 800033c:	4642      	mov	r2, r8
 800033e:	4093      	lsls	r3, r2
 8000340:	9300      	str	r3, [sp, #0]
 8000342:	e028      	b.n	8000396 <__udivmoddi4+0xca>
 8000344:	4282      	cmp	r2, r0
 8000346:	d9cf      	bls.n	80002e8 <__udivmoddi4+0x1c>
 8000348:	2200      	movs	r2, #0
 800034a:	2300      	movs	r3, #0
 800034c:	9200      	str	r2, [sp, #0]
 800034e:	9301      	str	r3, [sp, #4]
 8000350:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <__udivmoddi4+0x8e>
 8000356:	601c      	str	r4, [r3, #0]
 8000358:	605d      	str	r5, [r3, #4]
 800035a:	9800      	ldr	r0, [sp, #0]
 800035c:	9901      	ldr	r1, [sp, #4]
 800035e:	b003      	add	sp, #12
 8000360:	bcf0      	pop	{r4, r5, r6, r7}
 8000362:	46bb      	mov	fp, r7
 8000364:	46b2      	mov	sl, r6
 8000366:	46a9      	mov	r9, r5
 8000368:	46a0      	mov	r8, r4
 800036a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800036c:	4642      	mov	r2, r8
 800036e:	2320      	movs	r3, #32
 8000370:	1a9b      	subs	r3, r3, r2
 8000372:	4652      	mov	r2, sl
 8000374:	40da      	lsrs	r2, r3
 8000376:	4641      	mov	r1, r8
 8000378:	0013      	movs	r3, r2
 800037a:	464a      	mov	r2, r9
 800037c:	408a      	lsls	r2, r1
 800037e:	0017      	movs	r7, r2
 8000380:	4642      	mov	r2, r8
 8000382:	431f      	orrs	r7, r3
 8000384:	4653      	mov	r3, sl
 8000386:	4093      	lsls	r3, r2
 8000388:	001e      	movs	r6, r3
 800038a:	42af      	cmp	r7, r5
 800038c:	d9c4      	bls.n	8000318 <__udivmoddi4+0x4c>
 800038e:	2200      	movs	r2, #0
 8000390:	2300      	movs	r3, #0
 8000392:	9200      	str	r2, [sp, #0]
 8000394:	9301      	str	r3, [sp, #4]
 8000396:	4643      	mov	r3, r8
 8000398:	2b00      	cmp	r3, #0
 800039a:	d0d9      	beq.n	8000350 <__udivmoddi4+0x84>
 800039c:	07fb      	lsls	r3, r7, #31
 800039e:	0872      	lsrs	r2, r6, #1
 80003a0:	431a      	orrs	r2, r3
 80003a2:	4646      	mov	r6, r8
 80003a4:	087b      	lsrs	r3, r7, #1
 80003a6:	e00e      	b.n	80003c6 <__udivmoddi4+0xfa>
 80003a8:	42ab      	cmp	r3, r5
 80003aa:	d101      	bne.n	80003b0 <__udivmoddi4+0xe4>
 80003ac:	42a2      	cmp	r2, r4
 80003ae:	d80c      	bhi.n	80003ca <__udivmoddi4+0xfe>
 80003b0:	1aa4      	subs	r4, r4, r2
 80003b2:	419d      	sbcs	r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	1924      	adds	r4, r4, r4
 80003b8:	416d      	adcs	r5, r5
 80003ba:	2100      	movs	r1, #0
 80003bc:	3e01      	subs	r6, #1
 80003be:	1824      	adds	r4, r4, r0
 80003c0:	414d      	adcs	r5, r1
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d006      	beq.n	80003d4 <__udivmoddi4+0x108>
 80003c6:	42ab      	cmp	r3, r5
 80003c8:	d9ee      	bls.n	80003a8 <__udivmoddi4+0xdc>
 80003ca:	3e01      	subs	r6, #1
 80003cc:	1924      	adds	r4, r4, r4
 80003ce:	416d      	adcs	r5, r5
 80003d0:	2e00      	cmp	r6, #0
 80003d2:	d1f8      	bne.n	80003c6 <__udivmoddi4+0xfa>
 80003d4:	9800      	ldr	r0, [sp, #0]
 80003d6:	9901      	ldr	r1, [sp, #4]
 80003d8:	465b      	mov	r3, fp
 80003da:	1900      	adds	r0, r0, r4
 80003dc:	4169      	adcs	r1, r5
 80003de:	2b00      	cmp	r3, #0
 80003e0:	db24      	blt.n	800042c <__udivmoddi4+0x160>
 80003e2:	002b      	movs	r3, r5
 80003e4:	465a      	mov	r2, fp
 80003e6:	4644      	mov	r4, r8
 80003e8:	40d3      	lsrs	r3, r2
 80003ea:	002a      	movs	r2, r5
 80003ec:	40e2      	lsrs	r2, r4
 80003ee:	001c      	movs	r4, r3
 80003f0:	465b      	mov	r3, fp
 80003f2:	0015      	movs	r5, r2
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	db2a      	blt.n	800044e <__udivmoddi4+0x182>
 80003f8:	0026      	movs	r6, r4
 80003fa:	409e      	lsls	r6, r3
 80003fc:	0033      	movs	r3, r6
 80003fe:	0026      	movs	r6, r4
 8000400:	4647      	mov	r7, r8
 8000402:	40be      	lsls	r6, r7
 8000404:	0032      	movs	r2, r6
 8000406:	1a80      	subs	r0, r0, r2
 8000408:	4199      	sbcs	r1, r3
 800040a:	9000      	str	r0, [sp, #0]
 800040c:	9101      	str	r1, [sp, #4]
 800040e:	e79f      	b.n	8000350 <__udivmoddi4+0x84>
 8000410:	42a3      	cmp	r3, r4
 8000412:	d8bc      	bhi.n	800038e <__udivmoddi4+0xc2>
 8000414:	e783      	b.n	800031e <__udivmoddi4+0x52>
 8000416:	4642      	mov	r2, r8
 8000418:	2320      	movs	r3, #32
 800041a:	2100      	movs	r1, #0
 800041c:	1a9b      	subs	r3, r3, r2
 800041e:	2200      	movs	r2, #0
 8000420:	9100      	str	r1, [sp, #0]
 8000422:	9201      	str	r2, [sp, #4]
 8000424:	2201      	movs	r2, #1
 8000426:	40da      	lsrs	r2, r3
 8000428:	9201      	str	r2, [sp, #4]
 800042a:	e786      	b.n	800033a <__udivmoddi4+0x6e>
 800042c:	4642      	mov	r2, r8
 800042e:	2320      	movs	r3, #32
 8000430:	1a9b      	subs	r3, r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	4646      	mov	r6, r8
 8000436:	409a      	lsls	r2, r3
 8000438:	0023      	movs	r3, r4
 800043a:	40f3      	lsrs	r3, r6
 800043c:	4644      	mov	r4, r8
 800043e:	4313      	orrs	r3, r2
 8000440:	002a      	movs	r2, r5
 8000442:	40e2      	lsrs	r2, r4
 8000444:	001c      	movs	r4, r3
 8000446:	465b      	mov	r3, fp
 8000448:	0015      	movs	r5, r2
 800044a:	2b00      	cmp	r3, #0
 800044c:	dad4      	bge.n	80003f8 <__udivmoddi4+0x12c>
 800044e:	4642      	mov	r2, r8
 8000450:	002f      	movs	r7, r5
 8000452:	2320      	movs	r3, #32
 8000454:	0026      	movs	r6, r4
 8000456:	4097      	lsls	r7, r2
 8000458:	1a9b      	subs	r3, r3, r2
 800045a:	40de      	lsrs	r6, r3
 800045c:	003b      	movs	r3, r7
 800045e:	4333      	orrs	r3, r6
 8000460:	e7cd      	b.n	80003fe <__udivmoddi4+0x132>
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__clzdi2>:
 8000464:	b510      	push	{r4, lr}
 8000466:	2900      	cmp	r1, #0
 8000468:	d103      	bne.n	8000472 <__clzdi2+0xe>
 800046a:	f000 f807 	bl	800047c <__clzsi2>
 800046e:	3020      	adds	r0, #32
 8000470:	e002      	b.n	8000478 <__clzdi2+0x14>
 8000472:	0008      	movs	r0, r1
 8000474:	f000 f802 	bl	800047c <__clzsi2>
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__clzsi2>:
 800047c:	211c      	movs	r1, #28
 800047e:	2301      	movs	r3, #1
 8000480:	041b      	lsls	r3, r3, #16
 8000482:	4298      	cmp	r0, r3
 8000484:	d301      	bcc.n	800048a <__clzsi2+0xe>
 8000486:	0c00      	lsrs	r0, r0, #16
 8000488:	3910      	subs	r1, #16
 800048a:	0a1b      	lsrs	r3, r3, #8
 800048c:	4298      	cmp	r0, r3
 800048e:	d301      	bcc.n	8000494 <__clzsi2+0x18>
 8000490:	0a00      	lsrs	r0, r0, #8
 8000492:	3908      	subs	r1, #8
 8000494:	091b      	lsrs	r3, r3, #4
 8000496:	4298      	cmp	r0, r3
 8000498:	d301      	bcc.n	800049e <__clzsi2+0x22>
 800049a:	0900      	lsrs	r0, r0, #4
 800049c:	3904      	subs	r1, #4
 800049e:	a202      	add	r2, pc, #8	; (adr r2, 80004a8 <__clzsi2+0x2c>)
 80004a0:	5c10      	ldrb	r0, [r2, r0]
 80004a2:	1840      	adds	r0, r0, r1
 80004a4:	4770      	bx	lr
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	02020304 	.word	0x02020304
 80004ac:	01010101 	.word	0x01010101
	...

080004b8 <GetPage>:
 * Some STM32F103C8 have 64 KB FLASH Memory, so I guess they have Page 0 to Page 63 only.
 */

/* FLASH_PAGE_SIZE should be able to get the size of the Page according to the controller */
static uint32_t GetPage(uint32_t Address)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  for (int indx=0; indx<128; indx++)
 80004c0:	2300      	movs	r3, #0
 80004c2:	60fb      	str	r3, [r7, #12]
 80004c4:	e01a      	b.n	80004fc <GetPage+0x44>
  {
	  if((Address < (0x08000000 + (FLASH_PAGE_SIZE *(indx+1))) ) && (Address >= (0x08000000 + FLASH_PAGE_SIZE*indx)))
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	4a10      	ldr	r2, [pc, #64]	; (800050c <GetPage+0x54>)
 80004ca:	4694      	mov	ip, r2
 80004cc:	4463      	add	r3, ip
 80004ce:	01db      	lsls	r3, r3, #7
 80004d0:	687a      	ldr	r2, [r7, #4]
 80004d2:	429a      	cmp	r2, r3
 80004d4:	d20f      	bcs.n	80004f6 <GetPage+0x3e>
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	2280      	movs	r2, #128	; 0x80
 80004da:	0352      	lsls	r2, r2, #13
 80004dc:	4694      	mov	ip, r2
 80004de:	4463      	add	r3, ip
 80004e0:	01db      	lsls	r3, r3, #7
 80004e2:	687a      	ldr	r2, [r7, #4]
 80004e4:	429a      	cmp	r2, r3
 80004e6:	d306      	bcc.n	80004f6 <GetPage+0x3e>
	  {
		  return (0x08000000 + FLASH_PAGE_SIZE*indx);
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	2280      	movs	r2, #128	; 0x80
 80004ec:	0352      	lsls	r2, r2, #13
 80004ee:	4694      	mov	ip, r2
 80004f0:	4463      	add	r3, ip
 80004f2:	01db      	lsls	r3, r3, #7
 80004f4:	e006      	b.n	8000504 <GetPage+0x4c>
  for (int indx=0; indx<128; indx++)
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	3301      	adds	r3, #1
 80004fa:	60fb      	str	r3, [r7, #12]
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	2b7f      	cmp	r3, #127	; 0x7f
 8000500:	dde1      	ble.n	80004c6 <GetPage+0xe>
	  }
  }

  return 0;
 8000502:	2300      	movs	r3, #0
}
 8000504:	0018      	movs	r0, r3
 8000506:	46bd      	mov	sp, r7
 8000508:	b004      	add	sp, #16
 800050a:	bd80      	pop	{r7, pc}
 800050c:	00100001 	.word	0x00100001

08000510 <Flash_Write_Data>:
   float float_variable =  thing.a;
   return float_variable;
}

uint32_t Flash_Write_Data (uint32_t StartPageAddress, uint32_t *Data, uint16_t numberofwords)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b08a      	sub	sp, #40	; 0x28
 8000514:	af00      	add	r7, sp, #0
 8000516:	60f8      	str	r0, [r7, #12]
 8000518:	60b9      	str	r1, [r7, #8]
 800051a:	1dbb      	adds	r3, r7, #6
 800051c:	801a      	strh	r2, [r3, #0]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;
	int sofar=0;
 800051e:	2300      	movs	r3, #0
 8000520:	627b      	str	r3, [r7, #36]	; 0x24

	  /* Unlock the Flash to enable the flash control register access *************/
	   HAL_FLASH_Unlock();
 8000522:	f000 fbf9 	bl	8000d18 <HAL_FLASH_Unlock>

	   /* Erase the user Flash area*/

	  uint32_t StartPage = GetPage(StartPageAddress);
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	0018      	movs	r0, r3
 800052a:	f7ff ffc5 	bl	80004b8 <GetPage>
 800052e:	0003      	movs	r3, r0
 8000530:	623b      	str	r3, [r7, #32]
	  uint32_t EndPageAdress = StartPageAddress + numberofwords*4;
 8000532:	1dbb      	adds	r3, r7, #6
 8000534:	881b      	ldrh	r3, [r3, #0]
 8000536:	009b      	lsls	r3, r3, #2
 8000538:	001a      	movs	r2, r3
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	189b      	adds	r3, r3, r2
 800053e:	61fb      	str	r3, [r7, #28]
	  uint32_t EndPage = GetPage(EndPageAdress);
 8000540:	69fb      	ldr	r3, [r7, #28]
 8000542:	0018      	movs	r0, r3
 8000544:	f7ff ffb8 	bl	80004b8 <GetPage>
 8000548:	0003      	movs	r3, r0
 800054a:	61bb      	str	r3, [r7, #24]

	   /* Fill EraseInit structure*/
	   EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 800054c:	4b1e      	ldr	r3, [pc, #120]	; (80005c8 <Flash_Write_Data+0xb8>)
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
	   EraseInitStruct.PageAddress = StartPage;
 8000552:	4b1d      	ldr	r3, [pc, #116]	; (80005c8 <Flash_Write_Data+0xb8>)
 8000554:	6a3a      	ldr	r2, [r7, #32]
 8000556:	605a      	str	r2, [r3, #4]
	   EraseInitStruct.NbPages     = ((EndPage - StartPage)/FLASH_PAGE_SIZE) +1;
 8000558:	69ba      	ldr	r2, [r7, #24]
 800055a:	6a3b      	ldr	r3, [r7, #32]
 800055c:	1ad3      	subs	r3, r2, r3
 800055e:	09db      	lsrs	r3, r3, #7
 8000560:	1c5a      	adds	r2, r3, #1
 8000562:	4b19      	ldr	r3, [pc, #100]	; (80005c8 <Flash_Write_Data+0xb8>)
 8000564:	609a      	str	r2, [r3, #8]

	   if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 8000566:	2314      	movs	r3, #20
 8000568:	18fa      	adds	r2, r7, r3
 800056a:	4b17      	ldr	r3, [pc, #92]	; (80005c8 <Flash_Write_Data+0xb8>)
 800056c:	0011      	movs	r1, r2
 800056e:	0018      	movs	r0, r3
 8000570:	f000 fd52 	bl	8001018 <HAL_FLASHEx_Erase>
 8000574:	1e03      	subs	r3, r0, #0
 8000576:	d01a      	beq.n	80005ae <Flash_Write_Data+0x9e>
	   {
	     /*Error occurred while page erase.*/
		  return HAL_FLASH_GetError ();
 8000578:	f000 fc36 	bl	8000de8 <HAL_FLASH_GetError>
 800057c:	0003      	movs	r3, r0
 800057e:	e01e      	b.n	80005be <Flash_Write_Data+0xae>

	   /* Program the user Flash area word by word*/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartPageAddress, Data[sofar]) == HAL_OK)
 8000580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000582:	009b      	lsls	r3, r3, #2
 8000584:	68ba      	ldr	r2, [r7, #8]
 8000586:	18d3      	adds	r3, r2, r3
 8000588:	681a      	ldr	r2, [r3, #0]
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	0019      	movs	r1, r3
 800058e:	2002      	movs	r0, #2
 8000590:	f000 fb86 	bl	8000ca0 <HAL_FLASH_Program>
 8000594:	1e03      	subs	r3, r0, #0
 8000596:	d106      	bne.n	80005a6 <Flash_Write_Data+0x96>
	     {
	    	 StartPageAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	3304      	adds	r3, #4
 800059c:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 800059e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005a0:	3301      	adds	r3, #1
 80005a2:	627b      	str	r3, [r7, #36]	; 0x24
 80005a4:	e003      	b.n	80005ae <Flash_Write_Data+0x9e>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 80005a6:	f000 fc1f 	bl	8000de8 <HAL_FLASH_GetError>
 80005aa:	0003      	movs	r3, r0
 80005ac:	e007      	b.n	80005be <Flash_Write_Data+0xae>
	   while (sofar<numberofwords)
 80005ae:	1dbb      	adds	r3, r7, #6
 80005b0:	881b      	ldrh	r3, [r3, #0]
 80005b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005b4:	429a      	cmp	r2, r3
 80005b6:	dbe3      	blt.n	8000580 <Flash_Write_Data+0x70>
	     }
	   }

	   /* Lock the Flash to disable the flash control register access (recommended
	      to protect the FLASH memory against possible unwanted operation) *********/
	   HAL_FLASH_Lock();
 80005b8:	f000 fc02 	bl	8000dc0 <HAL_FLASH_Lock>

	   return 0;
 80005bc:	2300      	movs	r3, #0
}
 80005be:	0018      	movs	r0, r3
 80005c0:	46bd      	mov	sp, r7
 80005c2:	b00a      	add	sp, #40	; 0x28
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	46c0      	nop			; (mov r8, r8)
 80005c8:	20000050 	.word	0x20000050

080005cc <Flash_Read_Data>:


void Flash_Read_Data (uint32_t StartPageAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	60f8      	str	r0, [r7, #12]
 80005d4:	60b9      	str	r1, [r7, #8]
 80005d6:	1dbb      	adds	r3, r7, #6
 80005d8:	801a      	strh	r2, [r3, #0]
	while (1)
	{

		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	68bb      	ldr	r3, [r7, #8]
 80005e0:	601a      	str	r2, [r3, #0]
		StartPageAddress += 4;
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	3304      	adds	r3, #4
 80005e6:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	3304      	adds	r3, #4
 80005ec:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 80005ee:	1dbb      	adds	r3, r7, #6
 80005f0:	881b      	ldrh	r3, [r3, #0]
 80005f2:	1dba      	adds	r2, r7, #6
 80005f4:	1e59      	subs	r1, r3, #1
 80005f6:	8011      	strh	r1, [r2, #0]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d000      	beq.n	80005fe <Flash_Read_Data+0x32>
		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 80005fc:	e7ed      	b.n	80005da <Flash_Read_Data+0xe>
		if (!(numberofwords--)) break;
 80005fe:	46c0      	nop			; (mov r8, r8)
	}
}
 8000600:	46c0      	nop			; (mov r8, r8)
 8000602:	46bd      	mov	sp, r7
 8000604:	b004      	add	sp, #16
 8000606:	bd80      	pop	{r7, pc}

08000608 <Convert_To_Str>:
void Convert_To_Str (uint32_t *Data, char *Buf)
{
 8000608:	b590      	push	{r4, r7, lr}
 800060a:	b085      	sub	sp, #20
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	6039      	str	r1, [r7, #0]
	int numberofbytes = ((strlen((char *)Data)/4) + ((strlen((char *)Data) % 4) != 0)) *4;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	0018      	movs	r0, r3
 8000616:	f7ff fd77 	bl	8000108 <strlen>
 800061a:	0003      	movs	r3, r0
 800061c:	089c      	lsrs	r4, r3, #2
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	0018      	movs	r0, r3
 8000622:	f7ff fd71 	bl	8000108 <strlen>
 8000626:	0003      	movs	r3, r0
 8000628:	2203      	movs	r2, #3
 800062a:	4013      	ands	r3, r2
 800062c:	1e5a      	subs	r2, r3, #1
 800062e:	4193      	sbcs	r3, r2
 8000630:	b2db      	uxtb	r3, r3
 8000632:	18e3      	adds	r3, r4, r3
 8000634:	009b      	lsls	r3, r3, #2
 8000636:	60bb      	str	r3, [r7, #8]

	for (int i=0; i<numberofbytes; i++)
 8000638:	2300      	movs	r3, #0
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	e01c      	b.n	8000678 <Convert_To_Str+0x70>
	{
		Buf[i] = Data[i/4]>>(8*(i%4));
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	2b00      	cmp	r3, #0
 8000642:	da00      	bge.n	8000646 <Convert_To_Str+0x3e>
 8000644:	3303      	adds	r3, #3
 8000646:	109b      	asrs	r3, r3, #2
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	687a      	ldr	r2, [r7, #4]
 800064c:	18d3      	adds	r3, r2, r3
 800064e:	681a      	ldr	r2, [r3, #0]
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	490e      	ldr	r1, [pc, #56]	; (800068c <Convert_To_Str+0x84>)
 8000654:	400b      	ands	r3, r1
 8000656:	d504      	bpl.n	8000662 <Convert_To_Str+0x5a>
 8000658:	3b01      	subs	r3, #1
 800065a:	2104      	movs	r1, #4
 800065c:	4249      	negs	r1, r1
 800065e:	430b      	orrs	r3, r1
 8000660:	3301      	adds	r3, #1
 8000662:	00db      	lsls	r3, r3, #3
 8000664:	40da      	lsrs	r2, r3
 8000666:	0011      	movs	r1, r2
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	683a      	ldr	r2, [r7, #0]
 800066c:	18d3      	adds	r3, r2, r3
 800066e:	b2ca      	uxtb	r2, r1
 8000670:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<numberofbytes; i++)
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	3301      	adds	r3, #1
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	68fa      	ldr	r2, [r7, #12]
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	429a      	cmp	r2, r3
 800067e:	dbde      	blt.n	800063e <Convert_To_Str+0x36>
	}
}
 8000680:	46c0      	nop			; (mov r8, r8)
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	46bd      	mov	sp, r7
 8000686:	b005      	add	sp, #20
 8000688:	bd90      	pop	{r4, r7, pc}
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	80000003 	.word	0x80000003

08000690 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000690:	b590      	push	{r4, r7, lr}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000696:	f000 f9df 	bl	8000a58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069a:	f000 f845 	bl	8000728 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069e:	f000 f8e5 	bl	800086c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80006a2:	f000 f8b3 	bl	800080c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  Flash_Write_Data(0x0802E980 , (uint32_t *)data2, 9);
 80006a6:	4b1b      	ldr	r3, [pc, #108]	; (8000714 <main+0x84>)
 80006a8:	481b      	ldr	r0, [pc, #108]	; (8000718 <main+0x88>)
 80006aa:	2209      	movs	r2, #9
 80006ac:	0019      	movs	r1, r3
 80006ae:	f7ff ff2f 	bl	8000510 <Flash_Write_Data>
  Flash_Read_Data(0x0802E980 , Rx_Data, 10);
 80006b2:	4b1a      	ldr	r3, [pc, #104]	; (800071c <main+0x8c>)
 80006b4:	4818      	ldr	r0, [pc, #96]	; (8000718 <main+0x88>)
 80006b6:	220a      	movs	r2, #10
 80006b8:	0019      	movs	r1, r3
 80006ba:	f7ff ff87 	bl	80005cc <Flash_Read_Data>


  int numofwords = (strlen(data)/4)+((strlen(data)%4)!=0);
 80006be:	4b18      	ldr	r3, [pc, #96]	; (8000720 <main+0x90>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	0018      	movs	r0, r3
 80006c4:	f7ff fd20 	bl	8000108 <strlen>
 80006c8:	0003      	movs	r3, r0
 80006ca:	089c      	lsrs	r4, r3, #2
 80006cc:	4b14      	ldr	r3, [pc, #80]	; (8000720 <main+0x90>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	0018      	movs	r0, r3
 80006d2:	f7ff fd19 	bl	8000108 <strlen>
 80006d6:	0003      	movs	r3, r0
 80006d8:	2203      	movs	r2, #3
 80006da:	4013      	ands	r3, r2
 80006dc:	1e5a      	subs	r2, r3, #1
 80006de:	4193      	sbcs	r3, r2
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	18e3      	adds	r3, r4, r3
 80006e4:	607b      	str	r3, [r7, #4]
  Flash_Write_Data(0x0802E980 , (uint32_t *)data, numofwords);
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <main+0x90>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	687a      	ldr	r2, [r7, #4]
 80006ec:	b292      	uxth	r2, r2
 80006ee:	480a      	ldr	r0, [pc, #40]	; (8000718 <main+0x88>)
 80006f0:	0019      	movs	r1, r3
 80006f2:	f7ff ff0d 	bl	8000510 <Flash_Write_Data>
  Flash_Read_Data(0x0802E980 , Rx_Data, numofwords);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	b29a      	uxth	r2, r3
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <main+0x8c>)
 80006fc:	4806      	ldr	r0, [pc, #24]	; (8000718 <main+0x88>)
 80006fe:	0019      	movs	r1, r3
 8000700:	f7ff ff64 	bl	80005cc <Flash_Read_Data>
  Convert_To_Str(Rx_Data, string);
 8000704:	4a07      	ldr	r2, [pc, #28]	; (8000724 <main+0x94>)
 8000706:	4b05      	ldr	r3, [pc, #20]	; (800071c <main+0x8c>)
 8000708:	0011      	movs	r1, r2
 800070a:	0018      	movs	r0, r3
 800070c:	f7ff ff7c 	bl	8000608 <Convert_To_Str>
//  RxVal = Flash_Read_NUM(0x08012000);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000710:	e7fe      	b.n	8000710 <main+0x80>
 8000712:	46c0      	nop			; (mov r8, r8)
 8000714:	20000004 	.word	0x20000004
 8000718:	0802e980 	.word	0x0802e980
 800071c:	200000e0 	.word	0x200000e0
 8000720:	20000000 	.word	0x20000000
 8000724:	20000158 	.word	0x20000158

08000728 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000728:	b590      	push	{r4, r7, lr}
 800072a:	b09d      	sub	sp, #116	; 0x74
 800072c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072e:	2438      	movs	r4, #56	; 0x38
 8000730:	193b      	adds	r3, r7, r4
 8000732:	0018      	movs	r0, r3
 8000734:	2338      	movs	r3, #56	; 0x38
 8000736:	001a      	movs	r2, r3
 8000738:	2100      	movs	r1, #0
 800073a:	f002 fa99 	bl	8002c70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800073e:	2324      	movs	r3, #36	; 0x24
 8000740:	18fb      	adds	r3, r7, r3
 8000742:	0018      	movs	r0, r3
 8000744:	2314      	movs	r3, #20
 8000746:	001a      	movs	r2, r3
 8000748:	2100      	movs	r1, #0
 800074a:	f002 fa91 	bl	8002c70 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800074e:	003b      	movs	r3, r7
 8000750:	0018      	movs	r0, r3
 8000752:	2324      	movs	r3, #36	; 0x24
 8000754:	001a      	movs	r2, r3
 8000756:	2100      	movs	r1, #0
 8000758:	f002 fa8a 	bl	8002c70 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800075c:	4b29      	ldr	r3, [pc, #164]	; (8000804 <SystemClock_Config+0xdc>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a29      	ldr	r2, [pc, #164]	; (8000808 <SystemClock_Config+0xe0>)
 8000762:	401a      	ands	r2, r3
 8000764:	4b27      	ldr	r3, [pc, #156]	; (8000804 <SystemClock_Config+0xdc>)
 8000766:	2180      	movs	r1, #128	; 0x80
 8000768:	0109      	lsls	r1, r1, #4
 800076a:	430a      	orrs	r2, r1
 800076c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800076e:	0021      	movs	r1, r4
 8000770:	187b      	adds	r3, r7, r1
 8000772:	2202      	movs	r2, #2
 8000774:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000776:	187b      	adds	r3, r7, r1
 8000778:	2201      	movs	r2, #1
 800077a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800077c:	187b      	adds	r3, r7, r1
 800077e:	2210      	movs	r2, #16
 8000780:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000782:	187b      	adds	r3, r7, r1
 8000784:	2202      	movs	r2, #2
 8000786:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000788:	187b      	adds	r3, r7, r1
 800078a:	2200      	movs	r2, #0
 800078c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_6;
 800078e:	187b      	adds	r3, r7, r1
 8000790:	2280      	movs	r2, #128	; 0x80
 8000792:	0312      	lsls	r2, r2, #12
 8000794:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8000796:	187b      	adds	r3, r7, r1
 8000798:	2280      	movs	r2, #128	; 0x80
 800079a:	0412      	lsls	r2, r2, #16
 800079c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800079e:	187b      	adds	r3, r7, r1
 80007a0:	0018      	movs	r0, r3
 80007a2:	f000 fe3f 	bl	8001424 <HAL_RCC_OscConfig>
 80007a6:	1e03      	subs	r3, r0, #0
 80007a8:	d001      	beq.n	80007ae <SystemClock_Config+0x86>
  {
    Error_Handler();
 80007aa:	f000 f88d 	bl	80008c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ae:	2124      	movs	r1, #36	; 0x24
 80007b0:	187b      	adds	r3, r7, r1
 80007b2:	220f      	movs	r2, #15
 80007b4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b6:	187b      	adds	r3, r7, r1
 80007b8:	2203      	movs	r2, #3
 80007ba:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007bc:	187b      	adds	r3, r7, r1
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007c2:	187b      	adds	r3, r7, r1
 80007c4:	2200      	movs	r2, #0
 80007c6:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c8:	187b      	adds	r3, r7, r1
 80007ca:	2200      	movs	r2, #0
 80007cc:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007ce:	187b      	adds	r3, r7, r1
 80007d0:	2101      	movs	r1, #1
 80007d2:	0018      	movs	r0, r3
 80007d4:	f001 f9fa 	bl	8001bcc <HAL_RCC_ClockConfig>
 80007d8:	1e03      	subs	r3, r0, #0
 80007da:	d001      	beq.n	80007e0 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80007dc:	f000 f874 	bl	80008c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80007e0:	003b      	movs	r3, r7
 80007e2:	2201      	movs	r2, #1
 80007e4:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80007e6:	003b      	movs	r3, r7
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007ec:	003b      	movs	r3, r7
 80007ee:	0018      	movs	r0, r3
 80007f0:	f001 fc10 	bl	8002014 <HAL_RCCEx_PeriphCLKConfig>
 80007f4:	1e03      	subs	r3, r0, #0
 80007f6:	d001      	beq.n	80007fc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80007f8:	f000 f866 	bl	80008c8 <Error_Handler>
  }
}
 80007fc:	46c0      	nop			; (mov r8, r8)
 80007fe:	46bd      	mov	sp, r7
 8000800:	b01d      	add	sp, #116	; 0x74
 8000802:	bd90      	pop	{r4, r7, pc}
 8000804:	40007000 	.word	0x40007000
 8000808:	ffffe7ff 	.word	0xffffe7ff

0800080c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000810:	4b14      	ldr	r3, [pc, #80]	; (8000864 <MX_USART1_UART_Init+0x58>)
 8000812:	4a15      	ldr	r2, [pc, #84]	; (8000868 <MX_USART1_UART_Init+0x5c>)
 8000814:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000816:	4b13      	ldr	r3, [pc, #76]	; (8000864 <MX_USART1_UART_Init+0x58>)
 8000818:	22e1      	movs	r2, #225	; 0xe1
 800081a:	0252      	lsls	r2, r2, #9
 800081c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800081e:	4b11      	ldr	r3, [pc, #68]	; (8000864 <MX_USART1_UART_Init+0x58>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000824:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <MX_USART1_UART_Init+0x58>)
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <MX_USART1_UART_Init+0x58>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <MX_USART1_UART_Init+0x58>)
 8000832:	220c      	movs	r2, #12
 8000834:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <MX_USART1_UART_Init+0x58>)
 8000838:	2200      	movs	r2, #0
 800083a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800083c:	4b09      	ldr	r3, [pc, #36]	; (8000864 <MX_USART1_UART_Init+0x58>)
 800083e:	2200      	movs	r2, #0
 8000840:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000842:	4b08      	ldr	r3, [pc, #32]	; (8000864 <MX_USART1_UART_Init+0x58>)
 8000844:	2200      	movs	r2, #0
 8000846:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <MX_USART1_UART_Init+0x58>)
 800084a:	2200      	movs	r2, #0
 800084c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800084e:	4b05      	ldr	r3, [pc, #20]	; (8000864 <MX_USART1_UART_Init+0x58>)
 8000850:	0018      	movs	r0, r3
 8000852:	f001 fd35 	bl	80022c0 <HAL_UART_Init>
 8000856:	1e03      	subs	r3, r0, #0
 8000858:	d001      	beq.n	800085e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800085a:	f000 f835 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	2000005c 	.word	0x2000005c
 8000868:	40013800 	.word	0x40013800

0800086c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000872:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <MX_GPIO_Init+0x58>)
 8000874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000876:	4b13      	ldr	r3, [pc, #76]	; (80008c4 <MX_GPIO_Init+0x58>)
 8000878:	2102      	movs	r1, #2
 800087a:	430a      	orrs	r2, r1
 800087c:	62da      	str	r2, [r3, #44]	; 0x2c
 800087e:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <MX_GPIO_Init+0x58>)
 8000880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000882:	2202      	movs	r2, #2
 8000884:	4013      	ands	r3, r2
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088a:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <MX_GPIO_Init+0x58>)
 800088c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800088e:	4b0d      	ldr	r3, [pc, #52]	; (80008c4 <MX_GPIO_Init+0x58>)
 8000890:	2101      	movs	r1, #1
 8000892:	430a      	orrs	r2, r1
 8000894:	62da      	str	r2, [r3, #44]	; 0x2c
 8000896:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <MX_GPIO_Init+0x58>)
 8000898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800089a:	2201      	movs	r2, #1
 800089c:	4013      	ands	r3, r2
 800089e:	60bb      	str	r3, [r7, #8]
 80008a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008a2:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <MX_GPIO_Init+0x58>)
 80008a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008a6:	4b07      	ldr	r3, [pc, #28]	; (80008c4 <MX_GPIO_Init+0x58>)
 80008a8:	2180      	movs	r1, #128	; 0x80
 80008aa:	430a      	orrs	r2, r1
 80008ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80008ae:	4b05      	ldr	r3, [pc, #20]	; (80008c4 <MX_GPIO_Init+0x58>)
 80008b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008b2:	2280      	movs	r2, #128	; 0x80
 80008b4:	4013      	ands	r3, r2
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]

}
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	46bd      	mov	sp, r7
 80008be:	b004      	add	sp, #16
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	40021000 	.word	0x40021000

080008c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008cc:	b672      	cpsid	i
}
 80008ce:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <Error_Handler+0x8>
	...

080008d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d8:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <HAL_MspInit+0x24>)
 80008da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008dc:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <HAL_MspInit+0x24>)
 80008de:	2101      	movs	r1, #1
 80008e0:	430a      	orrs	r2, r1
 80008e2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e4:	4b04      	ldr	r3, [pc, #16]	; (80008f8 <HAL_MspInit+0x24>)
 80008e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008e8:	4b03      	ldr	r3, [pc, #12]	; (80008f8 <HAL_MspInit+0x24>)
 80008ea:	2180      	movs	r1, #128	; 0x80
 80008ec:	0549      	lsls	r1, r1, #21
 80008ee:	430a      	orrs	r2, r1
 80008f0:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40021000 	.word	0x40021000

080008fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008fc:	b590      	push	{r4, r7, lr}
 80008fe:	b08b      	sub	sp, #44	; 0x2c
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000904:	2414      	movs	r4, #20
 8000906:	193b      	adds	r3, r7, r4
 8000908:	0018      	movs	r0, r3
 800090a:	2314      	movs	r3, #20
 800090c:	001a      	movs	r2, r3
 800090e:	2100      	movs	r1, #0
 8000910:	f002 f9ae 	bl	8002c70 <memset>
  if(huart->Instance==USART1)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a29      	ldr	r2, [pc, #164]	; (80009c0 <HAL_UART_MspInit+0xc4>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d14b      	bne.n	80009b6 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800091e:	4b29      	ldr	r3, [pc, #164]	; (80009c4 <HAL_UART_MspInit+0xc8>)
 8000920:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000922:	4b28      	ldr	r3, [pc, #160]	; (80009c4 <HAL_UART_MspInit+0xc8>)
 8000924:	2180      	movs	r1, #128	; 0x80
 8000926:	01c9      	lsls	r1, r1, #7
 8000928:	430a      	orrs	r2, r1
 800092a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800092c:	4b25      	ldr	r3, [pc, #148]	; (80009c4 <HAL_UART_MspInit+0xc8>)
 800092e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000930:	4b24      	ldr	r3, [pc, #144]	; (80009c4 <HAL_UART_MspInit+0xc8>)
 8000932:	2102      	movs	r1, #2
 8000934:	430a      	orrs	r2, r1
 8000936:	62da      	str	r2, [r3, #44]	; 0x2c
 8000938:	4b22      	ldr	r3, [pc, #136]	; (80009c4 <HAL_UART_MspInit+0xc8>)
 800093a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800093c:	2202      	movs	r2, #2
 800093e:	4013      	ands	r3, r2
 8000940:	613b      	str	r3, [r7, #16]
 8000942:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000944:	4b1f      	ldr	r3, [pc, #124]	; (80009c4 <HAL_UART_MspInit+0xc8>)
 8000946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000948:	4b1e      	ldr	r3, [pc, #120]	; (80009c4 <HAL_UART_MspInit+0xc8>)
 800094a:	2101      	movs	r1, #1
 800094c:	430a      	orrs	r2, r1
 800094e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000950:	4b1c      	ldr	r3, [pc, #112]	; (80009c4 <HAL_UART_MspInit+0xc8>)
 8000952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000954:	2201      	movs	r2, #1
 8000956:	4013      	ands	r3, r2
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800095c:	193b      	adds	r3, r7, r4
 800095e:	2240      	movs	r2, #64	; 0x40
 8000960:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000962:	193b      	adds	r3, r7, r4
 8000964:	2202      	movs	r2, #2
 8000966:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	193b      	adds	r3, r7, r4
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096e:	193b      	adds	r3, r7, r4
 8000970:	2203      	movs	r2, #3
 8000972:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000974:	193b      	adds	r3, r7, r4
 8000976:	2200      	movs	r2, #0
 8000978:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800097a:	193b      	adds	r3, r7, r4
 800097c:	4a12      	ldr	r2, [pc, #72]	; (80009c8 <HAL_UART_MspInit+0xcc>)
 800097e:	0019      	movs	r1, r3
 8000980:	0010      	movs	r0, r2
 8000982:	f000 fbd1 	bl	8001128 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000986:	0021      	movs	r1, r4
 8000988:	187b      	adds	r3, r7, r1
 800098a:	2280      	movs	r2, #128	; 0x80
 800098c:	00d2      	lsls	r2, r2, #3
 800098e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000990:	187b      	adds	r3, r7, r1
 8000992:	2202      	movs	r2, #2
 8000994:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	187b      	adds	r3, r7, r1
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800099c:	187b      	adds	r3, r7, r1
 800099e:	2203      	movs	r2, #3
 80009a0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80009a2:	187b      	adds	r3, r7, r1
 80009a4:	2204      	movs	r2, #4
 80009a6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a8:	187a      	adds	r2, r7, r1
 80009aa:	23a0      	movs	r3, #160	; 0xa0
 80009ac:	05db      	lsls	r3, r3, #23
 80009ae:	0011      	movs	r1, r2
 80009b0:	0018      	movs	r0, r3
 80009b2:	f000 fbb9 	bl	8001128 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	46bd      	mov	sp, r7
 80009ba:	b00b      	add	sp, #44	; 0x2c
 80009bc:	bd90      	pop	{r4, r7, pc}
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	40013800 	.word	0x40013800
 80009c4:	40021000 	.word	0x40021000
 80009c8:	50000400 	.word	0x50000400

080009cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <NMI_Handler+0x4>

080009d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d2:	b580      	push	{r7, lr}
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d6:	e7fe      	b.n	80009d6 <HardFault_Handler+0x4>

080009d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009dc:	46c0      	nop			; (mov r8, r8)
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009e2:	b580      	push	{r7, lr}
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009e6:	46c0      	nop			; (mov r8, r8)
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}

080009ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f0:	f000 f886 	bl	8000b00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f4:	46c0      	nop			; (mov r8, r8)
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000a04:	480d      	ldr	r0, [pc, #52]	; (8000a3c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000a06:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a08:	480d      	ldr	r0, [pc, #52]	; (8000a40 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a0a:	490e      	ldr	r1, [pc, #56]	; (8000a44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a0c:	4a0e      	ldr	r2, [pc, #56]	; (8000a48 <LoopForever+0xe>)
  movs r3, #0
 8000a0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a10:	e002      	b.n	8000a18 <LoopCopyDataInit>

08000a12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a16:	3304      	adds	r3, #4

08000a18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a1c:	d3f9      	bcc.n	8000a12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a1e:	4a0b      	ldr	r2, [pc, #44]	; (8000a4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a20:	4c0b      	ldr	r4, [pc, #44]	; (8000a50 <LoopForever+0x16>)
  movs r3, #0
 8000a22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a24:	e001      	b.n	8000a2a <LoopFillZerobss>

08000a26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a28:	3204      	adds	r2, #4

08000a2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a2c:	d3fb      	bcc.n	8000a26 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a2e:	f7ff ffe4 	bl	80009fa <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a32:	f002 f8f9 	bl	8002c28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a36:	f7ff fe2b 	bl	8000690 <main>

08000a3a <LoopForever>:

LoopForever:
    b LoopForever
 8000a3a:	e7fe      	b.n	8000a3a <LoopForever>
   ldr   r0, =_estack
 8000a3c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000a40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a44:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8000a48:	08002d68 	.word	0x08002d68
  ldr r2, =_sbss
 8000a4c:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8000a50:	200001d8 	.word	0x200001d8

08000a54 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a54:	e7fe      	b.n	8000a54 <ADC1_COMP_IRQHandler>
	...

08000a58 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a5e:	1dfb      	adds	r3, r7, #7
 8000a60:	2200      	movs	r2, #0
 8000a62:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000a64:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <HAL_Init+0x3c>)
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	4b0a      	ldr	r3, [pc, #40]	; (8000a94 <HAL_Init+0x3c>)
 8000a6a:	2140      	movs	r1, #64	; 0x40
 8000a6c:	430a      	orrs	r2, r1
 8000a6e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a70:	2000      	movs	r0, #0
 8000a72:	f000 f811 	bl	8000a98 <HAL_InitTick>
 8000a76:	1e03      	subs	r3, r0, #0
 8000a78:	d003      	beq.n	8000a82 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000a7a:	1dfb      	adds	r3, r7, #7
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	701a      	strb	r2, [r3, #0]
 8000a80:	e001      	b.n	8000a86 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a82:	f7ff ff27 	bl	80008d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a86:	1dfb      	adds	r3, r7, #7
 8000a88:	781b      	ldrb	r3, [r3, #0]
}
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	b002      	add	sp, #8
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	46c0      	nop			; (mov r8, r8)
 8000a94:	40022000 	.word	0x40022000

08000a98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a98:	b590      	push	{r4, r7, lr}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aa0:	4b14      	ldr	r3, [pc, #80]	; (8000af4 <HAL_InitTick+0x5c>)
 8000aa2:	681c      	ldr	r4, [r3, #0]
 8000aa4:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <HAL_InitTick+0x60>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	0019      	movs	r1, r3
 8000aaa:	23fa      	movs	r3, #250	; 0xfa
 8000aac:	0098      	lsls	r0, r3, #2
 8000aae:	f7ff fb33 	bl	8000118 <__udivsi3>
 8000ab2:	0003      	movs	r3, r0
 8000ab4:	0019      	movs	r1, r3
 8000ab6:	0020      	movs	r0, r4
 8000ab8:	f7ff fb2e 	bl	8000118 <__udivsi3>
 8000abc:	0003      	movs	r3, r0
 8000abe:	0018      	movs	r0, r3
 8000ac0:	f000 f8e1 	bl	8000c86 <HAL_SYSTICK_Config>
 8000ac4:	1e03      	subs	r3, r0, #0
 8000ac6:	d001      	beq.n	8000acc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	e00f      	b.n	8000aec <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2b03      	cmp	r3, #3
 8000ad0:	d80b      	bhi.n	8000aea <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ad2:	6879      	ldr	r1, [r7, #4]
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	425b      	negs	r3, r3
 8000ad8:	2200      	movs	r2, #0
 8000ada:	0018      	movs	r0, r3
 8000adc:	f000 f8be 	bl	8000c5c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <HAL_InitTick+0x64>)
 8000ae2:	687a      	ldr	r2, [r7, #4]
 8000ae4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e000      	b.n	8000aec <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000aea:	2301      	movs	r3, #1
}
 8000aec:	0018      	movs	r0, r3
 8000aee:	46bd      	mov	sp, r7
 8000af0:	b003      	add	sp, #12
 8000af2:	bd90      	pop	{r4, r7, pc}
 8000af4:	20000028 	.word	0x20000028
 8000af8:	20000030 	.word	0x20000030
 8000afc:	2000002c 	.word	0x2000002c

08000b00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b04:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <HAL_IncTick+0x1c>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	001a      	movs	r2, r3
 8000b0a:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <HAL_IncTick+0x20>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	18d2      	adds	r2, r2, r3
 8000b10:	4b03      	ldr	r3, [pc, #12]	; (8000b20 <HAL_IncTick+0x20>)
 8000b12:	601a      	str	r2, [r3, #0]
}
 8000b14:	46c0      	nop			; (mov r8, r8)
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	46c0      	nop			; (mov r8, r8)
 8000b1c:	20000030 	.word	0x20000030
 8000b20:	200001bc 	.word	0x200001bc

08000b24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  return uwTick;
 8000b28:	4b02      	ldr	r3, [pc, #8]	; (8000b34 <HAL_GetTick+0x10>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
}
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	200001bc 	.word	0x200001bc

08000b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b38:	b590      	push	{r4, r7, lr}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	0002      	movs	r2, r0
 8000b40:	6039      	str	r1, [r7, #0]
 8000b42:	1dfb      	adds	r3, r7, #7
 8000b44:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b46:	1dfb      	adds	r3, r7, #7
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	2b7f      	cmp	r3, #127	; 0x7f
 8000b4c:	d828      	bhi.n	8000ba0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b4e:	4a2f      	ldr	r2, [pc, #188]	; (8000c0c <__NVIC_SetPriority+0xd4>)
 8000b50:	1dfb      	adds	r3, r7, #7
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	b25b      	sxtb	r3, r3
 8000b56:	089b      	lsrs	r3, r3, #2
 8000b58:	33c0      	adds	r3, #192	; 0xc0
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	589b      	ldr	r3, [r3, r2]
 8000b5e:	1dfa      	adds	r2, r7, #7
 8000b60:	7812      	ldrb	r2, [r2, #0]
 8000b62:	0011      	movs	r1, r2
 8000b64:	2203      	movs	r2, #3
 8000b66:	400a      	ands	r2, r1
 8000b68:	00d2      	lsls	r2, r2, #3
 8000b6a:	21ff      	movs	r1, #255	; 0xff
 8000b6c:	4091      	lsls	r1, r2
 8000b6e:	000a      	movs	r2, r1
 8000b70:	43d2      	mvns	r2, r2
 8000b72:	401a      	ands	r2, r3
 8000b74:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	019b      	lsls	r3, r3, #6
 8000b7a:	22ff      	movs	r2, #255	; 0xff
 8000b7c:	401a      	ands	r2, r3
 8000b7e:	1dfb      	adds	r3, r7, #7
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	0018      	movs	r0, r3
 8000b84:	2303      	movs	r3, #3
 8000b86:	4003      	ands	r3, r0
 8000b88:	00db      	lsls	r3, r3, #3
 8000b8a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b8c:	481f      	ldr	r0, [pc, #124]	; (8000c0c <__NVIC_SetPriority+0xd4>)
 8000b8e:	1dfb      	adds	r3, r7, #7
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	b25b      	sxtb	r3, r3
 8000b94:	089b      	lsrs	r3, r3, #2
 8000b96:	430a      	orrs	r2, r1
 8000b98:	33c0      	adds	r3, #192	; 0xc0
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b9e:	e031      	b.n	8000c04 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ba0:	4a1b      	ldr	r2, [pc, #108]	; (8000c10 <__NVIC_SetPriority+0xd8>)
 8000ba2:	1dfb      	adds	r3, r7, #7
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	0019      	movs	r1, r3
 8000ba8:	230f      	movs	r3, #15
 8000baa:	400b      	ands	r3, r1
 8000bac:	3b08      	subs	r3, #8
 8000bae:	089b      	lsrs	r3, r3, #2
 8000bb0:	3306      	adds	r3, #6
 8000bb2:	009b      	lsls	r3, r3, #2
 8000bb4:	18d3      	adds	r3, r2, r3
 8000bb6:	3304      	adds	r3, #4
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	1dfa      	adds	r2, r7, #7
 8000bbc:	7812      	ldrb	r2, [r2, #0]
 8000bbe:	0011      	movs	r1, r2
 8000bc0:	2203      	movs	r2, #3
 8000bc2:	400a      	ands	r2, r1
 8000bc4:	00d2      	lsls	r2, r2, #3
 8000bc6:	21ff      	movs	r1, #255	; 0xff
 8000bc8:	4091      	lsls	r1, r2
 8000bca:	000a      	movs	r2, r1
 8000bcc:	43d2      	mvns	r2, r2
 8000bce:	401a      	ands	r2, r3
 8000bd0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	019b      	lsls	r3, r3, #6
 8000bd6:	22ff      	movs	r2, #255	; 0xff
 8000bd8:	401a      	ands	r2, r3
 8000bda:	1dfb      	adds	r3, r7, #7
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	0018      	movs	r0, r3
 8000be0:	2303      	movs	r3, #3
 8000be2:	4003      	ands	r3, r0
 8000be4:	00db      	lsls	r3, r3, #3
 8000be6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000be8:	4809      	ldr	r0, [pc, #36]	; (8000c10 <__NVIC_SetPriority+0xd8>)
 8000bea:	1dfb      	adds	r3, r7, #7
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	001c      	movs	r4, r3
 8000bf0:	230f      	movs	r3, #15
 8000bf2:	4023      	ands	r3, r4
 8000bf4:	3b08      	subs	r3, #8
 8000bf6:	089b      	lsrs	r3, r3, #2
 8000bf8:	430a      	orrs	r2, r1
 8000bfa:	3306      	adds	r3, #6
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	18c3      	adds	r3, r0, r3
 8000c00:	3304      	adds	r3, #4
 8000c02:	601a      	str	r2, [r3, #0]
}
 8000c04:	46c0      	nop			; (mov r8, r8)
 8000c06:	46bd      	mov	sp, r7
 8000c08:	b003      	add	sp, #12
 8000c0a:	bd90      	pop	{r4, r7, pc}
 8000c0c:	e000e100 	.word	0xe000e100
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	1e5a      	subs	r2, r3, #1
 8000c20:	2380      	movs	r3, #128	; 0x80
 8000c22:	045b      	lsls	r3, r3, #17
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d301      	bcc.n	8000c2c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c28:	2301      	movs	r3, #1
 8000c2a:	e010      	b.n	8000c4e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c2c:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <SysTick_Config+0x44>)
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	3a01      	subs	r2, #1
 8000c32:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c34:	2301      	movs	r3, #1
 8000c36:	425b      	negs	r3, r3
 8000c38:	2103      	movs	r1, #3
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	f7ff ff7c 	bl	8000b38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c40:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <SysTick_Config+0x44>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c46:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <SysTick_Config+0x44>)
 8000c48:	2207      	movs	r2, #7
 8000c4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c4c:	2300      	movs	r3, #0
}
 8000c4e:	0018      	movs	r0, r3
 8000c50:	46bd      	mov	sp, r7
 8000c52:	b002      	add	sp, #8
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	46c0      	nop			; (mov r8, r8)
 8000c58:	e000e010 	.word	0xe000e010

08000c5c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60b9      	str	r1, [r7, #8]
 8000c64:	607a      	str	r2, [r7, #4]
 8000c66:	210f      	movs	r1, #15
 8000c68:	187b      	adds	r3, r7, r1
 8000c6a:	1c02      	adds	r2, r0, #0
 8000c6c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c6e:	68ba      	ldr	r2, [r7, #8]
 8000c70:	187b      	adds	r3, r7, r1
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	b25b      	sxtb	r3, r3
 8000c76:	0011      	movs	r1, r2
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f7ff ff5d 	bl	8000b38 <__NVIC_SetPriority>
}
 8000c7e:	46c0      	nop			; (mov r8, r8)
 8000c80:	46bd      	mov	sp, r7
 8000c82:	b004      	add	sp, #16
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b082      	sub	sp, #8
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	0018      	movs	r0, r3
 8000c92:	f7ff ffbf 	bl	8000c14 <SysTick_Config>
 8000c96:	0003      	movs	r3, r0
}
 8000c98:	0018      	movs	r0, r3
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	b002      	add	sp, #8
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8000ca0:	b5b0      	push	{r4, r5, r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	60f8      	str	r0, [r7, #12]
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000cac:	2317      	movs	r3, #23
 8000cae:	18fb      	adds	r3, r7, r3
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000cb4:	4b16      	ldr	r3, [pc, #88]	; (8000d10 <HAL_FLASH_Program+0x70>)
 8000cb6:	7c1b      	ldrb	r3, [r3, #16]
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d101      	bne.n	8000cc0 <HAL_FLASH_Program+0x20>
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	e022      	b.n	8000d06 <HAL_FLASH_Program+0x66>
 8000cc0:	4b13      	ldr	r3, [pc, #76]	; (8000d10 <HAL_FLASH_Program+0x70>)
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000cc6:	2517      	movs	r5, #23
 8000cc8:	197c      	adds	r4, r7, r5
 8000cca:	4b12      	ldr	r3, [pc, #72]	; (8000d14 <HAL_FLASH_Program+0x74>)
 8000ccc:	0018      	movs	r0, r3
 8000cce:	f000 f895 	bl	8000dfc <FLASH_WaitForLastOperation>
 8000cd2:	0003      	movs	r3, r0
 8000cd4:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 8000cd6:	0029      	movs	r1, r5
 8000cd8:	187b      	adds	r3, r7, r1
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d10c      	bne.n	8000cfa <HAL_FLASH_Program+0x5a>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000ce0:	4b0b      	ldr	r3, [pc, #44]	; (8000d10 <HAL_FLASH_Program+0x70>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	615a      	str	r2, [r3, #20]

    /*Program word (32-bit) at a specified address.*/
    *(__IO uint32_t *)Address = Data;
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	687a      	ldr	r2, [r7, #4]
 8000cea:	601a      	str	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000cec:	187c      	adds	r4, r7, r1
 8000cee:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <HAL_FLASH_Program+0x74>)
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f000 f883 	bl	8000dfc <FLASH_WaitForLastOperation>
 8000cf6:	0003      	movs	r3, r0
 8000cf8:	7023      	strb	r3, [r4, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000cfa:	4b05      	ldr	r3, [pc, #20]	; (8000d10 <HAL_FLASH_Program+0x70>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	741a      	strb	r2, [r3, #16]

  return status;
 8000d00:	2317      	movs	r3, #23
 8000d02:	18fb      	adds	r3, r7, r3
 8000d04:	781b      	ldrb	r3, [r3, #0]
}
 8000d06:	0018      	movs	r0, r3
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	b006      	add	sp, #24
 8000d0c:	bdb0      	pop	{r4, r5, r7, pc}
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	200001c0 	.word	0x200001c0
 8000d14:	0000c350 	.word	0x0000c350

08000d18 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b086      	sub	sp, #24
 8000d1c:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  /* Unlocking FLASH_PECR register access*/
  if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 8000d1e:	4b23      	ldr	r3, [pc, #140]	; (8000dac <HAL_FLASH_Unlock+0x94>)
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	2201      	movs	r2, #1
 8000d24:	4013      	ands	r3, r2
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d11a      	bne.n	8000d60 <HAL_FLASH_Unlock+0x48>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000d2a:	f3ef 8310 	mrs	r3, PRIMASK
 8000d2e:	60fb      	str	r3, [r7, #12]
  return(result);
 8000d30:	68fb      	ldr	r3, [r7, #12]
  {
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 8000d32:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8000d34:	b672      	cpsid	i
}
 8000d36:	46c0      	nop			; (mov r8, r8)
    __disable_irq();

    WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY1);
 8000d38:	4b1c      	ldr	r3, [pc, #112]	; (8000dac <HAL_FLASH_Unlock+0x94>)
 8000d3a:	4a1d      	ldr	r2, [pc, #116]	; (8000db0 <HAL_FLASH_Unlock+0x98>)
 8000d3c:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY2);
 8000d3e:	4b1b      	ldr	r3, [pc, #108]	; (8000dac <HAL_FLASH_Unlock+0x94>)
 8000d40:	4a1c      	ldr	r2, [pc, #112]	; (8000db4 <HAL_FLASH_Unlock+0x9c>)
 8000d42:	60da      	str	r2, [r3, #12]
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	f383 8810 	msr	PRIMASK, r3
}
 8000d4e:	46c0      	nop			; (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 8000d50:	4b16      	ldr	r3, [pc, #88]	; (8000dac <HAL_FLASH_Unlock+0x94>)
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	2201      	movs	r2, #1
 8000d56:	4013      	ands	r3, r2
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d101      	bne.n	8000d60 <HAL_FLASH_Unlock+0x48>
    {
      return HAL_ERROR;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	e021      	b.n	8000da4 <HAL_FLASH_Unlock+0x8c>
    }
  }

  if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 8000d60:	4b12      	ldr	r3, [pc, #72]	; (8000dac <HAL_FLASH_Unlock+0x94>)
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	2202      	movs	r2, #2
 8000d66:	4013      	ands	r3, r2
 8000d68:	2b02      	cmp	r3, #2
 8000d6a:	d11a      	bne.n	8000da2 <HAL_FLASH_Unlock+0x8a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000d6c:	f3ef 8310 	mrs	r3, PRIMASK
 8000d70:	607b      	str	r3, [r7, #4]
  return(result);
 8000d72:	687b      	ldr	r3, [r7, #4]
  {
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 8000d74:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8000d76:	b672      	cpsid	i
}
 8000d78:	46c0      	nop			; (mov r8, r8)
    __disable_irq();

    /* Unlocking the program memory access */
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY1);
 8000d7a:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <HAL_FLASH_Unlock+0x94>)
 8000d7c:	4a0e      	ldr	r2, [pc, #56]	; (8000db8 <HAL_FLASH_Unlock+0xa0>)
 8000d7e:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY2);  
 8000d80:	4b0a      	ldr	r3, [pc, #40]	; (8000dac <HAL_FLASH_Unlock+0x94>)
 8000d82:	4a0e      	ldr	r2, [pc, #56]	; (8000dbc <HAL_FLASH_Unlock+0xa4>)
 8000d84:	611a      	str	r2, [r3, #16]
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	f383 8810 	msr	PRIMASK, r3
}
 8000d90:	46c0      	nop			; (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 8000d92:	4b06      	ldr	r3, [pc, #24]	; (8000dac <HAL_FLASH_Unlock+0x94>)
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	2202      	movs	r2, #2
 8000d98:	4013      	ands	r3, r2
 8000d9a:	2b02      	cmp	r3, #2
 8000d9c:	d101      	bne.n	8000da2 <HAL_FLASH_Unlock+0x8a>
    {
      return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e000      	b.n	8000da4 <HAL_FLASH_Unlock+0x8c>
    }
  }

  return HAL_OK; 
 8000da2:	2300      	movs	r3, #0
}
 8000da4:	0018      	movs	r0, r3
 8000da6:	46bd      	mov	sp, r7
 8000da8:	b006      	add	sp, #24
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40022000 	.word	0x40022000
 8000db0:	89abcdef 	.word	0x89abcdef
 8000db4:	02030405 	.word	0x02030405
 8000db8:	8c9daebf 	.word	0x8c9daebf
 8000dbc:	13141516 	.word	0x13141516

08000dc0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* Set the PRGLOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PRGLOCK);
 8000dc4:	4b07      	ldr	r3, [pc, #28]	; (8000de4 <HAL_FLASH_Lock+0x24>)
 8000dc6:	685a      	ldr	r2, [r3, #4]
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <HAL_FLASH_Lock+0x24>)
 8000dca:	2102      	movs	r1, #2
 8000dcc:	430a      	orrs	r2, r1
 8000dce:	605a      	str	r2, [r3, #4]
  
  /* Set the PELOCK Bit to lock the PECR Register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8000dd0:	4b04      	ldr	r3, [pc, #16]	; (8000de4 <HAL_FLASH_Lock+0x24>)
 8000dd2:	685a      	ldr	r2, [r3, #4]
 8000dd4:	4b03      	ldr	r3, [pc, #12]	; (8000de4 <HAL_FLASH_Lock+0x24>)
 8000dd6:	2101      	movs	r1, #1
 8000dd8:	430a      	orrs	r2, r1
 8000dda:	605a      	str	r2, [r3, #4]

  return HAL_OK;  
 8000ddc:	2300      	movs	r3, #0
}
 8000dde:	0018      	movs	r0, r3
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40022000 	.word	0x40022000

08000de8 <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8000dec:	4b02      	ldr	r3, [pc, #8]	; (8000df8 <HAL_FLASH_GetError+0x10>)
 8000dee:	695b      	ldr	r3, [r3, #20]
}
 8000df0:	0018      	movs	r0, r3
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	46c0      	nop			; (mov r8, r8)
 8000df8:	200001c0 	.word	0x200001c0

08000dfc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8000e04:	f7ff fe8e 	bl	8000b24 <HAL_GetTick>
 8000e08:	0003      	movs	r3, r0
 8000e0a:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000e0c:	e00f      	b.n	8000e2e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	3301      	adds	r3, #1
 8000e12:	d00c      	beq.n	8000e2e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d007      	beq.n	8000e2a <FLASH_WaitForLastOperation+0x2e>
 8000e1a:	f7ff fe83 	bl	8000b24 <HAL_GetTick>
 8000e1e:	0002      	movs	r2, r0
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	1ad3      	subs	r3, r2, r3
 8000e24:	687a      	ldr	r2, [r7, #4]
 8000e26:	429a      	cmp	r2, r3
 8000e28:	d201      	bcs.n	8000e2e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	e052      	b.n	8000ed4 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000e2e:	4b2b      	ldr	r3, [pc, #172]	; (8000edc <FLASH_WaitForLastOperation+0xe0>)
 8000e30:	699b      	ldr	r3, [r3, #24]
 8000e32:	2201      	movs	r2, #1
 8000e34:	4013      	ands	r3, r2
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d0e9      	beq.n	8000e0e <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000e3a:	4b28      	ldr	r3, [pc, #160]	; (8000edc <FLASH_WaitForLastOperation+0xe0>)
 8000e3c:	699b      	ldr	r3, [r3, #24]
 8000e3e:	2202      	movs	r2, #2
 8000e40:	4013      	ands	r3, r2
 8000e42:	2b02      	cmp	r3, #2
 8000e44:	d102      	bne.n	8000e4c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000e46:	4b25      	ldr	r3, [pc, #148]	; (8000edc <FLASH_WaitForLastOperation+0xe0>)
 8000e48:	2202      	movs	r2, #2
 8000e4a:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8000e4c:	4b23      	ldr	r3, [pc, #140]	; (8000edc <FLASH_WaitForLastOperation+0xe0>)
 8000e4e:	699a      	ldr	r2, [r3, #24]
 8000e50:	2380      	movs	r3, #128	; 0x80
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	401a      	ands	r2, r3
 8000e56:	2380      	movs	r3, #128	; 0x80
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	d035      	beq.n	8000eca <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8000e5e:	4b1f      	ldr	r3, [pc, #124]	; (8000edc <FLASH_WaitForLastOperation+0xe0>)
 8000e60:	699a      	ldr	r2, [r3, #24]
 8000e62:	2380      	movs	r3, #128	; 0x80
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8000e68:	2380      	movs	r3, #128	; 0x80
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	d02c      	beq.n	8000eca <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8000e70:	4b1a      	ldr	r3, [pc, #104]	; (8000edc <FLASH_WaitForLastOperation+0xe0>)
 8000e72:	699a      	ldr	r2, [r3, #24]
 8000e74:	2380      	movs	r3, #128	; 0x80
 8000e76:	00db      	lsls	r3, r3, #3
 8000e78:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8000e7a:	2380      	movs	r3, #128	; 0x80
 8000e7c:	00db      	lsls	r3, r3, #3
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d023      	beq.n	8000eca <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8000e82:	4b16      	ldr	r3, [pc, #88]	; (8000edc <FLASH_WaitForLastOperation+0xe0>)
 8000e84:	699a      	ldr	r2, [r3, #24]
 8000e86:	2380      	movs	r3, #128	; 0x80
 8000e88:	011b      	lsls	r3, r3, #4
 8000e8a:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8000e8c:	2380      	movs	r3, #128	; 0x80
 8000e8e:	011b      	lsls	r3, r3, #4
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d01a      	beq.n	8000eca <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8000e94:	4b11      	ldr	r3, [pc, #68]	; (8000edc <FLASH_WaitForLastOperation+0xe0>)
 8000e96:	699a      	ldr	r2, [r3, #24]
 8000e98:	2380      	movs	r3, #128	; 0x80
 8000e9a:	019b      	lsls	r3, r3, #6
 8000e9c:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8000e9e:	2380      	movs	r3, #128	; 0x80
 8000ea0:	019b      	lsls	r3, r3, #6
 8000ea2:	429a      	cmp	r2, r3
 8000ea4:	d011      	beq.n	8000eca <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8000ea6:	4b0d      	ldr	r3, [pc, #52]	; (8000edc <FLASH_WaitForLastOperation+0xe0>)
 8000ea8:	699a      	ldr	r2, [r3, #24]
 8000eaa:	2380      	movs	r3, #128	; 0x80
 8000eac:	029b      	lsls	r3, r3, #10
 8000eae:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8000eb0:	2380      	movs	r3, #128	; 0x80
 8000eb2:	029b      	lsls	r3, r3, #10
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d008      	beq.n	8000eca <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 8000eb8:	4b08      	ldr	r3, [pc, #32]	; (8000edc <FLASH_WaitForLastOperation+0xe0>)
 8000eba:	699a      	ldr	r2, [r3, #24]
 8000ebc:	2380      	movs	r3, #128	; 0x80
 8000ebe:	025b      	lsls	r3, r3, #9
 8000ec0:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8000ec2:	2380      	movs	r3, #128	; 0x80
 8000ec4:	025b      	lsls	r3, r3, #9
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	d103      	bne.n	8000ed2 <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 8000eca:	f000 f809 	bl	8000ee0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e000      	b.n	8000ed4 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 8000ed2:	2300      	movs	r3, #0
}
 8000ed4:	0018      	movs	r0, r3
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	b004      	add	sp, #16
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40022000 	.word	0x40022000

08000ee0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000eea:	4b49      	ldr	r3, [pc, #292]	; (8001010 <FLASH_SetErrorCode+0x130>)
 8000eec:	699a      	ldr	r2, [r3, #24]
 8000eee:	2380      	movs	r3, #128	; 0x80
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	401a      	ands	r2, r3
 8000ef4:	2380      	movs	r3, #128	; 0x80
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d10a      	bne.n	8000f12 <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000efc:	4b45      	ldr	r3, [pc, #276]	; (8001014 <FLASH_SetErrorCode+0x134>)
 8000efe:	695b      	ldr	r3, [r3, #20]
 8000f00:	2202      	movs	r2, #2
 8000f02:	431a      	orrs	r2, r3
 8000f04:	4b43      	ldr	r3, [pc, #268]	; (8001014 <FLASH_SetErrorCode+0x134>)
 8000f06:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2280      	movs	r2, #128	; 0x80
 8000f0c:	0052      	lsls	r2, r2, #1
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8000f12:	4b3f      	ldr	r3, [pc, #252]	; (8001010 <FLASH_SetErrorCode+0x130>)
 8000f14:	699a      	ldr	r2, [r3, #24]
 8000f16:	2380      	movs	r3, #128	; 0x80
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	401a      	ands	r2, r3
 8000f1c:	2380      	movs	r3, #128	; 0x80
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d10a      	bne.n	8000f3a <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8000f24:	4b3b      	ldr	r3, [pc, #236]	; (8001014 <FLASH_SetErrorCode+0x134>)
 8000f26:	695b      	ldr	r3, [r3, #20]
 8000f28:	2201      	movs	r2, #1
 8000f2a:	431a      	orrs	r2, r3
 8000f2c:	4b39      	ldr	r3, [pc, #228]	; (8001014 <FLASH_SetErrorCode+0x134>)
 8000f2e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2280      	movs	r2, #128	; 0x80
 8000f34:	0092      	lsls	r2, r2, #2
 8000f36:	4313      	orrs	r3, r2
 8000f38:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8000f3a:	4b35      	ldr	r3, [pc, #212]	; (8001010 <FLASH_SetErrorCode+0x130>)
 8000f3c:	699a      	ldr	r2, [r3, #24]
 8000f3e:	2380      	movs	r3, #128	; 0x80
 8000f40:	00db      	lsls	r3, r3, #3
 8000f42:	401a      	ands	r2, r3
 8000f44:	2380      	movs	r3, #128	; 0x80
 8000f46:	00db      	lsls	r3, r3, #3
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d10a      	bne.n	8000f62 <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8000f4c:	4b31      	ldr	r3, [pc, #196]	; (8001014 <FLASH_SetErrorCode+0x134>)
 8000f4e:	695b      	ldr	r3, [r3, #20]
 8000f50:	2208      	movs	r2, #8
 8000f52:	431a      	orrs	r2, r3
 8000f54:	4b2f      	ldr	r3, [pc, #188]	; (8001014 <FLASH_SetErrorCode+0x134>)
 8000f56:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2280      	movs	r2, #128	; 0x80
 8000f5c:	00d2      	lsls	r2, r2, #3
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8000f62:	4b2b      	ldr	r3, [pc, #172]	; (8001010 <FLASH_SetErrorCode+0x130>)
 8000f64:	699a      	ldr	r2, [r3, #24]
 8000f66:	2380      	movs	r3, #128	; 0x80
 8000f68:	011b      	lsls	r3, r3, #4
 8000f6a:	401a      	ands	r2, r3
 8000f6c:	2380      	movs	r3, #128	; 0x80
 8000f6e:	011b      	lsls	r3, r3, #4
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d10a      	bne.n	8000f8a <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8000f74:	4b27      	ldr	r3, [pc, #156]	; (8001014 <FLASH_SetErrorCode+0x134>)
 8000f76:	695b      	ldr	r3, [r3, #20]
 8000f78:	2204      	movs	r2, #4
 8000f7a:	431a      	orrs	r2, r3
 8000f7c:	4b25      	ldr	r3, [pc, #148]	; (8001014 <FLASH_SetErrorCode+0x134>)
 8000f7e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2280      	movs	r2, #128	; 0x80
 8000f84:	0112      	lsls	r2, r2, #4
 8000f86:	4313      	orrs	r3, r2
 8000f88:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 8000f8a:	4b21      	ldr	r3, [pc, #132]	; (8001010 <FLASH_SetErrorCode+0x130>)
 8000f8c:	699a      	ldr	r2, [r3, #24]
 8000f8e:	2380      	movs	r3, #128	; 0x80
 8000f90:	019b      	lsls	r3, r3, #6
 8000f92:	401a      	ands	r2, r3
 8000f94:	2380      	movs	r3, #128	; 0x80
 8000f96:	019b      	lsls	r3, r3, #6
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d10a      	bne.n	8000fb2 <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8000f9c:	4b1d      	ldr	r3, [pc, #116]	; (8001014 <FLASH_SetErrorCode+0x134>)
 8000f9e:	695b      	ldr	r3, [r3, #20]
 8000fa0:	2210      	movs	r2, #16
 8000fa2:	431a      	orrs	r2, r3
 8000fa4:	4b1b      	ldr	r3, [pc, #108]	; (8001014 <FLASH_SetErrorCode+0x134>)
 8000fa6:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2280      	movs	r2, #128	; 0x80
 8000fac:	0192      	lsls	r2, r2, #6
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 8000fb2:	4b17      	ldr	r3, [pc, #92]	; (8001010 <FLASH_SetErrorCode+0x130>)
 8000fb4:	699a      	ldr	r2, [r3, #24]
 8000fb6:	2380      	movs	r3, #128	; 0x80
 8000fb8:	029b      	lsls	r3, r3, #10
 8000fba:	401a      	ands	r2, r3
 8000fbc:	2380      	movs	r3, #128	; 0x80
 8000fbe:	029b      	lsls	r3, r3, #10
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d109      	bne.n	8000fd8 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 8000fc4:	4b13      	ldr	r3, [pc, #76]	; (8001014 <FLASH_SetErrorCode+0x134>)
 8000fc6:	695b      	ldr	r3, [r3, #20]
 8000fc8:	2220      	movs	r2, #32
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	4b11      	ldr	r3, [pc, #68]	; (8001014 <FLASH_SetErrorCode+0x134>)
 8000fce:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2220      	movs	r2, #32
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 8000fd8:	4b0d      	ldr	r3, [pc, #52]	; (8001010 <FLASH_SetErrorCode+0x130>)
 8000fda:	699a      	ldr	r2, [r3, #24]
 8000fdc:	2380      	movs	r3, #128	; 0x80
 8000fde:	025b      	lsls	r3, r3, #9
 8000fe0:	401a      	ands	r2, r3
 8000fe2:	2380      	movs	r3, #128	; 0x80
 8000fe4:	025b      	lsls	r3, r3, #9
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	d10a      	bne.n	8001000 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 8000fea:	4b0a      	ldr	r3, [pc, #40]	; (8001014 <FLASH_SetErrorCode+0x134>)
 8000fec:	695b      	ldr	r3, [r3, #20]
 8000fee:	2240      	movs	r2, #64	; 0x40
 8000ff0:	431a      	orrs	r2, r3
 8000ff2:	4b08      	ldr	r3, [pc, #32]	; (8001014 <FLASH_SetErrorCode+0x134>)
 8000ff4:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2280      	movs	r2, #128	; 0x80
 8000ffa:	0252      	lsls	r2, r2, #9
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001000:	4b03      	ldr	r3, [pc, #12]	; (8001010 <FLASH_SetErrorCode+0x130>)
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	619a      	str	r2, [r3, #24]
}  
 8001006:	46c0      	nop			; (mov r8, r8)
 8001008:	46bd      	mov	sp, r7
 800100a:	b002      	add	sp, #8
 800100c:	bd80      	pop	{r7, pc}
 800100e:	46c0      	nop			; (mov r8, r8)
 8001010:	40022000 	.word	0x40022000
 8001014:	200001c0 	.word	0x200001c0

08001018 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001018:	b5b0      	push	{r4, r5, r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001022:	230f      	movs	r3, #15
 8001024:	18fb      	adds	r3, r7, r3
 8001026:	2201      	movs	r2, #1
 8001028:	701a      	strb	r2, [r3, #0]
  uint32_t address = 0U;
 800102a:	2300      	movs	r3, #0
 800102c:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800102e:	4b29      	ldr	r3, [pc, #164]	; (80010d4 <HAL_FLASHEx_Erase+0xbc>)
 8001030:	7c1b      	ldrb	r3, [r3, #16]
 8001032:	2b01      	cmp	r3, #1
 8001034:	d101      	bne.n	800103a <HAL_FLASHEx_Erase+0x22>
 8001036:	2302      	movs	r3, #2
 8001038:	e048      	b.n	80010cc <HAL_FLASHEx_Erase+0xb4>
 800103a:	4b26      	ldr	r3, [pc, #152]	; (80010d4 <HAL_FLASHEx_Erase+0xbc>)
 800103c:	2201      	movs	r2, #1
 800103e:	741a      	strb	r2, [r3, #16]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001040:	250f      	movs	r5, #15
 8001042:	197c      	adds	r4, r7, r5
 8001044:	4b24      	ldr	r3, [pc, #144]	; (80010d8 <HAL_FLASHEx_Erase+0xc0>)
 8001046:	0018      	movs	r0, r3
 8001048:	f7ff fed8 	bl	8000dfc <FLASH_WaitForLastOperation>
 800104c:	0003      	movs	r3, r0
 800104e:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8001050:	197b      	adds	r3, r7, r5
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d133      	bne.n	80010c0 <HAL_FLASHEx_Erase+0xa8>
  {
    /*Initialization of PageError variable*/
    *PageError = 0xFFFFFFFFU;
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	2201      	movs	r2, #1
 800105c:	4252      	negs	r2, r2
 800105e:	601a      	str	r2, [r3, #0]
    assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_PROGRAM_ADDRESS((pEraseInit->PageAddress & ~(FLASH_PAGE_SIZE - 1U)) + pEraseInit->NbPages * FLASH_PAGE_SIZE - 1U));

    /* Erase page by page to be done*/
    for(address = pEraseInit->PageAddress; 
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	e022      	b.n	80010ae <HAL_FLASHEx_Erase+0x96>
        address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
        address += FLASH_PAGE_SIZE)
    {
      FLASH_PageErase(address);
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	0018      	movs	r0, r3
 800106c:	f000 f83a 	bl	80010e4 <FLASH_PageErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001070:	250f      	movs	r5, #15
 8001072:	197c      	adds	r4, r7, r5
 8001074:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <HAL_FLASHEx_Erase+0xc0>)
 8001076:	0018      	movs	r0, r3
 8001078:	f7ff fec0 	bl	8000dfc <FLASH_WaitForLastOperation>
 800107c:	0003      	movs	r3, r0
 800107e:	7023      	strb	r3, [r4, #0]

      /* If the erase operation is completed, disable the ERASE Bit */
      CLEAR_BIT(FLASH->PECR, FLASH_PECR_PROG);
 8001080:	4b16      	ldr	r3, [pc, #88]	; (80010dc <HAL_FLASHEx_Erase+0xc4>)
 8001082:	685a      	ldr	r2, [r3, #4]
 8001084:	4b15      	ldr	r3, [pc, #84]	; (80010dc <HAL_FLASHEx_Erase+0xc4>)
 8001086:	2108      	movs	r1, #8
 8001088:	438a      	bics	r2, r1
 800108a:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 800108c:	4b13      	ldr	r3, [pc, #76]	; (80010dc <HAL_FLASHEx_Erase+0xc4>)
 800108e:	685a      	ldr	r2, [r3, #4]
 8001090:	4b12      	ldr	r3, [pc, #72]	; (80010dc <HAL_FLASHEx_Erase+0xc4>)
 8001092:	4913      	ldr	r1, [pc, #76]	; (80010e0 <HAL_FLASHEx_Erase+0xc8>)
 8001094:	400a      	ands	r2, r1
 8001096:	605a      	str	r2, [r3, #4]

      if (status != HAL_OK) 
 8001098:	197b      	adds	r3, r7, r5
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d003      	beq.n	80010a8 <HAL_FLASHEx_Erase+0x90>
      {
        /* In case of error, stop erase procedure and return the faulty address */
        *PageError = address;
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	68ba      	ldr	r2, [r7, #8]
 80010a4:	601a      	str	r2, [r3, #0]
        break;
 80010a6:	e00b      	b.n	80010c0 <HAL_FLASHEx_Erase+0xa8>
        address += FLASH_PAGE_SIZE)
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	3380      	adds	r3, #128	; 0x80
 80010ac:	60bb      	str	r3, [r7, #8]
        address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	01da      	lsls	r2, r3, #7
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	18d3      	adds	r3, r2, r3
    for(address = pEraseInit->PageAddress; 
 80010ba:	68ba      	ldr	r2, [r7, #8]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d3d3      	bcc.n	8001068 <HAL_FLASHEx_Erase+0x50>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80010c0:	4b04      	ldr	r3, [pc, #16]	; (80010d4 <HAL_FLASHEx_Erase+0xbc>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	741a      	strb	r2, [r3, #16]

  return status;
 80010c6:	230f      	movs	r3, #15
 80010c8:	18fb      	adds	r3, r7, r3
 80010ca:	781b      	ldrb	r3, [r3, #0]
}
 80010cc:	0018      	movs	r0, r3
 80010ce:	46bd      	mov	sp, r7
 80010d0:	b004      	add	sp, #16
 80010d2:	bdb0      	pop	{r4, r5, r7, pc}
 80010d4:	200001c0 	.word	0x200001c0
 80010d8:	0000c350 	.word	0x0000c350
 80010dc:	40022000 	.word	0x40022000
 80010e0:	fffffdff 	.word	0xfffffdff

080010e4 <FLASH_PageErase>:
  * @note   A Page is erased in the Program memory only if the address to load 
  *         is the start address of a page (multiple of @ref FLASH_PAGE_SIZE bytes).
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80010ec:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <FLASH_PageErase+0x3c>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	615a      	str	r2, [r3, #20]

  /* Set the ERASE bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 80010f2:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <FLASH_PageErase+0x40>)
 80010f4:	685a      	ldr	r2, [r3, #4]
 80010f6:	4b0b      	ldr	r3, [pc, #44]	; (8001124 <FLASH_PageErase+0x40>)
 80010f8:	2180      	movs	r1, #128	; 0x80
 80010fa:	0089      	lsls	r1, r1, #2
 80010fc:	430a      	orrs	r2, r1
 80010fe:	605a      	str	r2, [r3, #4]

  /* Set PROG bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_PROG);
 8001100:	4b08      	ldr	r3, [pc, #32]	; (8001124 <FLASH_PageErase+0x40>)
 8001102:	685a      	ldr	r2, [r3, #4]
 8001104:	4b07      	ldr	r3, [pc, #28]	; (8001124 <FLASH_PageErase+0x40>)
 8001106:	2108      	movs	r1, #8
 8001108:	430a      	orrs	r2, r1
 800110a:	605a      	str	r2, [r3, #4]

  /* Write 00000000h to the first word of the program page to erase */
  *(__IO uint32_t *)(uint32_t)(PageAddress & ~(FLASH_PAGE_SIZE - 1)) = 0x00000000;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	227f      	movs	r2, #127	; 0x7f
 8001110:	4393      	bics	r3, r2
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
}
 8001116:	46c0      	nop			; (mov r8, r8)
 8001118:	46bd      	mov	sp, r7
 800111a:	b002      	add	sp, #8
 800111c:	bd80      	pop	{r7, pc}
 800111e:	46c0      	nop			; (mov r8, r8)
 8001120:	200001c0 	.word	0x200001c0
 8001124:	40022000 	.word	0x40022000

08001128 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001132:	2300      	movs	r3, #0
 8001134:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800113a:	2300      	movs	r3, #0
 800113c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800113e:	e155      	b.n	80013ec <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2101      	movs	r1, #1
 8001146:	697a      	ldr	r2, [r7, #20]
 8001148:	4091      	lsls	r1, r2
 800114a:	000a      	movs	r2, r1
 800114c:	4013      	ands	r3, r2
 800114e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d100      	bne.n	8001158 <HAL_GPIO_Init+0x30>
 8001156:	e146      	b.n	80013e6 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	2203      	movs	r2, #3
 800115e:	4013      	ands	r3, r2
 8001160:	2b01      	cmp	r3, #1
 8001162:	d005      	beq.n	8001170 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	2203      	movs	r2, #3
 800116a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800116c:	2b02      	cmp	r3, #2
 800116e:	d130      	bne.n	80011d2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	2203      	movs	r2, #3
 800117c:	409a      	lsls	r2, r3
 800117e:	0013      	movs	r3, r2
 8001180:	43da      	mvns	r2, r3
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	4013      	ands	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	68da      	ldr	r2, [r3, #12]
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	409a      	lsls	r2, r3
 8001192:	0013      	movs	r3, r2
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	4313      	orrs	r3, r2
 8001198:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011a6:	2201      	movs	r2, #1
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	409a      	lsls	r2, r3
 80011ac:	0013      	movs	r3, r2
 80011ae:	43da      	mvns	r2, r3
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	4013      	ands	r3, r2
 80011b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	091b      	lsrs	r3, r3, #4
 80011bc:	2201      	movs	r2, #1
 80011be:	401a      	ands	r2, r3
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	409a      	lsls	r2, r3
 80011c4:	0013      	movs	r3, r2
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	2203      	movs	r2, #3
 80011d8:	4013      	ands	r3, r2
 80011da:	2b03      	cmp	r3, #3
 80011dc:	d017      	beq.n	800120e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	2203      	movs	r2, #3
 80011ea:	409a      	lsls	r2, r3
 80011ec:	0013      	movs	r3, r2
 80011ee:	43da      	mvns	r2, r3
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	4013      	ands	r3, r2
 80011f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	689a      	ldr	r2, [r3, #8]
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	409a      	lsls	r2, r3
 8001200:	0013      	movs	r3, r2
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	4313      	orrs	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	2203      	movs	r2, #3
 8001214:	4013      	ands	r3, r2
 8001216:	2b02      	cmp	r3, #2
 8001218:	d123      	bne.n	8001262 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	08da      	lsrs	r2, r3, #3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	3208      	adds	r2, #8
 8001222:	0092      	lsls	r2, r2, #2
 8001224:	58d3      	ldr	r3, [r2, r3]
 8001226:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	2207      	movs	r2, #7
 800122c:	4013      	ands	r3, r2
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	220f      	movs	r2, #15
 8001232:	409a      	lsls	r2, r3
 8001234:	0013      	movs	r3, r2
 8001236:	43da      	mvns	r2, r3
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	4013      	ands	r3, r2
 800123c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	691a      	ldr	r2, [r3, #16]
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	2107      	movs	r1, #7
 8001246:	400b      	ands	r3, r1
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	409a      	lsls	r2, r3
 800124c:	0013      	movs	r3, r2
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	4313      	orrs	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	08da      	lsrs	r2, r3, #3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3208      	adds	r2, #8
 800125c:	0092      	lsls	r2, r2, #2
 800125e:	6939      	ldr	r1, [r7, #16]
 8001260:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	2203      	movs	r2, #3
 800126e:	409a      	lsls	r2, r3
 8001270:	0013      	movs	r3, r2
 8001272:	43da      	mvns	r2, r3
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	4013      	ands	r3, r2
 8001278:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	2203      	movs	r2, #3
 8001280:	401a      	ands	r2, r3
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	409a      	lsls	r2, r3
 8001288:	0013      	movs	r3, r2
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	4313      	orrs	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685a      	ldr	r2, [r3, #4]
 800129a:	23c0      	movs	r3, #192	; 0xc0
 800129c:	029b      	lsls	r3, r3, #10
 800129e:	4013      	ands	r3, r2
 80012a0:	d100      	bne.n	80012a4 <HAL_GPIO_Init+0x17c>
 80012a2:	e0a0      	b.n	80013e6 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a4:	4b57      	ldr	r3, [pc, #348]	; (8001404 <HAL_GPIO_Init+0x2dc>)
 80012a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012a8:	4b56      	ldr	r3, [pc, #344]	; (8001404 <HAL_GPIO_Init+0x2dc>)
 80012aa:	2101      	movs	r1, #1
 80012ac:	430a      	orrs	r2, r1
 80012ae:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80012b0:	4a55      	ldr	r2, [pc, #340]	; (8001408 <HAL_GPIO_Init+0x2e0>)
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	089b      	lsrs	r3, r3, #2
 80012b6:	3302      	adds	r3, #2
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	589b      	ldr	r3, [r3, r2]
 80012bc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	2203      	movs	r2, #3
 80012c2:	4013      	ands	r3, r2
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	220f      	movs	r2, #15
 80012c8:	409a      	lsls	r2, r3
 80012ca:	0013      	movs	r3, r2
 80012cc:	43da      	mvns	r2, r3
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	4013      	ands	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	23a0      	movs	r3, #160	; 0xa0
 80012d8:	05db      	lsls	r3, r3, #23
 80012da:	429a      	cmp	r2, r3
 80012dc:	d01f      	beq.n	800131e <HAL_GPIO_Init+0x1f6>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a4a      	ldr	r2, [pc, #296]	; (800140c <HAL_GPIO_Init+0x2e4>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d019      	beq.n	800131a <HAL_GPIO_Init+0x1f2>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a49      	ldr	r2, [pc, #292]	; (8001410 <HAL_GPIO_Init+0x2e8>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d013      	beq.n	8001316 <HAL_GPIO_Init+0x1ee>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a48      	ldr	r2, [pc, #288]	; (8001414 <HAL_GPIO_Init+0x2ec>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d00d      	beq.n	8001312 <HAL_GPIO_Init+0x1ea>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a47      	ldr	r2, [pc, #284]	; (8001418 <HAL_GPIO_Init+0x2f0>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d007      	beq.n	800130e <HAL_GPIO_Init+0x1e6>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a46      	ldr	r2, [pc, #280]	; (800141c <HAL_GPIO_Init+0x2f4>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d101      	bne.n	800130a <HAL_GPIO_Init+0x1e2>
 8001306:	2305      	movs	r3, #5
 8001308:	e00a      	b.n	8001320 <HAL_GPIO_Init+0x1f8>
 800130a:	2306      	movs	r3, #6
 800130c:	e008      	b.n	8001320 <HAL_GPIO_Init+0x1f8>
 800130e:	2304      	movs	r3, #4
 8001310:	e006      	b.n	8001320 <HAL_GPIO_Init+0x1f8>
 8001312:	2303      	movs	r3, #3
 8001314:	e004      	b.n	8001320 <HAL_GPIO_Init+0x1f8>
 8001316:	2302      	movs	r3, #2
 8001318:	e002      	b.n	8001320 <HAL_GPIO_Init+0x1f8>
 800131a:	2301      	movs	r3, #1
 800131c:	e000      	b.n	8001320 <HAL_GPIO_Init+0x1f8>
 800131e:	2300      	movs	r3, #0
 8001320:	697a      	ldr	r2, [r7, #20]
 8001322:	2103      	movs	r1, #3
 8001324:	400a      	ands	r2, r1
 8001326:	0092      	lsls	r2, r2, #2
 8001328:	4093      	lsls	r3, r2
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	4313      	orrs	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001330:	4935      	ldr	r1, [pc, #212]	; (8001408 <HAL_GPIO_Init+0x2e0>)
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	089b      	lsrs	r3, r3, #2
 8001336:	3302      	adds	r3, #2
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800133e:	4b38      	ldr	r3, [pc, #224]	; (8001420 <HAL_GPIO_Init+0x2f8>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	43da      	mvns	r2, r3
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	4013      	ands	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685a      	ldr	r2, [r3, #4]
 8001352:	2380      	movs	r3, #128	; 0x80
 8001354:	025b      	lsls	r3, r3, #9
 8001356:	4013      	ands	r3, r2
 8001358:	d003      	beq.n	8001362 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	4313      	orrs	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001362:	4b2f      	ldr	r3, [pc, #188]	; (8001420 <HAL_GPIO_Init+0x2f8>)
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001368:	4b2d      	ldr	r3, [pc, #180]	; (8001420 <HAL_GPIO_Init+0x2f8>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	43da      	mvns	r2, r3
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	4013      	ands	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685a      	ldr	r2, [r3, #4]
 800137c:	2380      	movs	r3, #128	; 0x80
 800137e:	029b      	lsls	r3, r3, #10
 8001380:	4013      	ands	r3, r2
 8001382:	d003      	beq.n	800138c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	4313      	orrs	r3, r2
 800138a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800138c:	4b24      	ldr	r3, [pc, #144]	; (8001420 <HAL_GPIO_Init+0x2f8>)
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001392:	4b23      	ldr	r3, [pc, #140]	; (8001420 <HAL_GPIO_Init+0x2f8>)
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	43da      	mvns	r2, r3
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	4013      	ands	r3, r2
 80013a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685a      	ldr	r2, [r3, #4]
 80013a6:	2380      	movs	r3, #128	; 0x80
 80013a8:	035b      	lsls	r3, r3, #13
 80013aa:	4013      	ands	r3, r2
 80013ac:	d003      	beq.n	80013b6 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80013b6:	4b1a      	ldr	r3, [pc, #104]	; (8001420 <HAL_GPIO_Init+0x2f8>)
 80013b8:	693a      	ldr	r2, [r7, #16]
 80013ba:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80013bc:	4b18      	ldr	r3, [pc, #96]	; (8001420 <HAL_GPIO_Init+0x2f8>)
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	43da      	mvns	r2, r3
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	4013      	ands	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685a      	ldr	r2, [r3, #4]
 80013d0:	2380      	movs	r3, #128	; 0x80
 80013d2:	039b      	lsls	r3, r3, #14
 80013d4:	4013      	ands	r3, r2
 80013d6:	d003      	beq.n	80013e0 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	4313      	orrs	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80013e0:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <HAL_GPIO_Init+0x2f8>)
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	3301      	adds	r3, #1
 80013ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	40da      	lsrs	r2, r3
 80013f4:	1e13      	subs	r3, r2, #0
 80013f6:	d000      	beq.n	80013fa <HAL_GPIO_Init+0x2d2>
 80013f8:	e6a2      	b.n	8001140 <HAL_GPIO_Init+0x18>
  }
}
 80013fa:	46c0      	nop			; (mov r8, r8)
 80013fc:	46c0      	nop			; (mov r8, r8)
 80013fe:	46bd      	mov	sp, r7
 8001400:	b006      	add	sp, #24
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40021000 	.word	0x40021000
 8001408:	40010000 	.word	0x40010000
 800140c:	50000400 	.word	0x50000400
 8001410:	50000800 	.word	0x50000800
 8001414:	50000c00 	.word	0x50000c00
 8001418:	50001000 	.word	0x50001000
 800141c:	50001c00 	.word	0x50001c00
 8001420:	40010400 	.word	0x40010400

08001424 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001424:	b5b0      	push	{r4, r5, r7, lr}
 8001426:	b08a      	sub	sp, #40	; 0x28
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d102      	bne.n	8001438 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	f000 fbbf 	bl	8001bb6 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001438:	4bc9      	ldr	r3, [pc, #804]	; (8001760 <HAL_RCC_OscConfig+0x33c>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	220c      	movs	r2, #12
 800143e:	4013      	ands	r3, r2
 8001440:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001442:	4bc7      	ldr	r3, [pc, #796]	; (8001760 <HAL_RCC_OscConfig+0x33c>)
 8001444:	68da      	ldr	r2, [r3, #12]
 8001446:	2380      	movs	r3, #128	; 0x80
 8001448:	025b      	lsls	r3, r3, #9
 800144a:	4013      	ands	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2201      	movs	r2, #1
 8001454:	4013      	ands	r3, r2
 8001456:	d100      	bne.n	800145a <HAL_RCC_OscConfig+0x36>
 8001458:	e07e      	b.n	8001558 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	2b08      	cmp	r3, #8
 800145e:	d007      	beq.n	8001470 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	2b0c      	cmp	r3, #12
 8001464:	d112      	bne.n	800148c <HAL_RCC_OscConfig+0x68>
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	2380      	movs	r3, #128	; 0x80
 800146a:	025b      	lsls	r3, r3, #9
 800146c:	429a      	cmp	r2, r3
 800146e:	d10d      	bne.n	800148c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001470:	4bbb      	ldr	r3, [pc, #748]	; (8001760 <HAL_RCC_OscConfig+0x33c>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	2380      	movs	r3, #128	; 0x80
 8001476:	029b      	lsls	r3, r3, #10
 8001478:	4013      	ands	r3, r2
 800147a:	d100      	bne.n	800147e <HAL_RCC_OscConfig+0x5a>
 800147c:	e06b      	b.n	8001556 <HAL_RCC_OscConfig+0x132>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d167      	bne.n	8001556 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	f000 fb95 	bl	8001bb6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685a      	ldr	r2, [r3, #4]
 8001490:	2380      	movs	r3, #128	; 0x80
 8001492:	025b      	lsls	r3, r3, #9
 8001494:	429a      	cmp	r2, r3
 8001496:	d107      	bne.n	80014a8 <HAL_RCC_OscConfig+0x84>
 8001498:	4bb1      	ldr	r3, [pc, #708]	; (8001760 <HAL_RCC_OscConfig+0x33c>)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	4bb0      	ldr	r3, [pc, #704]	; (8001760 <HAL_RCC_OscConfig+0x33c>)
 800149e:	2180      	movs	r1, #128	; 0x80
 80014a0:	0249      	lsls	r1, r1, #9
 80014a2:	430a      	orrs	r2, r1
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	e027      	b.n	80014f8 <HAL_RCC_OscConfig+0xd4>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685a      	ldr	r2, [r3, #4]
 80014ac:	23a0      	movs	r3, #160	; 0xa0
 80014ae:	02db      	lsls	r3, r3, #11
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d10e      	bne.n	80014d2 <HAL_RCC_OscConfig+0xae>
 80014b4:	4baa      	ldr	r3, [pc, #680]	; (8001760 <HAL_RCC_OscConfig+0x33c>)
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	4ba9      	ldr	r3, [pc, #676]	; (8001760 <HAL_RCC_OscConfig+0x33c>)
 80014ba:	2180      	movs	r1, #128	; 0x80
 80014bc:	02c9      	lsls	r1, r1, #11
 80014be:	430a      	orrs	r2, r1
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	4ba7      	ldr	r3, [pc, #668]	; (8001760 <HAL_RCC_OscConfig+0x33c>)
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	4ba6      	ldr	r3, [pc, #664]	; (8001760 <HAL_RCC_OscConfig+0x33c>)
 80014c8:	2180      	movs	r1, #128	; 0x80
 80014ca:	0249      	lsls	r1, r1, #9
 80014cc:	430a      	orrs	r2, r1
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	e012      	b.n	80014f8 <HAL_RCC_OscConfig+0xd4>
 80014d2:	4ba3      	ldr	r3, [pc, #652]	; (8001760 <HAL_RCC_OscConfig+0x33c>)
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	4ba2      	ldr	r3, [pc, #648]	; (8001760 <HAL_RCC_OscConfig+0x33c>)
 80014d8:	49a2      	ldr	r1, [pc, #648]	; (8001764 <HAL_RCC_OscConfig+0x340>)
 80014da:	400a      	ands	r2, r1
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	4ba0      	ldr	r3, [pc, #640]	; (8001760 <HAL_RCC_OscConfig+0x33c>)
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	2380      	movs	r3, #128	; 0x80
 80014e4:	025b      	lsls	r3, r3, #9
 80014e6:	4013      	ands	r3, r2
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	4b9c      	ldr	r3, [pc, #624]	; (8001760 <HAL_RCC_OscConfig+0x33c>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4b9b      	ldr	r3, [pc, #620]	; (8001760 <HAL_RCC_OscConfig+0x33c>)
 80014f2:	499d      	ldr	r1, [pc, #628]	; (8001768 <HAL_RCC_OscConfig+0x344>)
 80014f4:	400a      	ands	r2, r1
 80014f6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d015      	beq.n	800152c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001500:	f7ff fb10 	bl	8000b24 <HAL_GetTick>
 8001504:	0003      	movs	r3, r0
 8001506:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001508:	e009      	b.n	800151e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800150a:	f7ff fb0b 	bl	8000b24 <HAL_GetTick>
 800150e:	0002      	movs	r2, r0
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b64      	cmp	r3, #100	; 0x64
 8001516:	d902      	bls.n	800151e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	f000 fb4c 	bl	8001bb6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800151e:	4b90      	ldr	r3, [pc, #576]	; (8001760 <HAL_RCC_OscConfig+0x33c>)
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	2380      	movs	r3, #128	; 0x80
 8001524:	029b      	lsls	r3, r3, #10
 8001526:	4013      	ands	r3, r2
 8001528:	d0ef      	beq.n	800150a <HAL_RCC_OscConfig+0xe6>
 800152a:	e015      	b.n	8001558 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152c:	f7ff fafa 	bl	8000b24 <HAL_GetTick>
 8001530:	0003      	movs	r3, r0
 8001532:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001534:	e008      	b.n	8001548 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001536:	f7ff faf5 	bl	8000b24 <HAL_GetTick>
 800153a:	0002      	movs	r2, r0
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	2b64      	cmp	r3, #100	; 0x64
 8001542:	d901      	bls.n	8001548 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e336      	b.n	8001bb6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001548:	4b85      	ldr	r3, [pc, #532]	; (8001760 <HAL_RCC_OscConfig+0x33c>)
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	2380      	movs	r3, #128	; 0x80
 800154e:	029b      	lsls	r3, r3, #10
 8001550:	4013      	ands	r3, r2
 8001552:	d1f0      	bne.n	8001536 <HAL_RCC_OscConfig+0x112>
 8001554:	e000      	b.n	8001558 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001556:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2202      	movs	r2, #2
 800155e:	4013      	ands	r3, r2
 8001560:	d100      	bne.n	8001564 <HAL_RCC_OscConfig+0x140>
 8001562:	e099      	b.n	8001698 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800156a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156c:	2220      	movs	r2, #32
 800156e:	4013      	ands	r3, r2
 8001570:	d009      	beq.n	8001586 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001572:	4b7b      	ldr	r3, [pc, #492]	; (8001760 <HAL_RCC_OscConfig+0x33c>)
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	4b7a      	ldr	r3, [pc, #488]	; (8001760 <HAL_RCC_OscConfig+0x33c>)
 8001578:	2120      	movs	r1, #32
 800157a:	430a      	orrs	r2, r1
 800157c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800157e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001580:	2220      	movs	r2, #32
 8001582:	4393      	bics	r3, r2
 8001584:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	2b04      	cmp	r3, #4
 800158a:	d005      	beq.n	8001598 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	2b0c      	cmp	r3, #12
 8001590:	d13e      	bne.n	8001610 <HAL_RCC_OscConfig+0x1ec>
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d13b      	bne.n	8001610 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001598:	4b71      	ldr	r3, [pc, #452]	; (8001760 <HAL_RCC_OscConfig+0x33c>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2204      	movs	r2, #4
 800159e:	4013      	ands	r3, r2
 80015a0:	d004      	beq.n	80015ac <HAL_RCC_OscConfig+0x188>
 80015a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d101      	bne.n	80015ac <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e304      	b.n	8001bb6 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ac:	4b6c      	ldr	r3, [pc, #432]	; (8001760 <HAL_RCC_OscConfig+0x33c>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	4a6e      	ldr	r2, [pc, #440]	; (800176c <HAL_RCC_OscConfig+0x348>)
 80015b2:	4013      	ands	r3, r2
 80015b4:	0019      	movs	r1, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	691b      	ldr	r3, [r3, #16]
 80015ba:	021a      	lsls	r2, r3, #8
 80015bc:	4b68      	ldr	r3, [pc, #416]	; (8001760 <HAL_RCC_OscConfig+0x33c>)
 80015be:	430a      	orrs	r2, r1
 80015c0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80015c2:	4b67      	ldr	r3, [pc, #412]	; (8001760 <HAL_RCC_OscConfig+0x33c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2209      	movs	r2, #9
 80015c8:	4393      	bics	r3, r2
 80015ca:	0019      	movs	r1, r3
 80015cc:	4b64      	ldr	r3, [pc, #400]	; (8001760 <HAL_RCC_OscConfig+0x33c>)
 80015ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015d0:	430a      	orrs	r2, r1
 80015d2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015d4:	f000 fc42 	bl	8001e5c <HAL_RCC_GetSysClockFreq>
 80015d8:	0001      	movs	r1, r0
 80015da:	4b61      	ldr	r3, [pc, #388]	; (8001760 <HAL_RCC_OscConfig+0x33c>)
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	091b      	lsrs	r3, r3, #4
 80015e0:	220f      	movs	r2, #15
 80015e2:	4013      	ands	r3, r2
 80015e4:	4a62      	ldr	r2, [pc, #392]	; (8001770 <HAL_RCC_OscConfig+0x34c>)
 80015e6:	5cd3      	ldrb	r3, [r2, r3]
 80015e8:	000a      	movs	r2, r1
 80015ea:	40da      	lsrs	r2, r3
 80015ec:	4b61      	ldr	r3, [pc, #388]	; (8001774 <HAL_RCC_OscConfig+0x350>)
 80015ee:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80015f0:	4b61      	ldr	r3, [pc, #388]	; (8001778 <HAL_RCC_OscConfig+0x354>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2513      	movs	r5, #19
 80015f6:	197c      	adds	r4, r7, r5
 80015f8:	0018      	movs	r0, r3
 80015fa:	f7ff fa4d 	bl	8000a98 <HAL_InitTick>
 80015fe:	0003      	movs	r3, r0
 8001600:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001602:	197b      	adds	r3, r7, r5
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d046      	beq.n	8001698 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800160a:	197b      	adds	r3, r7, r5
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	e2d2      	b.n	8001bb6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001612:	2b00      	cmp	r3, #0
 8001614:	d027      	beq.n	8001666 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001616:	4b52      	ldr	r3, [pc, #328]	; (8001760 <HAL_RCC_OscConfig+0x33c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2209      	movs	r2, #9
 800161c:	4393      	bics	r3, r2
 800161e:	0019      	movs	r1, r3
 8001620:	4b4f      	ldr	r3, [pc, #316]	; (8001760 <HAL_RCC_OscConfig+0x33c>)
 8001622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001624:	430a      	orrs	r2, r1
 8001626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001628:	f7ff fa7c 	bl	8000b24 <HAL_GetTick>
 800162c:	0003      	movs	r3, r0
 800162e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001630:	e008      	b.n	8001644 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001632:	f7ff fa77 	bl	8000b24 <HAL_GetTick>
 8001636:	0002      	movs	r2, r0
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d901      	bls.n	8001644 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e2b8      	b.n	8001bb6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001644:	4b46      	ldr	r3, [pc, #280]	; (8001760 <HAL_RCC_OscConfig+0x33c>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2204      	movs	r2, #4
 800164a:	4013      	ands	r3, r2
 800164c:	d0f1      	beq.n	8001632 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800164e:	4b44      	ldr	r3, [pc, #272]	; (8001760 <HAL_RCC_OscConfig+0x33c>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	4a46      	ldr	r2, [pc, #280]	; (800176c <HAL_RCC_OscConfig+0x348>)
 8001654:	4013      	ands	r3, r2
 8001656:	0019      	movs	r1, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	691b      	ldr	r3, [r3, #16]
 800165c:	021a      	lsls	r2, r3, #8
 800165e:	4b40      	ldr	r3, [pc, #256]	; (8001760 <HAL_RCC_OscConfig+0x33c>)
 8001660:	430a      	orrs	r2, r1
 8001662:	605a      	str	r2, [r3, #4]
 8001664:	e018      	b.n	8001698 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001666:	4b3e      	ldr	r3, [pc, #248]	; (8001760 <HAL_RCC_OscConfig+0x33c>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	4b3d      	ldr	r3, [pc, #244]	; (8001760 <HAL_RCC_OscConfig+0x33c>)
 800166c:	2101      	movs	r1, #1
 800166e:	438a      	bics	r2, r1
 8001670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001672:	f7ff fa57 	bl	8000b24 <HAL_GetTick>
 8001676:	0003      	movs	r3, r0
 8001678:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800167c:	f7ff fa52 	bl	8000b24 <HAL_GetTick>
 8001680:	0002      	movs	r2, r0
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e293      	b.n	8001bb6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800168e:	4b34      	ldr	r3, [pc, #208]	; (8001760 <HAL_RCC_OscConfig+0x33c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2204      	movs	r2, #4
 8001694:	4013      	ands	r3, r2
 8001696:	d1f1      	bne.n	800167c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2210      	movs	r2, #16
 800169e:	4013      	ands	r3, r2
 80016a0:	d100      	bne.n	80016a4 <HAL_RCC_OscConfig+0x280>
 80016a2:	e0a2      	b.n	80017ea <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d140      	bne.n	800172c <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016aa:	4b2d      	ldr	r3, [pc, #180]	; (8001760 <HAL_RCC_OscConfig+0x33c>)
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	2380      	movs	r3, #128	; 0x80
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	4013      	ands	r3, r2
 80016b4:	d005      	beq.n	80016c2 <HAL_RCC_OscConfig+0x29e>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	69db      	ldr	r3, [r3, #28]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d101      	bne.n	80016c2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e279      	b.n	8001bb6 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016c2:	4b27      	ldr	r3, [pc, #156]	; (8001760 <HAL_RCC_OscConfig+0x33c>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	4a2d      	ldr	r2, [pc, #180]	; (800177c <HAL_RCC_OscConfig+0x358>)
 80016c8:	4013      	ands	r3, r2
 80016ca:	0019      	movs	r1, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016d0:	4b23      	ldr	r3, [pc, #140]	; (8001760 <HAL_RCC_OscConfig+0x33c>)
 80016d2:	430a      	orrs	r2, r1
 80016d4:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016d6:	4b22      	ldr	r3, [pc, #136]	; (8001760 <HAL_RCC_OscConfig+0x33c>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	021b      	lsls	r3, r3, #8
 80016dc:	0a19      	lsrs	r1, r3, #8
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a1b      	ldr	r3, [r3, #32]
 80016e2:	061a      	lsls	r2, r3, #24
 80016e4:	4b1e      	ldr	r3, [pc, #120]	; (8001760 <HAL_RCC_OscConfig+0x33c>)
 80016e6:	430a      	orrs	r2, r1
 80016e8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ee:	0b5b      	lsrs	r3, r3, #13
 80016f0:	3301      	adds	r3, #1
 80016f2:	2280      	movs	r2, #128	; 0x80
 80016f4:	0212      	lsls	r2, r2, #8
 80016f6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80016f8:	4b19      	ldr	r3, [pc, #100]	; (8001760 <HAL_RCC_OscConfig+0x33c>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	091b      	lsrs	r3, r3, #4
 80016fe:	210f      	movs	r1, #15
 8001700:	400b      	ands	r3, r1
 8001702:	491b      	ldr	r1, [pc, #108]	; (8001770 <HAL_RCC_OscConfig+0x34c>)
 8001704:	5ccb      	ldrb	r3, [r1, r3]
 8001706:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001708:	4b1a      	ldr	r3, [pc, #104]	; (8001774 <HAL_RCC_OscConfig+0x350>)
 800170a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800170c:	4b1a      	ldr	r3, [pc, #104]	; (8001778 <HAL_RCC_OscConfig+0x354>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2513      	movs	r5, #19
 8001712:	197c      	adds	r4, r7, r5
 8001714:	0018      	movs	r0, r3
 8001716:	f7ff f9bf 	bl	8000a98 <HAL_InitTick>
 800171a:	0003      	movs	r3, r0
 800171c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800171e:	197b      	adds	r3, r7, r5
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d061      	beq.n	80017ea <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8001726:	197b      	adds	r3, r7, r5
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	e244      	b.n	8001bb6 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	69db      	ldr	r3, [r3, #28]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d040      	beq.n	80017b6 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001734:	4b0a      	ldr	r3, [pc, #40]	; (8001760 <HAL_RCC_OscConfig+0x33c>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	4b09      	ldr	r3, [pc, #36]	; (8001760 <HAL_RCC_OscConfig+0x33c>)
 800173a:	2180      	movs	r1, #128	; 0x80
 800173c:	0049      	lsls	r1, r1, #1
 800173e:	430a      	orrs	r2, r1
 8001740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001742:	f7ff f9ef 	bl	8000b24 <HAL_GetTick>
 8001746:	0003      	movs	r3, r0
 8001748:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800174a:	e019      	b.n	8001780 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800174c:	f7ff f9ea 	bl	8000b24 <HAL_GetTick>
 8001750:	0002      	movs	r2, r0
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b02      	cmp	r3, #2
 8001758:	d912      	bls.n	8001780 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e22b      	b.n	8001bb6 <HAL_RCC_OscConfig+0x792>
 800175e:	46c0      	nop			; (mov r8, r8)
 8001760:	40021000 	.word	0x40021000
 8001764:	fffeffff 	.word	0xfffeffff
 8001768:	fffbffff 	.word	0xfffbffff
 800176c:	ffffe0ff 	.word	0xffffe0ff
 8001770:	08002cec 	.word	0x08002cec
 8001774:	20000028 	.word	0x20000028
 8001778:	2000002c 	.word	0x2000002c
 800177c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001780:	4bca      	ldr	r3, [pc, #808]	; (8001aac <HAL_RCC_OscConfig+0x688>)
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	2380      	movs	r3, #128	; 0x80
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	4013      	ands	r3, r2
 800178a:	d0df      	beq.n	800174c <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800178c:	4bc7      	ldr	r3, [pc, #796]	; (8001aac <HAL_RCC_OscConfig+0x688>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	4ac7      	ldr	r2, [pc, #796]	; (8001ab0 <HAL_RCC_OscConfig+0x68c>)
 8001792:	4013      	ands	r3, r2
 8001794:	0019      	movs	r1, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800179a:	4bc4      	ldr	r3, [pc, #784]	; (8001aac <HAL_RCC_OscConfig+0x688>)
 800179c:	430a      	orrs	r2, r1
 800179e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017a0:	4bc2      	ldr	r3, [pc, #776]	; (8001aac <HAL_RCC_OscConfig+0x688>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	021b      	lsls	r3, r3, #8
 80017a6:	0a19      	lsrs	r1, r3, #8
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a1b      	ldr	r3, [r3, #32]
 80017ac:	061a      	lsls	r2, r3, #24
 80017ae:	4bbf      	ldr	r3, [pc, #764]	; (8001aac <HAL_RCC_OscConfig+0x688>)
 80017b0:	430a      	orrs	r2, r1
 80017b2:	605a      	str	r2, [r3, #4]
 80017b4:	e019      	b.n	80017ea <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80017b6:	4bbd      	ldr	r3, [pc, #756]	; (8001aac <HAL_RCC_OscConfig+0x688>)
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	4bbc      	ldr	r3, [pc, #752]	; (8001aac <HAL_RCC_OscConfig+0x688>)
 80017bc:	49bd      	ldr	r1, [pc, #756]	; (8001ab4 <HAL_RCC_OscConfig+0x690>)
 80017be:	400a      	ands	r2, r1
 80017c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c2:	f7ff f9af 	bl	8000b24 <HAL_GetTick>
 80017c6:	0003      	movs	r3, r0
 80017c8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017cc:	f7ff f9aa 	bl	8000b24 <HAL_GetTick>
 80017d0:	0002      	movs	r2, r0
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e1eb      	b.n	8001bb6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80017de:	4bb3      	ldr	r3, [pc, #716]	; (8001aac <HAL_RCC_OscConfig+0x688>)
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	2380      	movs	r3, #128	; 0x80
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	4013      	ands	r3, r2
 80017e8:	d1f0      	bne.n	80017cc <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2208      	movs	r2, #8
 80017f0:	4013      	ands	r3, r2
 80017f2:	d036      	beq.n	8001862 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	695b      	ldr	r3, [r3, #20]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d019      	beq.n	8001830 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017fc:	4bab      	ldr	r3, [pc, #684]	; (8001aac <HAL_RCC_OscConfig+0x688>)
 80017fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001800:	4baa      	ldr	r3, [pc, #680]	; (8001aac <HAL_RCC_OscConfig+0x688>)
 8001802:	2101      	movs	r1, #1
 8001804:	430a      	orrs	r2, r1
 8001806:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001808:	f7ff f98c 	bl	8000b24 <HAL_GetTick>
 800180c:	0003      	movs	r3, r0
 800180e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001810:	e008      	b.n	8001824 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001812:	f7ff f987 	bl	8000b24 <HAL_GetTick>
 8001816:	0002      	movs	r2, r0
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	2b02      	cmp	r3, #2
 800181e:	d901      	bls.n	8001824 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e1c8      	b.n	8001bb6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001824:	4ba1      	ldr	r3, [pc, #644]	; (8001aac <HAL_RCC_OscConfig+0x688>)
 8001826:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001828:	2202      	movs	r2, #2
 800182a:	4013      	ands	r3, r2
 800182c:	d0f1      	beq.n	8001812 <HAL_RCC_OscConfig+0x3ee>
 800182e:	e018      	b.n	8001862 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001830:	4b9e      	ldr	r3, [pc, #632]	; (8001aac <HAL_RCC_OscConfig+0x688>)
 8001832:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001834:	4b9d      	ldr	r3, [pc, #628]	; (8001aac <HAL_RCC_OscConfig+0x688>)
 8001836:	2101      	movs	r1, #1
 8001838:	438a      	bics	r2, r1
 800183a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800183c:	f7ff f972 	bl	8000b24 <HAL_GetTick>
 8001840:	0003      	movs	r3, r0
 8001842:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001844:	e008      	b.n	8001858 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001846:	f7ff f96d 	bl	8000b24 <HAL_GetTick>
 800184a:	0002      	movs	r2, r0
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e1ae      	b.n	8001bb6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001858:	4b94      	ldr	r3, [pc, #592]	; (8001aac <HAL_RCC_OscConfig+0x688>)
 800185a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800185c:	2202      	movs	r2, #2
 800185e:	4013      	ands	r3, r2
 8001860:	d1f1      	bne.n	8001846 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2204      	movs	r2, #4
 8001868:	4013      	ands	r3, r2
 800186a:	d100      	bne.n	800186e <HAL_RCC_OscConfig+0x44a>
 800186c:	e0ae      	b.n	80019cc <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800186e:	2023      	movs	r0, #35	; 0x23
 8001870:	183b      	adds	r3, r7, r0
 8001872:	2200      	movs	r2, #0
 8001874:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001876:	4b8d      	ldr	r3, [pc, #564]	; (8001aac <HAL_RCC_OscConfig+0x688>)
 8001878:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800187a:	2380      	movs	r3, #128	; 0x80
 800187c:	055b      	lsls	r3, r3, #21
 800187e:	4013      	ands	r3, r2
 8001880:	d109      	bne.n	8001896 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001882:	4b8a      	ldr	r3, [pc, #552]	; (8001aac <HAL_RCC_OscConfig+0x688>)
 8001884:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001886:	4b89      	ldr	r3, [pc, #548]	; (8001aac <HAL_RCC_OscConfig+0x688>)
 8001888:	2180      	movs	r1, #128	; 0x80
 800188a:	0549      	lsls	r1, r1, #21
 800188c:	430a      	orrs	r2, r1
 800188e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001890:	183b      	adds	r3, r7, r0
 8001892:	2201      	movs	r2, #1
 8001894:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001896:	4b88      	ldr	r3, [pc, #544]	; (8001ab8 <HAL_RCC_OscConfig+0x694>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	2380      	movs	r3, #128	; 0x80
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	4013      	ands	r3, r2
 80018a0:	d11a      	bne.n	80018d8 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018a2:	4b85      	ldr	r3, [pc, #532]	; (8001ab8 <HAL_RCC_OscConfig+0x694>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	4b84      	ldr	r3, [pc, #528]	; (8001ab8 <HAL_RCC_OscConfig+0x694>)
 80018a8:	2180      	movs	r1, #128	; 0x80
 80018aa:	0049      	lsls	r1, r1, #1
 80018ac:	430a      	orrs	r2, r1
 80018ae:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018b0:	f7ff f938 	bl	8000b24 <HAL_GetTick>
 80018b4:	0003      	movs	r3, r0
 80018b6:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b8:	e008      	b.n	80018cc <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018ba:	f7ff f933 	bl	8000b24 <HAL_GetTick>
 80018be:	0002      	movs	r2, r0
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b64      	cmp	r3, #100	; 0x64
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e174      	b.n	8001bb6 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018cc:	4b7a      	ldr	r3, [pc, #488]	; (8001ab8 <HAL_RCC_OscConfig+0x694>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	2380      	movs	r3, #128	; 0x80
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	4013      	ands	r3, r2
 80018d6:	d0f0      	beq.n	80018ba <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689a      	ldr	r2, [r3, #8]
 80018dc:	2380      	movs	r3, #128	; 0x80
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d107      	bne.n	80018f4 <HAL_RCC_OscConfig+0x4d0>
 80018e4:	4b71      	ldr	r3, [pc, #452]	; (8001aac <HAL_RCC_OscConfig+0x688>)
 80018e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018e8:	4b70      	ldr	r3, [pc, #448]	; (8001aac <HAL_RCC_OscConfig+0x688>)
 80018ea:	2180      	movs	r1, #128	; 0x80
 80018ec:	0049      	lsls	r1, r1, #1
 80018ee:	430a      	orrs	r2, r1
 80018f0:	651a      	str	r2, [r3, #80]	; 0x50
 80018f2:	e031      	b.n	8001958 <HAL_RCC_OscConfig+0x534>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d10c      	bne.n	8001916 <HAL_RCC_OscConfig+0x4f2>
 80018fc:	4b6b      	ldr	r3, [pc, #428]	; (8001aac <HAL_RCC_OscConfig+0x688>)
 80018fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001900:	4b6a      	ldr	r3, [pc, #424]	; (8001aac <HAL_RCC_OscConfig+0x688>)
 8001902:	496c      	ldr	r1, [pc, #432]	; (8001ab4 <HAL_RCC_OscConfig+0x690>)
 8001904:	400a      	ands	r2, r1
 8001906:	651a      	str	r2, [r3, #80]	; 0x50
 8001908:	4b68      	ldr	r3, [pc, #416]	; (8001aac <HAL_RCC_OscConfig+0x688>)
 800190a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800190c:	4b67      	ldr	r3, [pc, #412]	; (8001aac <HAL_RCC_OscConfig+0x688>)
 800190e:	496b      	ldr	r1, [pc, #428]	; (8001abc <HAL_RCC_OscConfig+0x698>)
 8001910:	400a      	ands	r2, r1
 8001912:	651a      	str	r2, [r3, #80]	; 0x50
 8001914:	e020      	b.n	8001958 <HAL_RCC_OscConfig+0x534>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	689a      	ldr	r2, [r3, #8]
 800191a:	23a0      	movs	r3, #160	; 0xa0
 800191c:	00db      	lsls	r3, r3, #3
 800191e:	429a      	cmp	r2, r3
 8001920:	d10e      	bne.n	8001940 <HAL_RCC_OscConfig+0x51c>
 8001922:	4b62      	ldr	r3, [pc, #392]	; (8001aac <HAL_RCC_OscConfig+0x688>)
 8001924:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001926:	4b61      	ldr	r3, [pc, #388]	; (8001aac <HAL_RCC_OscConfig+0x688>)
 8001928:	2180      	movs	r1, #128	; 0x80
 800192a:	00c9      	lsls	r1, r1, #3
 800192c:	430a      	orrs	r2, r1
 800192e:	651a      	str	r2, [r3, #80]	; 0x50
 8001930:	4b5e      	ldr	r3, [pc, #376]	; (8001aac <HAL_RCC_OscConfig+0x688>)
 8001932:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001934:	4b5d      	ldr	r3, [pc, #372]	; (8001aac <HAL_RCC_OscConfig+0x688>)
 8001936:	2180      	movs	r1, #128	; 0x80
 8001938:	0049      	lsls	r1, r1, #1
 800193a:	430a      	orrs	r2, r1
 800193c:	651a      	str	r2, [r3, #80]	; 0x50
 800193e:	e00b      	b.n	8001958 <HAL_RCC_OscConfig+0x534>
 8001940:	4b5a      	ldr	r3, [pc, #360]	; (8001aac <HAL_RCC_OscConfig+0x688>)
 8001942:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001944:	4b59      	ldr	r3, [pc, #356]	; (8001aac <HAL_RCC_OscConfig+0x688>)
 8001946:	495b      	ldr	r1, [pc, #364]	; (8001ab4 <HAL_RCC_OscConfig+0x690>)
 8001948:	400a      	ands	r2, r1
 800194a:	651a      	str	r2, [r3, #80]	; 0x50
 800194c:	4b57      	ldr	r3, [pc, #348]	; (8001aac <HAL_RCC_OscConfig+0x688>)
 800194e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001950:	4b56      	ldr	r3, [pc, #344]	; (8001aac <HAL_RCC_OscConfig+0x688>)
 8001952:	495a      	ldr	r1, [pc, #360]	; (8001abc <HAL_RCC_OscConfig+0x698>)
 8001954:	400a      	ands	r2, r1
 8001956:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d015      	beq.n	800198c <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001960:	f7ff f8e0 	bl	8000b24 <HAL_GetTick>
 8001964:	0003      	movs	r3, r0
 8001966:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001968:	e009      	b.n	800197e <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800196a:	f7ff f8db 	bl	8000b24 <HAL_GetTick>
 800196e:	0002      	movs	r2, r0
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	4a52      	ldr	r2, [pc, #328]	; (8001ac0 <HAL_RCC_OscConfig+0x69c>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e11b      	b.n	8001bb6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800197e:	4b4b      	ldr	r3, [pc, #300]	; (8001aac <HAL_RCC_OscConfig+0x688>)
 8001980:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001982:	2380      	movs	r3, #128	; 0x80
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	4013      	ands	r3, r2
 8001988:	d0ef      	beq.n	800196a <HAL_RCC_OscConfig+0x546>
 800198a:	e014      	b.n	80019b6 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800198c:	f7ff f8ca 	bl	8000b24 <HAL_GetTick>
 8001990:	0003      	movs	r3, r0
 8001992:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001994:	e009      	b.n	80019aa <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001996:	f7ff f8c5 	bl	8000b24 <HAL_GetTick>
 800199a:	0002      	movs	r2, r0
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	4a47      	ldr	r2, [pc, #284]	; (8001ac0 <HAL_RCC_OscConfig+0x69c>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e105      	b.n	8001bb6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80019aa:	4b40      	ldr	r3, [pc, #256]	; (8001aac <HAL_RCC_OscConfig+0x688>)
 80019ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019ae:	2380      	movs	r3, #128	; 0x80
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	4013      	ands	r3, r2
 80019b4:	d1ef      	bne.n	8001996 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80019b6:	2323      	movs	r3, #35	; 0x23
 80019b8:	18fb      	adds	r3, r7, r3
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d105      	bne.n	80019cc <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019c0:	4b3a      	ldr	r3, [pc, #232]	; (8001aac <HAL_RCC_OscConfig+0x688>)
 80019c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019c4:	4b39      	ldr	r3, [pc, #228]	; (8001aac <HAL_RCC_OscConfig+0x688>)
 80019c6:	493f      	ldr	r1, [pc, #252]	; (8001ac4 <HAL_RCC_OscConfig+0x6a0>)
 80019c8:	400a      	ands	r2, r1
 80019ca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2220      	movs	r2, #32
 80019d2:	4013      	ands	r3, r2
 80019d4:	d049      	beq.n	8001a6a <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	699b      	ldr	r3, [r3, #24]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d026      	beq.n	8001a2c <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80019de:	4b33      	ldr	r3, [pc, #204]	; (8001aac <HAL_RCC_OscConfig+0x688>)
 80019e0:	689a      	ldr	r2, [r3, #8]
 80019e2:	4b32      	ldr	r3, [pc, #200]	; (8001aac <HAL_RCC_OscConfig+0x688>)
 80019e4:	2101      	movs	r1, #1
 80019e6:	430a      	orrs	r2, r1
 80019e8:	609a      	str	r2, [r3, #8]
 80019ea:	4b30      	ldr	r3, [pc, #192]	; (8001aac <HAL_RCC_OscConfig+0x688>)
 80019ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019ee:	4b2f      	ldr	r3, [pc, #188]	; (8001aac <HAL_RCC_OscConfig+0x688>)
 80019f0:	2101      	movs	r1, #1
 80019f2:	430a      	orrs	r2, r1
 80019f4:	635a      	str	r2, [r3, #52]	; 0x34
 80019f6:	4b34      	ldr	r3, [pc, #208]	; (8001ac8 <HAL_RCC_OscConfig+0x6a4>)
 80019f8:	6a1a      	ldr	r2, [r3, #32]
 80019fa:	4b33      	ldr	r3, [pc, #204]	; (8001ac8 <HAL_RCC_OscConfig+0x6a4>)
 80019fc:	2180      	movs	r1, #128	; 0x80
 80019fe:	0189      	lsls	r1, r1, #6
 8001a00:	430a      	orrs	r2, r1
 8001a02:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a04:	f7ff f88e 	bl	8000b24 <HAL_GetTick>
 8001a08:	0003      	movs	r3, r0
 8001a0a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a0c:	e008      	b.n	8001a20 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a0e:	f7ff f889 	bl	8000b24 <HAL_GetTick>
 8001a12:	0002      	movs	r2, r0
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e0ca      	b.n	8001bb6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a20:	4b22      	ldr	r3, [pc, #136]	; (8001aac <HAL_RCC_OscConfig+0x688>)
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	2202      	movs	r2, #2
 8001a26:	4013      	ands	r3, r2
 8001a28:	d0f1      	beq.n	8001a0e <HAL_RCC_OscConfig+0x5ea>
 8001a2a:	e01e      	b.n	8001a6a <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001a2c:	4b1f      	ldr	r3, [pc, #124]	; (8001aac <HAL_RCC_OscConfig+0x688>)
 8001a2e:	689a      	ldr	r2, [r3, #8]
 8001a30:	4b1e      	ldr	r3, [pc, #120]	; (8001aac <HAL_RCC_OscConfig+0x688>)
 8001a32:	2101      	movs	r1, #1
 8001a34:	438a      	bics	r2, r1
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	4b23      	ldr	r3, [pc, #140]	; (8001ac8 <HAL_RCC_OscConfig+0x6a4>)
 8001a3a:	6a1a      	ldr	r2, [r3, #32]
 8001a3c:	4b22      	ldr	r3, [pc, #136]	; (8001ac8 <HAL_RCC_OscConfig+0x6a4>)
 8001a3e:	4923      	ldr	r1, [pc, #140]	; (8001acc <HAL_RCC_OscConfig+0x6a8>)
 8001a40:	400a      	ands	r2, r1
 8001a42:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a44:	f7ff f86e 	bl	8000b24 <HAL_GetTick>
 8001a48:	0003      	movs	r3, r0
 8001a4a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a4c:	e008      	b.n	8001a60 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a4e:	f7ff f869 	bl	8000b24 <HAL_GetTick>
 8001a52:	0002      	movs	r2, r0
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d901      	bls.n	8001a60 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e0aa      	b.n	8001bb6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a60:	4b12      	ldr	r3, [pc, #72]	; (8001aac <HAL_RCC_OscConfig+0x688>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	2202      	movs	r2, #2
 8001a66:	4013      	ands	r3, r2
 8001a68:	d1f1      	bne.n	8001a4e <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d100      	bne.n	8001a74 <HAL_RCC_OscConfig+0x650>
 8001a72:	e09f      	b.n	8001bb4 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	2b0c      	cmp	r3, #12
 8001a78:	d100      	bne.n	8001a7c <HAL_RCC_OscConfig+0x658>
 8001a7a:	e078      	b.n	8001b6e <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d159      	bne.n	8001b38 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a84:	4b09      	ldr	r3, [pc, #36]	; (8001aac <HAL_RCC_OscConfig+0x688>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	4b08      	ldr	r3, [pc, #32]	; (8001aac <HAL_RCC_OscConfig+0x688>)
 8001a8a:	4911      	ldr	r1, [pc, #68]	; (8001ad0 <HAL_RCC_OscConfig+0x6ac>)
 8001a8c:	400a      	ands	r2, r1
 8001a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a90:	f7ff f848 	bl	8000b24 <HAL_GetTick>
 8001a94:	0003      	movs	r3, r0
 8001a96:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a98:	e01c      	b.n	8001ad4 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a9a:	f7ff f843 	bl	8000b24 <HAL_GetTick>
 8001a9e:	0002      	movs	r2, r0
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d915      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e084      	b.n	8001bb6 <HAL_RCC_OscConfig+0x792>
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	ffff1fff 	.word	0xffff1fff
 8001ab4:	fffffeff 	.word	0xfffffeff
 8001ab8:	40007000 	.word	0x40007000
 8001abc:	fffffbff 	.word	0xfffffbff
 8001ac0:	00001388 	.word	0x00001388
 8001ac4:	efffffff 	.word	0xefffffff
 8001ac8:	40010000 	.word	0x40010000
 8001acc:	ffffdfff 	.word	0xffffdfff
 8001ad0:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001ad4:	4b3a      	ldr	r3, [pc, #232]	; (8001bc0 <HAL_RCC_OscConfig+0x79c>)
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	2380      	movs	r3, #128	; 0x80
 8001ada:	049b      	lsls	r3, r3, #18
 8001adc:	4013      	ands	r3, r2
 8001ade:	d1dc      	bne.n	8001a9a <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ae0:	4b37      	ldr	r3, [pc, #220]	; (8001bc0 <HAL_RCC_OscConfig+0x79c>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	4a37      	ldr	r2, [pc, #220]	; (8001bc4 <HAL_RCC_OscConfig+0x7a0>)
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	0019      	movs	r1, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	431a      	orrs	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001af8:	431a      	orrs	r2, r3
 8001afa:	4b31      	ldr	r3, [pc, #196]	; (8001bc0 <HAL_RCC_OscConfig+0x79c>)
 8001afc:	430a      	orrs	r2, r1
 8001afe:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b00:	4b2f      	ldr	r3, [pc, #188]	; (8001bc0 <HAL_RCC_OscConfig+0x79c>)
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	4b2e      	ldr	r3, [pc, #184]	; (8001bc0 <HAL_RCC_OscConfig+0x79c>)
 8001b06:	2180      	movs	r1, #128	; 0x80
 8001b08:	0449      	lsls	r1, r1, #17
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0e:	f7ff f809 	bl	8000b24 <HAL_GetTick>
 8001b12:	0003      	movs	r3, r0
 8001b14:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001b16:	e008      	b.n	8001b2a <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b18:	f7ff f804 	bl	8000b24 <HAL_GetTick>
 8001b1c:	0002      	movs	r2, r0
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e045      	b.n	8001bb6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001b2a:	4b25      	ldr	r3, [pc, #148]	; (8001bc0 <HAL_RCC_OscConfig+0x79c>)
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	2380      	movs	r3, #128	; 0x80
 8001b30:	049b      	lsls	r3, r3, #18
 8001b32:	4013      	ands	r3, r2
 8001b34:	d0f0      	beq.n	8001b18 <HAL_RCC_OscConfig+0x6f4>
 8001b36:	e03d      	b.n	8001bb4 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b38:	4b21      	ldr	r3, [pc, #132]	; (8001bc0 <HAL_RCC_OscConfig+0x79c>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	4b20      	ldr	r3, [pc, #128]	; (8001bc0 <HAL_RCC_OscConfig+0x79c>)
 8001b3e:	4922      	ldr	r1, [pc, #136]	; (8001bc8 <HAL_RCC_OscConfig+0x7a4>)
 8001b40:	400a      	ands	r2, r1
 8001b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b44:	f7fe ffee 	bl	8000b24 <HAL_GetTick>
 8001b48:	0003      	movs	r3, r0
 8001b4a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001b4c:	e008      	b.n	8001b60 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b4e:	f7fe ffe9 	bl	8000b24 <HAL_GetTick>
 8001b52:	0002      	movs	r2, r0
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e02a      	b.n	8001bb6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001b60:	4b17      	ldr	r3, [pc, #92]	; (8001bc0 <HAL_RCC_OscConfig+0x79c>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	2380      	movs	r3, #128	; 0x80
 8001b66:	049b      	lsls	r3, r3, #18
 8001b68:	4013      	ands	r3, r2
 8001b6a:	d1f0      	bne.n	8001b4e <HAL_RCC_OscConfig+0x72a>
 8001b6c:	e022      	b.n	8001bb4 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d101      	bne.n	8001b7a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e01d      	b.n	8001bb6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b7a:	4b11      	ldr	r3, [pc, #68]	; (8001bc0 <HAL_RCC_OscConfig+0x79c>)
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	2380      	movs	r3, #128	; 0x80
 8001b84:	025b      	lsls	r3, r3, #9
 8001b86:	401a      	ands	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d10f      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	23f0      	movs	r3, #240	; 0xf0
 8001b94:	039b      	lsls	r3, r3, #14
 8001b96:	401a      	ands	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d107      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	23c0      	movs	r3, #192	; 0xc0
 8001ba4:	041b      	lsls	r3, r3, #16
 8001ba6:	401a      	ands	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d001      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e000      	b.n	8001bb6 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	0018      	movs	r0, r3
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	b00a      	add	sp, #40	; 0x28
 8001bbc:	bdb0      	pop	{r4, r5, r7, pc}
 8001bbe:	46c0      	nop			; (mov r8, r8)
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	ff02ffff 	.word	0xff02ffff
 8001bc8:	feffffff 	.word	0xfeffffff

08001bcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bcc:	b5b0      	push	{r4, r5, r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d101      	bne.n	8001be0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e128      	b.n	8001e32 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001be0:	4b96      	ldr	r3, [pc, #600]	; (8001e3c <HAL_RCC_ClockConfig+0x270>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2201      	movs	r2, #1
 8001be6:	4013      	ands	r3, r2
 8001be8:	683a      	ldr	r2, [r7, #0]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d91e      	bls.n	8001c2c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bee:	4b93      	ldr	r3, [pc, #588]	; (8001e3c <HAL_RCC_ClockConfig+0x270>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	4393      	bics	r3, r2
 8001bf6:	0019      	movs	r1, r3
 8001bf8:	4b90      	ldr	r3, [pc, #576]	; (8001e3c <HAL_RCC_ClockConfig+0x270>)
 8001bfa:	683a      	ldr	r2, [r7, #0]
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c00:	f7fe ff90 	bl	8000b24 <HAL_GetTick>
 8001c04:	0003      	movs	r3, r0
 8001c06:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c08:	e009      	b.n	8001c1e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c0a:	f7fe ff8b 	bl	8000b24 <HAL_GetTick>
 8001c0e:	0002      	movs	r2, r0
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	4a8a      	ldr	r2, [pc, #552]	; (8001e40 <HAL_RCC_ClockConfig+0x274>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e109      	b.n	8001e32 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1e:	4b87      	ldr	r3, [pc, #540]	; (8001e3c <HAL_RCC_ClockConfig+0x270>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2201      	movs	r2, #1
 8001c24:	4013      	ands	r3, r2
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d1ee      	bne.n	8001c0a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2202      	movs	r2, #2
 8001c32:	4013      	ands	r3, r2
 8001c34:	d009      	beq.n	8001c4a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c36:	4b83      	ldr	r3, [pc, #524]	; (8001e44 <HAL_RCC_ClockConfig+0x278>)
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	22f0      	movs	r2, #240	; 0xf0
 8001c3c:	4393      	bics	r3, r2
 8001c3e:	0019      	movs	r1, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689a      	ldr	r2, [r3, #8]
 8001c44:	4b7f      	ldr	r3, [pc, #508]	; (8001e44 <HAL_RCC_ClockConfig+0x278>)
 8001c46:	430a      	orrs	r2, r1
 8001c48:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	4013      	ands	r3, r2
 8001c52:	d100      	bne.n	8001c56 <HAL_RCC_ClockConfig+0x8a>
 8001c54:	e089      	b.n	8001d6a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d107      	bne.n	8001c6e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c5e:	4b79      	ldr	r3, [pc, #484]	; (8001e44 <HAL_RCC_ClockConfig+0x278>)
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	2380      	movs	r3, #128	; 0x80
 8001c64:	029b      	lsls	r3, r3, #10
 8001c66:	4013      	ands	r3, r2
 8001c68:	d120      	bne.n	8001cac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e0e1      	b.n	8001e32 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2b03      	cmp	r3, #3
 8001c74:	d107      	bne.n	8001c86 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c76:	4b73      	ldr	r3, [pc, #460]	; (8001e44 <HAL_RCC_ClockConfig+0x278>)
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	2380      	movs	r3, #128	; 0x80
 8001c7c:	049b      	lsls	r3, r3, #18
 8001c7e:	4013      	ands	r3, r2
 8001c80:	d114      	bne.n	8001cac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e0d5      	b.n	8001e32 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d106      	bne.n	8001c9c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c8e:	4b6d      	ldr	r3, [pc, #436]	; (8001e44 <HAL_RCC_ClockConfig+0x278>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2204      	movs	r2, #4
 8001c94:	4013      	ands	r3, r2
 8001c96:	d109      	bne.n	8001cac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e0ca      	b.n	8001e32 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001c9c:	4b69      	ldr	r3, [pc, #420]	; (8001e44 <HAL_RCC_ClockConfig+0x278>)
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	2380      	movs	r3, #128	; 0x80
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	d101      	bne.n	8001cac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e0c2      	b.n	8001e32 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cac:	4b65      	ldr	r3, [pc, #404]	; (8001e44 <HAL_RCC_ClockConfig+0x278>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	2203      	movs	r2, #3
 8001cb2:	4393      	bics	r3, r2
 8001cb4:	0019      	movs	r1, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685a      	ldr	r2, [r3, #4]
 8001cba:	4b62      	ldr	r3, [pc, #392]	; (8001e44 <HAL_RCC_ClockConfig+0x278>)
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cc0:	f7fe ff30 	bl	8000b24 <HAL_GetTick>
 8001cc4:	0003      	movs	r3, r0
 8001cc6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d111      	bne.n	8001cf4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cd0:	e009      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cd2:	f7fe ff27 	bl	8000b24 <HAL_GetTick>
 8001cd6:	0002      	movs	r2, r0
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	4a58      	ldr	r2, [pc, #352]	; (8001e40 <HAL_RCC_ClockConfig+0x274>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e0a5      	b.n	8001e32 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ce6:	4b57      	ldr	r3, [pc, #348]	; (8001e44 <HAL_RCC_ClockConfig+0x278>)
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	220c      	movs	r2, #12
 8001cec:	4013      	ands	r3, r2
 8001cee:	2b08      	cmp	r3, #8
 8001cf0:	d1ef      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0x106>
 8001cf2:	e03a      	b.n	8001d6a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	2b03      	cmp	r3, #3
 8001cfa:	d111      	bne.n	8001d20 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cfc:	e009      	b.n	8001d12 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cfe:	f7fe ff11 	bl	8000b24 <HAL_GetTick>
 8001d02:	0002      	movs	r2, r0
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	4a4d      	ldr	r2, [pc, #308]	; (8001e40 <HAL_RCC_ClockConfig+0x274>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e08f      	b.n	8001e32 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d12:	4b4c      	ldr	r3, [pc, #304]	; (8001e44 <HAL_RCC_ClockConfig+0x278>)
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	220c      	movs	r2, #12
 8001d18:	4013      	ands	r3, r2
 8001d1a:	2b0c      	cmp	r3, #12
 8001d1c:	d1ef      	bne.n	8001cfe <HAL_RCC_ClockConfig+0x132>
 8001d1e:	e024      	b.n	8001d6a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d11b      	bne.n	8001d60 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d28:	e009      	b.n	8001d3e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d2a:	f7fe fefb 	bl	8000b24 <HAL_GetTick>
 8001d2e:	0002      	movs	r2, r0
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	4a42      	ldr	r2, [pc, #264]	; (8001e40 <HAL_RCC_ClockConfig+0x274>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e079      	b.n	8001e32 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d3e:	4b41      	ldr	r3, [pc, #260]	; (8001e44 <HAL_RCC_ClockConfig+0x278>)
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	220c      	movs	r2, #12
 8001d44:	4013      	ands	r3, r2
 8001d46:	2b04      	cmp	r3, #4
 8001d48:	d1ef      	bne.n	8001d2a <HAL_RCC_ClockConfig+0x15e>
 8001d4a:	e00e      	b.n	8001d6a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d4c:	f7fe feea 	bl	8000b24 <HAL_GetTick>
 8001d50:	0002      	movs	r2, r0
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	4a3a      	ldr	r2, [pc, #232]	; (8001e40 <HAL_RCC_ClockConfig+0x274>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d901      	bls.n	8001d60 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e068      	b.n	8001e32 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001d60:	4b38      	ldr	r3, [pc, #224]	; (8001e44 <HAL_RCC_ClockConfig+0x278>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	220c      	movs	r2, #12
 8001d66:	4013      	ands	r3, r2
 8001d68:	d1f0      	bne.n	8001d4c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d6a:	4b34      	ldr	r3, [pc, #208]	; (8001e3c <HAL_RCC_ClockConfig+0x270>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	4013      	ands	r3, r2
 8001d72:	683a      	ldr	r2, [r7, #0]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d21e      	bcs.n	8001db6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d78:	4b30      	ldr	r3, [pc, #192]	; (8001e3c <HAL_RCC_ClockConfig+0x270>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	4393      	bics	r3, r2
 8001d80:	0019      	movs	r1, r3
 8001d82:	4b2e      	ldr	r3, [pc, #184]	; (8001e3c <HAL_RCC_ClockConfig+0x270>)
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	430a      	orrs	r2, r1
 8001d88:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d8a:	f7fe fecb 	bl	8000b24 <HAL_GetTick>
 8001d8e:	0003      	movs	r3, r0
 8001d90:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d92:	e009      	b.n	8001da8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d94:	f7fe fec6 	bl	8000b24 <HAL_GetTick>
 8001d98:	0002      	movs	r2, r0
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	4a28      	ldr	r2, [pc, #160]	; (8001e40 <HAL_RCC_ClockConfig+0x274>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e044      	b.n	8001e32 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001da8:	4b24      	ldr	r3, [pc, #144]	; (8001e3c <HAL_RCC_ClockConfig+0x270>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2201      	movs	r2, #1
 8001dae:	4013      	ands	r3, r2
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d1ee      	bne.n	8001d94 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2204      	movs	r2, #4
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	d009      	beq.n	8001dd4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dc0:	4b20      	ldr	r3, [pc, #128]	; (8001e44 <HAL_RCC_ClockConfig+0x278>)
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	4a20      	ldr	r2, [pc, #128]	; (8001e48 <HAL_RCC_ClockConfig+0x27c>)
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	0019      	movs	r1, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	68da      	ldr	r2, [r3, #12]
 8001dce:	4b1d      	ldr	r3, [pc, #116]	; (8001e44 <HAL_RCC_ClockConfig+0x278>)
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2208      	movs	r2, #8
 8001dda:	4013      	ands	r3, r2
 8001ddc:	d00a      	beq.n	8001df4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001dde:	4b19      	ldr	r3, [pc, #100]	; (8001e44 <HAL_RCC_ClockConfig+0x278>)
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	4a1a      	ldr	r2, [pc, #104]	; (8001e4c <HAL_RCC_ClockConfig+0x280>)
 8001de4:	4013      	ands	r3, r2
 8001de6:	0019      	movs	r1, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	00da      	lsls	r2, r3, #3
 8001dee:	4b15      	ldr	r3, [pc, #84]	; (8001e44 <HAL_RCC_ClockConfig+0x278>)
 8001df0:	430a      	orrs	r2, r1
 8001df2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001df4:	f000 f832 	bl	8001e5c <HAL_RCC_GetSysClockFreq>
 8001df8:	0001      	movs	r1, r0
 8001dfa:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <HAL_RCC_ClockConfig+0x278>)
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	091b      	lsrs	r3, r3, #4
 8001e00:	220f      	movs	r2, #15
 8001e02:	4013      	ands	r3, r2
 8001e04:	4a12      	ldr	r2, [pc, #72]	; (8001e50 <HAL_RCC_ClockConfig+0x284>)
 8001e06:	5cd3      	ldrb	r3, [r2, r3]
 8001e08:	000a      	movs	r2, r1
 8001e0a:	40da      	lsrs	r2, r3
 8001e0c:	4b11      	ldr	r3, [pc, #68]	; (8001e54 <HAL_RCC_ClockConfig+0x288>)
 8001e0e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e10:	4b11      	ldr	r3, [pc, #68]	; (8001e58 <HAL_RCC_ClockConfig+0x28c>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	250b      	movs	r5, #11
 8001e16:	197c      	adds	r4, r7, r5
 8001e18:	0018      	movs	r0, r3
 8001e1a:	f7fe fe3d 	bl	8000a98 <HAL_InitTick>
 8001e1e:	0003      	movs	r3, r0
 8001e20:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001e22:	197b      	adds	r3, r7, r5
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d002      	beq.n	8001e30 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001e2a:	197b      	adds	r3, r7, r5
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	e000      	b.n	8001e32 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	0018      	movs	r0, r3
 8001e34:	46bd      	mov	sp, r7
 8001e36:	b004      	add	sp, #16
 8001e38:	bdb0      	pop	{r4, r5, r7, pc}
 8001e3a:	46c0      	nop			; (mov r8, r8)
 8001e3c:	40022000 	.word	0x40022000
 8001e40:	00001388 	.word	0x00001388
 8001e44:	40021000 	.word	0x40021000
 8001e48:	fffff8ff 	.word	0xfffff8ff
 8001e4c:	ffffc7ff 	.word	0xffffc7ff
 8001e50:	08002cec 	.word	0x08002cec
 8001e54:	20000028 	.word	0x20000028
 8001e58:	2000002c 	.word	0x2000002c

08001e5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e5c:	b5b0      	push	{r4, r5, r7, lr}
 8001e5e:	b08e      	sub	sp, #56	; 0x38
 8001e60:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001e62:	4b4c      	ldr	r3, [pc, #304]	; (8001f94 <HAL_RCC_GetSysClockFreq+0x138>)
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e6a:	230c      	movs	r3, #12
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	2b0c      	cmp	r3, #12
 8001e70:	d014      	beq.n	8001e9c <HAL_RCC_GetSysClockFreq+0x40>
 8001e72:	d900      	bls.n	8001e76 <HAL_RCC_GetSysClockFreq+0x1a>
 8001e74:	e07b      	b.n	8001f6e <HAL_RCC_GetSysClockFreq+0x112>
 8001e76:	2b04      	cmp	r3, #4
 8001e78:	d002      	beq.n	8001e80 <HAL_RCC_GetSysClockFreq+0x24>
 8001e7a:	2b08      	cmp	r3, #8
 8001e7c:	d00b      	beq.n	8001e96 <HAL_RCC_GetSysClockFreq+0x3a>
 8001e7e:	e076      	b.n	8001f6e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001e80:	4b44      	ldr	r3, [pc, #272]	; (8001f94 <HAL_RCC_GetSysClockFreq+0x138>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2210      	movs	r2, #16
 8001e86:	4013      	ands	r3, r2
 8001e88:	d002      	beq.n	8001e90 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001e8a:	4b43      	ldr	r3, [pc, #268]	; (8001f98 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001e8c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001e8e:	e07c      	b.n	8001f8a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001e90:	4b42      	ldr	r3, [pc, #264]	; (8001f9c <HAL_RCC_GetSysClockFreq+0x140>)
 8001e92:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e94:	e079      	b.n	8001f8a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e96:	4b42      	ldr	r3, [pc, #264]	; (8001fa0 <HAL_RCC_GetSysClockFreq+0x144>)
 8001e98:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e9a:	e076      	b.n	8001f8a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e9e:	0c9a      	lsrs	r2, r3, #18
 8001ea0:	230f      	movs	r3, #15
 8001ea2:	401a      	ands	r2, r3
 8001ea4:	4b3f      	ldr	r3, [pc, #252]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x148>)
 8001ea6:	5c9b      	ldrb	r3, [r3, r2]
 8001ea8:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eac:	0d9a      	lsrs	r2, r3, #22
 8001eae:	2303      	movs	r3, #3
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001eb6:	4b37      	ldr	r3, [pc, #220]	; (8001f94 <HAL_RCC_GetSysClockFreq+0x138>)
 8001eb8:	68da      	ldr	r2, [r3, #12]
 8001eba:	2380      	movs	r3, #128	; 0x80
 8001ebc:	025b      	lsls	r3, r3, #9
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	d01a      	beq.n	8001ef8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ec4:	61bb      	str	r3, [r7, #24]
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	61fb      	str	r3, [r7, #28]
 8001eca:	4a35      	ldr	r2, [pc, #212]	; (8001fa0 <HAL_RCC_GetSysClockFreq+0x144>)
 8001ecc:	2300      	movs	r3, #0
 8001ece:	69b8      	ldr	r0, [r7, #24]
 8001ed0:	69f9      	ldr	r1, [r7, #28]
 8001ed2:	f7fe f9cd 	bl	8000270 <__aeabi_lmul>
 8001ed6:	0002      	movs	r2, r0
 8001ed8:	000b      	movs	r3, r1
 8001eda:	0010      	movs	r0, r2
 8001edc:	0019      	movs	r1, r3
 8001ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee0:	613b      	str	r3, [r7, #16]
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	617b      	str	r3, [r7, #20]
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	f7fe f9a1 	bl	8000230 <__aeabi_uldivmod>
 8001eee:	0002      	movs	r2, r0
 8001ef0:	000b      	movs	r3, r1
 8001ef2:	0013      	movs	r3, r2
 8001ef4:	637b      	str	r3, [r7, #52]	; 0x34
 8001ef6:	e037      	b.n	8001f68 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001ef8:	4b26      	ldr	r3, [pc, #152]	; (8001f94 <HAL_RCC_GetSysClockFreq+0x138>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2210      	movs	r2, #16
 8001efe:	4013      	ands	r3, r2
 8001f00:	d01a      	beq.n	8001f38 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f04:	60bb      	str	r3, [r7, #8]
 8001f06:	2300      	movs	r3, #0
 8001f08:	60fb      	str	r3, [r7, #12]
 8001f0a:	4a23      	ldr	r2, [pc, #140]	; (8001f98 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	68b8      	ldr	r0, [r7, #8]
 8001f10:	68f9      	ldr	r1, [r7, #12]
 8001f12:	f7fe f9ad 	bl	8000270 <__aeabi_lmul>
 8001f16:	0002      	movs	r2, r0
 8001f18:	000b      	movs	r3, r1
 8001f1a:	0010      	movs	r0, r2
 8001f1c:	0019      	movs	r1, r3
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f20:	603b      	str	r3, [r7, #0]
 8001f22:	2300      	movs	r3, #0
 8001f24:	607b      	str	r3, [r7, #4]
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f7fe f981 	bl	8000230 <__aeabi_uldivmod>
 8001f2e:	0002      	movs	r2, r0
 8001f30:	000b      	movs	r3, r1
 8001f32:	0013      	movs	r3, r2
 8001f34:	637b      	str	r3, [r7, #52]	; 0x34
 8001f36:	e017      	b.n	8001f68 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f3a:	0018      	movs	r0, r3
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	0019      	movs	r1, r3
 8001f40:	4a16      	ldr	r2, [pc, #88]	; (8001f9c <HAL_RCC_GetSysClockFreq+0x140>)
 8001f42:	2300      	movs	r3, #0
 8001f44:	f7fe f994 	bl	8000270 <__aeabi_lmul>
 8001f48:	0002      	movs	r2, r0
 8001f4a:	000b      	movs	r3, r1
 8001f4c:	0010      	movs	r0, r2
 8001f4e:	0019      	movs	r1, r3
 8001f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f52:	001c      	movs	r4, r3
 8001f54:	2300      	movs	r3, #0
 8001f56:	001d      	movs	r5, r3
 8001f58:	0022      	movs	r2, r4
 8001f5a:	002b      	movs	r3, r5
 8001f5c:	f7fe f968 	bl	8000230 <__aeabi_uldivmod>
 8001f60:	0002      	movs	r2, r0
 8001f62:	000b      	movs	r3, r1
 8001f64:	0013      	movs	r3, r2
 8001f66:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f6a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f6c:	e00d      	b.n	8001f8a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001f6e:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <HAL_RCC_GetSysClockFreq+0x138>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	0b5b      	lsrs	r3, r3, #13
 8001f74:	2207      	movs	r2, #7
 8001f76:	4013      	ands	r3, r2
 8001f78:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001f7a:	6a3b      	ldr	r3, [r7, #32]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	2280      	movs	r2, #128	; 0x80
 8001f80:	0212      	lsls	r2, r2, #8
 8001f82:	409a      	lsls	r2, r3
 8001f84:	0013      	movs	r3, r2
 8001f86:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f88:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001f8c:	0018      	movs	r0, r3
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	b00e      	add	sp, #56	; 0x38
 8001f92:	bdb0      	pop	{r4, r5, r7, pc}
 8001f94:	40021000 	.word	0x40021000
 8001f98:	003d0900 	.word	0x003d0900
 8001f9c:	00f42400 	.word	0x00f42400
 8001fa0:	007a1200 	.word	0x007a1200
 8001fa4:	08002d04 	.word	0x08002d04

08001fa8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fac:	4b02      	ldr	r3, [pc, #8]	; (8001fb8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001fae:	681b      	ldr	r3, [r3, #0]
}
 8001fb0:	0018      	movs	r0, r3
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	46c0      	nop			; (mov r8, r8)
 8001fb8:	20000028 	.word	0x20000028

08001fbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fc0:	f7ff fff2 	bl	8001fa8 <HAL_RCC_GetHCLKFreq>
 8001fc4:	0001      	movs	r1, r0
 8001fc6:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	0a1b      	lsrs	r3, r3, #8
 8001fcc:	2207      	movs	r2, #7
 8001fce:	4013      	ands	r3, r2
 8001fd0:	4a04      	ldr	r2, [pc, #16]	; (8001fe4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001fd2:	5cd3      	ldrb	r3, [r2, r3]
 8001fd4:	40d9      	lsrs	r1, r3
 8001fd6:	000b      	movs	r3, r1
}
 8001fd8:	0018      	movs	r0, r3
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	46c0      	nop			; (mov r8, r8)
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	08002cfc 	.word	0x08002cfc

08001fe8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001fec:	f7ff ffdc 	bl	8001fa8 <HAL_RCC_GetHCLKFreq>
 8001ff0:	0001      	movs	r1, r0
 8001ff2:	4b06      	ldr	r3, [pc, #24]	; (800200c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	0adb      	lsrs	r3, r3, #11
 8001ff8:	2207      	movs	r2, #7
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	4a04      	ldr	r2, [pc, #16]	; (8002010 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001ffe:	5cd3      	ldrb	r3, [r2, r3]
 8002000:	40d9      	lsrs	r1, r3
 8002002:	000b      	movs	r3, r1
}
 8002004:	0018      	movs	r0, r3
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	46c0      	nop			; (mov r8, r8)
 800200c:	40021000 	.word	0x40021000
 8002010:	08002cfc 	.word	0x08002cfc

08002014 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800201c:	2017      	movs	r0, #23
 800201e:	183b      	adds	r3, r7, r0
 8002020:	2200      	movs	r2, #0
 8002022:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2220      	movs	r2, #32
 800202a:	4013      	ands	r3, r2
 800202c:	d100      	bne.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800202e:	e0c2      	b.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002030:	4b98      	ldr	r3, [pc, #608]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002032:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002034:	2380      	movs	r3, #128	; 0x80
 8002036:	055b      	lsls	r3, r3, #21
 8002038:	4013      	ands	r3, r2
 800203a:	d109      	bne.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800203c:	4b95      	ldr	r3, [pc, #596]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800203e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002040:	4b94      	ldr	r3, [pc, #592]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002042:	2180      	movs	r1, #128	; 0x80
 8002044:	0549      	lsls	r1, r1, #21
 8002046:	430a      	orrs	r2, r1
 8002048:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800204a:	183b      	adds	r3, r7, r0
 800204c:	2201      	movs	r2, #1
 800204e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002050:	4b91      	ldr	r3, [pc, #580]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	2380      	movs	r3, #128	; 0x80
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	4013      	ands	r3, r2
 800205a:	d11a      	bne.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800205c:	4b8e      	ldr	r3, [pc, #568]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	4b8d      	ldr	r3, [pc, #564]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002062:	2180      	movs	r1, #128	; 0x80
 8002064:	0049      	lsls	r1, r1, #1
 8002066:	430a      	orrs	r2, r1
 8002068:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800206a:	f7fe fd5b 	bl	8000b24 <HAL_GetTick>
 800206e:	0003      	movs	r3, r0
 8002070:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002072:	e008      	b.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002074:	f7fe fd56 	bl	8000b24 <HAL_GetTick>
 8002078:	0002      	movs	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b64      	cmp	r3, #100	; 0x64
 8002080:	d901      	bls.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e102      	b.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x278>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002086:	4b84      	ldr	r3, [pc, #528]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	2380      	movs	r3, #128	; 0x80
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	4013      	ands	r3, r2
 8002090:	d0f0      	beq.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002092:	4b80      	ldr	r3, [pc, #512]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	23c0      	movs	r3, #192	; 0xc0
 8002098:	039b      	lsls	r3, r3, #14
 800209a:	4013      	ands	r3, r2
 800209c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	23c0      	movs	r3, #192	; 0xc0
 80020a4:	039b      	lsls	r3, r3, #14
 80020a6:	4013      	ands	r3, r2
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d013      	beq.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	23c0      	movs	r3, #192	; 0xc0
 80020b4:	029b      	lsls	r3, r3, #10
 80020b6:	401a      	ands	r2, r3
 80020b8:	23c0      	movs	r3, #192	; 0xc0
 80020ba:	029b      	lsls	r3, r3, #10
 80020bc:	429a      	cmp	r2, r3
 80020be:	d10a      	bne.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80020c0:	4b74      	ldr	r3, [pc, #464]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	2380      	movs	r3, #128	; 0x80
 80020c6:	029b      	lsls	r3, r3, #10
 80020c8:	401a      	ands	r2, r3
 80020ca:	2380      	movs	r3, #128	; 0x80
 80020cc:	029b      	lsls	r3, r3, #10
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d101      	bne.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e0da      	b.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x278>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80020d6:	4b6f      	ldr	r3, [pc, #444]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80020d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020da:	23c0      	movs	r3, #192	; 0xc0
 80020dc:	029b      	lsls	r3, r3, #10
 80020de:	4013      	ands	r3, r2
 80020e0:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d03b      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685a      	ldr	r2, [r3, #4]
 80020ec:	23c0      	movs	r3, #192	; 0xc0
 80020ee:	029b      	lsls	r3, r3, #10
 80020f0:	4013      	ands	r3, r2
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d033      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2220      	movs	r2, #32
 80020fe:	4013      	ands	r3, r2
 8002100:	d02e      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002102:	4b64      	ldr	r3, [pc, #400]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002104:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002106:	4a65      	ldr	r2, [pc, #404]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002108:	4013      	ands	r3, r2
 800210a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800210c:	4b61      	ldr	r3, [pc, #388]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800210e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002110:	4b60      	ldr	r3, [pc, #384]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002112:	2180      	movs	r1, #128	; 0x80
 8002114:	0309      	lsls	r1, r1, #12
 8002116:	430a      	orrs	r2, r1
 8002118:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800211a:	4b5e      	ldr	r3, [pc, #376]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800211c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800211e:	4b5d      	ldr	r3, [pc, #372]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002120:	495f      	ldr	r1, [pc, #380]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002122:	400a      	ands	r2, r1
 8002124:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002126:	4b5b      	ldr	r3, [pc, #364]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800212c:	68fa      	ldr	r2, [r7, #12]
 800212e:	2380      	movs	r3, #128	; 0x80
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	4013      	ands	r3, r2
 8002134:	d014      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002136:	f7fe fcf5 	bl	8000b24 <HAL_GetTick>
 800213a:	0003      	movs	r3, r0
 800213c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800213e:	e009      	b.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002140:	f7fe fcf0 	bl	8000b24 <HAL_GetTick>
 8002144:	0002      	movs	r2, r0
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	4a56      	ldr	r2, [pc, #344]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d901      	bls.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e09b      	b.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x278>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002154:	4b4f      	ldr	r3, [pc, #316]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002156:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002158:	2380      	movs	r3, #128	; 0x80
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4013      	ands	r3, r2
 800215e:	d0ef      	beq.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685a      	ldr	r2, [r3, #4]
 8002164:	23c0      	movs	r3, #192	; 0xc0
 8002166:	029b      	lsls	r3, r3, #10
 8002168:	401a      	ands	r2, r3
 800216a:	23c0      	movs	r3, #192	; 0xc0
 800216c:	029b      	lsls	r3, r3, #10
 800216e:	429a      	cmp	r2, r3
 8002170:	d10c      	bne.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002172:	4b48      	ldr	r3, [pc, #288]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a4c      	ldr	r2, [pc, #304]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8002178:	4013      	ands	r3, r2
 800217a:	0019      	movs	r1, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685a      	ldr	r2, [r3, #4]
 8002180:	23c0      	movs	r3, #192	; 0xc0
 8002182:	039b      	lsls	r3, r3, #14
 8002184:	401a      	ands	r2, r3
 8002186:	4b43      	ldr	r3, [pc, #268]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002188:	430a      	orrs	r2, r1
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	4b41      	ldr	r3, [pc, #260]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800218e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685a      	ldr	r2, [r3, #4]
 8002194:	23c0      	movs	r3, #192	; 0xc0
 8002196:	029b      	lsls	r3, r3, #10
 8002198:	401a      	ands	r2, r3
 800219a:	4b3e      	ldr	r3, [pc, #248]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800219c:	430a      	orrs	r2, r1
 800219e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021a0:	2317      	movs	r3, #23
 80021a2:	18fb      	adds	r3, r7, r3
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d105      	bne.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021aa:	4b3a      	ldr	r3, [pc, #232]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80021ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021ae:	4b39      	ldr	r3, [pc, #228]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80021b0:	493e      	ldr	r1, [pc, #248]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80021b2:	400a      	ands	r2, r1
 80021b4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2201      	movs	r2, #1
 80021bc:	4013      	ands	r3, r2
 80021be:	d009      	beq.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021c0:	4b34      	ldr	r3, [pc, #208]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80021c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c4:	2203      	movs	r2, #3
 80021c6:	4393      	bics	r3, r2
 80021c8:	0019      	movs	r1, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	689a      	ldr	r2, [r3, #8]
 80021ce:	4b31      	ldr	r3, [pc, #196]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80021d0:	430a      	orrs	r2, r1
 80021d2:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2202      	movs	r2, #2
 80021da:	4013      	ands	r3, r2
 80021dc:	d009      	beq.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021de:	4b2d      	ldr	r3, [pc, #180]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80021e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e2:	220c      	movs	r2, #12
 80021e4:	4393      	bics	r3, r2
 80021e6:	0019      	movs	r1, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	68da      	ldr	r2, [r3, #12]
 80021ec:	4b29      	ldr	r3, [pc, #164]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80021ee:	430a      	orrs	r2, r1
 80021f0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2204      	movs	r2, #4
 80021f8:	4013      	ands	r3, r2
 80021fa:	d009      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021fc:	4b25      	ldr	r3, [pc, #148]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80021fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002200:	4a2b      	ldr	r2, [pc, #172]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002202:	4013      	ands	r3, r2
 8002204:	0019      	movs	r1, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	691a      	ldr	r2, [r3, #16]
 800220a:	4b22      	ldr	r3, [pc, #136]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800220c:	430a      	orrs	r2, r1
 800220e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2208      	movs	r2, #8
 8002216:	4013      	ands	r3, r2
 8002218:	d009      	beq.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800221a:	4b1e      	ldr	r3, [pc, #120]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800221c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800221e:	4a25      	ldr	r2, [pc, #148]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002220:	4013      	ands	r3, r2
 8002222:	0019      	movs	r1, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	695a      	ldr	r2, [r3, #20]
 8002228:	4b1a      	ldr	r3, [pc, #104]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800222a:	430a      	orrs	r2, r1
 800222c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	2380      	movs	r3, #128	; 0x80
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	4013      	ands	r3, r2
 8002238:	d009      	beq.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800223a:	4b16      	ldr	r3, [pc, #88]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800223c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800223e:	4a17      	ldr	r2, [pc, #92]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002240:	4013      	ands	r3, r2
 8002242:	0019      	movs	r1, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	699a      	ldr	r2, [r3, #24]
 8002248:	4b12      	ldr	r3, [pc, #72]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800224a:	430a      	orrs	r2, r1
 800224c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2240      	movs	r2, #64	; 0x40
 8002254:	4013      	ands	r3, r2
 8002256:	d009      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002258:	4b0e      	ldr	r3, [pc, #56]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800225a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800225c:	4a16      	ldr	r2, [pc, #88]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800225e:	4013      	ands	r3, r2
 8002260:	0019      	movs	r1, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a1a      	ldr	r2, [r3, #32]
 8002266:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002268:	430a      	orrs	r2, r1
 800226a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2280      	movs	r2, #128	; 0x80
 8002272:	4013      	ands	r3, r2
 8002274:	d009      	beq.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002276:	4b07      	ldr	r3, [pc, #28]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800227a:	4a10      	ldr	r2, [pc, #64]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800227c:	4013      	ands	r3, r2
 800227e:	0019      	movs	r1, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	69da      	ldr	r2, [r3, #28]
 8002284:	4b03      	ldr	r3, [pc, #12]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002286:	430a      	orrs	r2, r1
 8002288:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	0018      	movs	r0, r3
 800228e:	46bd      	mov	sp, r7
 8002290:	b006      	add	sp, #24
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40021000 	.word	0x40021000
 8002298:	40007000 	.word	0x40007000
 800229c:	fffcffff 	.word	0xfffcffff
 80022a0:	fff7ffff 	.word	0xfff7ffff
 80022a4:	00001388 	.word	0x00001388
 80022a8:	ffcfffff 	.word	0xffcfffff
 80022ac:	efffffff 	.word	0xefffffff
 80022b0:	fffff3ff 	.word	0xfffff3ff
 80022b4:	ffffcfff 	.word	0xffffcfff
 80022b8:	fbffffff 	.word	0xfbffffff
 80022bc:	fff3ffff 	.word	0xfff3ffff

080022c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e044      	b.n	800235c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d107      	bne.n	80022ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2274      	movs	r2, #116	; 0x74
 80022de:	2100      	movs	r1, #0
 80022e0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	0018      	movs	r0, r3
 80022e6:	f7fe fb09 	bl	80008fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2224      	movs	r2, #36	; 0x24
 80022ee:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2101      	movs	r1, #1
 80022fc:	438a      	bics	r2, r1
 80022fe:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	0018      	movs	r0, r3
 8002304:	f000 f830 	bl	8002368 <UART_SetConfig>
 8002308:	0003      	movs	r3, r0
 800230a:	2b01      	cmp	r3, #1
 800230c:	d101      	bne.n	8002312 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e024      	b.n	800235c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	0018      	movs	r0, r3
 800231e:	f000 fac3 	bl	80028a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	685a      	ldr	r2, [r3, #4]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	490d      	ldr	r1, [pc, #52]	; (8002364 <HAL_UART_Init+0xa4>)
 800232e:	400a      	ands	r2, r1
 8002330:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	212a      	movs	r1, #42	; 0x2a
 800233e:	438a      	bics	r2, r1
 8002340:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2101      	movs	r1, #1
 800234e:	430a      	orrs	r2, r1
 8002350:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	0018      	movs	r0, r3
 8002356:	f000 fb5b 	bl	8002a10 <UART_CheckIdleState>
 800235a:	0003      	movs	r3, r0
}
 800235c:	0018      	movs	r0, r3
 800235e:	46bd      	mov	sp, r7
 8002360:	b002      	add	sp, #8
 8002362:	bd80      	pop	{r7, pc}
 8002364:	ffffb7ff 	.word	0xffffb7ff

08002368 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002368:	b5b0      	push	{r4, r5, r7, lr}
 800236a:	b08e      	sub	sp, #56	; 0x38
 800236c:	af00      	add	r7, sp, #0
 800236e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002370:	231a      	movs	r3, #26
 8002372:	2218      	movs	r2, #24
 8002374:	189b      	adds	r3, r3, r2
 8002376:	19db      	adds	r3, r3, r7
 8002378:	2200      	movs	r2, #0
 800237a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	431a      	orrs	r2, r3
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	431a      	orrs	r2, r3
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	69db      	ldr	r3, [r3, #28]
 8002390:	4313      	orrs	r3, r2
 8002392:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4ac3      	ldr	r2, [pc, #780]	; (80026a8 <UART_SetConfig+0x340>)
 800239c:	4013      	ands	r3, r2
 800239e:	0019      	movs	r1, r3
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023a6:	430a      	orrs	r2, r1
 80023a8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	4abe      	ldr	r2, [pc, #760]	; (80026ac <UART_SetConfig+0x344>)
 80023b2:	4013      	ands	r3, r2
 80023b4:	0019      	movs	r1, r3
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	68da      	ldr	r2, [r3, #12]
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	430a      	orrs	r2, r1
 80023c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4ab8      	ldr	r2, [pc, #736]	; (80026b0 <UART_SetConfig+0x348>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d004      	beq.n	80023dc <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023d8:	4313      	orrs	r3, r2
 80023da:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	4ab4      	ldr	r2, [pc, #720]	; (80026b4 <UART_SetConfig+0x34c>)
 80023e4:	4013      	ands	r3, r2
 80023e6:	0019      	movs	r1, r3
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023ee:	430a      	orrs	r2, r1
 80023f0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4ab0      	ldr	r2, [pc, #704]	; (80026b8 <UART_SetConfig+0x350>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d131      	bne.n	8002460 <UART_SetConfig+0xf8>
 80023fc:	4baf      	ldr	r3, [pc, #700]	; (80026bc <UART_SetConfig+0x354>)
 80023fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002400:	2203      	movs	r2, #3
 8002402:	4013      	ands	r3, r2
 8002404:	2b03      	cmp	r3, #3
 8002406:	d01d      	beq.n	8002444 <UART_SetConfig+0xdc>
 8002408:	d823      	bhi.n	8002452 <UART_SetConfig+0xea>
 800240a:	2b02      	cmp	r3, #2
 800240c:	d00c      	beq.n	8002428 <UART_SetConfig+0xc0>
 800240e:	d820      	bhi.n	8002452 <UART_SetConfig+0xea>
 8002410:	2b00      	cmp	r3, #0
 8002412:	d002      	beq.n	800241a <UART_SetConfig+0xb2>
 8002414:	2b01      	cmp	r3, #1
 8002416:	d00e      	beq.n	8002436 <UART_SetConfig+0xce>
 8002418:	e01b      	b.n	8002452 <UART_SetConfig+0xea>
 800241a:	231b      	movs	r3, #27
 800241c:	2218      	movs	r2, #24
 800241e:	189b      	adds	r3, r3, r2
 8002420:	19db      	adds	r3, r3, r7
 8002422:	2201      	movs	r2, #1
 8002424:	701a      	strb	r2, [r3, #0]
 8002426:	e0b4      	b.n	8002592 <UART_SetConfig+0x22a>
 8002428:	231b      	movs	r3, #27
 800242a:	2218      	movs	r2, #24
 800242c:	189b      	adds	r3, r3, r2
 800242e:	19db      	adds	r3, r3, r7
 8002430:	2202      	movs	r2, #2
 8002432:	701a      	strb	r2, [r3, #0]
 8002434:	e0ad      	b.n	8002592 <UART_SetConfig+0x22a>
 8002436:	231b      	movs	r3, #27
 8002438:	2218      	movs	r2, #24
 800243a:	189b      	adds	r3, r3, r2
 800243c:	19db      	adds	r3, r3, r7
 800243e:	2204      	movs	r2, #4
 8002440:	701a      	strb	r2, [r3, #0]
 8002442:	e0a6      	b.n	8002592 <UART_SetConfig+0x22a>
 8002444:	231b      	movs	r3, #27
 8002446:	2218      	movs	r2, #24
 8002448:	189b      	adds	r3, r3, r2
 800244a:	19db      	adds	r3, r3, r7
 800244c:	2208      	movs	r2, #8
 800244e:	701a      	strb	r2, [r3, #0]
 8002450:	e09f      	b.n	8002592 <UART_SetConfig+0x22a>
 8002452:	231b      	movs	r3, #27
 8002454:	2218      	movs	r2, #24
 8002456:	189b      	adds	r3, r3, r2
 8002458:	19db      	adds	r3, r3, r7
 800245a:	2210      	movs	r2, #16
 800245c:	701a      	strb	r2, [r3, #0]
 800245e:	e098      	b.n	8002592 <UART_SetConfig+0x22a>
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a96      	ldr	r2, [pc, #600]	; (80026c0 <UART_SetConfig+0x358>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d131      	bne.n	80024ce <UART_SetConfig+0x166>
 800246a:	4b94      	ldr	r3, [pc, #592]	; (80026bc <UART_SetConfig+0x354>)
 800246c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800246e:	220c      	movs	r2, #12
 8002470:	4013      	ands	r3, r2
 8002472:	2b0c      	cmp	r3, #12
 8002474:	d01d      	beq.n	80024b2 <UART_SetConfig+0x14a>
 8002476:	d823      	bhi.n	80024c0 <UART_SetConfig+0x158>
 8002478:	2b08      	cmp	r3, #8
 800247a:	d00c      	beq.n	8002496 <UART_SetConfig+0x12e>
 800247c:	d820      	bhi.n	80024c0 <UART_SetConfig+0x158>
 800247e:	2b00      	cmp	r3, #0
 8002480:	d002      	beq.n	8002488 <UART_SetConfig+0x120>
 8002482:	2b04      	cmp	r3, #4
 8002484:	d00e      	beq.n	80024a4 <UART_SetConfig+0x13c>
 8002486:	e01b      	b.n	80024c0 <UART_SetConfig+0x158>
 8002488:	231b      	movs	r3, #27
 800248a:	2218      	movs	r2, #24
 800248c:	189b      	adds	r3, r3, r2
 800248e:	19db      	adds	r3, r3, r7
 8002490:	2200      	movs	r2, #0
 8002492:	701a      	strb	r2, [r3, #0]
 8002494:	e07d      	b.n	8002592 <UART_SetConfig+0x22a>
 8002496:	231b      	movs	r3, #27
 8002498:	2218      	movs	r2, #24
 800249a:	189b      	adds	r3, r3, r2
 800249c:	19db      	adds	r3, r3, r7
 800249e:	2202      	movs	r2, #2
 80024a0:	701a      	strb	r2, [r3, #0]
 80024a2:	e076      	b.n	8002592 <UART_SetConfig+0x22a>
 80024a4:	231b      	movs	r3, #27
 80024a6:	2218      	movs	r2, #24
 80024a8:	189b      	adds	r3, r3, r2
 80024aa:	19db      	adds	r3, r3, r7
 80024ac:	2204      	movs	r2, #4
 80024ae:	701a      	strb	r2, [r3, #0]
 80024b0:	e06f      	b.n	8002592 <UART_SetConfig+0x22a>
 80024b2:	231b      	movs	r3, #27
 80024b4:	2218      	movs	r2, #24
 80024b6:	189b      	adds	r3, r3, r2
 80024b8:	19db      	adds	r3, r3, r7
 80024ba:	2208      	movs	r2, #8
 80024bc:	701a      	strb	r2, [r3, #0]
 80024be:	e068      	b.n	8002592 <UART_SetConfig+0x22a>
 80024c0:	231b      	movs	r3, #27
 80024c2:	2218      	movs	r2, #24
 80024c4:	189b      	adds	r3, r3, r2
 80024c6:	19db      	adds	r3, r3, r7
 80024c8:	2210      	movs	r2, #16
 80024ca:	701a      	strb	r2, [r3, #0]
 80024cc:	e061      	b.n	8002592 <UART_SetConfig+0x22a>
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a7c      	ldr	r2, [pc, #496]	; (80026c4 <UART_SetConfig+0x35c>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d106      	bne.n	80024e6 <UART_SetConfig+0x17e>
 80024d8:	231b      	movs	r3, #27
 80024da:	2218      	movs	r2, #24
 80024dc:	189b      	adds	r3, r3, r2
 80024de:	19db      	adds	r3, r3, r7
 80024e0:	2200      	movs	r2, #0
 80024e2:	701a      	strb	r2, [r3, #0]
 80024e4:	e055      	b.n	8002592 <UART_SetConfig+0x22a>
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a77      	ldr	r2, [pc, #476]	; (80026c8 <UART_SetConfig+0x360>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d106      	bne.n	80024fe <UART_SetConfig+0x196>
 80024f0:	231b      	movs	r3, #27
 80024f2:	2218      	movs	r2, #24
 80024f4:	189b      	adds	r3, r3, r2
 80024f6:	19db      	adds	r3, r3, r7
 80024f8:	2200      	movs	r2, #0
 80024fa:	701a      	strb	r2, [r3, #0]
 80024fc:	e049      	b.n	8002592 <UART_SetConfig+0x22a>
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a6b      	ldr	r2, [pc, #428]	; (80026b0 <UART_SetConfig+0x348>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d13e      	bne.n	8002586 <UART_SetConfig+0x21e>
 8002508:	4b6c      	ldr	r3, [pc, #432]	; (80026bc <UART_SetConfig+0x354>)
 800250a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800250c:	23c0      	movs	r3, #192	; 0xc0
 800250e:	011b      	lsls	r3, r3, #4
 8002510:	4013      	ands	r3, r2
 8002512:	22c0      	movs	r2, #192	; 0xc0
 8002514:	0112      	lsls	r2, r2, #4
 8002516:	4293      	cmp	r3, r2
 8002518:	d027      	beq.n	800256a <UART_SetConfig+0x202>
 800251a:	22c0      	movs	r2, #192	; 0xc0
 800251c:	0112      	lsls	r2, r2, #4
 800251e:	4293      	cmp	r3, r2
 8002520:	d82a      	bhi.n	8002578 <UART_SetConfig+0x210>
 8002522:	2280      	movs	r2, #128	; 0x80
 8002524:	0112      	lsls	r2, r2, #4
 8002526:	4293      	cmp	r3, r2
 8002528:	d011      	beq.n	800254e <UART_SetConfig+0x1e6>
 800252a:	2280      	movs	r2, #128	; 0x80
 800252c:	0112      	lsls	r2, r2, #4
 800252e:	4293      	cmp	r3, r2
 8002530:	d822      	bhi.n	8002578 <UART_SetConfig+0x210>
 8002532:	2b00      	cmp	r3, #0
 8002534:	d004      	beq.n	8002540 <UART_SetConfig+0x1d8>
 8002536:	2280      	movs	r2, #128	; 0x80
 8002538:	00d2      	lsls	r2, r2, #3
 800253a:	4293      	cmp	r3, r2
 800253c:	d00e      	beq.n	800255c <UART_SetConfig+0x1f4>
 800253e:	e01b      	b.n	8002578 <UART_SetConfig+0x210>
 8002540:	231b      	movs	r3, #27
 8002542:	2218      	movs	r2, #24
 8002544:	189b      	adds	r3, r3, r2
 8002546:	19db      	adds	r3, r3, r7
 8002548:	2200      	movs	r2, #0
 800254a:	701a      	strb	r2, [r3, #0]
 800254c:	e021      	b.n	8002592 <UART_SetConfig+0x22a>
 800254e:	231b      	movs	r3, #27
 8002550:	2218      	movs	r2, #24
 8002552:	189b      	adds	r3, r3, r2
 8002554:	19db      	adds	r3, r3, r7
 8002556:	2202      	movs	r2, #2
 8002558:	701a      	strb	r2, [r3, #0]
 800255a:	e01a      	b.n	8002592 <UART_SetConfig+0x22a>
 800255c:	231b      	movs	r3, #27
 800255e:	2218      	movs	r2, #24
 8002560:	189b      	adds	r3, r3, r2
 8002562:	19db      	adds	r3, r3, r7
 8002564:	2204      	movs	r2, #4
 8002566:	701a      	strb	r2, [r3, #0]
 8002568:	e013      	b.n	8002592 <UART_SetConfig+0x22a>
 800256a:	231b      	movs	r3, #27
 800256c:	2218      	movs	r2, #24
 800256e:	189b      	adds	r3, r3, r2
 8002570:	19db      	adds	r3, r3, r7
 8002572:	2208      	movs	r2, #8
 8002574:	701a      	strb	r2, [r3, #0]
 8002576:	e00c      	b.n	8002592 <UART_SetConfig+0x22a>
 8002578:	231b      	movs	r3, #27
 800257a:	2218      	movs	r2, #24
 800257c:	189b      	adds	r3, r3, r2
 800257e:	19db      	adds	r3, r3, r7
 8002580:	2210      	movs	r2, #16
 8002582:	701a      	strb	r2, [r3, #0]
 8002584:	e005      	b.n	8002592 <UART_SetConfig+0x22a>
 8002586:	231b      	movs	r3, #27
 8002588:	2218      	movs	r2, #24
 800258a:	189b      	adds	r3, r3, r2
 800258c:	19db      	adds	r3, r3, r7
 800258e:	2210      	movs	r2, #16
 8002590:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a46      	ldr	r2, [pc, #280]	; (80026b0 <UART_SetConfig+0x348>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d000      	beq.n	800259e <UART_SetConfig+0x236>
 800259c:	e09a      	b.n	80026d4 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800259e:	231b      	movs	r3, #27
 80025a0:	2218      	movs	r2, #24
 80025a2:	189b      	adds	r3, r3, r2
 80025a4:	19db      	adds	r3, r3, r7
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	2b08      	cmp	r3, #8
 80025aa:	d01d      	beq.n	80025e8 <UART_SetConfig+0x280>
 80025ac:	dc20      	bgt.n	80025f0 <UART_SetConfig+0x288>
 80025ae:	2b04      	cmp	r3, #4
 80025b0:	d015      	beq.n	80025de <UART_SetConfig+0x276>
 80025b2:	dc1d      	bgt.n	80025f0 <UART_SetConfig+0x288>
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d002      	beq.n	80025be <UART_SetConfig+0x256>
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d005      	beq.n	80025c8 <UART_SetConfig+0x260>
 80025bc:	e018      	b.n	80025f0 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80025be:	f7ff fcfd 	bl	8001fbc <HAL_RCC_GetPCLK1Freq>
 80025c2:	0003      	movs	r3, r0
 80025c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80025c6:	e01c      	b.n	8002602 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80025c8:	4b3c      	ldr	r3, [pc, #240]	; (80026bc <UART_SetConfig+0x354>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2210      	movs	r2, #16
 80025ce:	4013      	ands	r3, r2
 80025d0:	d002      	beq.n	80025d8 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80025d2:	4b3e      	ldr	r3, [pc, #248]	; (80026cc <UART_SetConfig+0x364>)
 80025d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80025d6:	e014      	b.n	8002602 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 80025d8:	4b3d      	ldr	r3, [pc, #244]	; (80026d0 <UART_SetConfig+0x368>)
 80025da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80025dc:	e011      	b.n	8002602 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80025de:	f7ff fc3d 	bl	8001e5c <HAL_RCC_GetSysClockFreq>
 80025e2:	0003      	movs	r3, r0
 80025e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80025e6:	e00c      	b.n	8002602 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80025e8:	2380      	movs	r3, #128	; 0x80
 80025ea:	021b      	lsls	r3, r3, #8
 80025ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80025ee:	e008      	b.n	8002602 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 80025f0:	2300      	movs	r3, #0
 80025f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80025f4:	231a      	movs	r3, #26
 80025f6:	2218      	movs	r2, #24
 80025f8:	189b      	adds	r3, r3, r2
 80025fa:	19db      	adds	r3, r3, r7
 80025fc:	2201      	movs	r2, #1
 80025fe:	701a      	strb	r2, [r3, #0]
        break;
 8002600:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002604:	2b00      	cmp	r3, #0
 8002606:	d100      	bne.n	800260a <UART_SetConfig+0x2a2>
 8002608:	e134      	b.n	8002874 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	685a      	ldr	r2, [r3, #4]
 800260e:	0013      	movs	r3, r2
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	189b      	adds	r3, r3, r2
 8002614:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002616:	429a      	cmp	r2, r3
 8002618:	d305      	bcc.n	8002626 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002620:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002622:	429a      	cmp	r2, r3
 8002624:	d906      	bls.n	8002634 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8002626:	231a      	movs	r3, #26
 8002628:	2218      	movs	r2, #24
 800262a:	189b      	adds	r3, r3, r2
 800262c:	19db      	adds	r3, r3, r7
 800262e:	2201      	movs	r2, #1
 8002630:	701a      	strb	r2, [r3, #0]
 8002632:	e11f      	b.n	8002874 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002636:	613b      	str	r3, [r7, #16]
 8002638:	2300      	movs	r3, #0
 800263a:	617b      	str	r3, [r7, #20]
 800263c:	6939      	ldr	r1, [r7, #16]
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	000b      	movs	r3, r1
 8002642:	0e1b      	lsrs	r3, r3, #24
 8002644:	0010      	movs	r0, r2
 8002646:	0205      	lsls	r5, r0, #8
 8002648:	431d      	orrs	r5, r3
 800264a:	000b      	movs	r3, r1
 800264c:	021c      	lsls	r4, r3, #8
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	085b      	lsrs	r3, r3, #1
 8002654:	60bb      	str	r3, [r7, #8]
 8002656:	2300      	movs	r3, #0
 8002658:	60fb      	str	r3, [r7, #12]
 800265a:	68b8      	ldr	r0, [r7, #8]
 800265c:	68f9      	ldr	r1, [r7, #12]
 800265e:	1900      	adds	r0, r0, r4
 8002660:	4169      	adcs	r1, r5
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	603b      	str	r3, [r7, #0]
 8002668:	2300      	movs	r3, #0
 800266a:	607b      	str	r3, [r7, #4]
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f7fd fdde 	bl	8000230 <__aeabi_uldivmod>
 8002674:	0002      	movs	r2, r0
 8002676:	000b      	movs	r3, r1
 8002678:	0013      	movs	r3, r2
 800267a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800267c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800267e:	23c0      	movs	r3, #192	; 0xc0
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	429a      	cmp	r2, r3
 8002684:	d309      	bcc.n	800269a <UART_SetConfig+0x332>
 8002686:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002688:	2380      	movs	r3, #128	; 0x80
 800268a:	035b      	lsls	r3, r3, #13
 800268c:	429a      	cmp	r2, r3
 800268e:	d204      	bcs.n	800269a <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002696:	60da      	str	r2, [r3, #12]
 8002698:	e0ec      	b.n	8002874 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 800269a:	231a      	movs	r3, #26
 800269c:	2218      	movs	r2, #24
 800269e:	189b      	adds	r3, r3, r2
 80026a0:	19db      	adds	r3, r3, r7
 80026a2:	2201      	movs	r2, #1
 80026a4:	701a      	strb	r2, [r3, #0]
 80026a6:	e0e5      	b.n	8002874 <UART_SetConfig+0x50c>
 80026a8:	efff69f3 	.word	0xefff69f3
 80026ac:	ffffcfff 	.word	0xffffcfff
 80026b0:	40004800 	.word	0x40004800
 80026b4:	fffff4ff 	.word	0xfffff4ff
 80026b8:	40013800 	.word	0x40013800
 80026bc:	40021000 	.word	0x40021000
 80026c0:	40004400 	.word	0x40004400
 80026c4:	40004c00 	.word	0x40004c00
 80026c8:	40005000 	.word	0x40005000
 80026cc:	003d0900 	.word	0x003d0900
 80026d0:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	69da      	ldr	r2, [r3, #28]
 80026d8:	2380      	movs	r3, #128	; 0x80
 80026da:	021b      	lsls	r3, r3, #8
 80026dc:	429a      	cmp	r2, r3
 80026de:	d000      	beq.n	80026e2 <UART_SetConfig+0x37a>
 80026e0:	e071      	b.n	80027c6 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 80026e2:	231b      	movs	r3, #27
 80026e4:	2218      	movs	r2, #24
 80026e6:	189b      	adds	r3, r3, r2
 80026e8:	19db      	adds	r3, r3, r7
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	2b08      	cmp	r3, #8
 80026ee:	d822      	bhi.n	8002736 <UART_SetConfig+0x3ce>
 80026f0:	009a      	lsls	r2, r3, #2
 80026f2:	4b68      	ldr	r3, [pc, #416]	; (8002894 <UART_SetConfig+0x52c>)
 80026f4:	18d3      	adds	r3, r2, r3
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80026fa:	f7ff fc5f 	bl	8001fbc <HAL_RCC_GetPCLK1Freq>
 80026fe:	0003      	movs	r3, r0
 8002700:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002702:	e021      	b.n	8002748 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002704:	f7ff fc70 	bl	8001fe8 <HAL_RCC_GetPCLK2Freq>
 8002708:	0003      	movs	r3, r0
 800270a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800270c:	e01c      	b.n	8002748 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800270e:	4b62      	ldr	r3, [pc, #392]	; (8002898 <UART_SetConfig+0x530>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2210      	movs	r2, #16
 8002714:	4013      	ands	r3, r2
 8002716:	d002      	beq.n	800271e <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002718:	4b60      	ldr	r3, [pc, #384]	; (800289c <UART_SetConfig+0x534>)
 800271a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800271c:	e014      	b.n	8002748 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 800271e:	4b60      	ldr	r3, [pc, #384]	; (80028a0 <UART_SetConfig+0x538>)
 8002720:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002722:	e011      	b.n	8002748 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002724:	f7ff fb9a 	bl	8001e5c <HAL_RCC_GetSysClockFreq>
 8002728:	0003      	movs	r3, r0
 800272a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800272c:	e00c      	b.n	8002748 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800272e:	2380      	movs	r3, #128	; 0x80
 8002730:	021b      	lsls	r3, r3, #8
 8002732:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002734:	e008      	b.n	8002748 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8002736:	2300      	movs	r3, #0
 8002738:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800273a:	231a      	movs	r3, #26
 800273c:	2218      	movs	r2, #24
 800273e:	189b      	adds	r3, r3, r2
 8002740:	19db      	adds	r3, r3, r7
 8002742:	2201      	movs	r2, #1
 8002744:	701a      	strb	r2, [r3, #0]
        break;
 8002746:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800274a:	2b00      	cmp	r3, #0
 800274c:	d100      	bne.n	8002750 <UART_SetConfig+0x3e8>
 800274e:	e091      	b.n	8002874 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002752:	005a      	lsls	r2, r3, #1
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	085b      	lsrs	r3, r3, #1
 800275a:	18d2      	adds	r2, r2, r3
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	0019      	movs	r1, r3
 8002762:	0010      	movs	r0, r2
 8002764:	f7fd fcd8 	bl	8000118 <__udivsi3>
 8002768:	0003      	movs	r3, r0
 800276a:	b29b      	uxth	r3, r3
 800276c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800276e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002770:	2b0f      	cmp	r3, #15
 8002772:	d921      	bls.n	80027b8 <UART_SetConfig+0x450>
 8002774:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002776:	2380      	movs	r3, #128	; 0x80
 8002778:	025b      	lsls	r3, r3, #9
 800277a:	429a      	cmp	r2, r3
 800277c:	d21c      	bcs.n	80027b8 <UART_SetConfig+0x450>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800277e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002780:	b29a      	uxth	r2, r3
 8002782:	200e      	movs	r0, #14
 8002784:	2418      	movs	r4, #24
 8002786:	1903      	adds	r3, r0, r4
 8002788:	19db      	adds	r3, r3, r7
 800278a:	210f      	movs	r1, #15
 800278c:	438a      	bics	r2, r1
 800278e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002792:	085b      	lsrs	r3, r3, #1
 8002794:	b29b      	uxth	r3, r3
 8002796:	2207      	movs	r2, #7
 8002798:	4013      	ands	r3, r2
 800279a:	b299      	uxth	r1, r3
 800279c:	1903      	adds	r3, r0, r4
 800279e:	19db      	adds	r3, r3, r7
 80027a0:	1902      	adds	r2, r0, r4
 80027a2:	19d2      	adds	r2, r2, r7
 80027a4:	8812      	ldrh	r2, [r2, #0]
 80027a6:	430a      	orrs	r2, r1
 80027a8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	1902      	adds	r2, r0, r4
 80027b0:	19d2      	adds	r2, r2, r7
 80027b2:	8812      	ldrh	r2, [r2, #0]
 80027b4:	60da      	str	r2, [r3, #12]
 80027b6:	e05d      	b.n	8002874 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 80027b8:	231a      	movs	r3, #26
 80027ba:	2218      	movs	r2, #24
 80027bc:	189b      	adds	r3, r3, r2
 80027be:	19db      	adds	r3, r3, r7
 80027c0:	2201      	movs	r2, #1
 80027c2:	701a      	strb	r2, [r3, #0]
 80027c4:	e056      	b.n	8002874 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80027c6:	231b      	movs	r3, #27
 80027c8:	2218      	movs	r2, #24
 80027ca:	189b      	adds	r3, r3, r2
 80027cc:	19db      	adds	r3, r3, r7
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	2b08      	cmp	r3, #8
 80027d2:	d822      	bhi.n	800281a <UART_SetConfig+0x4b2>
 80027d4:	009a      	lsls	r2, r3, #2
 80027d6:	4b33      	ldr	r3, [pc, #204]	; (80028a4 <UART_SetConfig+0x53c>)
 80027d8:	18d3      	adds	r3, r2, r3
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027de:	f7ff fbed 	bl	8001fbc <HAL_RCC_GetPCLK1Freq>
 80027e2:	0003      	movs	r3, r0
 80027e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80027e6:	e021      	b.n	800282c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80027e8:	f7ff fbfe 	bl	8001fe8 <HAL_RCC_GetPCLK2Freq>
 80027ec:	0003      	movs	r3, r0
 80027ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80027f0:	e01c      	b.n	800282c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80027f2:	4b29      	ldr	r3, [pc, #164]	; (8002898 <UART_SetConfig+0x530>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2210      	movs	r2, #16
 80027f8:	4013      	ands	r3, r2
 80027fa:	d002      	beq.n	8002802 <UART_SetConfig+0x49a>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80027fc:	4b27      	ldr	r3, [pc, #156]	; (800289c <UART_SetConfig+0x534>)
 80027fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002800:	e014      	b.n	800282c <UART_SetConfig+0x4c4>
          pclk = (uint32_t) HSI_VALUE;
 8002802:	4b27      	ldr	r3, [pc, #156]	; (80028a0 <UART_SetConfig+0x538>)
 8002804:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002806:	e011      	b.n	800282c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002808:	f7ff fb28 	bl	8001e5c <HAL_RCC_GetSysClockFreq>
 800280c:	0003      	movs	r3, r0
 800280e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002810:	e00c      	b.n	800282c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002812:	2380      	movs	r3, #128	; 0x80
 8002814:	021b      	lsls	r3, r3, #8
 8002816:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002818:	e008      	b.n	800282c <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 800281a:	2300      	movs	r3, #0
 800281c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800281e:	231a      	movs	r3, #26
 8002820:	2218      	movs	r2, #24
 8002822:	189b      	adds	r3, r3, r2
 8002824:	19db      	adds	r3, r3, r7
 8002826:	2201      	movs	r2, #1
 8002828:	701a      	strb	r2, [r3, #0]
        break;
 800282a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800282c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800282e:	2b00      	cmp	r3, #0
 8002830:	d020      	beq.n	8002874 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	085a      	lsrs	r2, r3, #1
 8002838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800283a:	18d2      	adds	r2, r2, r3
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	0019      	movs	r1, r3
 8002842:	0010      	movs	r0, r2
 8002844:	f7fd fc68 	bl	8000118 <__udivsi3>
 8002848:	0003      	movs	r3, r0
 800284a:	b29b      	uxth	r3, r3
 800284c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800284e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002850:	2b0f      	cmp	r3, #15
 8002852:	d909      	bls.n	8002868 <UART_SetConfig+0x500>
 8002854:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002856:	2380      	movs	r3, #128	; 0x80
 8002858:	025b      	lsls	r3, r3, #9
 800285a:	429a      	cmp	r2, r3
 800285c:	d204      	bcs.n	8002868 <UART_SetConfig+0x500>
      {
        huart->Instance->BRR = usartdiv;
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002864:	60da      	str	r2, [r3, #12]
 8002866:	e005      	b.n	8002874 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8002868:	231a      	movs	r3, #26
 800286a:	2218      	movs	r2, #24
 800286c:	189b      	adds	r3, r3, r2
 800286e:	19db      	adds	r3, r3, r7
 8002870:	2201      	movs	r2, #1
 8002872:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	2200      	movs	r2, #0
 8002878:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	2200      	movs	r2, #0
 800287e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002880:	231a      	movs	r3, #26
 8002882:	2218      	movs	r2, #24
 8002884:	189b      	adds	r3, r3, r2
 8002886:	19db      	adds	r3, r3, r7
 8002888:	781b      	ldrb	r3, [r3, #0]
}
 800288a:	0018      	movs	r0, r3
 800288c:	46bd      	mov	sp, r7
 800288e:	b00e      	add	sp, #56	; 0x38
 8002890:	bdb0      	pop	{r4, r5, r7, pc}
 8002892:	46c0      	nop			; (mov r8, r8)
 8002894:	08002d10 	.word	0x08002d10
 8002898:	40021000 	.word	0x40021000
 800289c:	003d0900 	.word	0x003d0900
 80028a0:	00f42400 	.word	0x00f42400
 80028a4:	08002d34 	.word	0x08002d34

080028a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b4:	2201      	movs	r2, #1
 80028b6:	4013      	ands	r3, r2
 80028b8:	d00b      	beq.n	80028d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	4a4a      	ldr	r2, [pc, #296]	; (80029ec <UART_AdvFeatureConfig+0x144>)
 80028c2:	4013      	ands	r3, r2
 80028c4:	0019      	movs	r1, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	430a      	orrs	r2, r1
 80028d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d6:	2202      	movs	r2, #2
 80028d8:	4013      	ands	r3, r2
 80028da:	d00b      	beq.n	80028f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	4a43      	ldr	r2, [pc, #268]	; (80029f0 <UART_AdvFeatureConfig+0x148>)
 80028e4:	4013      	ands	r3, r2
 80028e6:	0019      	movs	r1, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	430a      	orrs	r2, r1
 80028f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f8:	2204      	movs	r2, #4
 80028fa:	4013      	ands	r3, r2
 80028fc:	d00b      	beq.n	8002916 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	4a3b      	ldr	r2, [pc, #236]	; (80029f4 <UART_AdvFeatureConfig+0x14c>)
 8002906:	4013      	ands	r3, r2
 8002908:	0019      	movs	r1, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	430a      	orrs	r2, r1
 8002914:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291a:	2208      	movs	r2, #8
 800291c:	4013      	ands	r3, r2
 800291e:	d00b      	beq.n	8002938 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	4a34      	ldr	r2, [pc, #208]	; (80029f8 <UART_AdvFeatureConfig+0x150>)
 8002928:	4013      	ands	r3, r2
 800292a:	0019      	movs	r1, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	430a      	orrs	r2, r1
 8002936:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293c:	2210      	movs	r2, #16
 800293e:	4013      	ands	r3, r2
 8002940:	d00b      	beq.n	800295a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	4a2c      	ldr	r2, [pc, #176]	; (80029fc <UART_AdvFeatureConfig+0x154>)
 800294a:	4013      	ands	r3, r2
 800294c:	0019      	movs	r1, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	430a      	orrs	r2, r1
 8002958:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295e:	2220      	movs	r2, #32
 8002960:	4013      	ands	r3, r2
 8002962:	d00b      	beq.n	800297c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	4a25      	ldr	r2, [pc, #148]	; (8002a00 <UART_AdvFeatureConfig+0x158>)
 800296c:	4013      	ands	r3, r2
 800296e:	0019      	movs	r1, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	430a      	orrs	r2, r1
 800297a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002980:	2240      	movs	r2, #64	; 0x40
 8002982:	4013      	ands	r3, r2
 8002984:	d01d      	beq.n	80029c2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	4a1d      	ldr	r2, [pc, #116]	; (8002a04 <UART_AdvFeatureConfig+0x15c>)
 800298e:	4013      	ands	r3, r2
 8002990:	0019      	movs	r1, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	430a      	orrs	r2, r1
 800299c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029a2:	2380      	movs	r3, #128	; 0x80
 80029a4:	035b      	lsls	r3, r3, #13
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d10b      	bne.n	80029c2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	4a15      	ldr	r2, [pc, #84]	; (8002a08 <UART_AdvFeatureConfig+0x160>)
 80029b2:	4013      	ands	r3, r2
 80029b4:	0019      	movs	r1, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	430a      	orrs	r2, r1
 80029c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c6:	2280      	movs	r2, #128	; 0x80
 80029c8:	4013      	ands	r3, r2
 80029ca:	d00b      	beq.n	80029e4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	4a0e      	ldr	r2, [pc, #56]	; (8002a0c <UART_AdvFeatureConfig+0x164>)
 80029d4:	4013      	ands	r3, r2
 80029d6:	0019      	movs	r1, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	430a      	orrs	r2, r1
 80029e2:	605a      	str	r2, [r3, #4]
  }
}
 80029e4:	46c0      	nop			; (mov r8, r8)
 80029e6:	46bd      	mov	sp, r7
 80029e8:	b002      	add	sp, #8
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	fffdffff 	.word	0xfffdffff
 80029f0:	fffeffff 	.word	0xfffeffff
 80029f4:	fffbffff 	.word	0xfffbffff
 80029f8:	ffff7fff 	.word	0xffff7fff
 80029fc:	ffffefff 	.word	0xffffefff
 8002a00:	ffffdfff 	.word	0xffffdfff
 8002a04:	ffefffff 	.word	0xffefffff
 8002a08:	ff9fffff 	.word	0xff9fffff
 8002a0c:	fff7ffff 	.word	0xfff7ffff

08002a10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af02      	add	r7, sp, #8
 8002a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2280      	movs	r2, #128	; 0x80
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002a20:	f7fe f880 	bl	8000b24 <HAL_GetTick>
 8002a24:	0003      	movs	r3, r0
 8002a26:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2208      	movs	r2, #8
 8002a30:	4013      	ands	r3, r2
 8002a32:	2b08      	cmp	r3, #8
 8002a34:	d10c      	bne.n	8002a50 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2280      	movs	r2, #128	; 0x80
 8002a3a:	0391      	lsls	r1, r2, #14
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	4a17      	ldr	r2, [pc, #92]	; (8002a9c <UART_CheckIdleState+0x8c>)
 8002a40:	9200      	str	r2, [sp, #0]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f000 f82c 	bl	8002aa0 <UART_WaitOnFlagUntilTimeout>
 8002a48:	1e03      	subs	r3, r0, #0
 8002a4a:	d001      	beq.n	8002a50 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e021      	b.n	8002a94 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2204      	movs	r2, #4
 8002a58:	4013      	ands	r3, r2
 8002a5a:	2b04      	cmp	r3, #4
 8002a5c:	d10c      	bne.n	8002a78 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2280      	movs	r2, #128	; 0x80
 8002a62:	03d1      	lsls	r1, r2, #15
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	4a0d      	ldr	r2, [pc, #52]	; (8002a9c <UART_CheckIdleState+0x8c>)
 8002a68:	9200      	str	r2, [sp, #0]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f000 f818 	bl	8002aa0 <UART_WaitOnFlagUntilTimeout>
 8002a70:	1e03      	subs	r3, r0, #0
 8002a72:	d001      	beq.n	8002a78 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e00d      	b.n	8002a94 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2220      	movs	r2, #32
 8002a7c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2220      	movs	r2, #32
 8002a82:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2274      	movs	r2, #116	; 0x74
 8002a8e:	2100      	movs	r1, #0
 8002a90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	0018      	movs	r0, r3
 8002a96:	46bd      	mov	sp, r7
 8002a98:	b004      	add	sp, #16
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	01ffffff 	.word	0x01ffffff

08002aa0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b094      	sub	sp, #80	; 0x50
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	603b      	str	r3, [r7, #0]
 8002aac:	1dfb      	adds	r3, r7, #7
 8002aae:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ab0:	e0a3      	b.n	8002bfa <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ab2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	d100      	bne.n	8002aba <UART_WaitOnFlagUntilTimeout+0x1a>
 8002ab8:	e09f      	b.n	8002bfa <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aba:	f7fe f833 	bl	8000b24 <HAL_GetTick>
 8002abe:	0002      	movs	r2, r0
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d302      	bcc.n	8002ad0 <UART_WaitOnFlagUntilTimeout+0x30>
 8002aca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d13d      	bne.n	8002b4c <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ad0:	f3ef 8310 	mrs	r3, PRIMASK
 8002ad4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ad8:	647b      	str	r3, [r7, #68]	; 0x44
 8002ada:	2301      	movs	r3, #1
 8002adc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae0:	f383 8810 	msr	PRIMASK, r3
}
 8002ae4:	46c0      	nop			; (mov r8, r8)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	494c      	ldr	r1, [pc, #304]	; (8002c24 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002af2:	400a      	ands	r2, r1
 8002af4:	601a      	str	r2, [r3, #0]
 8002af6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002af8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002afc:	f383 8810 	msr	PRIMASK, r3
}
 8002b00:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b02:	f3ef 8310 	mrs	r3, PRIMASK
 8002b06:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b0a:	643b      	str	r3, [r7, #64]	; 0x40
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b12:	f383 8810 	msr	PRIMASK, r3
}
 8002b16:	46c0      	nop			; (mov r8, r8)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	689a      	ldr	r2, [r3, #8]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2101      	movs	r1, #1
 8002b24:	438a      	bics	r2, r1
 8002b26:	609a      	str	r2, [r3, #8]
 8002b28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b2e:	f383 8810 	msr	PRIMASK, r3
}
 8002b32:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2220      	movs	r2, #32
 8002b38:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2220      	movs	r2, #32
 8002b3e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2274      	movs	r2, #116	; 0x74
 8002b44:	2100      	movs	r1, #0
 8002b46:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e067      	b.n	8002c1c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2204      	movs	r2, #4
 8002b54:	4013      	ands	r3, r2
 8002b56:	d050      	beq.n	8002bfa <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	69da      	ldr	r2, [r3, #28]
 8002b5e:	2380      	movs	r3, #128	; 0x80
 8002b60:	011b      	lsls	r3, r3, #4
 8002b62:	401a      	ands	r2, r3
 8002b64:	2380      	movs	r3, #128	; 0x80
 8002b66:	011b      	lsls	r3, r3, #4
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d146      	bne.n	8002bfa <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2280      	movs	r2, #128	; 0x80
 8002b72:	0112      	lsls	r2, r2, #4
 8002b74:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b76:	f3ef 8310 	mrs	r3, PRIMASK
 8002b7a:	613b      	str	r3, [r7, #16]
  return(result);
 8002b7c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b80:	2301      	movs	r3, #1
 8002b82:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	f383 8810 	msr	PRIMASK, r3
}
 8002b8a:	46c0      	nop			; (mov r8, r8)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4923      	ldr	r1, [pc, #140]	; (8002c24 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002b98:	400a      	ands	r2, r1
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b9e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	f383 8810 	msr	PRIMASK, r3
}
 8002ba6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ba8:	f3ef 8310 	mrs	r3, PRIMASK
 8002bac:	61fb      	str	r3, [r7, #28]
  return(result);
 8002bae:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bb0:	64bb      	str	r3, [r7, #72]	; 0x48
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bb6:	6a3b      	ldr	r3, [r7, #32]
 8002bb8:	f383 8810 	msr	PRIMASK, r3
}
 8002bbc:	46c0      	nop			; (mov r8, r8)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	689a      	ldr	r2, [r3, #8]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2101      	movs	r1, #1
 8002bca:	438a      	bics	r2, r1
 8002bcc:	609a      	str	r2, [r3, #8]
 8002bce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bd0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd4:	f383 8810 	msr	PRIMASK, r3
}
 8002bd8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2220      	movs	r2, #32
 8002bde:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2220      	movs	r2, #32
 8002be4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2280      	movs	r2, #128	; 0x80
 8002bea:	2120      	movs	r1, #32
 8002bec:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2274      	movs	r2, #116	; 0x74
 8002bf2:	2100      	movs	r1, #0
 8002bf4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e010      	b.n	8002c1c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	69db      	ldr	r3, [r3, #28]
 8002c00:	68ba      	ldr	r2, [r7, #8]
 8002c02:	4013      	ands	r3, r2
 8002c04:	68ba      	ldr	r2, [r7, #8]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	425a      	negs	r2, r3
 8002c0a:	4153      	adcs	r3, r2
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	001a      	movs	r2, r3
 8002c10:	1dfb      	adds	r3, r7, #7
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d100      	bne.n	8002c1a <UART_WaitOnFlagUntilTimeout+0x17a>
 8002c18:	e74b      	b.n	8002ab2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	0018      	movs	r0, r3
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	b014      	add	sp, #80	; 0x50
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	fffffe5f 	.word	0xfffffe5f

08002c28 <__libc_init_array>:
 8002c28:	b570      	push	{r4, r5, r6, lr}
 8002c2a:	2600      	movs	r6, #0
 8002c2c:	4d0c      	ldr	r5, [pc, #48]	; (8002c60 <__libc_init_array+0x38>)
 8002c2e:	4c0d      	ldr	r4, [pc, #52]	; (8002c64 <__libc_init_array+0x3c>)
 8002c30:	1b64      	subs	r4, r4, r5
 8002c32:	10a4      	asrs	r4, r4, #2
 8002c34:	42a6      	cmp	r6, r4
 8002c36:	d109      	bne.n	8002c4c <__libc_init_array+0x24>
 8002c38:	2600      	movs	r6, #0
 8002c3a:	f000 f821 	bl	8002c80 <_init>
 8002c3e:	4d0a      	ldr	r5, [pc, #40]	; (8002c68 <__libc_init_array+0x40>)
 8002c40:	4c0a      	ldr	r4, [pc, #40]	; (8002c6c <__libc_init_array+0x44>)
 8002c42:	1b64      	subs	r4, r4, r5
 8002c44:	10a4      	asrs	r4, r4, #2
 8002c46:	42a6      	cmp	r6, r4
 8002c48:	d105      	bne.n	8002c56 <__libc_init_array+0x2e>
 8002c4a:	bd70      	pop	{r4, r5, r6, pc}
 8002c4c:	00b3      	lsls	r3, r6, #2
 8002c4e:	58eb      	ldr	r3, [r5, r3]
 8002c50:	4798      	blx	r3
 8002c52:	3601      	adds	r6, #1
 8002c54:	e7ee      	b.n	8002c34 <__libc_init_array+0xc>
 8002c56:	00b3      	lsls	r3, r6, #2
 8002c58:	58eb      	ldr	r3, [r5, r3]
 8002c5a:	4798      	blx	r3
 8002c5c:	3601      	adds	r6, #1
 8002c5e:	e7f2      	b.n	8002c46 <__libc_init_array+0x1e>
 8002c60:	08002d60 	.word	0x08002d60
 8002c64:	08002d60 	.word	0x08002d60
 8002c68:	08002d60 	.word	0x08002d60
 8002c6c:	08002d64 	.word	0x08002d64

08002c70 <memset>:
 8002c70:	0003      	movs	r3, r0
 8002c72:	1882      	adds	r2, r0, r2
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d100      	bne.n	8002c7a <memset+0xa>
 8002c78:	4770      	bx	lr
 8002c7a:	7019      	strb	r1, [r3, #0]
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	e7f9      	b.n	8002c74 <memset+0x4>

08002c80 <_init>:
 8002c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c82:	46c0      	nop			; (mov r8, r8)
 8002c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c86:	bc08      	pop	{r3}
 8002c88:	469e      	mov	lr, r3
 8002c8a:	4770      	bx	lr

08002c8c <_fini>:
 8002c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c8e:	46c0      	nop			; (mov r8, r8)
 8002c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c92:	bc08      	pop	{r3}
 8002c94:	469e      	mov	lr, r3
 8002c96:	4770      	bx	lr
