
sx1276mb1mas.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e4e0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c50  0800e5a0  0800e5a0  0001e5a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f1f0  0800f1f0  0001f1f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f1f8  0800f1f8  0001f1f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f1fc  0800f1fc  0001f1fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000f0  20000000  0800f200  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000178c  200000f0  0800f2f0  000200f0  2**2
                  ALLOC
  8 ._user_heap_stack 00000804  2000187c  0800f2f0  0002187c  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003ee66  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000a732  00000000  00000000  0005ef7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001ff0  00000000  00000000  000696b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000034a8  00000000  00000000  0006b6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00020a7d  00000000  00000000  0006eb48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003e4ef  00000000  00000000  0008f5c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000b09d2  00000000  00000000  000cdab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0017e486  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005d54  00000000  00000000  0017e4d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loc    0001aaeb  00000000  00000000  0018422c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000f0 	.word	0x200000f0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800e588 	.word	0x0800e588

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000f4 	.word	0x200000f4
 8000104:	0800e588 	.word	0x0800e588

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_sqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5609      	ldrsb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__gnu_thumb1_case_uhi>:
 8000154:	b403      	push	{r0, r1}
 8000156:	4671      	mov	r1, lr
 8000158:	0849      	lsrs	r1, r1, #1
 800015a:	0040      	lsls	r0, r0, #1
 800015c:	0049      	lsls	r1, r1, #1
 800015e:	5a09      	ldrh	r1, [r1, r0]
 8000160:	0049      	lsls	r1, r1, #1
 8000162:	448e      	add	lr, r1
 8000164:	bc03      	pop	{r0, r1}
 8000166:	4770      	bx	lr

08000168 <__udivsi3>:
 8000168:	2200      	movs	r2, #0
 800016a:	0843      	lsrs	r3, r0, #1
 800016c:	428b      	cmp	r3, r1
 800016e:	d374      	bcc.n	800025a <__udivsi3+0xf2>
 8000170:	0903      	lsrs	r3, r0, #4
 8000172:	428b      	cmp	r3, r1
 8000174:	d35f      	bcc.n	8000236 <__udivsi3+0xce>
 8000176:	0a03      	lsrs	r3, r0, #8
 8000178:	428b      	cmp	r3, r1
 800017a:	d344      	bcc.n	8000206 <__udivsi3+0x9e>
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d328      	bcc.n	80001d4 <__udivsi3+0x6c>
 8000182:	0c03      	lsrs	r3, r0, #16
 8000184:	428b      	cmp	r3, r1
 8000186:	d30d      	bcc.n	80001a4 <__udivsi3+0x3c>
 8000188:	22ff      	movs	r2, #255	; 0xff
 800018a:	0209      	lsls	r1, r1, #8
 800018c:	ba12      	rev	r2, r2
 800018e:	0c03      	lsrs	r3, r0, #16
 8000190:	428b      	cmp	r3, r1
 8000192:	d302      	bcc.n	800019a <__udivsi3+0x32>
 8000194:	1212      	asrs	r2, r2, #8
 8000196:	0209      	lsls	r1, r1, #8
 8000198:	d065      	beq.n	8000266 <__udivsi3+0xfe>
 800019a:	0b03      	lsrs	r3, r0, #12
 800019c:	428b      	cmp	r3, r1
 800019e:	d319      	bcc.n	80001d4 <__udivsi3+0x6c>
 80001a0:	e000      	b.n	80001a4 <__udivsi3+0x3c>
 80001a2:	0a09      	lsrs	r1, r1, #8
 80001a4:	0bc3      	lsrs	r3, r0, #15
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x46>
 80001aa:	03cb      	lsls	r3, r1, #15
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b83      	lsrs	r3, r0, #14
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x52>
 80001b6:	038b      	lsls	r3, r1, #14
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0b43      	lsrs	r3, r0, #13
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x5e>
 80001c2:	034b      	lsls	r3, r1, #13
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0b03      	lsrs	r3, r0, #12
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x6a>
 80001ce:	030b      	lsls	r3, r1, #12
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0ac3      	lsrs	r3, r0, #11
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x76>
 80001da:	02cb      	lsls	r3, r1, #11
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a83      	lsrs	r3, r0, #10
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x82>
 80001e6:	028b      	lsls	r3, r1, #10
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0a43      	lsrs	r3, r0, #9
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x8e>
 80001f2:	024b      	lsls	r3, r1, #9
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0a03      	lsrs	r3, r0, #8
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x9a>
 80001fe:	020b      	lsls	r3, r1, #8
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	d2cd      	bcs.n	80001a2 <__udivsi3+0x3a>
 8000206:	09c3      	lsrs	r3, r0, #7
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xa8>
 800020c:	01cb      	lsls	r3, r1, #7
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0983      	lsrs	r3, r0, #6
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xb4>
 8000218:	018b      	lsls	r3, r1, #6
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0943      	lsrs	r3, r0, #5
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xc0>
 8000224:	014b      	lsls	r3, r1, #5
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xcc>
 8000230:	010b      	lsls	r3, r1, #4
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	08c3      	lsrs	r3, r0, #3
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xd8>
 800023c:	00cb      	lsls	r3, r1, #3
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	0883      	lsrs	r3, r0, #2
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xe4>
 8000248:	008b      	lsls	r3, r1, #2
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0843      	lsrs	r3, r0, #1
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xf0>
 8000254:	004b      	lsls	r3, r1, #1
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	1a41      	subs	r1, r0, r1
 800025c:	d200      	bcs.n	8000260 <__udivsi3+0xf8>
 800025e:	4601      	mov	r1, r0
 8000260:	4152      	adcs	r2, r2
 8000262:	4610      	mov	r0, r2
 8000264:	4770      	bx	lr
 8000266:	e7ff      	b.n	8000268 <__udivsi3+0x100>
 8000268:	b501      	push	{r0, lr}
 800026a:	2000      	movs	r0, #0
 800026c:	f000 f8f0 	bl	8000450 <__aeabi_idiv0>
 8000270:	bd02      	pop	{r1, pc}
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_uidivmod>:
 8000274:	2900      	cmp	r1, #0
 8000276:	d0f7      	beq.n	8000268 <__udivsi3+0x100>
 8000278:	e776      	b.n	8000168 <__udivsi3>
 800027a:	4770      	bx	lr

0800027c <__divsi3>:
 800027c:	4603      	mov	r3, r0
 800027e:	430b      	orrs	r3, r1
 8000280:	d47f      	bmi.n	8000382 <__divsi3+0x106>
 8000282:	2200      	movs	r2, #0
 8000284:	0843      	lsrs	r3, r0, #1
 8000286:	428b      	cmp	r3, r1
 8000288:	d374      	bcc.n	8000374 <__divsi3+0xf8>
 800028a:	0903      	lsrs	r3, r0, #4
 800028c:	428b      	cmp	r3, r1
 800028e:	d35f      	bcc.n	8000350 <__divsi3+0xd4>
 8000290:	0a03      	lsrs	r3, r0, #8
 8000292:	428b      	cmp	r3, r1
 8000294:	d344      	bcc.n	8000320 <__divsi3+0xa4>
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d328      	bcc.n	80002ee <__divsi3+0x72>
 800029c:	0c03      	lsrs	r3, r0, #16
 800029e:	428b      	cmp	r3, r1
 80002a0:	d30d      	bcc.n	80002be <__divsi3+0x42>
 80002a2:	22ff      	movs	r2, #255	; 0xff
 80002a4:	0209      	lsls	r1, r1, #8
 80002a6:	ba12      	rev	r2, r2
 80002a8:	0c03      	lsrs	r3, r0, #16
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d302      	bcc.n	80002b4 <__divsi3+0x38>
 80002ae:	1212      	asrs	r2, r2, #8
 80002b0:	0209      	lsls	r1, r1, #8
 80002b2:	d065      	beq.n	8000380 <__divsi3+0x104>
 80002b4:	0b03      	lsrs	r3, r0, #12
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d319      	bcc.n	80002ee <__divsi3+0x72>
 80002ba:	e000      	b.n	80002be <__divsi3+0x42>
 80002bc:	0a09      	lsrs	r1, r1, #8
 80002be:	0bc3      	lsrs	r3, r0, #15
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x4c>
 80002c4:	03cb      	lsls	r3, r1, #15
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b83      	lsrs	r3, r0, #14
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x58>
 80002d0:	038b      	lsls	r3, r1, #14
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0b43      	lsrs	r3, r0, #13
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x64>
 80002dc:	034b      	lsls	r3, r1, #13
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0b03      	lsrs	r3, r0, #12
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x70>
 80002e8:	030b      	lsls	r3, r1, #12
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0ac3      	lsrs	r3, r0, #11
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x7c>
 80002f4:	02cb      	lsls	r3, r1, #11
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a83      	lsrs	r3, r0, #10
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x88>
 8000300:	028b      	lsls	r3, r1, #10
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0a43      	lsrs	r3, r0, #9
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x94>
 800030c:	024b      	lsls	r3, r1, #9
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0a03      	lsrs	r3, r0, #8
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0xa0>
 8000318:	020b      	lsls	r3, r1, #8
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	d2cd      	bcs.n	80002bc <__divsi3+0x40>
 8000320:	09c3      	lsrs	r3, r0, #7
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xae>
 8000326:	01cb      	lsls	r3, r1, #7
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0983      	lsrs	r3, r0, #6
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xba>
 8000332:	018b      	lsls	r3, r1, #6
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0943      	lsrs	r3, r0, #5
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xc6>
 800033e:	014b      	lsls	r3, r1, #5
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xd2>
 800034a:	010b      	lsls	r3, r1, #4
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	08c3      	lsrs	r3, r0, #3
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xde>
 8000356:	00cb      	lsls	r3, r1, #3
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	0883      	lsrs	r3, r0, #2
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xea>
 8000362:	008b      	lsls	r3, r1, #2
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0843      	lsrs	r3, r0, #1
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xf6>
 800036e:	004b      	lsls	r3, r1, #1
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	1a41      	subs	r1, r0, r1
 8000376:	d200      	bcs.n	800037a <__divsi3+0xfe>
 8000378:	4601      	mov	r1, r0
 800037a:	4152      	adcs	r2, r2
 800037c:	4610      	mov	r0, r2
 800037e:	4770      	bx	lr
 8000380:	e05d      	b.n	800043e <__divsi3+0x1c2>
 8000382:	0fca      	lsrs	r2, r1, #31
 8000384:	d000      	beq.n	8000388 <__divsi3+0x10c>
 8000386:	4249      	negs	r1, r1
 8000388:	1003      	asrs	r3, r0, #32
 800038a:	d300      	bcc.n	800038e <__divsi3+0x112>
 800038c:	4240      	negs	r0, r0
 800038e:	4053      	eors	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	469c      	mov	ip, r3
 8000394:	0903      	lsrs	r3, r0, #4
 8000396:	428b      	cmp	r3, r1
 8000398:	d32d      	bcc.n	80003f6 <__divsi3+0x17a>
 800039a:	0a03      	lsrs	r3, r0, #8
 800039c:	428b      	cmp	r3, r1
 800039e:	d312      	bcc.n	80003c6 <__divsi3+0x14a>
 80003a0:	22fc      	movs	r2, #252	; 0xfc
 80003a2:	0189      	lsls	r1, r1, #6
 80003a4:	ba12      	rev	r2, r2
 80003a6:	0a03      	lsrs	r3, r0, #8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d30c      	bcc.n	80003c6 <__divsi3+0x14a>
 80003ac:	0189      	lsls	r1, r1, #6
 80003ae:	1192      	asrs	r2, r2, #6
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d308      	bcc.n	80003c6 <__divsi3+0x14a>
 80003b4:	0189      	lsls	r1, r1, #6
 80003b6:	1192      	asrs	r2, r2, #6
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d304      	bcc.n	80003c6 <__divsi3+0x14a>
 80003bc:	0189      	lsls	r1, r1, #6
 80003be:	d03a      	beq.n	8000436 <__divsi3+0x1ba>
 80003c0:	1192      	asrs	r2, r2, #6
 80003c2:	e000      	b.n	80003c6 <__divsi3+0x14a>
 80003c4:	0989      	lsrs	r1, r1, #6
 80003c6:	09c3      	lsrs	r3, r0, #7
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x154>
 80003cc:	01cb      	lsls	r3, r1, #7
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0983      	lsrs	r3, r0, #6
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x160>
 80003d8:	018b      	lsls	r3, r1, #6
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	0943      	lsrs	r3, r0, #5
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x16c>
 80003e4:	014b      	lsls	r3, r1, #5
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0903      	lsrs	r3, r0, #4
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x178>
 80003f0:	010b      	lsls	r3, r1, #4
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	08c3      	lsrs	r3, r0, #3
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x184>
 80003fc:	00cb      	lsls	r3, r1, #3
 80003fe:	1ac0      	subs	r0, r0, r3
 8000400:	4152      	adcs	r2, r2
 8000402:	0883      	lsrs	r3, r0, #2
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x190>
 8000408:	008b      	lsls	r3, r1, #2
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	d2d9      	bcs.n	80003c4 <__divsi3+0x148>
 8000410:	0843      	lsrs	r3, r0, #1
 8000412:	428b      	cmp	r3, r1
 8000414:	d301      	bcc.n	800041a <__divsi3+0x19e>
 8000416:	004b      	lsls	r3, r1, #1
 8000418:	1ac0      	subs	r0, r0, r3
 800041a:	4152      	adcs	r2, r2
 800041c:	1a41      	subs	r1, r0, r1
 800041e:	d200      	bcs.n	8000422 <__divsi3+0x1a6>
 8000420:	4601      	mov	r1, r0
 8000422:	4663      	mov	r3, ip
 8000424:	4152      	adcs	r2, r2
 8000426:	105b      	asrs	r3, r3, #1
 8000428:	4610      	mov	r0, r2
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x1b4>
 800042c:	4240      	negs	r0, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d500      	bpl.n	8000434 <__divsi3+0x1b8>
 8000432:	4249      	negs	r1, r1
 8000434:	4770      	bx	lr
 8000436:	4663      	mov	r3, ip
 8000438:	105b      	asrs	r3, r3, #1
 800043a:	d300      	bcc.n	800043e <__divsi3+0x1c2>
 800043c:	4240      	negs	r0, r0
 800043e:	b501      	push	{r0, lr}
 8000440:	2000      	movs	r0, #0
 8000442:	f000 f805 	bl	8000450 <__aeabi_idiv0>
 8000446:	bd02      	pop	{r1, pc}

08000448 <__aeabi_idivmod>:
 8000448:	2900      	cmp	r1, #0
 800044a:	d0f8      	beq.n	800043e <__divsi3+0x1c2>
 800044c:	e716      	b.n	800027c <__divsi3>
 800044e:	4770      	bx	lr

08000450 <__aeabi_idiv0>:
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_cdrcmple>:
 8000454:	4684      	mov	ip, r0
 8000456:	0010      	movs	r0, r2
 8000458:	4662      	mov	r2, ip
 800045a:	468c      	mov	ip, r1
 800045c:	0019      	movs	r1, r3
 800045e:	4663      	mov	r3, ip
 8000460:	e000      	b.n	8000464 <__aeabi_cdcmpeq>
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__aeabi_cdcmpeq>:
 8000464:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000466:	f001 fa81 	bl	800196c <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	d401      	bmi.n	8000472 <__aeabi_cdcmpeq+0xe>
 800046e:	2100      	movs	r1, #0
 8000470:	42c8      	cmn	r0, r1
 8000472:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000474 <__aeabi_dcmpeq>:
 8000474:	b510      	push	{r4, lr}
 8000476:	f001 f9d1 	bl	800181c <__eqdf2>
 800047a:	4240      	negs	r0, r0
 800047c:	3001      	adds	r0, #1
 800047e:	bd10      	pop	{r4, pc}

08000480 <__aeabi_dcmplt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fa73 	bl	800196c <__ledf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	db01      	blt.n	800048e <__aeabi_dcmplt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmple>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fa69 	bl	800196c <__ledf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	dd01      	ble.n	80004a2 <__aeabi_dcmple+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_dcmpgt>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f001 f9f9 	bl	80018a0 <__gedf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	dc01      	bgt.n	80004b6 <__aeabi_dcmpgt+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)

080004bc <__aeabi_dcmpge>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f001 f9ef 	bl	80018a0 <__gedf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	da01      	bge.n	80004ca <__aeabi_dcmpge+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			; (mov r8, r8)

080004d0 <__aeabi_cfrcmple>:
 80004d0:	4684      	mov	ip, r0
 80004d2:	0008      	movs	r0, r1
 80004d4:	4661      	mov	r1, ip
 80004d6:	e7ff      	b.n	80004d8 <__aeabi_cfcmpeq>

080004d8 <__aeabi_cfcmpeq>:
 80004d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004da:	f000 fae9 	bl	8000ab0 <__lesf2>
 80004de:	2800      	cmp	r0, #0
 80004e0:	d401      	bmi.n	80004e6 <__aeabi_cfcmpeq+0xe>
 80004e2:	2100      	movs	r1, #0
 80004e4:	42c8      	cmn	r0, r1
 80004e6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004e8 <__aeabi_fcmpeq>:
 80004e8:	b510      	push	{r4, lr}
 80004ea:	f000 fa75 	bl	80009d8 <__eqsf2>
 80004ee:	4240      	negs	r0, r0
 80004f0:	3001      	adds	r0, #1
 80004f2:	bd10      	pop	{r4, pc}

080004f4 <__aeabi_fcmplt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fadb 	bl	8000ab0 <__lesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	db01      	blt.n	8000502 <__aeabi_fcmplt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmple>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fad1 	bl	8000ab0 <__lesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	dd01      	ble.n	8000516 <__aeabi_fcmple+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_fcmpgt>:
 800051c:	b510      	push	{r4, lr}
 800051e:	f000 fa81 	bl	8000a24 <__gesf2>
 8000522:	2800      	cmp	r0, #0
 8000524:	dc01      	bgt.n	800052a <__aeabi_fcmpgt+0xe>
 8000526:	2000      	movs	r0, #0
 8000528:	bd10      	pop	{r4, pc}
 800052a:	2001      	movs	r0, #1
 800052c:	bd10      	pop	{r4, pc}
 800052e:	46c0      	nop			; (mov r8, r8)

08000530 <__aeabi_fcmpge>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fa77 	bl	8000a24 <__gesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	da01      	bge.n	800053e <__aeabi_fcmpge+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			; (mov r8, r8)

08000544 <__aeabi_uldivmod>:
 8000544:	2b00      	cmp	r3, #0
 8000546:	d111      	bne.n	800056c <__aeabi_uldivmod+0x28>
 8000548:	2a00      	cmp	r2, #0
 800054a:	d10f      	bne.n	800056c <__aeabi_uldivmod+0x28>
 800054c:	2900      	cmp	r1, #0
 800054e:	d100      	bne.n	8000552 <__aeabi_uldivmod+0xe>
 8000550:	2800      	cmp	r0, #0
 8000552:	d002      	beq.n	800055a <__aeabi_uldivmod+0x16>
 8000554:	2100      	movs	r1, #0
 8000556:	43c9      	mvns	r1, r1
 8000558:	0008      	movs	r0, r1
 800055a:	b407      	push	{r0, r1, r2}
 800055c:	4802      	ldr	r0, [pc, #8]	; (8000568 <__aeabi_uldivmod+0x24>)
 800055e:	a102      	add	r1, pc, #8	; (adr r1, 8000568 <__aeabi_uldivmod+0x24>)
 8000560:	1840      	adds	r0, r0, r1
 8000562:	9002      	str	r0, [sp, #8]
 8000564:	bd03      	pop	{r0, r1, pc}
 8000566:	46c0      	nop			; (mov r8, r8)
 8000568:	fffffee9 	.word	0xfffffee9
 800056c:	b403      	push	{r0, r1}
 800056e:	4668      	mov	r0, sp
 8000570:	b501      	push	{r0, lr}
 8000572:	9802      	ldr	r0, [sp, #8]
 8000574:	f000 f84c 	bl	8000610 <__udivmoddi4>
 8000578:	9b01      	ldr	r3, [sp, #4]
 800057a:	469e      	mov	lr, r3
 800057c:	b002      	add	sp, #8
 800057e:	bc0c      	pop	{r2, r3}
 8000580:	4770      	bx	lr
 8000582:	46c0      	nop			; (mov r8, r8)

08000584 <__aeabi_lmul>:
 8000584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000586:	46ce      	mov	lr, r9
 8000588:	4647      	mov	r7, r8
 800058a:	b580      	push	{r7, lr}
 800058c:	0007      	movs	r7, r0
 800058e:	4699      	mov	r9, r3
 8000590:	0c3b      	lsrs	r3, r7, #16
 8000592:	469c      	mov	ip, r3
 8000594:	0413      	lsls	r3, r2, #16
 8000596:	0c1b      	lsrs	r3, r3, #16
 8000598:	001d      	movs	r5, r3
 800059a:	000e      	movs	r6, r1
 800059c:	4661      	mov	r1, ip
 800059e:	0400      	lsls	r0, r0, #16
 80005a0:	0c14      	lsrs	r4, r2, #16
 80005a2:	0c00      	lsrs	r0, r0, #16
 80005a4:	4345      	muls	r5, r0
 80005a6:	434b      	muls	r3, r1
 80005a8:	4360      	muls	r0, r4
 80005aa:	4361      	muls	r1, r4
 80005ac:	18c0      	adds	r0, r0, r3
 80005ae:	0c2c      	lsrs	r4, r5, #16
 80005b0:	1820      	adds	r0, r4, r0
 80005b2:	468c      	mov	ip, r1
 80005b4:	4283      	cmp	r3, r0
 80005b6:	d903      	bls.n	80005c0 <__aeabi_lmul+0x3c>
 80005b8:	2380      	movs	r3, #128	; 0x80
 80005ba:	025b      	lsls	r3, r3, #9
 80005bc:	4698      	mov	r8, r3
 80005be:	44c4      	add	ip, r8
 80005c0:	4649      	mov	r1, r9
 80005c2:	4379      	muls	r1, r7
 80005c4:	4372      	muls	r2, r6
 80005c6:	0c03      	lsrs	r3, r0, #16
 80005c8:	4463      	add	r3, ip
 80005ca:	042d      	lsls	r5, r5, #16
 80005cc:	0c2d      	lsrs	r5, r5, #16
 80005ce:	18c9      	adds	r1, r1, r3
 80005d0:	0400      	lsls	r0, r0, #16
 80005d2:	1940      	adds	r0, r0, r5
 80005d4:	1889      	adds	r1, r1, r2
 80005d6:	bcc0      	pop	{r6, r7}
 80005d8:	46b9      	mov	r9, r7
 80005da:	46b0      	mov	r8, r6
 80005dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__aeabi_f2uiz>:
 80005e0:	219e      	movs	r1, #158	; 0x9e
 80005e2:	b510      	push	{r4, lr}
 80005e4:	05c9      	lsls	r1, r1, #23
 80005e6:	1c04      	adds	r4, r0, #0
 80005e8:	f7ff ffa2 	bl	8000530 <__aeabi_fcmpge>
 80005ec:	2800      	cmp	r0, #0
 80005ee:	d103      	bne.n	80005f8 <__aeabi_f2uiz+0x18>
 80005f0:	1c20      	adds	r0, r4, #0
 80005f2:	f000 fd75 	bl	80010e0 <__aeabi_f2iz>
 80005f6:	bd10      	pop	{r4, pc}
 80005f8:	219e      	movs	r1, #158	; 0x9e
 80005fa:	1c20      	adds	r0, r4, #0
 80005fc:	05c9      	lsls	r1, r1, #23
 80005fe:	f000 fbc1 	bl	8000d84 <__aeabi_fsub>
 8000602:	f000 fd6d 	bl	80010e0 <__aeabi_f2iz>
 8000606:	2380      	movs	r3, #128	; 0x80
 8000608:	061b      	lsls	r3, r3, #24
 800060a:	469c      	mov	ip, r3
 800060c:	4460      	add	r0, ip
 800060e:	e7f2      	b.n	80005f6 <__aeabi_f2uiz+0x16>

08000610 <__udivmoddi4>:
 8000610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000612:	4657      	mov	r7, sl
 8000614:	464e      	mov	r6, r9
 8000616:	4645      	mov	r5, r8
 8000618:	46de      	mov	lr, fp
 800061a:	b5e0      	push	{r5, r6, r7, lr}
 800061c:	0004      	movs	r4, r0
 800061e:	000d      	movs	r5, r1
 8000620:	4692      	mov	sl, r2
 8000622:	4699      	mov	r9, r3
 8000624:	b083      	sub	sp, #12
 8000626:	428b      	cmp	r3, r1
 8000628:	d830      	bhi.n	800068c <__udivmoddi4+0x7c>
 800062a:	d02d      	beq.n	8000688 <__udivmoddi4+0x78>
 800062c:	4649      	mov	r1, r9
 800062e:	4650      	mov	r0, sl
 8000630:	f001 fa9c 	bl	8001b6c <__clzdi2>
 8000634:	0029      	movs	r1, r5
 8000636:	0006      	movs	r6, r0
 8000638:	0020      	movs	r0, r4
 800063a:	f001 fa97 	bl	8001b6c <__clzdi2>
 800063e:	1a33      	subs	r3, r6, r0
 8000640:	4698      	mov	r8, r3
 8000642:	3b20      	subs	r3, #32
 8000644:	469b      	mov	fp, r3
 8000646:	d433      	bmi.n	80006b0 <__udivmoddi4+0xa0>
 8000648:	465a      	mov	r2, fp
 800064a:	4653      	mov	r3, sl
 800064c:	4093      	lsls	r3, r2
 800064e:	4642      	mov	r2, r8
 8000650:	001f      	movs	r7, r3
 8000652:	4653      	mov	r3, sl
 8000654:	4093      	lsls	r3, r2
 8000656:	001e      	movs	r6, r3
 8000658:	42af      	cmp	r7, r5
 800065a:	d83a      	bhi.n	80006d2 <__udivmoddi4+0xc2>
 800065c:	42af      	cmp	r7, r5
 800065e:	d100      	bne.n	8000662 <__udivmoddi4+0x52>
 8000660:	e078      	b.n	8000754 <__udivmoddi4+0x144>
 8000662:	465b      	mov	r3, fp
 8000664:	1ba4      	subs	r4, r4, r6
 8000666:	41bd      	sbcs	r5, r7
 8000668:	2b00      	cmp	r3, #0
 800066a:	da00      	bge.n	800066e <__udivmoddi4+0x5e>
 800066c:	e075      	b.n	800075a <__udivmoddi4+0x14a>
 800066e:	2200      	movs	r2, #0
 8000670:	2300      	movs	r3, #0
 8000672:	9200      	str	r2, [sp, #0]
 8000674:	9301      	str	r3, [sp, #4]
 8000676:	2301      	movs	r3, #1
 8000678:	465a      	mov	r2, fp
 800067a:	4093      	lsls	r3, r2
 800067c:	9301      	str	r3, [sp, #4]
 800067e:	2301      	movs	r3, #1
 8000680:	4642      	mov	r2, r8
 8000682:	4093      	lsls	r3, r2
 8000684:	9300      	str	r3, [sp, #0]
 8000686:	e028      	b.n	80006da <__udivmoddi4+0xca>
 8000688:	4282      	cmp	r2, r0
 800068a:	d9cf      	bls.n	800062c <__udivmoddi4+0x1c>
 800068c:	2200      	movs	r2, #0
 800068e:	2300      	movs	r3, #0
 8000690:	9200      	str	r2, [sp, #0]
 8000692:	9301      	str	r3, [sp, #4]
 8000694:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <__udivmoddi4+0x8e>
 800069a:	601c      	str	r4, [r3, #0]
 800069c:	605d      	str	r5, [r3, #4]
 800069e:	9800      	ldr	r0, [sp, #0]
 80006a0:	9901      	ldr	r1, [sp, #4]
 80006a2:	b003      	add	sp, #12
 80006a4:	bcf0      	pop	{r4, r5, r6, r7}
 80006a6:	46bb      	mov	fp, r7
 80006a8:	46b2      	mov	sl, r6
 80006aa:	46a9      	mov	r9, r5
 80006ac:	46a0      	mov	r8, r4
 80006ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006b0:	4642      	mov	r2, r8
 80006b2:	2320      	movs	r3, #32
 80006b4:	1a9b      	subs	r3, r3, r2
 80006b6:	4652      	mov	r2, sl
 80006b8:	40da      	lsrs	r2, r3
 80006ba:	4641      	mov	r1, r8
 80006bc:	0013      	movs	r3, r2
 80006be:	464a      	mov	r2, r9
 80006c0:	408a      	lsls	r2, r1
 80006c2:	0017      	movs	r7, r2
 80006c4:	4642      	mov	r2, r8
 80006c6:	431f      	orrs	r7, r3
 80006c8:	4653      	mov	r3, sl
 80006ca:	4093      	lsls	r3, r2
 80006cc:	001e      	movs	r6, r3
 80006ce:	42af      	cmp	r7, r5
 80006d0:	d9c4      	bls.n	800065c <__udivmoddi4+0x4c>
 80006d2:	2200      	movs	r2, #0
 80006d4:	2300      	movs	r3, #0
 80006d6:	9200      	str	r2, [sp, #0]
 80006d8:	9301      	str	r3, [sp, #4]
 80006da:	4643      	mov	r3, r8
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d0d9      	beq.n	8000694 <__udivmoddi4+0x84>
 80006e0:	07fb      	lsls	r3, r7, #31
 80006e2:	0872      	lsrs	r2, r6, #1
 80006e4:	431a      	orrs	r2, r3
 80006e6:	4646      	mov	r6, r8
 80006e8:	087b      	lsrs	r3, r7, #1
 80006ea:	e00e      	b.n	800070a <__udivmoddi4+0xfa>
 80006ec:	42ab      	cmp	r3, r5
 80006ee:	d101      	bne.n	80006f4 <__udivmoddi4+0xe4>
 80006f0:	42a2      	cmp	r2, r4
 80006f2:	d80c      	bhi.n	800070e <__udivmoddi4+0xfe>
 80006f4:	1aa4      	subs	r4, r4, r2
 80006f6:	419d      	sbcs	r5, r3
 80006f8:	2001      	movs	r0, #1
 80006fa:	1924      	adds	r4, r4, r4
 80006fc:	416d      	adcs	r5, r5
 80006fe:	2100      	movs	r1, #0
 8000700:	3e01      	subs	r6, #1
 8000702:	1824      	adds	r4, r4, r0
 8000704:	414d      	adcs	r5, r1
 8000706:	2e00      	cmp	r6, #0
 8000708:	d006      	beq.n	8000718 <__udivmoddi4+0x108>
 800070a:	42ab      	cmp	r3, r5
 800070c:	d9ee      	bls.n	80006ec <__udivmoddi4+0xdc>
 800070e:	3e01      	subs	r6, #1
 8000710:	1924      	adds	r4, r4, r4
 8000712:	416d      	adcs	r5, r5
 8000714:	2e00      	cmp	r6, #0
 8000716:	d1f8      	bne.n	800070a <__udivmoddi4+0xfa>
 8000718:	9800      	ldr	r0, [sp, #0]
 800071a:	9901      	ldr	r1, [sp, #4]
 800071c:	465b      	mov	r3, fp
 800071e:	1900      	adds	r0, r0, r4
 8000720:	4169      	adcs	r1, r5
 8000722:	2b00      	cmp	r3, #0
 8000724:	db24      	blt.n	8000770 <__udivmoddi4+0x160>
 8000726:	002b      	movs	r3, r5
 8000728:	465a      	mov	r2, fp
 800072a:	4644      	mov	r4, r8
 800072c:	40d3      	lsrs	r3, r2
 800072e:	002a      	movs	r2, r5
 8000730:	40e2      	lsrs	r2, r4
 8000732:	001c      	movs	r4, r3
 8000734:	465b      	mov	r3, fp
 8000736:	0015      	movs	r5, r2
 8000738:	2b00      	cmp	r3, #0
 800073a:	db2a      	blt.n	8000792 <__udivmoddi4+0x182>
 800073c:	0026      	movs	r6, r4
 800073e:	409e      	lsls	r6, r3
 8000740:	0033      	movs	r3, r6
 8000742:	0026      	movs	r6, r4
 8000744:	4647      	mov	r7, r8
 8000746:	40be      	lsls	r6, r7
 8000748:	0032      	movs	r2, r6
 800074a:	1a80      	subs	r0, r0, r2
 800074c:	4199      	sbcs	r1, r3
 800074e:	9000      	str	r0, [sp, #0]
 8000750:	9101      	str	r1, [sp, #4]
 8000752:	e79f      	b.n	8000694 <__udivmoddi4+0x84>
 8000754:	42a3      	cmp	r3, r4
 8000756:	d8bc      	bhi.n	80006d2 <__udivmoddi4+0xc2>
 8000758:	e783      	b.n	8000662 <__udivmoddi4+0x52>
 800075a:	4642      	mov	r2, r8
 800075c:	2320      	movs	r3, #32
 800075e:	2100      	movs	r1, #0
 8000760:	1a9b      	subs	r3, r3, r2
 8000762:	2200      	movs	r2, #0
 8000764:	9100      	str	r1, [sp, #0]
 8000766:	9201      	str	r2, [sp, #4]
 8000768:	2201      	movs	r2, #1
 800076a:	40da      	lsrs	r2, r3
 800076c:	9201      	str	r2, [sp, #4]
 800076e:	e786      	b.n	800067e <__udivmoddi4+0x6e>
 8000770:	4642      	mov	r2, r8
 8000772:	2320      	movs	r3, #32
 8000774:	1a9b      	subs	r3, r3, r2
 8000776:	002a      	movs	r2, r5
 8000778:	4646      	mov	r6, r8
 800077a:	409a      	lsls	r2, r3
 800077c:	0023      	movs	r3, r4
 800077e:	40f3      	lsrs	r3, r6
 8000780:	4644      	mov	r4, r8
 8000782:	4313      	orrs	r3, r2
 8000784:	002a      	movs	r2, r5
 8000786:	40e2      	lsrs	r2, r4
 8000788:	001c      	movs	r4, r3
 800078a:	465b      	mov	r3, fp
 800078c:	0015      	movs	r5, r2
 800078e:	2b00      	cmp	r3, #0
 8000790:	dad4      	bge.n	800073c <__udivmoddi4+0x12c>
 8000792:	4642      	mov	r2, r8
 8000794:	002f      	movs	r7, r5
 8000796:	2320      	movs	r3, #32
 8000798:	0026      	movs	r6, r4
 800079a:	4097      	lsls	r7, r2
 800079c:	1a9b      	subs	r3, r3, r2
 800079e:	40de      	lsrs	r6, r3
 80007a0:	003b      	movs	r3, r7
 80007a2:	4333      	orrs	r3, r6
 80007a4:	e7cd      	b.n	8000742 <__udivmoddi4+0x132>
 80007a6:	46c0      	nop			; (mov r8, r8)

080007a8 <__aeabi_fdiv>:
 80007a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007aa:	464f      	mov	r7, r9
 80007ac:	4646      	mov	r6, r8
 80007ae:	46d6      	mov	lr, sl
 80007b0:	0245      	lsls	r5, r0, #9
 80007b2:	b5c0      	push	{r6, r7, lr}
 80007b4:	0047      	lsls	r7, r0, #1
 80007b6:	1c0c      	adds	r4, r1, #0
 80007b8:	0a6d      	lsrs	r5, r5, #9
 80007ba:	0e3f      	lsrs	r7, r7, #24
 80007bc:	0fc6      	lsrs	r6, r0, #31
 80007be:	2f00      	cmp	r7, #0
 80007c0:	d100      	bne.n	80007c4 <__aeabi_fdiv+0x1c>
 80007c2:	e070      	b.n	80008a6 <__aeabi_fdiv+0xfe>
 80007c4:	2fff      	cmp	r7, #255	; 0xff
 80007c6:	d100      	bne.n	80007ca <__aeabi_fdiv+0x22>
 80007c8:	e075      	b.n	80008b6 <__aeabi_fdiv+0x10e>
 80007ca:	00eb      	lsls	r3, r5, #3
 80007cc:	2580      	movs	r5, #128	; 0x80
 80007ce:	04ed      	lsls	r5, r5, #19
 80007d0:	431d      	orrs	r5, r3
 80007d2:	2300      	movs	r3, #0
 80007d4:	4699      	mov	r9, r3
 80007d6:	469a      	mov	sl, r3
 80007d8:	3f7f      	subs	r7, #127	; 0x7f
 80007da:	0260      	lsls	r0, r4, #9
 80007dc:	0a43      	lsrs	r3, r0, #9
 80007de:	4698      	mov	r8, r3
 80007e0:	0063      	lsls	r3, r4, #1
 80007e2:	0e1b      	lsrs	r3, r3, #24
 80007e4:	0fe4      	lsrs	r4, r4, #31
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d04e      	beq.n	8000888 <__aeabi_fdiv+0xe0>
 80007ea:	2bff      	cmp	r3, #255	; 0xff
 80007ec:	d046      	beq.n	800087c <__aeabi_fdiv+0xd4>
 80007ee:	4642      	mov	r2, r8
 80007f0:	00d0      	lsls	r0, r2, #3
 80007f2:	2280      	movs	r2, #128	; 0x80
 80007f4:	04d2      	lsls	r2, r2, #19
 80007f6:	4302      	orrs	r2, r0
 80007f8:	4690      	mov	r8, r2
 80007fa:	2200      	movs	r2, #0
 80007fc:	3b7f      	subs	r3, #127	; 0x7f
 80007fe:	0031      	movs	r1, r6
 8000800:	1aff      	subs	r7, r7, r3
 8000802:	464b      	mov	r3, r9
 8000804:	4061      	eors	r1, r4
 8000806:	b2c9      	uxtb	r1, r1
 8000808:	4313      	orrs	r3, r2
 800080a:	2b0f      	cmp	r3, #15
 800080c:	d900      	bls.n	8000810 <__aeabi_fdiv+0x68>
 800080e:	e0b5      	b.n	800097c <__aeabi_fdiv+0x1d4>
 8000810:	486e      	ldr	r0, [pc, #440]	; (80009cc <__aeabi_fdiv+0x224>)
 8000812:	009b      	lsls	r3, r3, #2
 8000814:	58c3      	ldr	r3, [r0, r3]
 8000816:	469f      	mov	pc, r3
 8000818:	2300      	movs	r3, #0
 800081a:	4698      	mov	r8, r3
 800081c:	0026      	movs	r6, r4
 800081e:	4645      	mov	r5, r8
 8000820:	4692      	mov	sl, r2
 8000822:	4653      	mov	r3, sl
 8000824:	2b02      	cmp	r3, #2
 8000826:	d100      	bne.n	800082a <__aeabi_fdiv+0x82>
 8000828:	e089      	b.n	800093e <__aeabi_fdiv+0x196>
 800082a:	2b03      	cmp	r3, #3
 800082c:	d100      	bne.n	8000830 <__aeabi_fdiv+0x88>
 800082e:	e09e      	b.n	800096e <__aeabi_fdiv+0x1c6>
 8000830:	2b01      	cmp	r3, #1
 8000832:	d018      	beq.n	8000866 <__aeabi_fdiv+0xbe>
 8000834:	003b      	movs	r3, r7
 8000836:	337f      	adds	r3, #127	; 0x7f
 8000838:	2b00      	cmp	r3, #0
 800083a:	dd69      	ble.n	8000910 <__aeabi_fdiv+0x168>
 800083c:	076a      	lsls	r2, r5, #29
 800083e:	d004      	beq.n	800084a <__aeabi_fdiv+0xa2>
 8000840:	220f      	movs	r2, #15
 8000842:	402a      	ands	r2, r5
 8000844:	2a04      	cmp	r2, #4
 8000846:	d000      	beq.n	800084a <__aeabi_fdiv+0xa2>
 8000848:	3504      	adds	r5, #4
 800084a:	012a      	lsls	r2, r5, #4
 800084c:	d503      	bpl.n	8000856 <__aeabi_fdiv+0xae>
 800084e:	4b60      	ldr	r3, [pc, #384]	; (80009d0 <__aeabi_fdiv+0x228>)
 8000850:	401d      	ands	r5, r3
 8000852:	003b      	movs	r3, r7
 8000854:	3380      	adds	r3, #128	; 0x80
 8000856:	2bfe      	cmp	r3, #254	; 0xfe
 8000858:	dd00      	ble.n	800085c <__aeabi_fdiv+0xb4>
 800085a:	e070      	b.n	800093e <__aeabi_fdiv+0x196>
 800085c:	01ad      	lsls	r5, r5, #6
 800085e:	0a6d      	lsrs	r5, r5, #9
 8000860:	b2d8      	uxtb	r0, r3
 8000862:	e002      	b.n	800086a <__aeabi_fdiv+0xc2>
 8000864:	000e      	movs	r6, r1
 8000866:	2000      	movs	r0, #0
 8000868:	2500      	movs	r5, #0
 800086a:	05c0      	lsls	r0, r0, #23
 800086c:	4328      	orrs	r0, r5
 800086e:	07f6      	lsls	r6, r6, #31
 8000870:	4330      	orrs	r0, r6
 8000872:	bce0      	pop	{r5, r6, r7}
 8000874:	46ba      	mov	sl, r7
 8000876:	46b1      	mov	r9, r6
 8000878:	46a8      	mov	r8, r5
 800087a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800087c:	4643      	mov	r3, r8
 800087e:	2b00      	cmp	r3, #0
 8000880:	d13f      	bne.n	8000902 <__aeabi_fdiv+0x15a>
 8000882:	2202      	movs	r2, #2
 8000884:	3fff      	subs	r7, #255	; 0xff
 8000886:	e003      	b.n	8000890 <__aeabi_fdiv+0xe8>
 8000888:	4643      	mov	r3, r8
 800088a:	2b00      	cmp	r3, #0
 800088c:	d12d      	bne.n	80008ea <__aeabi_fdiv+0x142>
 800088e:	2201      	movs	r2, #1
 8000890:	0031      	movs	r1, r6
 8000892:	464b      	mov	r3, r9
 8000894:	4061      	eors	r1, r4
 8000896:	b2c9      	uxtb	r1, r1
 8000898:	4313      	orrs	r3, r2
 800089a:	2b0f      	cmp	r3, #15
 800089c:	d834      	bhi.n	8000908 <__aeabi_fdiv+0x160>
 800089e:	484d      	ldr	r0, [pc, #308]	; (80009d4 <__aeabi_fdiv+0x22c>)
 80008a0:	009b      	lsls	r3, r3, #2
 80008a2:	58c3      	ldr	r3, [r0, r3]
 80008a4:	469f      	mov	pc, r3
 80008a6:	2d00      	cmp	r5, #0
 80008a8:	d113      	bne.n	80008d2 <__aeabi_fdiv+0x12a>
 80008aa:	2304      	movs	r3, #4
 80008ac:	4699      	mov	r9, r3
 80008ae:	3b03      	subs	r3, #3
 80008b0:	2700      	movs	r7, #0
 80008b2:	469a      	mov	sl, r3
 80008b4:	e791      	b.n	80007da <__aeabi_fdiv+0x32>
 80008b6:	2d00      	cmp	r5, #0
 80008b8:	d105      	bne.n	80008c6 <__aeabi_fdiv+0x11e>
 80008ba:	2308      	movs	r3, #8
 80008bc:	4699      	mov	r9, r3
 80008be:	3b06      	subs	r3, #6
 80008c0:	27ff      	movs	r7, #255	; 0xff
 80008c2:	469a      	mov	sl, r3
 80008c4:	e789      	b.n	80007da <__aeabi_fdiv+0x32>
 80008c6:	230c      	movs	r3, #12
 80008c8:	4699      	mov	r9, r3
 80008ca:	3b09      	subs	r3, #9
 80008cc:	27ff      	movs	r7, #255	; 0xff
 80008ce:	469a      	mov	sl, r3
 80008d0:	e783      	b.n	80007da <__aeabi_fdiv+0x32>
 80008d2:	0028      	movs	r0, r5
 80008d4:	f001 f92c 	bl	8001b30 <__clzsi2>
 80008d8:	2776      	movs	r7, #118	; 0x76
 80008da:	1f43      	subs	r3, r0, #5
 80008dc:	409d      	lsls	r5, r3
 80008de:	2300      	movs	r3, #0
 80008e0:	427f      	negs	r7, r7
 80008e2:	4699      	mov	r9, r3
 80008e4:	469a      	mov	sl, r3
 80008e6:	1a3f      	subs	r7, r7, r0
 80008e8:	e777      	b.n	80007da <__aeabi_fdiv+0x32>
 80008ea:	4640      	mov	r0, r8
 80008ec:	f001 f920 	bl	8001b30 <__clzsi2>
 80008f0:	4642      	mov	r2, r8
 80008f2:	1f43      	subs	r3, r0, #5
 80008f4:	409a      	lsls	r2, r3
 80008f6:	2376      	movs	r3, #118	; 0x76
 80008f8:	425b      	negs	r3, r3
 80008fa:	4690      	mov	r8, r2
 80008fc:	1a1b      	subs	r3, r3, r0
 80008fe:	2200      	movs	r2, #0
 8000900:	e77d      	b.n	80007fe <__aeabi_fdiv+0x56>
 8000902:	23ff      	movs	r3, #255	; 0xff
 8000904:	2203      	movs	r2, #3
 8000906:	e77a      	b.n	80007fe <__aeabi_fdiv+0x56>
 8000908:	000e      	movs	r6, r1
 800090a:	20ff      	movs	r0, #255	; 0xff
 800090c:	2500      	movs	r5, #0
 800090e:	e7ac      	b.n	800086a <__aeabi_fdiv+0xc2>
 8000910:	2001      	movs	r0, #1
 8000912:	1ac0      	subs	r0, r0, r3
 8000914:	281b      	cmp	r0, #27
 8000916:	dca6      	bgt.n	8000866 <__aeabi_fdiv+0xbe>
 8000918:	379e      	adds	r7, #158	; 0x9e
 800091a:	002a      	movs	r2, r5
 800091c:	40bd      	lsls	r5, r7
 800091e:	40c2      	lsrs	r2, r0
 8000920:	1e6b      	subs	r3, r5, #1
 8000922:	419d      	sbcs	r5, r3
 8000924:	4315      	orrs	r5, r2
 8000926:	076b      	lsls	r3, r5, #29
 8000928:	d004      	beq.n	8000934 <__aeabi_fdiv+0x18c>
 800092a:	230f      	movs	r3, #15
 800092c:	402b      	ands	r3, r5
 800092e:	2b04      	cmp	r3, #4
 8000930:	d000      	beq.n	8000934 <__aeabi_fdiv+0x18c>
 8000932:	3504      	adds	r5, #4
 8000934:	016b      	lsls	r3, r5, #5
 8000936:	d544      	bpl.n	80009c2 <__aeabi_fdiv+0x21a>
 8000938:	2001      	movs	r0, #1
 800093a:	2500      	movs	r5, #0
 800093c:	e795      	b.n	800086a <__aeabi_fdiv+0xc2>
 800093e:	20ff      	movs	r0, #255	; 0xff
 8000940:	2500      	movs	r5, #0
 8000942:	e792      	b.n	800086a <__aeabi_fdiv+0xc2>
 8000944:	2580      	movs	r5, #128	; 0x80
 8000946:	2600      	movs	r6, #0
 8000948:	20ff      	movs	r0, #255	; 0xff
 800094a:	03ed      	lsls	r5, r5, #15
 800094c:	e78d      	b.n	800086a <__aeabi_fdiv+0xc2>
 800094e:	2300      	movs	r3, #0
 8000950:	4698      	mov	r8, r3
 8000952:	2080      	movs	r0, #128	; 0x80
 8000954:	03c0      	lsls	r0, r0, #15
 8000956:	4205      	tst	r5, r0
 8000958:	d009      	beq.n	800096e <__aeabi_fdiv+0x1c6>
 800095a:	4643      	mov	r3, r8
 800095c:	4203      	tst	r3, r0
 800095e:	d106      	bne.n	800096e <__aeabi_fdiv+0x1c6>
 8000960:	4645      	mov	r5, r8
 8000962:	4305      	orrs	r5, r0
 8000964:	026d      	lsls	r5, r5, #9
 8000966:	0026      	movs	r6, r4
 8000968:	20ff      	movs	r0, #255	; 0xff
 800096a:	0a6d      	lsrs	r5, r5, #9
 800096c:	e77d      	b.n	800086a <__aeabi_fdiv+0xc2>
 800096e:	2080      	movs	r0, #128	; 0x80
 8000970:	03c0      	lsls	r0, r0, #15
 8000972:	4305      	orrs	r5, r0
 8000974:	026d      	lsls	r5, r5, #9
 8000976:	20ff      	movs	r0, #255	; 0xff
 8000978:	0a6d      	lsrs	r5, r5, #9
 800097a:	e776      	b.n	800086a <__aeabi_fdiv+0xc2>
 800097c:	4642      	mov	r2, r8
 800097e:	016b      	lsls	r3, r5, #5
 8000980:	0150      	lsls	r0, r2, #5
 8000982:	4283      	cmp	r3, r0
 8000984:	d219      	bcs.n	80009ba <__aeabi_fdiv+0x212>
 8000986:	221b      	movs	r2, #27
 8000988:	2500      	movs	r5, #0
 800098a:	3f01      	subs	r7, #1
 800098c:	2601      	movs	r6, #1
 800098e:	001c      	movs	r4, r3
 8000990:	006d      	lsls	r5, r5, #1
 8000992:	005b      	lsls	r3, r3, #1
 8000994:	2c00      	cmp	r4, #0
 8000996:	db01      	blt.n	800099c <__aeabi_fdiv+0x1f4>
 8000998:	4298      	cmp	r0, r3
 800099a:	d801      	bhi.n	80009a0 <__aeabi_fdiv+0x1f8>
 800099c:	1a1b      	subs	r3, r3, r0
 800099e:	4335      	orrs	r5, r6
 80009a0:	3a01      	subs	r2, #1
 80009a2:	2a00      	cmp	r2, #0
 80009a4:	d1f3      	bne.n	800098e <__aeabi_fdiv+0x1e6>
 80009a6:	1e5a      	subs	r2, r3, #1
 80009a8:	4193      	sbcs	r3, r2
 80009aa:	431d      	orrs	r5, r3
 80009ac:	003b      	movs	r3, r7
 80009ae:	337f      	adds	r3, #127	; 0x7f
 80009b0:	000e      	movs	r6, r1
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	dd00      	ble.n	80009b8 <__aeabi_fdiv+0x210>
 80009b6:	e741      	b.n	800083c <__aeabi_fdiv+0x94>
 80009b8:	e7aa      	b.n	8000910 <__aeabi_fdiv+0x168>
 80009ba:	221a      	movs	r2, #26
 80009bc:	2501      	movs	r5, #1
 80009be:	1a1b      	subs	r3, r3, r0
 80009c0:	e7e4      	b.n	800098c <__aeabi_fdiv+0x1e4>
 80009c2:	01ad      	lsls	r5, r5, #6
 80009c4:	2000      	movs	r0, #0
 80009c6:	0a6d      	lsrs	r5, r5, #9
 80009c8:	e74f      	b.n	800086a <__aeabi_fdiv+0xc2>
 80009ca:	46c0      	nop			; (mov r8, r8)
 80009cc:	0800ebd0 	.word	0x0800ebd0
 80009d0:	f7ffffff 	.word	0xf7ffffff
 80009d4:	0800ec10 	.word	0x0800ec10

080009d8 <__eqsf2>:
 80009d8:	b570      	push	{r4, r5, r6, lr}
 80009da:	0042      	lsls	r2, r0, #1
 80009dc:	0245      	lsls	r5, r0, #9
 80009de:	024e      	lsls	r6, r1, #9
 80009e0:	004c      	lsls	r4, r1, #1
 80009e2:	0fc3      	lsrs	r3, r0, #31
 80009e4:	0a6d      	lsrs	r5, r5, #9
 80009e6:	2001      	movs	r0, #1
 80009e8:	0e12      	lsrs	r2, r2, #24
 80009ea:	0a76      	lsrs	r6, r6, #9
 80009ec:	0e24      	lsrs	r4, r4, #24
 80009ee:	0fc9      	lsrs	r1, r1, #31
 80009f0:	2aff      	cmp	r2, #255	; 0xff
 80009f2:	d006      	beq.n	8000a02 <__eqsf2+0x2a>
 80009f4:	2cff      	cmp	r4, #255	; 0xff
 80009f6:	d003      	beq.n	8000a00 <__eqsf2+0x28>
 80009f8:	42a2      	cmp	r2, r4
 80009fa:	d101      	bne.n	8000a00 <__eqsf2+0x28>
 80009fc:	42b5      	cmp	r5, r6
 80009fe:	d006      	beq.n	8000a0e <__eqsf2+0x36>
 8000a00:	bd70      	pop	{r4, r5, r6, pc}
 8000a02:	2d00      	cmp	r5, #0
 8000a04:	d1fc      	bne.n	8000a00 <__eqsf2+0x28>
 8000a06:	2cff      	cmp	r4, #255	; 0xff
 8000a08:	d1fa      	bne.n	8000a00 <__eqsf2+0x28>
 8000a0a:	2e00      	cmp	r6, #0
 8000a0c:	d1f8      	bne.n	8000a00 <__eqsf2+0x28>
 8000a0e:	428b      	cmp	r3, r1
 8000a10:	d006      	beq.n	8000a20 <__eqsf2+0x48>
 8000a12:	2001      	movs	r0, #1
 8000a14:	2a00      	cmp	r2, #0
 8000a16:	d1f3      	bne.n	8000a00 <__eqsf2+0x28>
 8000a18:	0028      	movs	r0, r5
 8000a1a:	1e43      	subs	r3, r0, #1
 8000a1c:	4198      	sbcs	r0, r3
 8000a1e:	e7ef      	b.n	8000a00 <__eqsf2+0x28>
 8000a20:	2000      	movs	r0, #0
 8000a22:	e7ed      	b.n	8000a00 <__eqsf2+0x28>

08000a24 <__gesf2>:
 8000a24:	b570      	push	{r4, r5, r6, lr}
 8000a26:	0042      	lsls	r2, r0, #1
 8000a28:	0245      	lsls	r5, r0, #9
 8000a2a:	024e      	lsls	r6, r1, #9
 8000a2c:	004c      	lsls	r4, r1, #1
 8000a2e:	0fc3      	lsrs	r3, r0, #31
 8000a30:	0a6d      	lsrs	r5, r5, #9
 8000a32:	0e12      	lsrs	r2, r2, #24
 8000a34:	0a76      	lsrs	r6, r6, #9
 8000a36:	0e24      	lsrs	r4, r4, #24
 8000a38:	0fc8      	lsrs	r0, r1, #31
 8000a3a:	2aff      	cmp	r2, #255	; 0xff
 8000a3c:	d01b      	beq.n	8000a76 <__gesf2+0x52>
 8000a3e:	2cff      	cmp	r4, #255	; 0xff
 8000a40:	d00e      	beq.n	8000a60 <__gesf2+0x3c>
 8000a42:	2a00      	cmp	r2, #0
 8000a44:	d11b      	bne.n	8000a7e <__gesf2+0x5a>
 8000a46:	2c00      	cmp	r4, #0
 8000a48:	d101      	bne.n	8000a4e <__gesf2+0x2a>
 8000a4a:	2e00      	cmp	r6, #0
 8000a4c:	d01c      	beq.n	8000a88 <__gesf2+0x64>
 8000a4e:	2d00      	cmp	r5, #0
 8000a50:	d00c      	beq.n	8000a6c <__gesf2+0x48>
 8000a52:	4283      	cmp	r3, r0
 8000a54:	d01c      	beq.n	8000a90 <__gesf2+0x6c>
 8000a56:	2102      	movs	r1, #2
 8000a58:	1e58      	subs	r0, r3, #1
 8000a5a:	4008      	ands	r0, r1
 8000a5c:	3801      	subs	r0, #1
 8000a5e:	bd70      	pop	{r4, r5, r6, pc}
 8000a60:	2e00      	cmp	r6, #0
 8000a62:	d122      	bne.n	8000aaa <__gesf2+0x86>
 8000a64:	2a00      	cmp	r2, #0
 8000a66:	d1f4      	bne.n	8000a52 <__gesf2+0x2e>
 8000a68:	2d00      	cmp	r5, #0
 8000a6a:	d1f2      	bne.n	8000a52 <__gesf2+0x2e>
 8000a6c:	2800      	cmp	r0, #0
 8000a6e:	d1f6      	bne.n	8000a5e <__gesf2+0x3a>
 8000a70:	2001      	movs	r0, #1
 8000a72:	4240      	negs	r0, r0
 8000a74:	e7f3      	b.n	8000a5e <__gesf2+0x3a>
 8000a76:	2d00      	cmp	r5, #0
 8000a78:	d117      	bne.n	8000aaa <__gesf2+0x86>
 8000a7a:	2cff      	cmp	r4, #255	; 0xff
 8000a7c:	d0f0      	beq.n	8000a60 <__gesf2+0x3c>
 8000a7e:	2c00      	cmp	r4, #0
 8000a80:	d1e7      	bne.n	8000a52 <__gesf2+0x2e>
 8000a82:	2e00      	cmp	r6, #0
 8000a84:	d1e5      	bne.n	8000a52 <__gesf2+0x2e>
 8000a86:	e7e6      	b.n	8000a56 <__gesf2+0x32>
 8000a88:	2000      	movs	r0, #0
 8000a8a:	2d00      	cmp	r5, #0
 8000a8c:	d0e7      	beq.n	8000a5e <__gesf2+0x3a>
 8000a8e:	e7e2      	b.n	8000a56 <__gesf2+0x32>
 8000a90:	42a2      	cmp	r2, r4
 8000a92:	dc05      	bgt.n	8000aa0 <__gesf2+0x7c>
 8000a94:	dbea      	blt.n	8000a6c <__gesf2+0x48>
 8000a96:	42b5      	cmp	r5, r6
 8000a98:	d802      	bhi.n	8000aa0 <__gesf2+0x7c>
 8000a9a:	d3e7      	bcc.n	8000a6c <__gesf2+0x48>
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	e7de      	b.n	8000a5e <__gesf2+0x3a>
 8000aa0:	4243      	negs	r3, r0
 8000aa2:	4158      	adcs	r0, r3
 8000aa4:	0040      	lsls	r0, r0, #1
 8000aa6:	3801      	subs	r0, #1
 8000aa8:	e7d9      	b.n	8000a5e <__gesf2+0x3a>
 8000aaa:	2002      	movs	r0, #2
 8000aac:	4240      	negs	r0, r0
 8000aae:	e7d6      	b.n	8000a5e <__gesf2+0x3a>

08000ab0 <__lesf2>:
 8000ab0:	b570      	push	{r4, r5, r6, lr}
 8000ab2:	0042      	lsls	r2, r0, #1
 8000ab4:	0245      	lsls	r5, r0, #9
 8000ab6:	024e      	lsls	r6, r1, #9
 8000ab8:	004c      	lsls	r4, r1, #1
 8000aba:	0fc3      	lsrs	r3, r0, #31
 8000abc:	0a6d      	lsrs	r5, r5, #9
 8000abe:	0e12      	lsrs	r2, r2, #24
 8000ac0:	0a76      	lsrs	r6, r6, #9
 8000ac2:	0e24      	lsrs	r4, r4, #24
 8000ac4:	0fc8      	lsrs	r0, r1, #31
 8000ac6:	2aff      	cmp	r2, #255	; 0xff
 8000ac8:	d00b      	beq.n	8000ae2 <__lesf2+0x32>
 8000aca:	2cff      	cmp	r4, #255	; 0xff
 8000acc:	d00d      	beq.n	8000aea <__lesf2+0x3a>
 8000ace:	2a00      	cmp	r2, #0
 8000ad0:	d11f      	bne.n	8000b12 <__lesf2+0x62>
 8000ad2:	2c00      	cmp	r4, #0
 8000ad4:	d116      	bne.n	8000b04 <__lesf2+0x54>
 8000ad6:	2e00      	cmp	r6, #0
 8000ad8:	d114      	bne.n	8000b04 <__lesf2+0x54>
 8000ada:	2000      	movs	r0, #0
 8000adc:	2d00      	cmp	r5, #0
 8000ade:	d010      	beq.n	8000b02 <__lesf2+0x52>
 8000ae0:	e009      	b.n	8000af6 <__lesf2+0x46>
 8000ae2:	2d00      	cmp	r5, #0
 8000ae4:	d10c      	bne.n	8000b00 <__lesf2+0x50>
 8000ae6:	2cff      	cmp	r4, #255	; 0xff
 8000ae8:	d113      	bne.n	8000b12 <__lesf2+0x62>
 8000aea:	2e00      	cmp	r6, #0
 8000aec:	d108      	bne.n	8000b00 <__lesf2+0x50>
 8000aee:	2a00      	cmp	r2, #0
 8000af0:	d008      	beq.n	8000b04 <__lesf2+0x54>
 8000af2:	4283      	cmp	r3, r0
 8000af4:	d012      	beq.n	8000b1c <__lesf2+0x6c>
 8000af6:	2102      	movs	r1, #2
 8000af8:	1e58      	subs	r0, r3, #1
 8000afa:	4008      	ands	r0, r1
 8000afc:	3801      	subs	r0, #1
 8000afe:	e000      	b.n	8000b02 <__lesf2+0x52>
 8000b00:	2002      	movs	r0, #2
 8000b02:	bd70      	pop	{r4, r5, r6, pc}
 8000b04:	2d00      	cmp	r5, #0
 8000b06:	d1f4      	bne.n	8000af2 <__lesf2+0x42>
 8000b08:	2800      	cmp	r0, #0
 8000b0a:	d1fa      	bne.n	8000b02 <__lesf2+0x52>
 8000b0c:	2001      	movs	r0, #1
 8000b0e:	4240      	negs	r0, r0
 8000b10:	e7f7      	b.n	8000b02 <__lesf2+0x52>
 8000b12:	2c00      	cmp	r4, #0
 8000b14:	d1ed      	bne.n	8000af2 <__lesf2+0x42>
 8000b16:	2e00      	cmp	r6, #0
 8000b18:	d1eb      	bne.n	8000af2 <__lesf2+0x42>
 8000b1a:	e7ec      	b.n	8000af6 <__lesf2+0x46>
 8000b1c:	42a2      	cmp	r2, r4
 8000b1e:	dc05      	bgt.n	8000b2c <__lesf2+0x7c>
 8000b20:	dbf2      	blt.n	8000b08 <__lesf2+0x58>
 8000b22:	42b5      	cmp	r5, r6
 8000b24:	d802      	bhi.n	8000b2c <__lesf2+0x7c>
 8000b26:	d3ef      	bcc.n	8000b08 <__lesf2+0x58>
 8000b28:	2000      	movs	r0, #0
 8000b2a:	e7ea      	b.n	8000b02 <__lesf2+0x52>
 8000b2c:	4243      	negs	r3, r0
 8000b2e:	4158      	adcs	r0, r3
 8000b30:	0040      	lsls	r0, r0, #1
 8000b32:	3801      	subs	r0, #1
 8000b34:	e7e5      	b.n	8000b02 <__lesf2+0x52>
 8000b36:	46c0      	nop			; (mov r8, r8)

08000b38 <__aeabi_fmul>:
 8000b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b3a:	464f      	mov	r7, r9
 8000b3c:	4646      	mov	r6, r8
 8000b3e:	46d6      	mov	lr, sl
 8000b40:	0244      	lsls	r4, r0, #9
 8000b42:	0045      	lsls	r5, r0, #1
 8000b44:	b5c0      	push	{r6, r7, lr}
 8000b46:	0a64      	lsrs	r4, r4, #9
 8000b48:	1c0f      	adds	r7, r1, #0
 8000b4a:	0e2d      	lsrs	r5, r5, #24
 8000b4c:	0fc6      	lsrs	r6, r0, #31
 8000b4e:	2d00      	cmp	r5, #0
 8000b50:	d100      	bne.n	8000b54 <__aeabi_fmul+0x1c>
 8000b52:	e08d      	b.n	8000c70 <__aeabi_fmul+0x138>
 8000b54:	2dff      	cmp	r5, #255	; 0xff
 8000b56:	d100      	bne.n	8000b5a <__aeabi_fmul+0x22>
 8000b58:	e092      	b.n	8000c80 <__aeabi_fmul+0x148>
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	2080      	movs	r0, #128	; 0x80
 8000b5e:	4699      	mov	r9, r3
 8000b60:	469a      	mov	sl, r3
 8000b62:	00e4      	lsls	r4, r4, #3
 8000b64:	04c0      	lsls	r0, r0, #19
 8000b66:	4304      	orrs	r4, r0
 8000b68:	3d7f      	subs	r5, #127	; 0x7f
 8000b6a:	0278      	lsls	r0, r7, #9
 8000b6c:	0a43      	lsrs	r3, r0, #9
 8000b6e:	4698      	mov	r8, r3
 8000b70:	007b      	lsls	r3, r7, #1
 8000b72:	0e1b      	lsrs	r3, r3, #24
 8000b74:	0fff      	lsrs	r7, r7, #31
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d100      	bne.n	8000b7c <__aeabi_fmul+0x44>
 8000b7a:	e070      	b.n	8000c5e <__aeabi_fmul+0x126>
 8000b7c:	2bff      	cmp	r3, #255	; 0xff
 8000b7e:	d100      	bne.n	8000b82 <__aeabi_fmul+0x4a>
 8000b80:	e086      	b.n	8000c90 <__aeabi_fmul+0x158>
 8000b82:	4642      	mov	r2, r8
 8000b84:	00d0      	lsls	r0, r2, #3
 8000b86:	2280      	movs	r2, #128	; 0x80
 8000b88:	3b7f      	subs	r3, #127	; 0x7f
 8000b8a:	18ed      	adds	r5, r5, r3
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	04d2      	lsls	r2, r2, #19
 8000b90:	4302      	orrs	r2, r0
 8000b92:	4690      	mov	r8, r2
 8000b94:	469c      	mov	ip, r3
 8000b96:	0031      	movs	r1, r6
 8000b98:	464b      	mov	r3, r9
 8000b9a:	4079      	eors	r1, r7
 8000b9c:	1c68      	adds	r0, r5, #1
 8000b9e:	2b0f      	cmp	r3, #15
 8000ba0:	d81c      	bhi.n	8000bdc <__aeabi_fmul+0xa4>
 8000ba2:	4a76      	ldr	r2, [pc, #472]	; (8000d7c <__aeabi_fmul+0x244>)
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	58d3      	ldr	r3, [r2, r3]
 8000ba8:	469f      	mov	pc, r3
 8000baa:	0039      	movs	r1, r7
 8000bac:	4644      	mov	r4, r8
 8000bae:	46e2      	mov	sl, ip
 8000bb0:	4653      	mov	r3, sl
 8000bb2:	2b02      	cmp	r3, #2
 8000bb4:	d00f      	beq.n	8000bd6 <__aeabi_fmul+0x9e>
 8000bb6:	2b03      	cmp	r3, #3
 8000bb8:	d100      	bne.n	8000bbc <__aeabi_fmul+0x84>
 8000bba:	e0d7      	b.n	8000d6c <__aeabi_fmul+0x234>
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d137      	bne.n	8000c30 <__aeabi_fmul+0xf8>
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	2400      	movs	r4, #0
 8000bc4:	05c0      	lsls	r0, r0, #23
 8000bc6:	4320      	orrs	r0, r4
 8000bc8:	07c9      	lsls	r1, r1, #31
 8000bca:	4308      	orrs	r0, r1
 8000bcc:	bce0      	pop	{r5, r6, r7}
 8000bce:	46ba      	mov	sl, r7
 8000bd0:	46b1      	mov	r9, r6
 8000bd2:	46a8      	mov	r8, r5
 8000bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bd6:	20ff      	movs	r0, #255	; 0xff
 8000bd8:	2400      	movs	r4, #0
 8000bda:	e7f3      	b.n	8000bc4 <__aeabi_fmul+0x8c>
 8000bdc:	0c26      	lsrs	r6, r4, #16
 8000bde:	0424      	lsls	r4, r4, #16
 8000be0:	0c22      	lsrs	r2, r4, #16
 8000be2:	4644      	mov	r4, r8
 8000be4:	0424      	lsls	r4, r4, #16
 8000be6:	0c24      	lsrs	r4, r4, #16
 8000be8:	4643      	mov	r3, r8
 8000bea:	0027      	movs	r7, r4
 8000bec:	0c1b      	lsrs	r3, r3, #16
 8000bee:	4357      	muls	r7, r2
 8000bf0:	4374      	muls	r4, r6
 8000bf2:	435a      	muls	r2, r3
 8000bf4:	435e      	muls	r6, r3
 8000bf6:	1912      	adds	r2, r2, r4
 8000bf8:	0c3b      	lsrs	r3, r7, #16
 8000bfa:	189b      	adds	r3, r3, r2
 8000bfc:	429c      	cmp	r4, r3
 8000bfe:	d903      	bls.n	8000c08 <__aeabi_fmul+0xd0>
 8000c00:	2280      	movs	r2, #128	; 0x80
 8000c02:	0252      	lsls	r2, r2, #9
 8000c04:	4694      	mov	ip, r2
 8000c06:	4466      	add	r6, ip
 8000c08:	043f      	lsls	r7, r7, #16
 8000c0a:	041a      	lsls	r2, r3, #16
 8000c0c:	0c3f      	lsrs	r7, r7, #16
 8000c0e:	19d2      	adds	r2, r2, r7
 8000c10:	0194      	lsls	r4, r2, #6
 8000c12:	1e67      	subs	r7, r4, #1
 8000c14:	41bc      	sbcs	r4, r7
 8000c16:	0c1b      	lsrs	r3, r3, #16
 8000c18:	0e92      	lsrs	r2, r2, #26
 8000c1a:	199b      	adds	r3, r3, r6
 8000c1c:	4314      	orrs	r4, r2
 8000c1e:	019b      	lsls	r3, r3, #6
 8000c20:	431c      	orrs	r4, r3
 8000c22:	011b      	lsls	r3, r3, #4
 8000c24:	d400      	bmi.n	8000c28 <__aeabi_fmul+0xf0>
 8000c26:	e09b      	b.n	8000d60 <__aeabi_fmul+0x228>
 8000c28:	2301      	movs	r3, #1
 8000c2a:	0862      	lsrs	r2, r4, #1
 8000c2c:	401c      	ands	r4, r3
 8000c2e:	4314      	orrs	r4, r2
 8000c30:	0002      	movs	r2, r0
 8000c32:	327f      	adds	r2, #127	; 0x7f
 8000c34:	2a00      	cmp	r2, #0
 8000c36:	dd64      	ble.n	8000d02 <__aeabi_fmul+0x1ca>
 8000c38:	0763      	lsls	r3, r4, #29
 8000c3a:	d004      	beq.n	8000c46 <__aeabi_fmul+0x10e>
 8000c3c:	230f      	movs	r3, #15
 8000c3e:	4023      	ands	r3, r4
 8000c40:	2b04      	cmp	r3, #4
 8000c42:	d000      	beq.n	8000c46 <__aeabi_fmul+0x10e>
 8000c44:	3404      	adds	r4, #4
 8000c46:	0123      	lsls	r3, r4, #4
 8000c48:	d503      	bpl.n	8000c52 <__aeabi_fmul+0x11a>
 8000c4a:	0002      	movs	r2, r0
 8000c4c:	4b4c      	ldr	r3, [pc, #304]	; (8000d80 <__aeabi_fmul+0x248>)
 8000c4e:	3280      	adds	r2, #128	; 0x80
 8000c50:	401c      	ands	r4, r3
 8000c52:	2afe      	cmp	r2, #254	; 0xfe
 8000c54:	dcbf      	bgt.n	8000bd6 <__aeabi_fmul+0x9e>
 8000c56:	01a4      	lsls	r4, r4, #6
 8000c58:	0a64      	lsrs	r4, r4, #9
 8000c5a:	b2d0      	uxtb	r0, r2
 8000c5c:	e7b2      	b.n	8000bc4 <__aeabi_fmul+0x8c>
 8000c5e:	4643      	mov	r3, r8
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d13d      	bne.n	8000ce0 <__aeabi_fmul+0x1a8>
 8000c64:	464a      	mov	r2, r9
 8000c66:	3301      	adds	r3, #1
 8000c68:	431a      	orrs	r2, r3
 8000c6a:	4691      	mov	r9, r2
 8000c6c:	469c      	mov	ip, r3
 8000c6e:	e792      	b.n	8000b96 <__aeabi_fmul+0x5e>
 8000c70:	2c00      	cmp	r4, #0
 8000c72:	d129      	bne.n	8000cc8 <__aeabi_fmul+0x190>
 8000c74:	2304      	movs	r3, #4
 8000c76:	4699      	mov	r9, r3
 8000c78:	3b03      	subs	r3, #3
 8000c7a:	2500      	movs	r5, #0
 8000c7c:	469a      	mov	sl, r3
 8000c7e:	e774      	b.n	8000b6a <__aeabi_fmul+0x32>
 8000c80:	2c00      	cmp	r4, #0
 8000c82:	d11b      	bne.n	8000cbc <__aeabi_fmul+0x184>
 8000c84:	2308      	movs	r3, #8
 8000c86:	4699      	mov	r9, r3
 8000c88:	3b06      	subs	r3, #6
 8000c8a:	25ff      	movs	r5, #255	; 0xff
 8000c8c:	469a      	mov	sl, r3
 8000c8e:	e76c      	b.n	8000b6a <__aeabi_fmul+0x32>
 8000c90:	4643      	mov	r3, r8
 8000c92:	35ff      	adds	r5, #255	; 0xff
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d10b      	bne.n	8000cb0 <__aeabi_fmul+0x178>
 8000c98:	2302      	movs	r3, #2
 8000c9a:	464a      	mov	r2, r9
 8000c9c:	431a      	orrs	r2, r3
 8000c9e:	4691      	mov	r9, r2
 8000ca0:	469c      	mov	ip, r3
 8000ca2:	e778      	b.n	8000b96 <__aeabi_fmul+0x5e>
 8000ca4:	4653      	mov	r3, sl
 8000ca6:	0031      	movs	r1, r6
 8000ca8:	2b02      	cmp	r3, #2
 8000caa:	d000      	beq.n	8000cae <__aeabi_fmul+0x176>
 8000cac:	e783      	b.n	8000bb6 <__aeabi_fmul+0x7e>
 8000cae:	e792      	b.n	8000bd6 <__aeabi_fmul+0x9e>
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	464a      	mov	r2, r9
 8000cb4:	431a      	orrs	r2, r3
 8000cb6:	4691      	mov	r9, r2
 8000cb8:	469c      	mov	ip, r3
 8000cba:	e76c      	b.n	8000b96 <__aeabi_fmul+0x5e>
 8000cbc:	230c      	movs	r3, #12
 8000cbe:	4699      	mov	r9, r3
 8000cc0:	3b09      	subs	r3, #9
 8000cc2:	25ff      	movs	r5, #255	; 0xff
 8000cc4:	469a      	mov	sl, r3
 8000cc6:	e750      	b.n	8000b6a <__aeabi_fmul+0x32>
 8000cc8:	0020      	movs	r0, r4
 8000cca:	f000 ff31 	bl	8001b30 <__clzsi2>
 8000cce:	2576      	movs	r5, #118	; 0x76
 8000cd0:	1f43      	subs	r3, r0, #5
 8000cd2:	409c      	lsls	r4, r3
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	426d      	negs	r5, r5
 8000cd8:	4699      	mov	r9, r3
 8000cda:	469a      	mov	sl, r3
 8000cdc:	1a2d      	subs	r5, r5, r0
 8000cde:	e744      	b.n	8000b6a <__aeabi_fmul+0x32>
 8000ce0:	4640      	mov	r0, r8
 8000ce2:	f000 ff25 	bl	8001b30 <__clzsi2>
 8000ce6:	4642      	mov	r2, r8
 8000ce8:	1f43      	subs	r3, r0, #5
 8000cea:	409a      	lsls	r2, r3
 8000cec:	2300      	movs	r3, #0
 8000cee:	1a2d      	subs	r5, r5, r0
 8000cf0:	4690      	mov	r8, r2
 8000cf2:	469c      	mov	ip, r3
 8000cf4:	3d76      	subs	r5, #118	; 0x76
 8000cf6:	e74e      	b.n	8000b96 <__aeabi_fmul+0x5e>
 8000cf8:	2480      	movs	r4, #128	; 0x80
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	20ff      	movs	r0, #255	; 0xff
 8000cfe:	03e4      	lsls	r4, r4, #15
 8000d00:	e760      	b.n	8000bc4 <__aeabi_fmul+0x8c>
 8000d02:	2301      	movs	r3, #1
 8000d04:	1a9b      	subs	r3, r3, r2
 8000d06:	2b1b      	cmp	r3, #27
 8000d08:	dd00      	ble.n	8000d0c <__aeabi_fmul+0x1d4>
 8000d0a:	e759      	b.n	8000bc0 <__aeabi_fmul+0x88>
 8000d0c:	0022      	movs	r2, r4
 8000d0e:	309e      	adds	r0, #158	; 0x9e
 8000d10:	40da      	lsrs	r2, r3
 8000d12:	4084      	lsls	r4, r0
 8000d14:	0013      	movs	r3, r2
 8000d16:	1e62      	subs	r2, r4, #1
 8000d18:	4194      	sbcs	r4, r2
 8000d1a:	431c      	orrs	r4, r3
 8000d1c:	0763      	lsls	r3, r4, #29
 8000d1e:	d004      	beq.n	8000d2a <__aeabi_fmul+0x1f2>
 8000d20:	230f      	movs	r3, #15
 8000d22:	4023      	ands	r3, r4
 8000d24:	2b04      	cmp	r3, #4
 8000d26:	d000      	beq.n	8000d2a <__aeabi_fmul+0x1f2>
 8000d28:	3404      	adds	r4, #4
 8000d2a:	0163      	lsls	r3, r4, #5
 8000d2c:	d51a      	bpl.n	8000d64 <__aeabi_fmul+0x22c>
 8000d2e:	2001      	movs	r0, #1
 8000d30:	2400      	movs	r4, #0
 8000d32:	e747      	b.n	8000bc4 <__aeabi_fmul+0x8c>
 8000d34:	2080      	movs	r0, #128	; 0x80
 8000d36:	03c0      	lsls	r0, r0, #15
 8000d38:	4204      	tst	r4, r0
 8000d3a:	d009      	beq.n	8000d50 <__aeabi_fmul+0x218>
 8000d3c:	4643      	mov	r3, r8
 8000d3e:	4203      	tst	r3, r0
 8000d40:	d106      	bne.n	8000d50 <__aeabi_fmul+0x218>
 8000d42:	4644      	mov	r4, r8
 8000d44:	4304      	orrs	r4, r0
 8000d46:	0264      	lsls	r4, r4, #9
 8000d48:	0039      	movs	r1, r7
 8000d4a:	20ff      	movs	r0, #255	; 0xff
 8000d4c:	0a64      	lsrs	r4, r4, #9
 8000d4e:	e739      	b.n	8000bc4 <__aeabi_fmul+0x8c>
 8000d50:	2080      	movs	r0, #128	; 0x80
 8000d52:	03c0      	lsls	r0, r0, #15
 8000d54:	4304      	orrs	r4, r0
 8000d56:	0264      	lsls	r4, r4, #9
 8000d58:	0031      	movs	r1, r6
 8000d5a:	20ff      	movs	r0, #255	; 0xff
 8000d5c:	0a64      	lsrs	r4, r4, #9
 8000d5e:	e731      	b.n	8000bc4 <__aeabi_fmul+0x8c>
 8000d60:	0028      	movs	r0, r5
 8000d62:	e765      	b.n	8000c30 <__aeabi_fmul+0xf8>
 8000d64:	01a4      	lsls	r4, r4, #6
 8000d66:	2000      	movs	r0, #0
 8000d68:	0a64      	lsrs	r4, r4, #9
 8000d6a:	e72b      	b.n	8000bc4 <__aeabi_fmul+0x8c>
 8000d6c:	2080      	movs	r0, #128	; 0x80
 8000d6e:	03c0      	lsls	r0, r0, #15
 8000d70:	4304      	orrs	r4, r0
 8000d72:	0264      	lsls	r4, r4, #9
 8000d74:	20ff      	movs	r0, #255	; 0xff
 8000d76:	0a64      	lsrs	r4, r4, #9
 8000d78:	e724      	b.n	8000bc4 <__aeabi_fmul+0x8c>
 8000d7a:	46c0      	nop			; (mov r8, r8)
 8000d7c:	0800ec50 	.word	0x0800ec50
 8000d80:	f7ffffff 	.word	0xf7ffffff

08000d84 <__aeabi_fsub>:
 8000d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d86:	46ce      	mov	lr, r9
 8000d88:	4647      	mov	r7, r8
 8000d8a:	0243      	lsls	r3, r0, #9
 8000d8c:	0a5b      	lsrs	r3, r3, #9
 8000d8e:	024e      	lsls	r6, r1, #9
 8000d90:	00da      	lsls	r2, r3, #3
 8000d92:	4694      	mov	ip, r2
 8000d94:	0a72      	lsrs	r2, r6, #9
 8000d96:	4691      	mov	r9, r2
 8000d98:	0045      	lsls	r5, r0, #1
 8000d9a:	004a      	lsls	r2, r1, #1
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	0e2d      	lsrs	r5, r5, #24
 8000da0:	001f      	movs	r7, r3
 8000da2:	0fc4      	lsrs	r4, r0, #31
 8000da4:	0e12      	lsrs	r2, r2, #24
 8000da6:	0fc9      	lsrs	r1, r1, #31
 8000da8:	09b6      	lsrs	r6, r6, #6
 8000daa:	2aff      	cmp	r2, #255	; 0xff
 8000dac:	d05b      	beq.n	8000e66 <__aeabi_fsub+0xe2>
 8000dae:	2001      	movs	r0, #1
 8000db0:	4041      	eors	r1, r0
 8000db2:	428c      	cmp	r4, r1
 8000db4:	d039      	beq.n	8000e2a <__aeabi_fsub+0xa6>
 8000db6:	1aa8      	subs	r0, r5, r2
 8000db8:	2800      	cmp	r0, #0
 8000dba:	dd5a      	ble.n	8000e72 <__aeabi_fsub+0xee>
 8000dbc:	2a00      	cmp	r2, #0
 8000dbe:	d06a      	beq.n	8000e96 <__aeabi_fsub+0x112>
 8000dc0:	2dff      	cmp	r5, #255	; 0xff
 8000dc2:	d100      	bne.n	8000dc6 <__aeabi_fsub+0x42>
 8000dc4:	e0d9      	b.n	8000f7a <__aeabi_fsub+0x1f6>
 8000dc6:	2280      	movs	r2, #128	; 0x80
 8000dc8:	04d2      	lsls	r2, r2, #19
 8000dca:	4316      	orrs	r6, r2
 8000dcc:	281b      	cmp	r0, #27
 8000dce:	dc00      	bgt.n	8000dd2 <__aeabi_fsub+0x4e>
 8000dd0:	e0e9      	b.n	8000fa6 <__aeabi_fsub+0x222>
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	4663      	mov	r3, ip
 8000dd6:	1a18      	subs	r0, r3, r0
 8000dd8:	0143      	lsls	r3, r0, #5
 8000dda:	d400      	bmi.n	8000dde <__aeabi_fsub+0x5a>
 8000ddc:	e0b4      	b.n	8000f48 <__aeabi_fsub+0x1c4>
 8000dde:	0180      	lsls	r0, r0, #6
 8000de0:	0987      	lsrs	r7, r0, #6
 8000de2:	0038      	movs	r0, r7
 8000de4:	f000 fea4 	bl	8001b30 <__clzsi2>
 8000de8:	3805      	subs	r0, #5
 8000dea:	4087      	lsls	r7, r0
 8000dec:	4285      	cmp	r5, r0
 8000dee:	dc00      	bgt.n	8000df2 <__aeabi_fsub+0x6e>
 8000df0:	e0cc      	b.n	8000f8c <__aeabi_fsub+0x208>
 8000df2:	1a2d      	subs	r5, r5, r0
 8000df4:	48b5      	ldr	r0, [pc, #724]	; (80010cc <__aeabi_fsub+0x348>)
 8000df6:	4038      	ands	r0, r7
 8000df8:	0743      	lsls	r3, r0, #29
 8000dfa:	d004      	beq.n	8000e06 <__aeabi_fsub+0x82>
 8000dfc:	230f      	movs	r3, #15
 8000dfe:	4003      	ands	r3, r0
 8000e00:	2b04      	cmp	r3, #4
 8000e02:	d000      	beq.n	8000e06 <__aeabi_fsub+0x82>
 8000e04:	3004      	adds	r0, #4
 8000e06:	0143      	lsls	r3, r0, #5
 8000e08:	d400      	bmi.n	8000e0c <__aeabi_fsub+0x88>
 8000e0a:	e0a0      	b.n	8000f4e <__aeabi_fsub+0x1ca>
 8000e0c:	1c6a      	adds	r2, r5, #1
 8000e0e:	2dfe      	cmp	r5, #254	; 0xfe
 8000e10:	d100      	bne.n	8000e14 <__aeabi_fsub+0x90>
 8000e12:	e08d      	b.n	8000f30 <__aeabi_fsub+0x1ac>
 8000e14:	0180      	lsls	r0, r0, #6
 8000e16:	0a47      	lsrs	r7, r0, #9
 8000e18:	b2d2      	uxtb	r2, r2
 8000e1a:	05d0      	lsls	r0, r2, #23
 8000e1c:	4338      	orrs	r0, r7
 8000e1e:	07e4      	lsls	r4, r4, #31
 8000e20:	4320      	orrs	r0, r4
 8000e22:	bcc0      	pop	{r6, r7}
 8000e24:	46b9      	mov	r9, r7
 8000e26:	46b0      	mov	r8, r6
 8000e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e2a:	1aa8      	subs	r0, r5, r2
 8000e2c:	4680      	mov	r8, r0
 8000e2e:	2800      	cmp	r0, #0
 8000e30:	dd45      	ble.n	8000ebe <__aeabi_fsub+0x13a>
 8000e32:	2a00      	cmp	r2, #0
 8000e34:	d070      	beq.n	8000f18 <__aeabi_fsub+0x194>
 8000e36:	2dff      	cmp	r5, #255	; 0xff
 8000e38:	d100      	bne.n	8000e3c <__aeabi_fsub+0xb8>
 8000e3a:	e09e      	b.n	8000f7a <__aeabi_fsub+0x1f6>
 8000e3c:	2380      	movs	r3, #128	; 0x80
 8000e3e:	04db      	lsls	r3, r3, #19
 8000e40:	431e      	orrs	r6, r3
 8000e42:	4643      	mov	r3, r8
 8000e44:	2b1b      	cmp	r3, #27
 8000e46:	dc00      	bgt.n	8000e4a <__aeabi_fsub+0xc6>
 8000e48:	e0d2      	b.n	8000ff0 <__aeabi_fsub+0x26c>
 8000e4a:	2001      	movs	r0, #1
 8000e4c:	4460      	add	r0, ip
 8000e4e:	0143      	lsls	r3, r0, #5
 8000e50:	d57a      	bpl.n	8000f48 <__aeabi_fsub+0x1c4>
 8000e52:	3501      	adds	r5, #1
 8000e54:	2dff      	cmp	r5, #255	; 0xff
 8000e56:	d06b      	beq.n	8000f30 <__aeabi_fsub+0x1ac>
 8000e58:	2301      	movs	r3, #1
 8000e5a:	4a9d      	ldr	r2, [pc, #628]	; (80010d0 <__aeabi_fsub+0x34c>)
 8000e5c:	4003      	ands	r3, r0
 8000e5e:	0840      	lsrs	r0, r0, #1
 8000e60:	4010      	ands	r0, r2
 8000e62:	4318      	orrs	r0, r3
 8000e64:	e7c8      	b.n	8000df8 <__aeabi_fsub+0x74>
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	d020      	beq.n	8000eac <__aeabi_fsub+0x128>
 8000e6a:	428c      	cmp	r4, r1
 8000e6c:	d023      	beq.n	8000eb6 <__aeabi_fsub+0x132>
 8000e6e:	0028      	movs	r0, r5
 8000e70:	38ff      	subs	r0, #255	; 0xff
 8000e72:	2800      	cmp	r0, #0
 8000e74:	d039      	beq.n	8000eea <__aeabi_fsub+0x166>
 8000e76:	1b57      	subs	r7, r2, r5
 8000e78:	2d00      	cmp	r5, #0
 8000e7a:	d000      	beq.n	8000e7e <__aeabi_fsub+0xfa>
 8000e7c:	e09d      	b.n	8000fba <__aeabi_fsub+0x236>
 8000e7e:	4663      	mov	r3, ip
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d100      	bne.n	8000e86 <__aeabi_fsub+0x102>
 8000e84:	e0db      	b.n	800103e <__aeabi_fsub+0x2ba>
 8000e86:	1e7b      	subs	r3, r7, #1
 8000e88:	2f01      	cmp	r7, #1
 8000e8a:	d100      	bne.n	8000e8e <__aeabi_fsub+0x10a>
 8000e8c:	e10d      	b.n	80010aa <__aeabi_fsub+0x326>
 8000e8e:	2fff      	cmp	r7, #255	; 0xff
 8000e90:	d071      	beq.n	8000f76 <__aeabi_fsub+0x1f2>
 8000e92:	001f      	movs	r7, r3
 8000e94:	e098      	b.n	8000fc8 <__aeabi_fsub+0x244>
 8000e96:	2e00      	cmp	r6, #0
 8000e98:	d100      	bne.n	8000e9c <__aeabi_fsub+0x118>
 8000e9a:	e0a7      	b.n	8000fec <__aeabi_fsub+0x268>
 8000e9c:	1e42      	subs	r2, r0, #1
 8000e9e:	2801      	cmp	r0, #1
 8000ea0:	d100      	bne.n	8000ea4 <__aeabi_fsub+0x120>
 8000ea2:	e0e6      	b.n	8001072 <__aeabi_fsub+0x2ee>
 8000ea4:	28ff      	cmp	r0, #255	; 0xff
 8000ea6:	d068      	beq.n	8000f7a <__aeabi_fsub+0x1f6>
 8000ea8:	0010      	movs	r0, r2
 8000eaa:	e78f      	b.n	8000dcc <__aeabi_fsub+0x48>
 8000eac:	2001      	movs	r0, #1
 8000eae:	4041      	eors	r1, r0
 8000eb0:	42a1      	cmp	r1, r4
 8000eb2:	d000      	beq.n	8000eb6 <__aeabi_fsub+0x132>
 8000eb4:	e77f      	b.n	8000db6 <__aeabi_fsub+0x32>
 8000eb6:	20ff      	movs	r0, #255	; 0xff
 8000eb8:	4240      	negs	r0, r0
 8000eba:	4680      	mov	r8, r0
 8000ebc:	44a8      	add	r8, r5
 8000ebe:	4640      	mov	r0, r8
 8000ec0:	2800      	cmp	r0, #0
 8000ec2:	d038      	beq.n	8000f36 <__aeabi_fsub+0x1b2>
 8000ec4:	1b51      	subs	r1, r2, r5
 8000ec6:	2d00      	cmp	r5, #0
 8000ec8:	d100      	bne.n	8000ecc <__aeabi_fsub+0x148>
 8000eca:	e0ae      	b.n	800102a <__aeabi_fsub+0x2a6>
 8000ecc:	2aff      	cmp	r2, #255	; 0xff
 8000ece:	d100      	bne.n	8000ed2 <__aeabi_fsub+0x14e>
 8000ed0:	e0df      	b.n	8001092 <__aeabi_fsub+0x30e>
 8000ed2:	2380      	movs	r3, #128	; 0x80
 8000ed4:	4660      	mov	r0, ip
 8000ed6:	04db      	lsls	r3, r3, #19
 8000ed8:	4318      	orrs	r0, r3
 8000eda:	4684      	mov	ip, r0
 8000edc:	291b      	cmp	r1, #27
 8000ede:	dc00      	bgt.n	8000ee2 <__aeabi_fsub+0x15e>
 8000ee0:	e0d9      	b.n	8001096 <__aeabi_fsub+0x312>
 8000ee2:	2001      	movs	r0, #1
 8000ee4:	0015      	movs	r5, r2
 8000ee6:	1980      	adds	r0, r0, r6
 8000ee8:	e7b1      	b.n	8000e4e <__aeabi_fsub+0xca>
 8000eea:	20fe      	movs	r0, #254	; 0xfe
 8000eec:	1c6a      	adds	r2, r5, #1
 8000eee:	4210      	tst	r0, r2
 8000ef0:	d171      	bne.n	8000fd6 <__aeabi_fsub+0x252>
 8000ef2:	2d00      	cmp	r5, #0
 8000ef4:	d000      	beq.n	8000ef8 <__aeabi_fsub+0x174>
 8000ef6:	e0a6      	b.n	8001046 <__aeabi_fsub+0x2c2>
 8000ef8:	4663      	mov	r3, ip
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d100      	bne.n	8000f00 <__aeabi_fsub+0x17c>
 8000efe:	e0d9      	b.n	80010b4 <__aeabi_fsub+0x330>
 8000f00:	2200      	movs	r2, #0
 8000f02:	2e00      	cmp	r6, #0
 8000f04:	d100      	bne.n	8000f08 <__aeabi_fsub+0x184>
 8000f06:	e788      	b.n	8000e1a <__aeabi_fsub+0x96>
 8000f08:	1b98      	subs	r0, r3, r6
 8000f0a:	0143      	lsls	r3, r0, #5
 8000f0c:	d400      	bmi.n	8000f10 <__aeabi_fsub+0x18c>
 8000f0e:	e0e1      	b.n	80010d4 <__aeabi_fsub+0x350>
 8000f10:	4663      	mov	r3, ip
 8000f12:	000c      	movs	r4, r1
 8000f14:	1af0      	subs	r0, r6, r3
 8000f16:	e76f      	b.n	8000df8 <__aeabi_fsub+0x74>
 8000f18:	2e00      	cmp	r6, #0
 8000f1a:	d100      	bne.n	8000f1e <__aeabi_fsub+0x19a>
 8000f1c:	e0b7      	b.n	800108e <__aeabi_fsub+0x30a>
 8000f1e:	0002      	movs	r2, r0
 8000f20:	3a01      	subs	r2, #1
 8000f22:	2801      	cmp	r0, #1
 8000f24:	d100      	bne.n	8000f28 <__aeabi_fsub+0x1a4>
 8000f26:	e09c      	b.n	8001062 <__aeabi_fsub+0x2de>
 8000f28:	28ff      	cmp	r0, #255	; 0xff
 8000f2a:	d026      	beq.n	8000f7a <__aeabi_fsub+0x1f6>
 8000f2c:	4690      	mov	r8, r2
 8000f2e:	e788      	b.n	8000e42 <__aeabi_fsub+0xbe>
 8000f30:	22ff      	movs	r2, #255	; 0xff
 8000f32:	2700      	movs	r7, #0
 8000f34:	e771      	b.n	8000e1a <__aeabi_fsub+0x96>
 8000f36:	20fe      	movs	r0, #254	; 0xfe
 8000f38:	1c6a      	adds	r2, r5, #1
 8000f3a:	4210      	tst	r0, r2
 8000f3c:	d064      	beq.n	8001008 <__aeabi_fsub+0x284>
 8000f3e:	2aff      	cmp	r2, #255	; 0xff
 8000f40:	d0f6      	beq.n	8000f30 <__aeabi_fsub+0x1ac>
 8000f42:	0015      	movs	r5, r2
 8000f44:	4466      	add	r6, ip
 8000f46:	0870      	lsrs	r0, r6, #1
 8000f48:	0743      	lsls	r3, r0, #29
 8000f4a:	d000      	beq.n	8000f4e <__aeabi_fsub+0x1ca>
 8000f4c:	e756      	b.n	8000dfc <__aeabi_fsub+0x78>
 8000f4e:	08c3      	lsrs	r3, r0, #3
 8000f50:	2dff      	cmp	r5, #255	; 0xff
 8000f52:	d012      	beq.n	8000f7a <__aeabi_fsub+0x1f6>
 8000f54:	025b      	lsls	r3, r3, #9
 8000f56:	0a5f      	lsrs	r7, r3, #9
 8000f58:	b2ea      	uxtb	r2, r5
 8000f5a:	e75e      	b.n	8000e1a <__aeabi_fsub+0x96>
 8000f5c:	4662      	mov	r2, ip
 8000f5e:	2a00      	cmp	r2, #0
 8000f60:	d100      	bne.n	8000f64 <__aeabi_fsub+0x1e0>
 8000f62:	e096      	b.n	8001092 <__aeabi_fsub+0x30e>
 8000f64:	2e00      	cmp	r6, #0
 8000f66:	d008      	beq.n	8000f7a <__aeabi_fsub+0x1f6>
 8000f68:	2280      	movs	r2, #128	; 0x80
 8000f6a:	03d2      	lsls	r2, r2, #15
 8000f6c:	4213      	tst	r3, r2
 8000f6e:	d004      	beq.n	8000f7a <__aeabi_fsub+0x1f6>
 8000f70:	4648      	mov	r0, r9
 8000f72:	4210      	tst	r0, r2
 8000f74:	d101      	bne.n	8000f7a <__aeabi_fsub+0x1f6>
 8000f76:	000c      	movs	r4, r1
 8000f78:	464b      	mov	r3, r9
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d0d8      	beq.n	8000f30 <__aeabi_fsub+0x1ac>
 8000f7e:	2780      	movs	r7, #128	; 0x80
 8000f80:	03ff      	lsls	r7, r7, #15
 8000f82:	431f      	orrs	r7, r3
 8000f84:	027f      	lsls	r7, r7, #9
 8000f86:	22ff      	movs	r2, #255	; 0xff
 8000f88:	0a7f      	lsrs	r7, r7, #9
 8000f8a:	e746      	b.n	8000e1a <__aeabi_fsub+0x96>
 8000f8c:	2320      	movs	r3, #32
 8000f8e:	003a      	movs	r2, r7
 8000f90:	1b45      	subs	r5, r0, r5
 8000f92:	0038      	movs	r0, r7
 8000f94:	3501      	adds	r5, #1
 8000f96:	40ea      	lsrs	r2, r5
 8000f98:	1b5d      	subs	r5, r3, r5
 8000f9a:	40a8      	lsls	r0, r5
 8000f9c:	1e43      	subs	r3, r0, #1
 8000f9e:	4198      	sbcs	r0, r3
 8000fa0:	2500      	movs	r5, #0
 8000fa2:	4310      	orrs	r0, r2
 8000fa4:	e728      	b.n	8000df8 <__aeabi_fsub+0x74>
 8000fa6:	2320      	movs	r3, #32
 8000fa8:	1a1b      	subs	r3, r3, r0
 8000faa:	0032      	movs	r2, r6
 8000fac:	409e      	lsls	r6, r3
 8000fae:	40c2      	lsrs	r2, r0
 8000fb0:	0030      	movs	r0, r6
 8000fb2:	1e43      	subs	r3, r0, #1
 8000fb4:	4198      	sbcs	r0, r3
 8000fb6:	4310      	orrs	r0, r2
 8000fb8:	e70c      	b.n	8000dd4 <__aeabi_fsub+0x50>
 8000fba:	2aff      	cmp	r2, #255	; 0xff
 8000fbc:	d0db      	beq.n	8000f76 <__aeabi_fsub+0x1f2>
 8000fbe:	2380      	movs	r3, #128	; 0x80
 8000fc0:	4660      	mov	r0, ip
 8000fc2:	04db      	lsls	r3, r3, #19
 8000fc4:	4318      	orrs	r0, r3
 8000fc6:	4684      	mov	ip, r0
 8000fc8:	2f1b      	cmp	r7, #27
 8000fca:	dd56      	ble.n	800107a <__aeabi_fsub+0x2f6>
 8000fcc:	2001      	movs	r0, #1
 8000fce:	000c      	movs	r4, r1
 8000fd0:	0015      	movs	r5, r2
 8000fd2:	1a30      	subs	r0, r6, r0
 8000fd4:	e700      	b.n	8000dd8 <__aeabi_fsub+0x54>
 8000fd6:	4663      	mov	r3, ip
 8000fd8:	1b9f      	subs	r7, r3, r6
 8000fda:	017b      	lsls	r3, r7, #5
 8000fdc:	d43d      	bmi.n	800105a <__aeabi_fsub+0x2d6>
 8000fde:	2f00      	cmp	r7, #0
 8000fe0:	d000      	beq.n	8000fe4 <__aeabi_fsub+0x260>
 8000fe2:	e6fe      	b.n	8000de2 <__aeabi_fsub+0x5e>
 8000fe4:	2400      	movs	r4, #0
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2700      	movs	r7, #0
 8000fea:	e716      	b.n	8000e1a <__aeabi_fsub+0x96>
 8000fec:	0005      	movs	r5, r0
 8000fee:	e7af      	b.n	8000f50 <__aeabi_fsub+0x1cc>
 8000ff0:	0032      	movs	r2, r6
 8000ff2:	4643      	mov	r3, r8
 8000ff4:	4641      	mov	r1, r8
 8000ff6:	40da      	lsrs	r2, r3
 8000ff8:	2320      	movs	r3, #32
 8000ffa:	1a5b      	subs	r3, r3, r1
 8000ffc:	409e      	lsls	r6, r3
 8000ffe:	0030      	movs	r0, r6
 8001000:	1e43      	subs	r3, r0, #1
 8001002:	4198      	sbcs	r0, r3
 8001004:	4310      	orrs	r0, r2
 8001006:	e721      	b.n	8000e4c <__aeabi_fsub+0xc8>
 8001008:	2d00      	cmp	r5, #0
 800100a:	d1a7      	bne.n	8000f5c <__aeabi_fsub+0x1d8>
 800100c:	4663      	mov	r3, ip
 800100e:	2b00      	cmp	r3, #0
 8001010:	d059      	beq.n	80010c6 <__aeabi_fsub+0x342>
 8001012:	2200      	movs	r2, #0
 8001014:	2e00      	cmp	r6, #0
 8001016:	d100      	bne.n	800101a <__aeabi_fsub+0x296>
 8001018:	e6ff      	b.n	8000e1a <__aeabi_fsub+0x96>
 800101a:	0030      	movs	r0, r6
 800101c:	4460      	add	r0, ip
 800101e:	0143      	lsls	r3, r0, #5
 8001020:	d592      	bpl.n	8000f48 <__aeabi_fsub+0x1c4>
 8001022:	4b2a      	ldr	r3, [pc, #168]	; (80010cc <__aeabi_fsub+0x348>)
 8001024:	3501      	adds	r5, #1
 8001026:	4018      	ands	r0, r3
 8001028:	e78e      	b.n	8000f48 <__aeabi_fsub+0x1c4>
 800102a:	4663      	mov	r3, ip
 800102c:	2b00      	cmp	r3, #0
 800102e:	d047      	beq.n	80010c0 <__aeabi_fsub+0x33c>
 8001030:	1e4b      	subs	r3, r1, #1
 8001032:	2901      	cmp	r1, #1
 8001034:	d015      	beq.n	8001062 <__aeabi_fsub+0x2de>
 8001036:	29ff      	cmp	r1, #255	; 0xff
 8001038:	d02b      	beq.n	8001092 <__aeabi_fsub+0x30e>
 800103a:	0019      	movs	r1, r3
 800103c:	e74e      	b.n	8000edc <__aeabi_fsub+0x158>
 800103e:	000c      	movs	r4, r1
 8001040:	464b      	mov	r3, r9
 8001042:	003d      	movs	r5, r7
 8001044:	e784      	b.n	8000f50 <__aeabi_fsub+0x1cc>
 8001046:	4662      	mov	r2, ip
 8001048:	2a00      	cmp	r2, #0
 800104a:	d18b      	bne.n	8000f64 <__aeabi_fsub+0x1e0>
 800104c:	2e00      	cmp	r6, #0
 800104e:	d192      	bne.n	8000f76 <__aeabi_fsub+0x1f2>
 8001050:	2780      	movs	r7, #128	; 0x80
 8001052:	2400      	movs	r4, #0
 8001054:	22ff      	movs	r2, #255	; 0xff
 8001056:	03ff      	lsls	r7, r7, #15
 8001058:	e6df      	b.n	8000e1a <__aeabi_fsub+0x96>
 800105a:	4663      	mov	r3, ip
 800105c:	000c      	movs	r4, r1
 800105e:	1af7      	subs	r7, r6, r3
 8001060:	e6bf      	b.n	8000de2 <__aeabi_fsub+0x5e>
 8001062:	0030      	movs	r0, r6
 8001064:	4460      	add	r0, ip
 8001066:	2501      	movs	r5, #1
 8001068:	0143      	lsls	r3, r0, #5
 800106a:	d400      	bmi.n	800106e <__aeabi_fsub+0x2ea>
 800106c:	e76c      	b.n	8000f48 <__aeabi_fsub+0x1c4>
 800106e:	2502      	movs	r5, #2
 8001070:	e6f2      	b.n	8000e58 <__aeabi_fsub+0xd4>
 8001072:	4663      	mov	r3, ip
 8001074:	2501      	movs	r5, #1
 8001076:	1b98      	subs	r0, r3, r6
 8001078:	e6ae      	b.n	8000dd8 <__aeabi_fsub+0x54>
 800107a:	2320      	movs	r3, #32
 800107c:	4664      	mov	r4, ip
 800107e:	4660      	mov	r0, ip
 8001080:	40fc      	lsrs	r4, r7
 8001082:	1bdf      	subs	r7, r3, r7
 8001084:	40b8      	lsls	r0, r7
 8001086:	1e43      	subs	r3, r0, #1
 8001088:	4198      	sbcs	r0, r3
 800108a:	4320      	orrs	r0, r4
 800108c:	e79f      	b.n	8000fce <__aeabi_fsub+0x24a>
 800108e:	0005      	movs	r5, r0
 8001090:	e75e      	b.n	8000f50 <__aeabi_fsub+0x1cc>
 8001092:	464b      	mov	r3, r9
 8001094:	e771      	b.n	8000f7a <__aeabi_fsub+0x1f6>
 8001096:	2320      	movs	r3, #32
 8001098:	4665      	mov	r5, ip
 800109a:	4660      	mov	r0, ip
 800109c:	40cd      	lsrs	r5, r1
 800109e:	1a59      	subs	r1, r3, r1
 80010a0:	4088      	lsls	r0, r1
 80010a2:	1e43      	subs	r3, r0, #1
 80010a4:	4198      	sbcs	r0, r3
 80010a6:	4328      	orrs	r0, r5
 80010a8:	e71c      	b.n	8000ee4 <__aeabi_fsub+0x160>
 80010aa:	4663      	mov	r3, ip
 80010ac:	000c      	movs	r4, r1
 80010ae:	2501      	movs	r5, #1
 80010b0:	1af0      	subs	r0, r6, r3
 80010b2:	e691      	b.n	8000dd8 <__aeabi_fsub+0x54>
 80010b4:	2e00      	cmp	r6, #0
 80010b6:	d095      	beq.n	8000fe4 <__aeabi_fsub+0x260>
 80010b8:	000c      	movs	r4, r1
 80010ba:	464f      	mov	r7, r9
 80010bc:	2200      	movs	r2, #0
 80010be:	e6ac      	b.n	8000e1a <__aeabi_fsub+0x96>
 80010c0:	464b      	mov	r3, r9
 80010c2:	000d      	movs	r5, r1
 80010c4:	e744      	b.n	8000f50 <__aeabi_fsub+0x1cc>
 80010c6:	464f      	mov	r7, r9
 80010c8:	2200      	movs	r2, #0
 80010ca:	e6a6      	b.n	8000e1a <__aeabi_fsub+0x96>
 80010cc:	fbffffff 	.word	0xfbffffff
 80010d0:	7dffffff 	.word	0x7dffffff
 80010d4:	2800      	cmp	r0, #0
 80010d6:	d000      	beq.n	80010da <__aeabi_fsub+0x356>
 80010d8:	e736      	b.n	8000f48 <__aeabi_fsub+0x1c4>
 80010da:	2400      	movs	r4, #0
 80010dc:	2700      	movs	r7, #0
 80010de:	e69c      	b.n	8000e1a <__aeabi_fsub+0x96>

080010e0 <__aeabi_f2iz>:
 80010e0:	0241      	lsls	r1, r0, #9
 80010e2:	0042      	lsls	r2, r0, #1
 80010e4:	0fc3      	lsrs	r3, r0, #31
 80010e6:	0a49      	lsrs	r1, r1, #9
 80010e8:	2000      	movs	r0, #0
 80010ea:	0e12      	lsrs	r2, r2, #24
 80010ec:	2a7e      	cmp	r2, #126	; 0x7e
 80010ee:	dd03      	ble.n	80010f8 <__aeabi_f2iz+0x18>
 80010f0:	2a9d      	cmp	r2, #157	; 0x9d
 80010f2:	dd02      	ble.n	80010fa <__aeabi_f2iz+0x1a>
 80010f4:	4a09      	ldr	r2, [pc, #36]	; (800111c <__aeabi_f2iz+0x3c>)
 80010f6:	1898      	adds	r0, r3, r2
 80010f8:	4770      	bx	lr
 80010fa:	2080      	movs	r0, #128	; 0x80
 80010fc:	0400      	lsls	r0, r0, #16
 80010fe:	4301      	orrs	r1, r0
 8001100:	2a95      	cmp	r2, #149	; 0x95
 8001102:	dc07      	bgt.n	8001114 <__aeabi_f2iz+0x34>
 8001104:	2096      	movs	r0, #150	; 0x96
 8001106:	1a82      	subs	r2, r0, r2
 8001108:	40d1      	lsrs	r1, r2
 800110a:	4248      	negs	r0, r1
 800110c:	2b00      	cmp	r3, #0
 800110e:	d1f3      	bne.n	80010f8 <__aeabi_f2iz+0x18>
 8001110:	0008      	movs	r0, r1
 8001112:	e7f1      	b.n	80010f8 <__aeabi_f2iz+0x18>
 8001114:	3a96      	subs	r2, #150	; 0x96
 8001116:	4091      	lsls	r1, r2
 8001118:	e7f7      	b.n	800110a <__aeabi_f2iz+0x2a>
 800111a:	46c0      	nop			; (mov r8, r8)
 800111c:	7fffffff 	.word	0x7fffffff

08001120 <__aeabi_ui2f>:
 8001120:	b570      	push	{r4, r5, r6, lr}
 8001122:	1e05      	subs	r5, r0, #0
 8001124:	d00e      	beq.n	8001144 <__aeabi_ui2f+0x24>
 8001126:	f000 fd03 	bl	8001b30 <__clzsi2>
 800112a:	239e      	movs	r3, #158	; 0x9e
 800112c:	0004      	movs	r4, r0
 800112e:	1a1b      	subs	r3, r3, r0
 8001130:	2b96      	cmp	r3, #150	; 0x96
 8001132:	dc0c      	bgt.n	800114e <__aeabi_ui2f+0x2e>
 8001134:	2808      	cmp	r0, #8
 8001136:	dd01      	ble.n	800113c <__aeabi_ui2f+0x1c>
 8001138:	3c08      	subs	r4, #8
 800113a:	40a5      	lsls	r5, r4
 800113c:	026d      	lsls	r5, r5, #9
 800113e:	0a6d      	lsrs	r5, r5, #9
 8001140:	b2d8      	uxtb	r0, r3
 8001142:	e001      	b.n	8001148 <__aeabi_ui2f+0x28>
 8001144:	2000      	movs	r0, #0
 8001146:	2500      	movs	r5, #0
 8001148:	05c0      	lsls	r0, r0, #23
 800114a:	4328      	orrs	r0, r5
 800114c:	bd70      	pop	{r4, r5, r6, pc}
 800114e:	2b99      	cmp	r3, #153	; 0x99
 8001150:	dd09      	ble.n	8001166 <__aeabi_ui2f+0x46>
 8001152:	0002      	movs	r2, r0
 8001154:	0029      	movs	r1, r5
 8001156:	321b      	adds	r2, #27
 8001158:	4091      	lsls	r1, r2
 800115a:	1e4a      	subs	r2, r1, #1
 800115c:	4191      	sbcs	r1, r2
 800115e:	2205      	movs	r2, #5
 8001160:	1a12      	subs	r2, r2, r0
 8001162:	40d5      	lsrs	r5, r2
 8001164:	430d      	orrs	r5, r1
 8001166:	2c05      	cmp	r4, #5
 8001168:	dc12      	bgt.n	8001190 <__aeabi_ui2f+0x70>
 800116a:	0029      	movs	r1, r5
 800116c:	4e0c      	ldr	r6, [pc, #48]	; (80011a0 <__aeabi_ui2f+0x80>)
 800116e:	4031      	ands	r1, r6
 8001170:	076a      	lsls	r2, r5, #29
 8001172:	d009      	beq.n	8001188 <__aeabi_ui2f+0x68>
 8001174:	200f      	movs	r0, #15
 8001176:	4028      	ands	r0, r5
 8001178:	2804      	cmp	r0, #4
 800117a:	d005      	beq.n	8001188 <__aeabi_ui2f+0x68>
 800117c:	3104      	adds	r1, #4
 800117e:	014a      	lsls	r2, r1, #5
 8001180:	d502      	bpl.n	8001188 <__aeabi_ui2f+0x68>
 8001182:	239f      	movs	r3, #159	; 0x9f
 8001184:	4031      	ands	r1, r6
 8001186:	1b1b      	subs	r3, r3, r4
 8001188:	0189      	lsls	r1, r1, #6
 800118a:	0a4d      	lsrs	r5, r1, #9
 800118c:	b2d8      	uxtb	r0, r3
 800118e:	e7db      	b.n	8001148 <__aeabi_ui2f+0x28>
 8001190:	1f62      	subs	r2, r4, #5
 8001192:	4095      	lsls	r5, r2
 8001194:	0029      	movs	r1, r5
 8001196:	4e02      	ldr	r6, [pc, #8]	; (80011a0 <__aeabi_ui2f+0x80>)
 8001198:	4031      	ands	r1, r6
 800119a:	076a      	lsls	r2, r5, #29
 800119c:	d0f4      	beq.n	8001188 <__aeabi_ui2f+0x68>
 800119e:	e7e9      	b.n	8001174 <__aeabi_ui2f+0x54>
 80011a0:	fbffffff 	.word	0xfbffffff

080011a4 <__aeabi_dadd>:
 80011a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011a6:	464f      	mov	r7, r9
 80011a8:	4646      	mov	r6, r8
 80011aa:	46d6      	mov	lr, sl
 80011ac:	000d      	movs	r5, r1
 80011ae:	0004      	movs	r4, r0
 80011b0:	b5c0      	push	{r6, r7, lr}
 80011b2:	001f      	movs	r7, r3
 80011b4:	0011      	movs	r1, r2
 80011b6:	0328      	lsls	r0, r5, #12
 80011b8:	0f62      	lsrs	r2, r4, #29
 80011ba:	0a40      	lsrs	r0, r0, #9
 80011bc:	4310      	orrs	r0, r2
 80011be:	007a      	lsls	r2, r7, #1
 80011c0:	0d52      	lsrs	r2, r2, #21
 80011c2:	00e3      	lsls	r3, r4, #3
 80011c4:	033c      	lsls	r4, r7, #12
 80011c6:	4691      	mov	r9, r2
 80011c8:	0a64      	lsrs	r4, r4, #9
 80011ca:	0ffa      	lsrs	r2, r7, #31
 80011cc:	0f4f      	lsrs	r7, r1, #29
 80011ce:	006e      	lsls	r6, r5, #1
 80011d0:	4327      	orrs	r7, r4
 80011d2:	4692      	mov	sl, r2
 80011d4:	46b8      	mov	r8, r7
 80011d6:	0d76      	lsrs	r6, r6, #21
 80011d8:	0fed      	lsrs	r5, r5, #31
 80011da:	00c9      	lsls	r1, r1, #3
 80011dc:	4295      	cmp	r5, r2
 80011de:	d100      	bne.n	80011e2 <__aeabi_dadd+0x3e>
 80011e0:	e099      	b.n	8001316 <__aeabi_dadd+0x172>
 80011e2:	464c      	mov	r4, r9
 80011e4:	1b34      	subs	r4, r6, r4
 80011e6:	46a4      	mov	ip, r4
 80011e8:	2c00      	cmp	r4, #0
 80011ea:	dc00      	bgt.n	80011ee <__aeabi_dadd+0x4a>
 80011ec:	e07c      	b.n	80012e8 <__aeabi_dadd+0x144>
 80011ee:	464a      	mov	r2, r9
 80011f0:	2a00      	cmp	r2, #0
 80011f2:	d100      	bne.n	80011f6 <__aeabi_dadd+0x52>
 80011f4:	e0b8      	b.n	8001368 <__aeabi_dadd+0x1c4>
 80011f6:	4ac5      	ldr	r2, [pc, #788]	; (800150c <__aeabi_dadd+0x368>)
 80011f8:	4296      	cmp	r6, r2
 80011fa:	d100      	bne.n	80011fe <__aeabi_dadd+0x5a>
 80011fc:	e11c      	b.n	8001438 <__aeabi_dadd+0x294>
 80011fe:	2280      	movs	r2, #128	; 0x80
 8001200:	003c      	movs	r4, r7
 8001202:	0412      	lsls	r2, r2, #16
 8001204:	4314      	orrs	r4, r2
 8001206:	46a0      	mov	r8, r4
 8001208:	4662      	mov	r2, ip
 800120a:	2a38      	cmp	r2, #56	; 0x38
 800120c:	dd00      	ble.n	8001210 <__aeabi_dadd+0x6c>
 800120e:	e161      	b.n	80014d4 <__aeabi_dadd+0x330>
 8001210:	2a1f      	cmp	r2, #31
 8001212:	dd00      	ble.n	8001216 <__aeabi_dadd+0x72>
 8001214:	e1cc      	b.n	80015b0 <__aeabi_dadd+0x40c>
 8001216:	4664      	mov	r4, ip
 8001218:	2220      	movs	r2, #32
 800121a:	1b12      	subs	r2, r2, r4
 800121c:	4644      	mov	r4, r8
 800121e:	4094      	lsls	r4, r2
 8001220:	000f      	movs	r7, r1
 8001222:	46a1      	mov	r9, r4
 8001224:	4664      	mov	r4, ip
 8001226:	4091      	lsls	r1, r2
 8001228:	40e7      	lsrs	r7, r4
 800122a:	464c      	mov	r4, r9
 800122c:	1e4a      	subs	r2, r1, #1
 800122e:	4191      	sbcs	r1, r2
 8001230:	433c      	orrs	r4, r7
 8001232:	4642      	mov	r2, r8
 8001234:	4321      	orrs	r1, r4
 8001236:	4664      	mov	r4, ip
 8001238:	40e2      	lsrs	r2, r4
 800123a:	1a80      	subs	r0, r0, r2
 800123c:	1a5c      	subs	r4, r3, r1
 800123e:	42a3      	cmp	r3, r4
 8001240:	419b      	sbcs	r3, r3
 8001242:	425f      	negs	r7, r3
 8001244:	1bc7      	subs	r7, r0, r7
 8001246:	023b      	lsls	r3, r7, #8
 8001248:	d400      	bmi.n	800124c <__aeabi_dadd+0xa8>
 800124a:	e0d0      	b.n	80013ee <__aeabi_dadd+0x24a>
 800124c:	027f      	lsls	r7, r7, #9
 800124e:	0a7f      	lsrs	r7, r7, #9
 8001250:	2f00      	cmp	r7, #0
 8001252:	d100      	bne.n	8001256 <__aeabi_dadd+0xb2>
 8001254:	e0ff      	b.n	8001456 <__aeabi_dadd+0x2b2>
 8001256:	0038      	movs	r0, r7
 8001258:	f000 fc6a 	bl	8001b30 <__clzsi2>
 800125c:	0001      	movs	r1, r0
 800125e:	3908      	subs	r1, #8
 8001260:	2320      	movs	r3, #32
 8001262:	0022      	movs	r2, r4
 8001264:	1a5b      	subs	r3, r3, r1
 8001266:	408f      	lsls	r7, r1
 8001268:	40da      	lsrs	r2, r3
 800126a:	408c      	lsls	r4, r1
 800126c:	4317      	orrs	r7, r2
 800126e:	42b1      	cmp	r1, r6
 8001270:	da00      	bge.n	8001274 <__aeabi_dadd+0xd0>
 8001272:	e0ff      	b.n	8001474 <__aeabi_dadd+0x2d0>
 8001274:	1b89      	subs	r1, r1, r6
 8001276:	1c4b      	adds	r3, r1, #1
 8001278:	2b1f      	cmp	r3, #31
 800127a:	dd00      	ble.n	800127e <__aeabi_dadd+0xda>
 800127c:	e0a8      	b.n	80013d0 <__aeabi_dadd+0x22c>
 800127e:	2220      	movs	r2, #32
 8001280:	0039      	movs	r1, r7
 8001282:	1ad2      	subs	r2, r2, r3
 8001284:	0020      	movs	r0, r4
 8001286:	4094      	lsls	r4, r2
 8001288:	4091      	lsls	r1, r2
 800128a:	40d8      	lsrs	r0, r3
 800128c:	1e62      	subs	r2, r4, #1
 800128e:	4194      	sbcs	r4, r2
 8001290:	40df      	lsrs	r7, r3
 8001292:	2600      	movs	r6, #0
 8001294:	4301      	orrs	r1, r0
 8001296:	430c      	orrs	r4, r1
 8001298:	0763      	lsls	r3, r4, #29
 800129a:	d009      	beq.n	80012b0 <__aeabi_dadd+0x10c>
 800129c:	230f      	movs	r3, #15
 800129e:	4023      	ands	r3, r4
 80012a0:	2b04      	cmp	r3, #4
 80012a2:	d005      	beq.n	80012b0 <__aeabi_dadd+0x10c>
 80012a4:	1d23      	adds	r3, r4, #4
 80012a6:	42a3      	cmp	r3, r4
 80012a8:	41a4      	sbcs	r4, r4
 80012aa:	4264      	negs	r4, r4
 80012ac:	193f      	adds	r7, r7, r4
 80012ae:	001c      	movs	r4, r3
 80012b0:	023b      	lsls	r3, r7, #8
 80012b2:	d400      	bmi.n	80012b6 <__aeabi_dadd+0x112>
 80012b4:	e09e      	b.n	80013f4 <__aeabi_dadd+0x250>
 80012b6:	4b95      	ldr	r3, [pc, #596]	; (800150c <__aeabi_dadd+0x368>)
 80012b8:	3601      	adds	r6, #1
 80012ba:	429e      	cmp	r6, r3
 80012bc:	d100      	bne.n	80012c0 <__aeabi_dadd+0x11c>
 80012be:	e0b7      	b.n	8001430 <__aeabi_dadd+0x28c>
 80012c0:	4a93      	ldr	r2, [pc, #588]	; (8001510 <__aeabi_dadd+0x36c>)
 80012c2:	08e4      	lsrs	r4, r4, #3
 80012c4:	4017      	ands	r7, r2
 80012c6:	077b      	lsls	r3, r7, #29
 80012c8:	0571      	lsls	r1, r6, #21
 80012ca:	027f      	lsls	r7, r7, #9
 80012cc:	4323      	orrs	r3, r4
 80012ce:	0b3f      	lsrs	r7, r7, #12
 80012d0:	0d4a      	lsrs	r2, r1, #21
 80012d2:	0512      	lsls	r2, r2, #20
 80012d4:	433a      	orrs	r2, r7
 80012d6:	07ed      	lsls	r5, r5, #31
 80012d8:	432a      	orrs	r2, r5
 80012da:	0018      	movs	r0, r3
 80012dc:	0011      	movs	r1, r2
 80012de:	bce0      	pop	{r5, r6, r7}
 80012e0:	46ba      	mov	sl, r7
 80012e2:	46b1      	mov	r9, r6
 80012e4:	46a8      	mov	r8, r5
 80012e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012e8:	2c00      	cmp	r4, #0
 80012ea:	d04b      	beq.n	8001384 <__aeabi_dadd+0x1e0>
 80012ec:	464c      	mov	r4, r9
 80012ee:	1ba4      	subs	r4, r4, r6
 80012f0:	46a4      	mov	ip, r4
 80012f2:	2e00      	cmp	r6, #0
 80012f4:	d000      	beq.n	80012f8 <__aeabi_dadd+0x154>
 80012f6:	e123      	b.n	8001540 <__aeabi_dadd+0x39c>
 80012f8:	0004      	movs	r4, r0
 80012fa:	431c      	orrs	r4, r3
 80012fc:	d100      	bne.n	8001300 <__aeabi_dadd+0x15c>
 80012fe:	e1af      	b.n	8001660 <__aeabi_dadd+0x4bc>
 8001300:	4662      	mov	r2, ip
 8001302:	1e54      	subs	r4, r2, #1
 8001304:	2a01      	cmp	r2, #1
 8001306:	d100      	bne.n	800130a <__aeabi_dadd+0x166>
 8001308:	e215      	b.n	8001736 <__aeabi_dadd+0x592>
 800130a:	4d80      	ldr	r5, [pc, #512]	; (800150c <__aeabi_dadd+0x368>)
 800130c:	45ac      	cmp	ip, r5
 800130e:	d100      	bne.n	8001312 <__aeabi_dadd+0x16e>
 8001310:	e1c8      	b.n	80016a4 <__aeabi_dadd+0x500>
 8001312:	46a4      	mov	ip, r4
 8001314:	e11b      	b.n	800154e <__aeabi_dadd+0x3aa>
 8001316:	464a      	mov	r2, r9
 8001318:	1ab2      	subs	r2, r6, r2
 800131a:	4694      	mov	ip, r2
 800131c:	2a00      	cmp	r2, #0
 800131e:	dc00      	bgt.n	8001322 <__aeabi_dadd+0x17e>
 8001320:	e0ac      	b.n	800147c <__aeabi_dadd+0x2d8>
 8001322:	464a      	mov	r2, r9
 8001324:	2a00      	cmp	r2, #0
 8001326:	d043      	beq.n	80013b0 <__aeabi_dadd+0x20c>
 8001328:	4a78      	ldr	r2, [pc, #480]	; (800150c <__aeabi_dadd+0x368>)
 800132a:	4296      	cmp	r6, r2
 800132c:	d100      	bne.n	8001330 <__aeabi_dadd+0x18c>
 800132e:	e1af      	b.n	8001690 <__aeabi_dadd+0x4ec>
 8001330:	2280      	movs	r2, #128	; 0x80
 8001332:	003c      	movs	r4, r7
 8001334:	0412      	lsls	r2, r2, #16
 8001336:	4314      	orrs	r4, r2
 8001338:	46a0      	mov	r8, r4
 800133a:	4662      	mov	r2, ip
 800133c:	2a38      	cmp	r2, #56	; 0x38
 800133e:	dc67      	bgt.n	8001410 <__aeabi_dadd+0x26c>
 8001340:	2a1f      	cmp	r2, #31
 8001342:	dc00      	bgt.n	8001346 <__aeabi_dadd+0x1a2>
 8001344:	e15f      	b.n	8001606 <__aeabi_dadd+0x462>
 8001346:	4647      	mov	r7, r8
 8001348:	3a20      	subs	r2, #32
 800134a:	40d7      	lsrs	r7, r2
 800134c:	4662      	mov	r2, ip
 800134e:	2a20      	cmp	r2, #32
 8001350:	d005      	beq.n	800135e <__aeabi_dadd+0x1ba>
 8001352:	4664      	mov	r4, ip
 8001354:	2240      	movs	r2, #64	; 0x40
 8001356:	1b12      	subs	r2, r2, r4
 8001358:	4644      	mov	r4, r8
 800135a:	4094      	lsls	r4, r2
 800135c:	4321      	orrs	r1, r4
 800135e:	1e4a      	subs	r2, r1, #1
 8001360:	4191      	sbcs	r1, r2
 8001362:	000c      	movs	r4, r1
 8001364:	433c      	orrs	r4, r7
 8001366:	e057      	b.n	8001418 <__aeabi_dadd+0x274>
 8001368:	003a      	movs	r2, r7
 800136a:	430a      	orrs	r2, r1
 800136c:	d100      	bne.n	8001370 <__aeabi_dadd+0x1cc>
 800136e:	e105      	b.n	800157c <__aeabi_dadd+0x3d8>
 8001370:	0022      	movs	r2, r4
 8001372:	3a01      	subs	r2, #1
 8001374:	2c01      	cmp	r4, #1
 8001376:	d100      	bne.n	800137a <__aeabi_dadd+0x1d6>
 8001378:	e182      	b.n	8001680 <__aeabi_dadd+0x4dc>
 800137a:	4c64      	ldr	r4, [pc, #400]	; (800150c <__aeabi_dadd+0x368>)
 800137c:	45a4      	cmp	ip, r4
 800137e:	d05b      	beq.n	8001438 <__aeabi_dadd+0x294>
 8001380:	4694      	mov	ip, r2
 8001382:	e741      	b.n	8001208 <__aeabi_dadd+0x64>
 8001384:	4c63      	ldr	r4, [pc, #396]	; (8001514 <__aeabi_dadd+0x370>)
 8001386:	1c77      	adds	r7, r6, #1
 8001388:	4227      	tst	r7, r4
 800138a:	d000      	beq.n	800138e <__aeabi_dadd+0x1ea>
 800138c:	e0c4      	b.n	8001518 <__aeabi_dadd+0x374>
 800138e:	0004      	movs	r4, r0
 8001390:	431c      	orrs	r4, r3
 8001392:	2e00      	cmp	r6, #0
 8001394:	d000      	beq.n	8001398 <__aeabi_dadd+0x1f4>
 8001396:	e169      	b.n	800166c <__aeabi_dadd+0x4c8>
 8001398:	2c00      	cmp	r4, #0
 800139a:	d100      	bne.n	800139e <__aeabi_dadd+0x1fa>
 800139c:	e1bf      	b.n	800171e <__aeabi_dadd+0x57a>
 800139e:	4644      	mov	r4, r8
 80013a0:	430c      	orrs	r4, r1
 80013a2:	d000      	beq.n	80013a6 <__aeabi_dadd+0x202>
 80013a4:	e1d0      	b.n	8001748 <__aeabi_dadd+0x5a4>
 80013a6:	0742      	lsls	r2, r0, #29
 80013a8:	08db      	lsrs	r3, r3, #3
 80013aa:	4313      	orrs	r3, r2
 80013ac:	08c0      	lsrs	r0, r0, #3
 80013ae:	e029      	b.n	8001404 <__aeabi_dadd+0x260>
 80013b0:	003a      	movs	r2, r7
 80013b2:	430a      	orrs	r2, r1
 80013b4:	d100      	bne.n	80013b8 <__aeabi_dadd+0x214>
 80013b6:	e170      	b.n	800169a <__aeabi_dadd+0x4f6>
 80013b8:	4662      	mov	r2, ip
 80013ba:	4664      	mov	r4, ip
 80013bc:	3a01      	subs	r2, #1
 80013be:	2c01      	cmp	r4, #1
 80013c0:	d100      	bne.n	80013c4 <__aeabi_dadd+0x220>
 80013c2:	e0e0      	b.n	8001586 <__aeabi_dadd+0x3e2>
 80013c4:	4c51      	ldr	r4, [pc, #324]	; (800150c <__aeabi_dadd+0x368>)
 80013c6:	45a4      	cmp	ip, r4
 80013c8:	d100      	bne.n	80013cc <__aeabi_dadd+0x228>
 80013ca:	e161      	b.n	8001690 <__aeabi_dadd+0x4ec>
 80013cc:	4694      	mov	ip, r2
 80013ce:	e7b4      	b.n	800133a <__aeabi_dadd+0x196>
 80013d0:	003a      	movs	r2, r7
 80013d2:	391f      	subs	r1, #31
 80013d4:	40ca      	lsrs	r2, r1
 80013d6:	0011      	movs	r1, r2
 80013d8:	2b20      	cmp	r3, #32
 80013da:	d003      	beq.n	80013e4 <__aeabi_dadd+0x240>
 80013dc:	2240      	movs	r2, #64	; 0x40
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	409f      	lsls	r7, r3
 80013e2:	433c      	orrs	r4, r7
 80013e4:	1e63      	subs	r3, r4, #1
 80013e6:	419c      	sbcs	r4, r3
 80013e8:	2700      	movs	r7, #0
 80013ea:	2600      	movs	r6, #0
 80013ec:	430c      	orrs	r4, r1
 80013ee:	0763      	lsls	r3, r4, #29
 80013f0:	d000      	beq.n	80013f4 <__aeabi_dadd+0x250>
 80013f2:	e753      	b.n	800129c <__aeabi_dadd+0xf8>
 80013f4:	46b4      	mov	ip, r6
 80013f6:	08e4      	lsrs	r4, r4, #3
 80013f8:	077b      	lsls	r3, r7, #29
 80013fa:	4323      	orrs	r3, r4
 80013fc:	08f8      	lsrs	r0, r7, #3
 80013fe:	4a43      	ldr	r2, [pc, #268]	; (800150c <__aeabi_dadd+0x368>)
 8001400:	4594      	cmp	ip, r2
 8001402:	d01d      	beq.n	8001440 <__aeabi_dadd+0x29c>
 8001404:	4662      	mov	r2, ip
 8001406:	0307      	lsls	r7, r0, #12
 8001408:	0552      	lsls	r2, r2, #21
 800140a:	0b3f      	lsrs	r7, r7, #12
 800140c:	0d52      	lsrs	r2, r2, #21
 800140e:	e760      	b.n	80012d2 <__aeabi_dadd+0x12e>
 8001410:	4644      	mov	r4, r8
 8001412:	430c      	orrs	r4, r1
 8001414:	1e62      	subs	r2, r4, #1
 8001416:	4194      	sbcs	r4, r2
 8001418:	18e4      	adds	r4, r4, r3
 800141a:	429c      	cmp	r4, r3
 800141c:	419b      	sbcs	r3, r3
 800141e:	425f      	negs	r7, r3
 8001420:	183f      	adds	r7, r7, r0
 8001422:	023b      	lsls	r3, r7, #8
 8001424:	d5e3      	bpl.n	80013ee <__aeabi_dadd+0x24a>
 8001426:	4b39      	ldr	r3, [pc, #228]	; (800150c <__aeabi_dadd+0x368>)
 8001428:	3601      	adds	r6, #1
 800142a:	429e      	cmp	r6, r3
 800142c:	d000      	beq.n	8001430 <__aeabi_dadd+0x28c>
 800142e:	e0b5      	b.n	800159c <__aeabi_dadd+0x3f8>
 8001430:	0032      	movs	r2, r6
 8001432:	2700      	movs	r7, #0
 8001434:	2300      	movs	r3, #0
 8001436:	e74c      	b.n	80012d2 <__aeabi_dadd+0x12e>
 8001438:	0742      	lsls	r2, r0, #29
 800143a:	08db      	lsrs	r3, r3, #3
 800143c:	4313      	orrs	r3, r2
 800143e:	08c0      	lsrs	r0, r0, #3
 8001440:	001a      	movs	r2, r3
 8001442:	4302      	orrs	r2, r0
 8001444:	d100      	bne.n	8001448 <__aeabi_dadd+0x2a4>
 8001446:	e1e1      	b.n	800180c <__aeabi_dadd+0x668>
 8001448:	2780      	movs	r7, #128	; 0x80
 800144a:	033f      	lsls	r7, r7, #12
 800144c:	4307      	orrs	r7, r0
 800144e:	033f      	lsls	r7, r7, #12
 8001450:	4a2e      	ldr	r2, [pc, #184]	; (800150c <__aeabi_dadd+0x368>)
 8001452:	0b3f      	lsrs	r7, r7, #12
 8001454:	e73d      	b.n	80012d2 <__aeabi_dadd+0x12e>
 8001456:	0020      	movs	r0, r4
 8001458:	f000 fb6a 	bl	8001b30 <__clzsi2>
 800145c:	0001      	movs	r1, r0
 800145e:	3118      	adds	r1, #24
 8001460:	291f      	cmp	r1, #31
 8001462:	dc00      	bgt.n	8001466 <__aeabi_dadd+0x2c2>
 8001464:	e6fc      	b.n	8001260 <__aeabi_dadd+0xbc>
 8001466:	3808      	subs	r0, #8
 8001468:	4084      	lsls	r4, r0
 800146a:	0027      	movs	r7, r4
 800146c:	2400      	movs	r4, #0
 800146e:	42b1      	cmp	r1, r6
 8001470:	db00      	blt.n	8001474 <__aeabi_dadd+0x2d0>
 8001472:	e6ff      	b.n	8001274 <__aeabi_dadd+0xd0>
 8001474:	4a26      	ldr	r2, [pc, #152]	; (8001510 <__aeabi_dadd+0x36c>)
 8001476:	1a76      	subs	r6, r6, r1
 8001478:	4017      	ands	r7, r2
 800147a:	e70d      	b.n	8001298 <__aeabi_dadd+0xf4>
 800147c:	2a00      	cmp	r2, #0
 800147e:	d02f      	beq.n	80014e0 <__aeabi_dadd+0x33c>
 8001480:	464a      	mov	r2, r9
 8001482:	1b92      	subs	r2, r2, r6
 8001484:	4694      	mov	ip, r2
 8001486:	2e00      	cmp	r6, #0
 8001488:	d100      	bne.n	800148c <__aeabi_dadd+0x2e8>
 800148a:	e0ad      	b.n	80015e8 <__aeabi_dadd+0x444>
 800148c:	4a1f      	ldr	r2, [pc, #124]	; (800150c <__aeabi_dadd+0x368>)
 800148e:	4591      	cmp	r9, r2
 8001490:	d100      	bne.n	8001494 <__aeabi_dadd+0x2f0>
 8001492:	e10f      	b.n	80016b4 <__aeabi_dadd+0x510>
 8001494:	2280      	movs	r2, #128	; 0x80
 8001496:	0412      	lsls	r2, r2, #16
 8001498:	4310      	orrs	r0, r2
 800149a:	4662      	mov	r2, ip
 800149c:	2a38      	cmp	r2, #56	; 0x38
 800149e:	dd00      	ble.n	80014a2 <__aeabi_dadd+0x2fe>
 80014a0:	e10f      	b.n	80016c2 <__aeabi_dadd+0x51e>
 80014a2:	2a1f      	cmp	r2, #31
 80014a4:	dd00      	ble.n	80014a8 <__aeabi_dadd+0x304>
 80014a6:	e180      	b.n	80017aa <__aeabi_dadd+0x606>
 80014a8:	4664      	mov	r4, ip
 80014aa:	2220      	movs	r2, #32
 80014ac:	001e      	movs	r6, r3
 80014ae:	1b12      	subs	r2, r2, r4
 80014b0:	4667      	mov	r7, ip
 80014b2:	0004      	movs	r4, r0
 80014b4:	4093      	lsls	r3, r2
 80014b6:	4094      	lsls	r4, r2
 80014b8:	40fe      	lsrs	r6, r7
 80014ba:	1e5a      	subs	r2, r3, #1
 80014bc:	4193      	sbcs	r3, r2
 80014be:	40f8      	lsrs	r0, r7
 80014c0:	4334      	orrs	r4, r6
 80014c2:	431c      	orrs	r4, r3
 80014c4:	4480      	add	r8, r0
 80014c6:	1864      	adds	r4, r4, r1
 80014c8:	428c      	cmp	r4, r1
 80014ca:	41bf      	sbcs	r7, r7
 80014cc:	427f      	negs	r7, r7
 80014ce:	464e      	mov	r6, r9
 80014d0:	4447      	add	r7, r8
 80014d2:	e7a6      	b.n	8001422 <__aeabi_dadd+0x27e>
 80014d4:	4642      	mov	r2, r8
 80014d6:	430a      	orrs	r2, r1
 80014d8:	0011      	movs	r1, r2
 80014da:	1e4a      	subs	r2, r1, #1
 80014dc:	4191      	sbcs	r1, r2
 80014de:	e6ad      	b.n	800123c <__aeabi_dadd+0x98>
 80014e0:	4c0c      	ldr	r4, [pc, #48]	; (8001514 <__aeabi_dadd+0x370>)
 80014e2:	1c72      	adds	r2, r6, #1
 80014e4:	4222      	tst	r2, r4
 80014e6:	d000      	beq.n	80014ea <__aeabi_dadd+0x346>
 80014e8:	e0a1      	b.n	800162e <__aeabi_dadd+0x48a>
 80014ea:	0002      	movs	r2, r0
 80014ec:	431a      	orrs	r2, r3
 80014ee:	2e00      	cmp	r6, #0
 80014f0:	d000      	beq.n	80014f4 <__aeabi_dadd+0x350>
 80014f2:	e0fa      	b.n	80016ea <__aeabi_dadd+0x546>
 80014f4:	2a00      	cmp	r2, #0
 80014f6:	d100      	bne.n	80014fa <__aeabi_dadd+0x356>
 80014f8:	e145      	b.n	8001786 <__aeabi_dadd+0x5e2>
 80014fa:	003a      	movs	r2, r7
 80014fc:	430a      	orrs	r2, r1
 80014fe:	d000      	beq.n	8001502 <__aeabi_dadd+0x35e>
 8001500:	e146      	b.n	8001790 <__aeabi_dadd+0x5ec>
 8001502:	0742      	lsls	r2, r0, #29
 8001504:	08db      	lsrs	r3, r3, #3
 8001506:	4313      	orrs	r3, r2
 8001508:	08c0      	lsrs	r0, r0, #3
 800150a:	e77b      	b.n	8001404 <__aeabi_dadd+0x260>
 800150c:	000007ff 	.word	0x000007ff
 8001510:	ff7fffff 	.word	0xff7fffff
 8001514:	000007fe 	.word	0x000007fe
 8001518:	4647      	mov	r7, r8
 800151a:	1a5c      	subs	r4, r3, r1
 800151c:	1bc2      	subs	r2, r0, r7
 800151e:	42a3      	cmp	r3, r4
 8001520:	41bf      	sbcs	r7, r7
 8001522:	427f      	negs	r7, r7
 8001524:	46b9      	mov	r9, r7
 8001526:	0017      	movs	r7, r2
 8001528:	464a      	mov	r2, r9
 800152a:	1abf      	subs	r7, r7, r2
 800152c:	023a      	lsls	r2, r7, #8
 800152e:	d500      	bpl.n	8001532 <__aeabi_dadd+0x38e>
 8001530:	e08d      	b.n	800164e <__aeabi_dadd+0x4aa>
 8001532:	0023      	movs	r3, r4
 8001534:	433b      	orrs	r3, r7
 8001536:	d000      	beq.n	800153a <__aeabi_dadd+0x396>
 8001538:	e68a      	b.n	8001250 <__aeabi_dadd+0xac>
 800153a:	2000      	movs	r0, #0
 800153c:	2500      	movs	r5, #0
 800153e:	e761      	b.n	8001404 <__aeabi_dadd+0x260>
 8001540:	4cb4      	ldr	r4, [pc, #720]	; (8001814 <__aeabi_dadd+0x670>)
 8001542:	45a1      	cmp	r9, r4
 8001544:	d100      	bne.n	8001548 <__aeabi_dadd+0x3a4>
 8001546:	e0ad      	b.n	80016a4 <__aeabi_dadd+0x500>
 8001548:	2480      	movs	r4, #128	; 0x80
 800154a:	0424      	lsls	r4, r4, #16
 800154c:	4320      	orrs	r0, r4
 800154e:	4664      	mov	r4, ip
 8001550:	2c38      	cmp	r4, #56	; 0x38
 8001552:	dc3d      	bgt.n	80015d0 <__aeabi_dadd+0x42c>
 8001554:	4662      	mov	r2, ip
 8001556:	2c1f      	cmp	r4, #31
 8001558:	dd00      	ble.n	800155c <__aeabi_dadd+0x3b8>
 800155a:	e0b7      	b.n	80016cc <__aeabi_dadd+0x528>
 800155c:	2520      	movs	r5, #32
 800155e:	001e      	movs	r6, r3
 8001560:	1b2d      	subs	r5, r5, r4
 8001562:	0004      	movs	r4, r0
 8001564:	40ab      	lsls	r3, r5
 8001566:	40ac      	lsls	r4, r5
 8001568:	40d6      	lsrs	r6, r2
 800156a:	40d0      	lsrs	r0, r2
 800156c:	4642      	mov	r2, r8
 800156e:	1e5d      	subs	r5, r3, #1
 8001570:	41ab      	sbcs	r3, r5
 8001572:	4334      	orrs	r4, r6
 8001574:	1a12      	subs	r2, r2, r0
 8001576:	4690      	mov	r8, r2
 8001578:	4323      	orrs	r3, r4
 800157a:	e02c      	b.n	80015d6 <__aeabi_dadd+0x432>
 800157c:	0742      	lsls	r2, r0, #29
 800157e:	08db      	lsrs	r3, r3, #3
 8001580:	4313      	orrs	r3, r2
 8001582:	08c0      	lsrs	r0, r0, #3
 8001584:	e73b      	b.n	80013fe <__aeabi_dadd+0x25a>
 8001586:	185c      	adds	r4, r3, r1
 8001588:	429c      	cmp	r4, r3
 800158a:	419b      	sbcs	r3, r3
 800158c:	4440      	add	r0, r8
 800158e:	425b      	negs	r3, r3
 8001590:	18c7      	adds	r7, r0, r3
 8001592:	2601      	movs	r6, #1
 8001594:	023b      	lsls	r3, r7, #8
 8001596:	d400      	bmi.n	800159a <__aeabi_dadd+0x3f6>
 8001598:	e729      	b.n	80013ee <__aeabi_dadd+0x24a>
 800159a:	2602      	movs	r6, #2
 800159c:	4a9e      	ldr	r2, [pc, #632]	; (8001818 <__aeabi_dadd+0x674>)
 800159e:	0863      	lsrs	r3, r4, #1
 80015a0:	4017      	ands	r7, r2
 80015a2:	2201      	movs	r2, #1
 80015a4:	4014      	ands	r4, r2
 80015a6:	431c      	orrs	r4, r3
 80015a8:	07fb      	lsls	r3, r7, #31
 80015aa:	431c      	orrs	r4, r3
 80015ac:	087f      	lsrs	r7, r7, #1
 80015ae:	e673      	b.n	8001298 <__aeabi_dadd+0xf4>
 80015b0:	4644      	mov	r4, r8
 80015b2:	3a20      	subs	r2, #32
 80015b4:	40d4      	lsrs	r4, r2
 80015b6:	4662      	mov	r2, ip
 80015b8:	2a20      	cmp	r2, #32
 80015ba:	d005      	beq.n	80015c8 <__aeabi_dadd+0x424>
 80015bc:	4667      	mov	r7, ip
 80015be:	2240      	movs	r2, #64	; 0x40
 80015c0:	1bd2      	subs	r2, r2, r7
 80015c2:	4647      	mov	r7, r8
 80015c4:	4097      	lsls	r7, r2
 80015c6:	4339      	orrs	r1, r7
 80015c8:	1e4a      	subs	r2, r1, #1
 80015ca:	4191      	sbcs	r1, r2
 80015cc:	4321      	orrs	r1, r4
 80015ce:	e635      	b.n	800123c <__aeabi_dadd+0x98>
 80015d0:	4303      	orrs	r3, r0
 80015d2:	1e58      	subs	r0, r3, #1
 80015d4:	4183      	sbcs	r3, r0
 80015d6:	1acc      	subs	r4, r1, r3
 80015d8:	42a1      	cmp	r1, r4
 80015da:	41bf      	sbcs	r7, r7
 80015dc:	4643      	mov	r3, r8
 80015de:	427f      	negs	r7, r7
 80015e0:	4655      	mov	r5, sl
 80015e2:	464e      	mov	r6, r9
 80015e4:	1bdf      	subs	r7, r3, r7
 80015e6:	e62e      	b.n	8001246 <__aeabi_dadd+0xa2>
 80015e8:	0002      	movs	r2, r0
 80015ea:	431a      	orrs	r2, r3
 80015ec:	d100      	bne.n	80015f0 <__aeabi_dadd+0x44c>
 80015ee:	e0bd      	b.n	800176c <__aeabi_dadd+0x5c8>
 80015f0:	4662      	mov	r2, ip
 80015f2:	4664      	mov	r4, ip
 80015f4:	3a01      	subs	r2, #1
 80015f6:	2c01      	cmp	r4, #1
 80015f8:	d100      	bne.n	80015fc <__aeabi_dadd+0x458>
 80015fa:	e0e5      	b.n	80017c8 <__aeabi_dadd+0x624>
 80015fc:	4c85      	ldr	r4, [pc, #532]	; (8001814 <__aeabi_dadd+0x670>)
 80015fe:	45a4      	cmp	ip, r4
 8001600:	d058      	beq.n	80016b4 <__aeabi_dadd+0x510>
 8001602:	4694      	mov	ip, r2
 8001604:	e749      	b.n	800149a <__aeabi_dadd+0x2f6>
 8001606:	4664      	mov	r4, ip
 8001608:	2220      	movs	r2, #32
 800160a:	1b12      	subs	r2, r2, r4
 800160c:	4644      	mov	r4, r8
 800160e:	4094      	lsls	r4, r2
 8001610:	000f      	movs	r7, r1
 8001612:	46a1      	mov	r9, r4
 8001614:	4664      	mov	r4, ip
 8001616:	4091      	lsls	r1, r2
 8001618:	40e7      	lsrs	r7, r4
 800161a:	464c      	mov	r4, r9
 800161c:	1e4a      	subs	r2, r1, #1
 800161e:	4191      	sbcs	r1, r2
 8001620:	433c      	orrs	r4, r7
 8001622:	4642      	mov	r2, r8
 8001624:	430c      	orrs	r4, r1
 8001626:	4661      	mov	r1, ip
 8001628:	40ca      	lsrs	r2, r1
 800162a:	1880      	adds	r0, r0, r2
 800162c:	e6f4      	b.n	8001418 <__aeabi_dadd+0x274>
 800162e:	4c79      	ldr	r4, [pc, #484]	; (8001814 <__aeabi_dadd+0x670>)
 8001630:	42a2      	cmp	r2, r4
 8001632:	d100      	bne.n	8001636 <__aeabi_dadd+0x492>
 8001634:	e6fd      	b.n	8001432 <__aeabi_dadd+0x28e>
 8001636:	1859      	adds	r1, r3, r1
 8001638:	4299      	cmp	r1, r3
 800163a:	419b      	sbcs	r3, r3
 800163c:	4440      	add	r0, r8
 800163e:	425f      	negs	r7, r3
 8001640:	19c7      	adds	r7, r0, r7
 8001642:	07fc      	lsls	r4, r7, #31
 8001644:	0849      	lsrs	r1, r1, #1
 8001646:	0016      	movs	r6, r2
 8001648:	430c      	orrs	r4, r1
 800164a:	087f      	lsrs	r7, r7, #1
 800164c:	e6cf      	b.n	80013ee <__aeabi_dadd+0x24a>
 800164e:	1acc      	subs	r4, r1, r3
 8001650:	42a1      	cmp	r1, r4
 8001652:	41bf      	sbcs	r7, r7
 8001654:	4643      	mov	r3, r8
 8001656:	427f      	negs	r7, r7
 8001658:	1a18      	subs	r0, r3, r0
 800165a:	4655      	mov	r5, sl
 800165c:	1bc7      	subs	r7, r0, r7
 800165e:	e5f7      	b.n	8001250 <__aeabi_dadd+0xac>
 8001660:	08c9      	lsrs	r1, r1, #3
 8001662:	077b      	lsls	r3, r7, #29
 8001664:	4655      	mov	r5, sl
 8001666:	430b      	orrs	r3, r1
 8001668:	08f8      	lsrs	r0, r7, #3
 800166a:	e6c8      	b.n	80013fe <__aeabi_dadd+0x25a>
 800166c:	2c00      	cmp	r4, #0
 800166e:	d000      	beq.n	8001672 <__aeabi_dadd+0x4ce>
 8001670:	e081      	b.n	8001776 <__aeabi_dadd+0x5d2>
 8001672:	4643      	mov	r3, r8
 8001674:	430b      	orrs	r3, r1
 8001676:	d115      	bne.n	80016a4 <__aeabi_dadd+0x500>
 8001678:	2080      	movs	r0, #128	; 0x80
 800167a:	2500      	movs	r5, #0
 800167c:	0300      	lsls	r0, r0, #12
 800167e:	e6e3      	b.n	8001448 <__aeabi_dadd+0x2a4>
 8001680:	1a5c      	subs	r4, r3, r1
 8001682:	42a3      	cmp	r3, r4
 8001684:	419b      	sbcs	r3, r3
 8001686:	1bc7      	subs	r7, r0, r7
 8001688:	425b      	negs	r3, r3
 800168a:	2601      	movs	r6, #1
 800168c:	1aff      	subs	r7, r7, r3
 800168e:	e5da      	b.n	8001246 <__aeabi_dadd+0xa2>
 8001690:	0742      	lsls	r2, r0, #29
 8001692:	08db      	lsrs	r3, r3, #3
 8001694:	4313      	orrs	r3, r2
 8001696:	08c0      	lsrs	r0, r0, #3
 8001698:	e6d2      	b.n	8001440 <__aeabi_dadd+0x29c>
 800169a:	0742      	lsls	r2, r0, #29
 800169c:	08db      	lsrs	r3, r3, #3
 800169e:	4313      	orrs	r3, r2
 80016a0:	08c0      	lsrs	r0, r0, #3
 80016a2:	e6ac      	b.n	80013fe <__aeabi_dadd+0x25a>
 80016a4:	4643      	mov	r3, r8
 80016a6:	4642      	mov	r2, r8
 80016a8:	08c9      	lsrs	r1, r1, #3
 80016aa:	075b      	lsls	r3, r3, #29
 80016ac:	4655      	mov	r5, sl
 80016ae:	430b      	orrs	r3, r1
 80016b0:	08d0      	lsrs	r0, r2, #3
 80016b2:	e6c5      	b.n	8001440 <__aeabi_dadd+0x29c>
 80016b4:	4643      	mov	r3, r8
 80016b6:	4642      	mov	r2, r8
 80016b8:	075b      	lsls	r3, r3, #29
 80016ba:	08c9      	lsrs	r1, r1, #3
 80016bc:	430b      	orrs	r3, r1
 80016be:	08d0      	lsrs	r0, r2, #3
 80016c0:	e6be      	b.n	8001440 <__aeabi_dadd+0x29c>
 80016c2:	4303      	orrs	r3, r0
 80016c4:	001c      	movs	r4, r3
 80016c6:	1e63      	subs	r3, r4, #1
 80016c8:	419c      	sbcs	r4, r3
 80016ca:	e6fc      	b.n	80014c6 <__aeabi_dadd+0x322>
 80016cc:	0002      	movs	r2, r0
 80016ce:	3c20      	subs	r4, #32
 80016d0:	40e2      	lsrs	r2, r4
 80016d2:	0014      	movs	r4, r2
 80016d4:	4662      	mov	r2, ip
 80016d6:	2a20      	cmp	r2, #32
 80016d8:	d003      	beq.n	80016e2 <__aeabi_dadd+0x53e>
 80016da:	2540      	movs	r5, #64	; 0x40
 80016dc:	1aad      	subs	r5, r5, r2
 80016de:	40a8      	lsls	r0, r5
 80016e0:	4303      	orrs	r3, r0
 80016e2:	1e58      	subs	r0, r3, #1
 80016e4:	4183      	sbcs	r3, r0
 80016e6:	4323      	orrs	r3, r4
 80016e8:	e775      	b.n	80015d6 <__aeabi_dadd+0x432>
 80016ea:	2a00      	cmp	r2, #0
 80016ec:	d0e2      	beq.n	80016b4 <__aeabi_dadd+0x510>
 80016ee:	003a      	movs	r2, r7
 80016f0:	430a      	orrs	r2, r1
 80016f2:	d0cd      	beq.n	8001690 <__aeabi_dadd+0x4ec>
 80016f4:	0742      	lsls	r2, r0, #29
 80016f6:	08db      	lsrs	r3, r3, #3
 80016f8:	4313      	orrs	r3, r2
 80016fa:	2280      	movs	r2, #128	; 0x80
 80016fc:	08c0      	lsrs	r0, r0, #3
 80016fe:	0312      	lsls	r2, r2, #12
 8001700:	4210      	tst	r0, r2
 8001702:	d006      	beq.n	8001712 <__aeabi_dadd+0x56e>
 8001704:	08fc      	lsrs	r4, r7, #3
 8001706:	4214      	tst	r4, r2
 8001708:	d103      	bne.n	8001712 <__aeabi_dadd+0x56e>
 800170a:	0020      	movs	r0, r4
 800170c:	08cb      	lsrs	r3, r1, #3
 800170e:	077a      	lsls	r2, r7, #29
 8001710:	4313      	orrs	r3, r2
 8001712:	0f5a      	lsrs	r2, r3, #29
 8001714:	00db      	lsls	r3, r3, #3
 8001716:	0752      	lsls	r2, r2, #29
 8001718:	08db      	lsrs	r3, r3, #3
 800171a:	4313      	orrs	r3, r2
 800171c:	e690      	b.n	8001440 <__aeabi_dadd+0x29c>
 800171e:	4643      	mov	r3, r8
 8001720:	430b      	orrs	r3, r1
 8001722:	d100      	bne.n	8001726 <__aeabi_dadd+0x582>
 8001724:	e709      	b.n	800153a <__aeabi_dadd+0x396>
 8001726:	4643      	mov	r3, r8
 8001728:	4642      	mov	r2, r8
 800172a:	08c9      	lsrs	r1, r1, #3
 800172c:	075b      	lsls	r3, r3, #29
 800172e:	4655      	mov	r5, sl
 8001730:	430b      	orrs	r3, r1
 8001732:	08d0      	lsrs	r0, r2, #3
 8001734:	e666      	b.n	8001404 <__aeabi_dadd+0x260>
 8001736:	1acc      	subs	r4, r1, r3
 8001738:	42a1      	cmp	r1, r4
 800173a:	4189      	sbcs	r1, r1
 800173c:	1a3f      	subs	r7, r7, r0
 800173e:	4249      	negs	r1, r1
 8001740:	4655      	mov	r5, sl
 8001742:	2601      	movs	r6, #1
 8001744:	1a7f      	subs	r7, r7, r1
 8001746:	e57e      	b.n	8001246 <__aeabi_dadd+0xa2>
 8001748:	4642      	mov	r2, r8
 800174a:	1a5c      	subs	r4, r3, r1
 800174c:	1a87      	subs	r7, r0, r2
 800174e:	42a3      	cmp	r3, r4
 8001750:	4192      	sbcs	r2, r2
 8001752:	4252      	negs	r2, r2
 8001754:	1abf      	subs	r7, r7, r2
 8001756:	023a      	lsls	r2, r7, #8
 8001758:	d53d      	bpl.n	80017d6 <__aeabi_dadd+0x632>
 800175a:	1acc      	subs	r4, r1, r3
 800175c:	42a1      	cmp	r1, r4
 800175e:	4189      	sbcs	r1, r1
 8001760:	4643      	mov	r3, r8
 8001762:	4249      	negs	r1, r1
 8001764:	1a1f      	subs	r7, r3, r0
 8001766:	4655      	mov	r5, sl
 8001768:	1a7f      	subs	r7, r7, r1
 800176a:	e595      	b.n	8001298 <__aeabi_dadd+0xf4>
 800176c:	077b      	lsls	r3, r7, #29
 800176e:	08c9      	lsrs	r1, r1, #3
 8001770:	430b      	orrs	r3, r1
 8001772:	08f8      	lsrs	r0, r7, #3
 8001774:	e643      	b.n	80013fe <__aeabi_dadd+0x25a>
 8001776:	4644      	mov	r4, r8
 8001778:	08db      	lsrs	r3, r3, #3
 800177a:	430c      	orrs	r4, r1
 800177c:	d130      	bne.n	80017e0 <__aeabi_dadd+0x63c>
 800177e:	0742      	lsls	r2, r0, #29
 8001780:	4313      	orrs	r3, r2
 8001782:	08c0      	lsrs	r0, r0, #3
 8001784:	e65c      	b.n	8001440 <__aeabi_dadd+0x29c>
 8001786:	077b      	lsls	r3, r7, #29
 8001788:	08c9      	lsrs	r1, r1, #3
 800178a:	430b      	orrs	r3, r1
 800178c:	08f8      	lsrs	r0, r7, #3
 800178e:	e639      	b.n	8001404 <__aeabi_dadd+0x260>
 8001790:	185c      	adds	r4, r3, r1
 8001792:	429c      	cmp	r4, r3
 8001794:	419b      	sbcs	r3, r3
 8001796:	4440      	add	r0, r8
 8001798:	425b      	negs	r3, r3
 800179a:	18c7      	adds	r7, r0, r3
 800179c:	023b      	lsls	r3, r7, #8
 800179e:	d400      	bmi.n	80017a2 <__aeabi_dadd+0x5fe>
 80017a0:	e625      	b.n	80013ee <__aeabi_dadd+0x24a>
 80017a2:	4b1d      	ldr	r3, [pc, #116]	; (8001818 <__aeabi_dadd+0x674>)
 80017a4:	2601      	movs	r6, #1
 80017a6:	401f      	ands	r7, r3
 80017a8:	e621      	b.n	80013ee <__aeabi_dadd+0x24a>
 80017aa:	0004      	movs	r4, r0
 80017ac:	3a20      	subs	r2, #32
 80017ae:	40d4      	lsrs	r4, r2
 80017b0:	4662      	mov	r2, ip
 80017b2:	2a20      	cmp	r2, #32
 80017b4:	d004      	beq.n	80017c0 <__aeabi_dadd+0x61c>
 80017b6:	2240      	movs	r2, #64	; 0x40
 80017b8:	4666      	mov	r6, ip
 80017ba:	1b92      	subs	r2, r2, r6
 80017bc:	4090      	lsls	r0, r2
 80017be:	4303      	orrs	r3, r0
 80017c0:	1e5a      	subs	r2, r3, #1
 80017c2:	4193      	sbcs	r3, r2
 80017c4:	431c      	orrs	r4, r3
 80017c6:	e67e      	b.n	80014c6 <__aeabi_dadd+0x322>
 80017c8:	185c      	adds	r4, r3, r1
 80017ca:	428c      	cmp	r4, r1
 80017cc:	4189      	sbcs	r1, r1
 80017ce:	4440      	add	r0, r8
 80017d0:	4249      	negs	r1, r1
 80017d2:	1847      	adds	r7, r0, r1
 80017d4:	e6dd      	b.n	8001592 <__aeabi_dadd+0x3ee>
 80017d6:	0023      	movs	r3, r4
 80017d8:	433b      	orrs	r3, r7
 80017da:	d100      	bne.n	80017de <__aeabi_dadd+0x63a>
 80017dc:	e6ad      	b.n	800153a <__aeabi_dadd+0x396>
 80017de:	e606      	b.n	80013ee <__aeabi_dadd+0x24a>
 80017e0:	0744      	lsls	r4, r0, #29
 80017e2:	4323      	orrs	r3, r4
 80017e4:	2480      	movs	r4, #128	; 0x80
 80017e6:	08c0      	lsrs	r0, r0, #3
 80017e8:	0324      	lsls	r4, r4, #12
 80017ea:	4220      	tst	r0, r4
 80017ec:	d008      	beq.n	8001800 <__aeabi_dadd+0x65c>
 80017ee:	4642      	mov	r2, r8
 80017f0:	08d6      	lsrs	r6, r2, #3
 80017f2:	4226      	tst	r6, r4
 80017f4:	d104      	bne.n	8001800 <__aeabi_dadd+0x65c>
 80017f6:	4655      	mov	r5, sl
 80017f8:	0030      	movs	r0, r6
 80017fa:	08cb      	lsrs	r3, r1, #3
 80017fc:	0751      	lsls	r1, r2, #29
 80017fe:	430b      	orrs	r3, r1
 8001800:	0f5a      	lsrs	r2, r3, #29
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	08db      	lsrs	r3, r3, #3
 8001806:	0752      	lsls	r2, r2, #29
 8001808:	4313      	orrs	r3, r2
 800180a:	e619      	b.n	8001440 <__aeabi_dadd+0x29c>
 800180c:	2300      	movs	r3, #0
 800180e:	4a01      	ldr	r2, [pc, #4]	; (8001814 <__aeabi_dadd+0x670>)
 8001810:	001f      	movs	r7, r3
 8001812:	e55e      	b.n	80012d2 <__aeabi_dadd+0x12e>
 8001814:	000007ff 	.word	0x000007ff
 8001818:	ff7fffff 	.word	0xff7fffff

0800181c <__eqdf2>:
 800181c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800181e:	464e      	mov	r6, r9
 8001820:	4645      	mov	r5, r8
 8001822:	46de      	mov	lr, fp
 8001824:	4657      	mov	r7, sl
 8001826:	4690      	mov	r8, r2
 8001828:	b5e0      	push	{r5, r6, r7, lr}
 800182a:	0017      	movs	r7, r2
 800182c:	031a      	lsls	r2, r3, #12
 800182e:	0b12      	lsrs	r2, r2, #12
 8001830:	0005      	movs	r5, r0
 8001832:	4684      	mov	ip, r0
 8001834:	4819      	ldr	r0, [pc, #100]	; (800189c <__eqdf2+0x80>)
 8001836:	030e      	lsls	r6, r1, #12
 8001838:	004c      	lsls	r4, r1, #1
 800183a:	4691      	mov	r9, r2
 800183c:	005a      	lsls	r2, r3, #1
 800183e:	0fdb      	lsrs	r3, r3, #31
 8001840:	469b      	mov	fp, r3
 8001842:	0b36      	lsrs	r6, r6, #12
 8001844:	0d64      	lsrs	r4, r4, #21
 8001846:	0fc9      	lsrs	r1, r1, #31
 8001848:	0d52      	lsrs	r2, r2, #21
 800184a:	4284      	cmp	r4, r0
 800184c:	d019      	beq.n	8001882 <__eqdf2+0x66>
 800184e:	4282      	cmp	r2, r0
 8001850:	d010      	beq.n	8001874 <__eqdf2+0x58>
 8001852:	2001      	movs	r0, #1
 8001854:	4294      	cmp	r4, r2
 8001856:	d10e      	bne.n	8001876 <__eqdf2+0x5a>
 8001858:	454e      	cmp	r6, r9
 800185a:	d10c      	bne.n	8001876 <__eqdf2+0x5a>
 800185c:	2001      	movs	r0, #1
 800185e:	45c4      	cmp	ip, r8
 8001860:	d109      	bne.n	8001876 <__eqdf2+0x5a>
 8001862:	4559      	cmp	r1, fp
 8001864:	d017      	beq.n	8001896 <__eqdf2+0x7a>
 8001866:	2c00      	cmp	r4, #0
 8001868:	d105      	bne.n	8001876 <__eqdf2+0x5a>
 800186a:	0030      	movs	r0, r6
 800186c:	4328      	orrs	r0, r5
 800186e:	1e43      	subs	r3, r0, #1
 8001870:	4198      	sbcs	r0, r3
 8001872:	e000      	b.n	8001876 <__eqdf2+0x5a>
 8001874:	2001      	movs	r0, #1
 8001876:	bcf0      	pop	{r4, r5, r6, r7}
 8001878:	46bb      	mov	fp, r7
 800187a:	46b2      	mov	sl, r6
 800187c:	46a9      	mov	r9, r5
 800187e:	46a0      	mov	r8, r4
 8001880:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001882:	0033      	movs	r3, r6
 8001884:	2001      	movs	r0, #1
 8001886:	432b      	orrs	r3, r5
 8001888:	d1f5      	bne.n	8001876 <__eqdf2+0x5a>
 800188a:	42a2      	cmp	r2, r4
 800188c:	d1f3      	bne.n	8001876 <__eqdf2+0x5a>
 800188e:	464b      	mov	r3, r9
 8001890:	433b      	orrs	r3, r7
 8001892:	d1f0      	bne.n	8001876 <__eqdf2+0x5a>
 8001894:	e7e2      	b.n	800185c <__eqdf2+0x40>
 8001896:	2000      	movs	r0, #0
 8001898:	e7ed      	b.n	8001876 <__eqdf2+0x5a>
 800189a:	46c0      	nop			; (mov r8, r8)
 800189c:	000007ff 	.word	0x000007ff

080018a0 <__gedf2>:
 80018a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018a2:	4647      	mov	r7, r8
 80018a4:	46ce      	mov	lr, r9
 80018a6:	0004      	movs	r4, r0
 80018a8:	0018      	movs	r0, r3
 80018aa:	0016      	movs	r6, r2
 80018ac:	031b      	lsls	r3, r3, #12
 80018ae:	0b1b      	lsrs	r3, r3, #12
 80018b0:	4d2d      	ldr	r5, [pc, #180]	; (8001968 <__gedf2+0xc8>)
 80018b2:	004a      	lsls	r2, r1, #1
 80018b4:	4699      	mov	r9, r3
 80018b6:	b580      	push	{r7, lr}
 80018b8:	0043      	lsls	r3, r0, #1
 80018ba:	030f      	lsls	r7, r1, #12
 80018bc:	46a4      	mov	ip, r4
 80018be:	46b0      	mov	r8, r6
 80018c0:	0b3f      	lsrs	r7, r7, #12
 80018c2:	0d52      	lsrs	r2, r2, #21
 80018c4:	0fc9      	lsrs	r1, r1, #31
 80018c6:	0d5b      	lsrs	r3, r3, #21
 80018c8:	0fc0      	lsrs	r0, r0, #31
 80018ca:	42aa      	cmp	r2, r5
 80018cc:	d021      	beq.n	8001912 <__gedf2+0x72>
 80018ce:	42ab      	cmp	r3, r5
 80018d0:	d013      	beq.n	80018fa <__gedf2+0x5a>
 80018d2:	2a00      	cmp	r2, #0
 80018d4:	d122      	bne.n	800191c <__gedf2+0x7c>
 80018d6:	433c      	orrs	r4, r7
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d102      	bne.n	80018e2 <__gedf2+0x42>
 80018dc:	464d      	mov	r5, r9
 80018de:	432e      	orrs	r6, r5
 80018e0:	d022      	beq.n	8001928 <__gedf2+0x88>
 80018e2:	2c00      	cmp	r4, #0
 80018e4:	d010      	beq.n	8001908 <__gedf2+0x68>
 80018e6:	4281      	cmp	r1, r0
 80018e8:	d022      	beq.n	8001930 <__gedf2+0x90>
 80018ea:	2002      	movs	r0, #2
 80018ec:	3901      	subs	r1, #1
 80018ee:	4008      	ands	r0, r1
 80018f0:	3801      	subs	r0, #1
 80018f2:	bcc0      	pop	{r6, r7}
 80018f4:	46b9      	mov	r9, r7
 80018f6:	46b0      	mov	r8, r6
 80018f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018fa:	464d      	mov	r5, r9
 80018fc:	432e      	orrs	r6, r5
 80018fe:	d129      	bne.n	8001954 <__gedf2+0xb4>
 8001900:	2a00      	cmp	r2, #0
 8001902:	d1f0      	bne.n	80018e6 <__gedf2+0x46>
 8001904:	433c      	orrs	r4, r7
 8001906:	d1ee      	bne.n	80018e6 <__gedf2+0x46>
 8001908:	2800      	cmp	r0, #0
 800190a:	d1f2      	bne.n	80018f2 <__gedf2+0x52>
 800190c:	2001      	movs	r0, #1
 800190e:	4240      	negs	r0, r0
 8001910:	e7ef      	b.n	80018f2 <__gedf2+0x52>
 8001912:	003d      	movs	r5, r7
 8001914:	4325      	orrs	r5, r4
 8001916:	d11d      	bne.n	8001954 <__gedf2+0xb4>
 8001918:	4293      	cmp	r3, r2
 800191a:	d0ee      	beq.n	80018fa <__gedf2+0x5a>
 800191c:	2b00      	cmp	r3, #0
 800191e:	d1e2      	bne.n	80018e6 <__gedf2+0x46>
 8001920:	464c      	mov	r4, r9
 8001922:	4326      	orrs	r6, r4
 8001924:	d1df      	bne.n	80018e6 <__gedf2+0x46>
 8001926:	e7e0      	b.n	80018ea <__gedf2+0x4a>
 8001928:	2000      	movs	r0, #0
 800192a:	2c00      	cmp	r4, #0
 800192c:	d0e1      	beq.n	80018f2 <__gedf2+0x52>
 800192e:	e7dc      	b.n	80018ea <__gedf2+0x4a>
 8001930:	429a      	cmp	r2, r3
 8001932:	dc0a      	bgt.n	800194a <__gedf2+0xaa>
 8001934:	dbe8      	blt.n	8001908 <__gedf2+0x68>
 8001936:	454f      	cmp	r7, r9
 8001938:	d8d7      	bhi.n	80018ea <__gedf2+0x4a>
 800193a:	d00e      	beq.n	800195a <__gedf2+0xba>
 800193c:	2000      	movs	r0, #0
 800193e:	454f      	cmp	r7, r9
 8001940:	d2d7      	bcs.n	80018f2 <__gedf2+0x52>
 8001942:	2900      	cmp	r1, #0
 8001944:	d0e2      	beq.n	800190c <__gedf2+0x6c>
 8001946:	0008      	movs	r0, r1
 8001948:	e7d3      	b.n	80018f2 <__gedf2+0x52>
 800194a:	4243      	negs	r3, r0
 800194c:	4158      	adcs	r0, r3
 800194e:	0040      	lsls	r0, r0, #1
 8001950:	3801      	subs	r0, #1
 8001952:	e7ce      	b.n	80018f2 <__gedf2+0x52>
 8001954:	2002      	movs	r0, #2
 8001956:	4240      	negs	r0, r0
 8001958:	e7cb      	b.n	80018f2 <__gedf2+0x52>
 800195a:	45c4      	cmp	ip, r8
 800195c:	d8c5      	bhi.n	80018ea <__gedf2+0x4a>
 800195e:	2000      	movs	r0, #0
 8001960:	45c4      	cmp	ip, r8
 8001962:	d2c6      	bcs.n	80018f2 <__gedf2+0x52>
 8001964:	e7ed      	b.n	8001942 <__gedf2+0xa2>
 8001966:	46c0      	nop			; (mov r8, r8)
 8001968:	000007ff 	.word	0x000007ff

0800196c <__ledf2>:
 800196c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800196e:	4647      	mov	r7, r8
 8001970:	46ce      	mov	lr, r9
 8001972:	0004      	movs	r4, r0
 8001974:	0018      	movs	r0, r3
 8001976:	0016      	movs	r6, r2
 8001978:	031b      	lsls	r3, r3, #12
 800197a:	0b1b      	lsrs	r3, r3, #12
 800197c:	4d2c      	ldr	r5, [pc, #176]	; (8001a30 <__ledf2+0xc4>)
 800197e:	004a      	lsls	r2, r1, #1
 8001980:	4699      	mov	r9, r3
 8001982:	b580      	push	{r7, lr}
 8001984:	0043      	lsls	r3, r0, #1
 8001986:	030f      	lsls	r7, r1, #12
 8001988:	46a4      	mov	ip, r4
 800198a:	46b0      	mov	r8, r6
 800198c:	0b3f      	lsrs	r7, r7, #12
 800198e:	0d52      	lsrs	r2, r2, #21
 8001990:	0fc9      	lsrs	r1, r1, #31
 8001992:	0d5b      	lsrs	r3, r3, #21
 8001994:	0fc0      	lsrs	r0, r0, #31
 8001996:	42aa      	cmp	r2, r5
 8001998:	d00d      	beq.n	80019b6 <__ledf2+0x4a>
 800199a:	42ab      	cmp	r3, r5
 800199c:	d010      	beq.n	80019c0 <__ledf2+0x54>
 800199e:	2a00      	cmp	r2, #0
 80019a0:	d127      	bne.n	80019f2 <__ledf2+0x86>
 80019a2:	433c      	orrs	r4, r7
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d111      	bne.n	80019cc <__ledf2+0x60>
 80019a8:	464d      	mov	r5, r9
 80019aa:	432e      	orrs	r6, r5
 80019ac:	d10e      	bne.n	80019cc <__ledf2+0x60>
 80019ae:	2000      	movs	r0, #0
 80019b0:	2c00      	cmp	r4, #0
 80019b2:	d015      	beq.n	80019e0 <__ledf2+0x74>
 80019b4:	e00e      	b.n	80019d4 <__ledf2+0x68>
 80019b6:	003d      	movs	r5, r7
 80019b8:	4325      	orrs	r5, r4
 80019ba:	d110      	bne.n	80019de <__ledf2+0x72>
 80019bc:	4293      	cmp	r3, r2
 80019be:	d118      	bne.n	80019f2 <__ledf2+0x86>
 80019c0:	464d      	mov	r5, r9
 80019c2:	432e      	orrs	r6, r5
 80019c4:	d10b      	bne.n	80019de <__ledf2+0x72>
 80019c6:	2a00      	cmp	r2, #0
 80019c8:	d102      	bne.n	80019d0 <__ledf2+0x64>
 80019ca:	433c      	orrs	r4, r7
 80019cc:	2c00      	cmp	r4, #0
 80019ce:	d00b      	beq.n	80019e8 <__ledf2+0x7c>
 80019d0:	4281      	cmp	r1, r0
 80019d2:	d014      	beq.n	80019fe <__ledf2+0x92>
 80019d4:	2002      	movs	r0, #2
 80019d6:	3901      	subs	r1, #1
 80019d8:	4008      	ands	r0, r1
 80019da:	3801      	subs	r0, #1
 80019dc:	e000      	b.n	80019e0 <__ledf2+0x74>
 80019de:	2002      	movs	r0, #2
 80019e0:	bcc0      	pop	{r6, r7}
 80019e2:	46b9      	mov	r9, r7
 80019e4:	46b0      	mov	r8, r6
 80019e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019e8:	2800      	cmp	r0, #0
 80019ea:	d1f9      	bne.n	80019e0 <__ledf2+0x74>
 80019ec:	2001      	movs	r0, #1
 80019ee:	4240      	negs	r0, r0
 80019f0:	e7f6      	b.n	80019e0 <__ledf2+0x74>
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1ec      	bne.n	80019d0 <__ledf2+0x64>
 80019f6:	464c      	mov	r4, r9
 80019f8:	4326      	orrs	r6, r4
 80019fa:	d1e9      	bne.n	80019d0 <__ledf2+0x64>
 80019fc:	e7ea      	b.n	80019d4 <__ledf2+0x68>
 80019fe:	429a      	cmp	r2, r3
 8001a00:	dd04      	ble.n	8001a0c <__ledf2+0xa0>
 8001a02:	4243      	negs	r3, r0
 8001a04:	4158      	adcs	r0, r3
 8001a06:	0040      	lsls	r0, r0, #1
 8001a08:	3801      	subs	r0, #1
 8001a0a:	e7e9      	b.n	80019e0 <__ledf2+0x74>
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	dbeb      	blt.n	80019e8 <__ledf2+0x7c>
 8001a10:	454f      	cmp	r7, r9
 8001a12:	d8df      	bhi.n	80019d4 <__ledf2+0x68>
 8001a14:	d006      	beq.n	8001a24 <__ledf2+0xb8>
 8001a16:	2000      	movs	r0, #0
 8001a18:	454f      	cmp	r7, r9
 8001a1a:	d2e1      	bcs.n	80019e0 <__ledf2+0x74>
 8001a1c:	2900      	cmp	r1, #0
 8001a1e:	d0e5      	beq.n	80019ec <__ledf2+0x80>
 8001a20:	0008      	movs	r0, r1
 8001a22:	e7dd      	b.n	80019e0 <__ledf2+0x74>
 8001a24:	45c4      	cmp	ip, r8
 8001a26:	d8d5      	bhi.n	80019d4 <__ledf2+0x68>
 8001a28:	2000      	movs	r0, #0
 8001a2a:	45c4      	cmp	ip, r8
 8001a2c:	d2d8      	bcs.n	80019e0 <__ledf2+0x74>
 8001a2e:	e7f5      	b.n	8001a1c <__ledf2+0xb0>
 8001a30:	000007ff 	.word	0x000007ff

08001a34 <__aeabi_d2iz>:
 8001a34:	000a      	movs	r2, r1
 8001a36:	b530      	push	{r4, r5, lr}
 8001a38:	4c13      	ldr	r4, [pc, #76]	; (8001a88 <__aeabi_d2iz+0x54>)
 8001a3a:	0053      	lsls	r3, r2, #1
 8001a3c:	0309      	lsls	r1, r1, #12
 8001a3e:	0005      	movs	r5, r0
 8001a40:	0b09      	lsrs	r1, r1, #12
 8001a42:	2000      	movs	r0, #0
 8001a44:	0d5b      	lsrs	r3, r3, #21
 8001a46:	0fd2      	lsrs	r2, r2, #31
 8001a48:	42a3      	cmp	r3, r4
 8001a4a:	dd04      	ble.n	8001a56 <__aeabi_d2iz+0x22>
 8001a4c:	480f      	ldr	r0, [pc, #60]	; (8001a8c <__aeabi_d2iz+0x58>)
 8001a4e:	4283      	cmp	r3, r0
 8001a50:	dd02      	ble.n	8001a58 <__aeabi_d2iz+0x24>
 8001a52:	4b0f      	ldr	r3, [pc, #60]	; (8001a90 <__aeabi_d2iz+0x5c>)
 8001a54:	18d0      	adds	r0, r2, r3
 8001a56:	bd30      	pop	{r4, r5, pc}
 8001a58:	2080      	movs	r0, #128	; 0x80
 8001a5a:	0340      	lsls	r0, r0, #13
 8001a5c:	4301      	orrs	r1, r0
 8001a5e:	480d      	ldr	r0, [pc, #52]	; (8001a94 <__aeabi_d2iz+0x60>)
 8001a60:	1ac0      	subs	r0, r0, r3
 8001a62:	281f      	cmp	r0, #31
 8001a64:	dd08      	ble.n	8001a78 <__aeabi_d2iz+0x44>
 8001a66:	480c      	ldr	r0, [pc, #48]	; (8001a98 <__aeabi_d2iz+0x64>)
 8001a68:	1ac3      	subs	r3, r0, r3
 8001a6a:	40d9      	lsrs	r1, r3
 8001a6c:	000b      	movs	r3, r1
 8001a6e:	4258      	negs	r0, r3
 8001a70:	2a00      	cmp	r2, #0
 8001a72:	d1f0      	bne.n	8001a56 <__aeabi_d2iz+0x22>
 8001a74:	0018      	movs	r0, r3
 8001a76:	e7ee      	b.n	8001a56 <__aeabi_d2iz+0x22>
 8001a78:	4c08      	ldr	r4, [pc, #32]	; (8001a9c <__aeabi_d2iz+0x68>)
 8001a7a:	40c5      	lsrs	r5, r0
 8001a7c:	46a4      	mov	ip, r4
 8001a7e:	4463      	add	r3, ip
 8001a80:	4099      	lsls	r1, r3
 8001a82:	000b      	movs	r3, r1
 8001a84:	432b      	orrs	r3, r5
 8001a86:	e7f2      	b.n	8001a6e <__aeabi_d2iz+0x3a>
 8001a88:	000003fe 	.word	0x000003fe
 8001a8c:	0000041d 	.word	0x0000041d
 8001a90:	7fffffff 	.word	0x7fffffff
 8001a94:	00000433 	.word	0x00000433
 8001a98:	00000413 	.word	0x00000413
 8001a9c:	fffffbed 	.word	0xfffffbed

08001aa0 <__aeabi_f2d>:
 8001aa0:	b570      	push	{r4, r5, r6, lr}
 8001aa2:	0043      	lsls	r3, r0, #1
 8001aa4:	0246      	lsls	r6, r0, #9
 8001aa6:	0fc4      	lsrs	r4, r0, #31
 8001aa8:	20fe      	movs	r0, #254	; 0xfe
 8001aaa:	0e1b      	lsrs	r3, r3, #24
 8001aac:	1c59      	adds	r1, r3, #1
 8001aae:	0a75      	lsrs	r5, r6, #9
 8001ab0:	4208      	tst	r0, r1
 8001ab2:	d00c      	beq.n	8001ace <__aeabi_f2d+0x2e>
 8001ab4:	22e0      	movs	r2, #224	; 0xe0
 8001ab6:	0092      	lsls	r2, r2, #2
 8001ab8:	4694      	mov	ip, r2
 8001aba:	076d      	lsls	r5, r5, #29
 8001abc:	0b36      	lsrs	r6, r6, #12
 8001abe:	4463      	add	r3, ip
 8001ac0:	051b      	lsls	r3, r3, #20
 8001ac2:	4333      	orrs	r3, r6
 8001ac4:	07e4      	lsls	r4, r4, #31
 8001ac6:	4323      	orrs	r3, r4
 8001ac8:	0028      	movs	r0, r5
 8001aca:	0019      	movs	r1, r3
 8001acc:	bd70      	pop	{r4, r5, r6, pc}
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d114      	bne.n	8001afc <__aeabi_f2d+0x5c>
 8001ad2:	2d00      	cmp	r5, #0
 8001ad4:	d01b      	beq.n	8001b0e <__aeabi_f2d+0x6e>
 8001ad6:	0028      	movs	r0, r5
 8001ad8:	f000 f82a 	bl	8001b30 <__clzsi2>
 8001adc:	280a      	cmp	r0, #10
 8001ade:	dc1c      	bgt.n	8001b1a <__aeabi_f2d+0x7a>
 8001ae0:	230b      	movs	r3, #11
 8001ae2:	002e      	movs	r6, r5
 8001ae4:	1a1b      	subs	r3, r3, r0
 8001ae6:	40de      	lsrs	r6, r3
 8001ae8:	0003      	movs	r3, r0
 8001aea:	3315      	adds	r3, #21
 8001aec:	409d      	lsls	r5, r3
 8001aee:	4a0e      	ldr	r2, [pc, #56]	; (8001b28 <__aeabi_f2d+0x88>)
 8001af0:	0336      	lsls	r6, r6, #12
 8001af2:	1a12      	subs	r2, r2, r0
 8001af4:	0552      	lsls	r2, r2, #21
 8001af6:	0b36      	lsrs	r6, r6, #12
 8001af8:	0d53      	lsrs	r3, r2, #21
 8001afa:	e7e1      	b.n	8001ac0 <__aeabi_f2d+0x20>
 8001afc:	2d00      	cmp	r5, #0
 8001afe:	d009      	beq.n	8001b14 <__aeabi_f2d+0x74>
 8001b00:	2280      	movs	r2, #128	; 0x80
 8001b02:	0b36      	lsrs	r6, r6, #12
 8001b04:	0312      	lsls	r2, r2, #12
 8001b06:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <__aeabi_f2d+0x8c>)
 8001b08:	076d      	lsls	r5, r5, #29
 8001b0a:	4316      	orrs	r6, r2
 8001b0c:	e7d8      	b.n	8001ac0 <__aeabi_f2d+0x20>
 8001b0e:	2300      	movs	r3, #0
 8001b10:	2600      	movs	r6, #0
 8001b12:	e7d5      	b.n	8001ac0 <__aeabi_f2d+0x20>
 8001b14:	2600      	movs	r6, #0
 8001b16:	4b05      	ldr	r3, [pc, #20]	; (8001b2c <__aeabi_f2d+0x8c>)
 8001b18:	e7d2      	b.n	8001ac0 <__aeabi_f2d+0x20>
 8001b1a:	0003      	movs	r3, r0
 8001b1c:	3b0b      	subs	r3, #11
 8001b1e:	409d      	lsls	r5, r3
 8001b20:	002e      	movs	r6, r5
 8001b22:	2500      	movs	r5, #0
 8001b24:	e7e3      	b.n	8001aee <__aeabi_f2d+0x4e>
 8001b26:	46c0      	nop			; (mov r8, r8)
 8001b28:	00000389 	.word	0x00000389
 8001b2c:	000007ff 	.word	0x000007ff

08001b30 <__clzsi2>:
 8001b30:	211c      	movs	r1, #28
 8001b32:	2301      	movs	r3, #1
 8001b34:	041b      	lsls	r3, r3, #16
 8001b36:	4298      	cmp	r0, r3
 8001b38:	d301      	bcc.n	8001b3e <__clzsi2+0xe>
 8001b3a:	0c00      	lsrs	r0, r0, #16
 8001b3c:	3910      	subs	r1, #16
 8001b3e:	0a1b      	lsrs	r3, r3, #8
 8001b40:	4298      	cmp	r0, r3
 8001b42:	d301      	bcc.n	8001b48 <__clzsi2+0x18>
 8001b44:	0a00      	lsrs	r0, r0, #8
 8001b46:	3908      	subs	r1, #8
 8001b48:	091b      	lsrs	r3, r3, #4
 8001b4a:	4298      	cmp	r0, r3
 8001b4c:	d301      	bcc.n	8001b52 <__clzsi2+0x22>
 8001b4e:	0900      	lsrs	r0, r0, #4
 8001b50:	3904      	subs	r1, #4
 8001b52:	a202      	add	r2, pc, #8	; (adr r2, 8001b5c <__clzsi2+0x2c>)
 8001b54:	5c10      	ldrb	r0, [r2, r0]
 8001b56:	1840      	adds	r0, r0, r1
 8001b58:	4770      	bx	lr
 8001b5a:	46c0      	nop			; (mov r8, r8)
 8001b5c:	02020304 	.word	0x02020304
 8001b60:	01010101 	.word	0x01010101
	...

08001b6c <__clzdi2>:
 8001b6c:	b510      	push	{r4, lr}
 8001b6e:	2900      	cmp	r1, #0
 8001b70:	d103      	bne.n	8001b7a <__clzdi2+0xe>
 8001b72:	f7ff ffdd 	bl	8001b30 <__clzsi2>
 8001b76:	3020      	adds	r0, #32
 8001b78:	e002      	b.n	8001b80 <__clzdi2+0x14>
 8001b7a:	0008      	movs	r0, r1
 8001b7c:	f7ff ffd8 	bl	8001b30 <__clzsi2>
 8001b80:	bd10      	pop	{r4, pc}
 8001b82:	46c0      	nop			; (mov r8, r8)

08001b84 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8001b84:	b510      	push	{r4, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8001b86:	f000 fea5 	bl	80028d4 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8001b8a:	f000 f977 	bl	8001e7c <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 8001b8e:	bd10      	pop	{r4, pc}

08001b90 <MX_LoRaWAN_Process>:
void MX_LoRaWAN_Process(void)
{
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001b90:	2001      	movs	r0, #1
{
 8001b92:	b510      	push	{r4, lr}
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001b94:	4240      	negs	r0, r0
 8001b96:	f00c f84b 	bl	800dc30 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 8001b9a:	bd10      	pop	{r4, pc}

08001b9c <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
  LED_Off(LED_RED2);
}
 8001b9c:	4770      	bx	lr
	...

08001ba0 <OnTxTimerEvent>:
{
 8001ba0:	b510      	push	{r4, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	2002      	movs	r0, #2
 8001ba6:	f00c f815 	bl	800dbd4 <UTIL_SEQ_SetTask>
  UTIL_TIMER_Start(&TxTimer);
 8001baa:	4802      	ldr	r0, [pc, #8]	; (8001bb4 <OnTxTimerEvent+0x14>)
 8001bac:	f00c fa5e 	bl	800e06c <UTIL_TIMER_Start>
}
 8001bb0:	bd10      	pop	{r4, pc}
 8001bb2:	46c0      	nop			; (mov r8, r8)
 8001bb4:	2000010c 	.word	0x2000010c

08001bb8 <OnMacProcessNotify>:
  }
  /* USER CODE END OnJoinRequest_1 */
}

static void OnMacProcessNotify(void)
{
 8001bb8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 8001bba:	2100      	movs	r1, #0
 8001bbc:	2001      	movs	r0, #1
 8001bbe:	f00c f809 	bl	800dbd4 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 8001bc2:	bd10      	pop	{r4, pc}

08001bc4 <OnRxData>:
{
 8001bc4:	b570      	push	{r4, r5, r6, lr}
 8001bc6:	0004      	movs	r4, r0
 8001bc8:	000d      	movs	r5, r1
 8001bca:	b086      	sub	sp, #24
  if ((appData != NULL) || (params != NULL))
 8001bcc:	2800      	cmp	r0, #0
 8001bce:	d101      	bne.n	8001bd4 <OnRxData+0x10>
 8001bd0:	2900      	cmp	r1, #0
 8001bd2:	d035      	beq.n	8001c40 <OnRxData+0x7c>
    UTIL_TIMER_Start(&RxLedTimer);
 8001bd4:	4e25      	ldr	r6, [pc, #148]	; (8001c6c <OnRxData+0xa8>)
 8001bd6:	0030      	movs	r0, r6
 8001bd8:	3018      	adds	r0, #24
 8001bda:	f00c fa47 	bl	800e06c <UTIL_TIMER_Start>
    APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Indication ==========\r\n");
 8001bde:	2200      	movs	r2, #0
 8001be0:	4b23      	ldr	r3, [pc, #140]	; (8001c70 <OnRxData+0xac>)
 8001be2:	0011      	movs	r1, r2
 8001be4:	2002      	movs	r0, #2
 8001be6:	f00b fecd 	bl	800d984 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | SLOT:%s | PORT:%d | DR:%d | RSSI:%d | SNR:%d\r\n",
 8001bea:	2304      	movs	r3, #4
 8001bec:	56eb      	ldrsb	r3, [r5, r3]
 8001bee:	4a21      	ldr	r2, [pc, #132]	; (8001c74 <OnRxData+0xb0>)
 8001bf0:	9305      	str	r3, [sp, #20]
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	56eb      	ldrsb	r3, [r5, r3]
 8001bf6:	2003      	movs	r0, #3
 8001bf8:	9304      	str	r3, [sp, #16]
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	56eb      	ldrsb	r3, [r5, r3]
 8001bfe:	9303      	str	r3, [sp, #12]
 8001c00:	7823      	ldrb	r3, [r4, #0]
 8001c02:	9302      	str	r3, [sp, #8]
 8001c04:	230c      	movs	r3, #12
 8001c06:	56eb      	ldrsb	r3, [r5, r3]
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	589b      	ldr	r3, [r3, r2]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	9301      	str	r3, [sp, #4]
 8001c10:	68ab      	ldr	r3, [r5, #8]
 8001c12:	0011      	movs	r1, r2
 8001c14:	9300      	str	r3, [sp, #0]
 8001c16:	4b18      	ldr	r3, [pc, #96]	; (8001c78 <OnRxData+0xb4>)
 8001c18:	f00b feb4 	bl	800d984 <UTIL_ADV_TRACE_COND_FSend>
    switch (appData->Port)
 8001c1c:	7823      	ldrb	r3, [r4, #0]
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d010      	beq.n	8001c44 <OnRxData+0x80>
 8001c22:	2b03      	cmp	r3, #3
 8001c24:	d10c      	bne.n	8001c40 <OnRxData+0x7c>
        if (appData->BufferSize == 1)
 8001c26:	7863      	ldrb	r3, [r4, #1]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d109      	bne.n	8001c40 <OnRxData+0x7c>
          switch (appData->Buffer[0])
 8001c2c:	6863      	ldr	r3, [r4, #4]
 8001c2e:	7818      	ldrb	r0, [r3, #0]
 8001c30:	2801      	cmp	r0, #1
 8001c32:	d003      	beq.n	8001c3c <OnRxData+0x78>
 8001c34:	2802      	cmp	r0, #2
 8001c36:	d001      	beq.n	8001c3c <OnRxData+0x78>
 8001c38:	2800      	cmp	r0, #0
 8001c3a:	d101      	bne.n	8001c40 <OnRxData+0x7c>
              LmHandlerRequestClass(CLASS_C);
 8001c3c:	f005 f8f8 	bl	8006e30 <LmHandlerRequestClass>
}
 8001c40:	b006      	add	sp, #24
 8001c42:	bd70      	pop	{r4, r5, r6, pc}
        if (appData->BufferSize == 1)
 8001c44:	7862      	ldrb	r2, [r4, #1]
 8001c46:	2a01      	cmp	r2, #1
 8001c48:	d1fa      	bne.n	8001c40 <OnRxData+0x7c>
          AppLedStateOn = appData->Buffer[0] & 0x01;
 8001c4a:	6863      	ldr	r3, [r4, #4]
 8001c4c:	3630      	adds	r6, #48	; 0x30
 8001c4e:	7819      	ldrb	r1, [r3, #0]
 8001c50:	4011      	ands	r1, r2
 8001c52:	7031      	strb	r1, [r6, #0]
          if (AppLedStateOn == RESET)
 8001c54:	d105      	bne.n	8001c62 <OnRxData+0x9e>
            APP_LOG(TS_OFF, VLEVEL_H,   "LED OFF\r\n");
 8001c56:	000a      	movs	r2, r1
 8001c58:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <OnRxData+0xb8>)
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 8001c5a:	2003      	movs	r0, #3
 8001c5c:	f00b fe92 	bl	800d984 <UTIL_ADV_TRACE_COND_FSend>
}
 8001c60:	e7ee      	b.n	8001c40 <OnRxData+0x7c>
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 8001c62:	2200      	movs	r2, #0
 8001c64:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <OnRxData+0xbc>)
 8001c66:	0011      	movs	r1, r2
 8001c68:	e7f7      	b.n	8001c5a <OnRxData+0x96>
 8001c6a:	46c0      	nop			; (mov r8, r8)
 8001c6c:	2000010c 	.word	0x2000010c
 8001c70:	0800ec90 	.word	0x0800ec90
 8001c74:	0800e5a0 	.word	0x0800e5a0
 8001c78:	0800ecc1 	.word	0x0800ecc1
 8001c7c:	0800ed08 	.word	0x0800ed08
 8001c80:	0800ed12 	.word	0x0800ed12

08001c84 <SendTxData>:
{
 8001c84:	b5f0      	push	{r4, r5, r6, r7, lr}
  UTIL_TIMER_Time_t nextTxIn = 0;
 8001c86:	2500      	movs	r5, #0
{
 8001c88:	b08d      	sub	sp, #52	; 0x34
  EnvSensors_Read(&sensor_data);
 8001c8a:	a806      	add	r0, sp, #24
  UTIL_TIMER_Time_t nextTxIn = 0;
 8001c8c:	9505      	str	r5, [sp, #20]
  EnvSensors_Read(&sensor_data);
 8001c8e:	f000 ff1d 	bl	8002acc <EnvSensors_Read>
  temperature = (SYS_GetTemperatureLevel() >> 8);
 8001c92:	f000 fa6b 	bl	800216c <SYS_GetTemperatureLevel>
  pressure    = (uint16_t)(sensor_data.pressure * 100 / 10);      /* in hPa / 10 */
 8001c96:	4935      	ldr	r1, [pc, #212]	; (8001d6c <SendTxData+0xe8>)
  temperature = (SYS_GetTemperatureLevel() >> 8);
 8001c98:	0006      	movs	r6, r0
  pressure    = (uint16_t)(sensor_data.pressure * 100 / 10);      /* in hPa / 10 */
 8001c9a:	9806      	ldr	r0, [sp, #24]
 8001c9c:	f7fe ff4c 	bl	8000b38 <__aeabi_fmul>
 8001ca0:	4933      	ldr	r1, [pc, #204]	; (8001d70 <SendTxData+0xec>)
 8001ca2:	f7fe fd81 	bl	80007a8 <__aeabi_fdiv>
 8001ca6:	f7fe fc9b 	bl	80005e0 <__aeabi_f2uiz>
  AppData.Port = LORAWAN_USER_APP_PORT;
 8001caa:	2302      	movs	r3, #2
 8001cac:	4c31      	ldr	r4, [pc, #196]	; (8001d74 <SendTxData+0xf0>)
  pressure    = (uint16_t)(sensor_data.pressure * 100 / 10);      /* in hPa / 10 */
 8001cae:	b287      	uxth	r7, r0
  AppData.Port = LORAWAN_USER_APP_PORT;
 8001cb0:	7023      	strb	r3, [r4, #0]
  humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 8001cb2:	9808      	ldr	r0, [sp, #32]
 8001cb4:	492e      	ldr	r1, [pc, #184]	; (8001d70 <SendTxData+0xec>)
 8001cb6:	f7fe ff3f 	bl	8000b38 <__aeabi_fmul>
 8001cba:	f7fe fc91 	bl	80005e0 <__aeabi_f2uiz>
  AppData.Buffer[i++] = AppLedStateOn;
 8001cbe:	4b2e      	ldr	r3, [pc, #184]	; (8001d78 <SendTxData+0xf4>)
 8001cc0:	6862      	ldr	r2, [r4, #4]
 8001cc2:	3330      	adds	r3, #48	; 0x30
 8001cc4:	781b      	ldrb	r3, [r3, #0]
  temperature = (SYS_GetTemperatureLevel() >> 8);
 8001cc6:	1236      	asrs	r6, r6, #8
  AppData.Buffer[i++] = AppLedStateOn;
 8001cc8:	7013      	strb	r3, [r2, #0]
  AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 8001cca:	6862      	ldr	r2, [r4, #4]
 8001ccc:	0a3b      	lsrs	r3, r7, #8
 8001cce:	7053      	strb	r3, [r2, #1]
  AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 8001cd0:	6863      	ldr	r3, [r4, #4]
  humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 8001cd2:	b280      	uxth	r0, r0
  AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 8001cd4:	709f      	strb	r7, [r3, #2]
  AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 8001cd6:	6863      	ldr	r3, [r4, #4]
 8001cd8:	70de      	strb	r6, [r3, #3]
  AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 8001cda:	6862      	ldr	r2, [r4, #4]
 8001cdc:	0a03      	lsrs	r3, r0, #8
 8001cde:	7113      	strb	r3, [r2, #4]
  AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 8001ce0:	6863      	ldr	r3, [r4, #4]
 8001ce2:	7158      	strb	r0, [r3, #5]
  if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 8001ce4:	7a23      	ldrb	r3, [r4, #8]
 8001ce6:	2b08      	cmp	r3, #8
 8001ce8:	d001      	beq.n	8001cee <SendTxData+0x6a>
      || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d817      	bhi.n	8001d1e <SendTxData+0x9a>
    AppData.Buffer[i++] = 0;
 8001cee:	6863      	ldr	r3, [r4, #4]
 8001cf0:	719d      	strb	r5, [r3, #6]
    AppData.Buffer[i++] = 0;
 8001cf2:	6863      	ldr	r3, [r4, #4]
 8001cf4:	71dd      	strb	r5, [r3, #7]
    AppData.Buffer[i++] = 0;
 8001cf6:	6863      	ldr	r3, [r4, #4]
 8001cf8:	721d      	strb	r5, [r3, #8]
    AppData.Buffer[i++] = 0;
 8001cfa:	725d      	strb	r5, [r3, #9]
 8001cfc:	230a      	movs	r3, #10
  AppData.BufferSize = i;
 8001cfe:	7063      	strb	r3, [r4, #1]
  if (LORAMAC_HANDLER_SUCCESS == LmHandlerSend(&AppData, LORAWAN_DEFAULT_CONFIRMED_MSG_STATE, &nextTxIn, false))
 8001d00:	2300      	movs	r3, #0
 8001d02:	0020      	movs	r0, r4
 8001d04:	0019      	movs	r1, r3
 8001d06:	aa05      	add	r2, sp, #20
 8001d08:	f005 f92a 	bl	8006f60 <LmHandlerSend>
 8001d0c:	1e01      	subs	r1, r0, #0
 8001d0e:	d11e      	bne.n	8001d4e <SendTxData+0xca>
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 8001d10:	2201      	movs	r2, #1
 8001d12:	4b1a      	ldr	r3, [pc, #104]	; (8001d7c <SendTxData+0xf8>)
 8001d14:	0010      	movs	r0, r2
 8001d16:	f00b fe35 	bl	800d984 <UTIL_ADV_TRACE_COND_FSend>
}
 8001d1a:	b00d      	add	sp, #52	; 0x34
 8001d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 8001d1e:	6863      	ldr	r3, [r4, #4]
    latitude = sensor_data.latitude;
 8001d20:	9f09      	ldr	r7, [sp, #36]	; 0x24
    longitude = sensor_data.longitude;
 8001d22:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 8001d24:	9303      	str	r3, [sp, #12]
 8001d26:	f000 fe51 	bl	80029cc <GetBatteryLevel>
 8001d2a:	9b03      	ldr	r3, [sp, #12]
 8001d2c:	7198      	strb	r0, [r3, #6]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 8001d2e:	6862      	ldr	r2, [r4, #4]
 8001d30:	143b      	asrs	r3, r7, #16
 8001d32:	71d3      	strb	r3, [r2, #7]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 8001d34:	6863      	ldr	r3, [r4, #4]
 8001d36:	123a      	asrs	r2, r7, #8
 8001d38:	721a      	strb	r2, [r3, #8]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 8001d3a:	1432      	asrs	r2, r6, #16
 8001d3c:	729a      	strb	r2, [r3, #10]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 8001d3e:	1232      	asrs	r2, r6, #8
    AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 8001d40:	725f      	strb	r7, [r3, #9]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 8001d42:	72da      	strb	r2, [r3, #11]
    AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 8001d44:	731e      	strb	r6, [r3, #12]
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 8001d46:	735d      	strb	r5, [r3, #13]
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 8001d48:	739d      	strb	r5, [r3, #14]
 8001d4a:	230f      	movs	r3, #15
 8001d4c:	e7d7      	b.n	8001cfe <SendTxData+0x7a>
  else if (nextTxIn > 0)
 8001d4e:	9805      	ldr	r0, [sp, #20]
 8001d50:	2800      	cmp	r0, #0
 8001d52:	d0e2      	beq.n	8001d1a <SendTxData+0x96>
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 8001d54:	21fa      	movs	r1, #250	; 0xfa
 8001d56:	0089      	lsls	r1, r1, #2
 8001d58:	f7fe fa06 	bl	8000168 <__udivsi3>
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	9000      	str	r0, [sp, #0]
 8001d60:	2100      	movs	r1, #0
 8001d62:	0010      	movs	r0, r2
 8001d64:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <SendTxData+0xfc>)
 8001d66:	f00b fe0d 	bl	800d984 <UTIL_ADV_TRACE_COND_FSend>
}
 8001d6a:	e7d6      	b.n	8001d1a <SendTxData+0x96>
 8001d6c:	42c80000 	.word	0x42c80000
 8001d70:	41200000 	.word	0x41200000
 8001d74:	20000000 	.word	0x20000000
 8001d78:	2000010c 	.word	0x2000010c
 8001d7c:	0800ed1b 	.word	0x0800ed1b
 8001d80:	0800ed2a 	.word	0x0800ed2a

08001d84 <OnTxData>:
{
 8001d84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001d86:	1e04      	subs	r4, r0, #0
  if ((params != NULL))
 8001d88:	d031      	beq.n	8001dee <OnTxData+0x6a>
    if (params->IsMcpsConfirm != 0)
 8001d8a:	7803      	ldrb	r3, [r0, #0]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d02e      	beq.n	8001dee <OnTxData+0x6a>
      UTIL_TIMER_Start(&TxLedTimer);
 8001d90:	481b      	ldr	r0, [pc, #108]	; (8001e00 <OnTxData+0x7c>)
 8001d92:	3034      	adds	r0, #52	; 0x34
 8001d94:	f00c f96a 	bl	800e06c <UTIL_TIMER_Start>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 8001d98:	2200      	movs	r2, #0
 8001d9a:	4b1a      	ldr	r3, [pc, #104]	; (8001e04 <OnTxData+0x80>)
 8001d9c:	0011      	movs	r1, r2
 8001d9e:	2002      	movs	r0, #2
 8001da0:	f00b fdf0 	bl	800d984 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 8001da4:	2314      	movs	r3, #20
 8001da6:	56e3      	ldrsb	r3, [r4, r3]
 8001da8:	2200      	movs	r2, #0
 8001daa:	9303      	str	r3, [sp, #12]
 8001dac:	2304      	movs	r3, #4
 8001dae:	56e3      	ldrsb	r3, [r4, r3]
 8001db0:	0011      	movs	r1, r2
 8001db2:	9302      	str	r3, [sp, #8]
 8001db4:	7b23      	ldrb	r3, [r4, #12]
 8001db6:	2003      	movs	r0, #3
 8001db8:	9301      	str	r3, [sp, #4]
 8001dba:	68a3      	ldr	r3, [r4, #8]
 8001dbc:	9300      	str	r3, [sp, #0]
 8001dbe:	4b12      	ldr	r3, [pc, #72]	; (8001e08 <OnTxData+0x84>)
 8001dc0:	f00b fde0 	bl	800d984 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	4b11      	ldr	r3, [pc, #68]	; (8001e0c <OnTxData+0x88>)
 8001dc8:	0011      	movs	r1, r2
 8001dca:	2003      	movs	r0, #3
 8001dcc:	f00b fdda 	bl	800d984 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 8001dd0:	78a3      	ldrb	r3, [r4, #2]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d10c      	bne.n	8001df0 <OnTxData+0x6c>
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 8001dd6:	78e2      	ldrb	r2, [r4, #3]
 8001dd8:	4b0d      	ldr	r3, [pc, #52]	; (8001e10 <OnTxData+0x8c>)
 8001dda:	2a00      	cmp	r2, #0
 8001ddc:	d100      	bne.n	8001de0 <OnTxData+0x5c>
 8001dde:	4b0d      	ldr	r3, [pc, #52]	; (8001e14 <OnTxData+0x90>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	9300      	str	r3, [sp, #0]
 8001de4:	0011      	movs	r1, r2
 8001de6:	2003      	movs	r0, #3
 8001de8:	4b0b      	ldr	r3, [pc, #44]	; (8001e18 <OnTxData+0x94>)
 8001dea:	f00b fdcb 	bl	800d984 <UTIL_ADV_TRACE_COND_FSend>
}
 8001dee:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 8001df0:	2200      	movs	r2, #0
 8001df2:	4b0a      	ldr	r3, [pc, #40]	; (8001e1c <OnTxData+0x98>)
 8001df4:	0011      	movs	r1, r2
 8001df6:	2003      	movs	r0, #3
 8001df8:	f00b fdc4 	bl	800d984 <UTIL_ADV_TRACE_COND_FSend>
}
 8001dfc:	e7f7      	b.n	8001dee <OnTxData+0x6a>
 8001dfe:	46c0      	nop			; (mov r8, r8)
 8001e00:	2000010c 	.word	0x2000010c
 8001e04:	0800ed4d 	.word	0x0800ed4d
 8001e08:	0800ed7e 	.word	0x0800ed7e
 8001e0c:	0800edaf 	.word	0x0800edaf
 8001e10:	0800ed49 	.word	0x0800ed49
 8001e14:	0800ed48 	.word	0x0800ed48
 8001e18:	0800edbc 	.word	0x0800edbc
 8001e1c:	0800edcd 	.word	0x0800edcd

08001e20 <OnJoinRequest>:
{
 8001e20:	b570      	push	{r4, r5, r6, lr}
 8001e22:	1e05      	subs	r5, r0, #0
  if (joinParams != NULL)
 8001e24:	d016      	beq.n	8001e54 <OnJoinRequest+0x34>
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 8001e26:	2401      	movs	r4, #1
 8001e28:	5704      	ldrsb	r4, [r0, r4]
 8001e2a:	2c00      	cmp	r4, #0
 8001e2c:	d115      	bne.n	8001e5a <OnJoinRequest+0x3a>
      UTIL_TIMER_Stop(&JoinLedTimer);
 8001e2e:	480d      	ldr	r0, [pc, #52]	; (8001e64 <OnJoinRequest+0x44>)
 8001e30:	304c      	adds	r0, #76	; 0x4c
 8001e32:	f00c f8c7 	bl	800dfc4 <UTIL_TIMER_Stop>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 8001e36:	4b0c      	ldr	r3, [pc, #48]	; (8001e68 <OnJoinRequest+0x48>)
 8001e38:	0022      	movs	r2, r4
 8001e3a:	0021      	movs	r1, r4
 8001e3c:	2002      	movs	r0, #2
 8001e3e:	f00b fda1 	bl	800d984 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 8001e42:	78ab      	ldrb	r3, [r5, #2]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d106      	bne.n	8001e56 <OnJoinRequest+0x36>
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 8001e48:	4b08      	ldr	r3, [pc, #32]	; (8001e6c <OnJoinRequest+0x4c>)
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 8001e4a:	0022      	movs	r2, r4
 8001e4c:	0021      	movs	r1, r4
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 8001e4e:	2002      	movs	r0, #2
 8001e50:	f00b fd98 	bl	800d984 <UTIL_ADV_TRACE_COND_FSend>
}
 8001e54:	bd70      	pop	{r4, r5, r6, pc}
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 8001e56:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <OnJoinRequest+0x50>)
 8001e58:	e7f7      	b.n	8001e4a <OnJoinRequest+0x2a>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	4b05      	ldr	r3, [pc, #20]	; (8001e74 <OnJoinRequest+0x54>)
 8001e5e:	0011      	movs	r1, r2
 8001e60:	e7f5      	b.n	8001e4e <OnJoinRequest+0x2e>
 8001e62:	46c0      	nop			; (mov r8, r8)
 8001e64:	2000010c 	.word	0x2000010c
 8001e68:	0800eddb 	.word	0x0800eddb
 8001e6c:	0800edf0 	.word	0x0800edf0
 8001e70:	0800ee0d 	.word	0x0800ee0d
 8001e74:	0800ee2a 	.word	0x0800ee2a

08001e78 <OnJoinTimerLedEvent>:
 8001e78:	4770      	bx	lr

08001e7a <OnRxTimerLedEvent>:
 8001e7a:	4770      	bx	lr

08001e7c <LoRaWAN_Init>:
{
 8001e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION:        V%X.%X.%X\r\n",
 8001e7e:	2400      	movs	r4, #0
 8001e80:	2501      	movs	r5, #1
{
 8001e82:	b085      	sub	sp, #20
  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION:        V%X.%X.%X\r\n",
 8001e84:	0022      	movs	r2, r4
 8001e86:	0021      	movs	r1, r4
 8001e88:	9501      	str	r5, [sp, #4]
 8001e8a:	9500      	str	r5, [sp, #0]
 8001e8c:	4b36      	ldr	r3, [pc, #216]	; (8001f68 <LoRaWAN_Init+0xec>)
 8001e8e:	9402      	str	r4, [sp, #8]
 8001e90:	2002      	movs	r0, #2
 8001e92:	f00b fd77 	bl	800d984 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 8001e96:	2702      	movs	r7, #2
 8001e98:	2303      	movs	r3, #3
 8001e9a:	0022      	movs	r2, r4
 8001e9c:	0021      	movs	r1, r4
 8001e9e:	9301      	str	r3, [sp, #4]
 8001ea0:	0038      	movs	r0, r7
 8001ea2:	4b32      	ldr	r3, [pc, #200]	; (8001f6c <LoRaWAN_Init+0xf0>)
 8001ea4:	9402      	str	r4, [sp, #8]
 8001ea6:	9700      	str	r7, [sp, #0]
 8001ea8:	f00b fd6c 	bl	800d984 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:   V%X.%X.%X\r\n",
 8001eac:	0022      	movs	r2, r4
 8001eae:	0021      	movs	r1, r4
 8001eb0:	9501      	str	r5, [sp, #4]
 8001eb2:	9500      	str	r5, [sp, #0]
 8001eb4:	0038      	movs	r0, r7
 8001eb6:	4b2e      	ldr	r3, [pc, #184]	; (8001f70 <LoRaWAN_Init+0xf4>)
 8001eb8:	9402      	str	r4, [sp, #8]
 8001eba:	f00b fd63 	bl	800d984 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Create(&TxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	0022      	movs	r2, r4
 8001ec2:	4b2c      	ldr	r3, [pc, #176]	; (8001f74 <LoRaWAN_Init+0xf8>)
 8001ec4:	9400      	str	r4, [sp, #0]
 8001ec6:	4249      	negs	r1, r1
 8001ec8:	482b      	ldr	r0, [pc, #172]	; (8001f78 <LoRaWAN_Init+0xfc>)
 8001eca:	4e2c      	ldr	r6, [pc, #176]	; (8001f7c <LoRaWAN_Init+0x100>)
 8001ecc:	f00c f81a 	bl	800df04 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	0022      	movs	r2, r4
 8001ed4:	4b2a      	ldr	r3, [pc, #168]	; (8001f80 <LoRaWAN_Init+0x104>)
 8001ed6:	9400      	str	r4, [sp, #0]
 8001ed8:	4249      	negs	r1, r1
 8001eda:	482a      	ldr	r0, [pc, #168]	; (8001f84 <LoRaWAN_Init+0x108>)
 8001edc:	f00c f812 	bl	800df04 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, 0xFFFFFFFFU, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	4b29      	ldr	r3, [pc, #164]	; (8001f88 <LoRaWAN_Init+0x10c>)
 8001ee4:	002a      	movs	r2, r5
 8001ee6:	9400      	str	r4, [sp, #0]
 8001ee8:	4249      	negs	r1, r1
 8001eea:	4828      	ldr	r0, [pc, #160]	; (8001f8c <LoRaWAN_Init+0x110>)
 8001eec:	f00c f80a 	bl	800df04 <UTIL_TIMER_Create>
  UTIL_TIMER_SetPeriod(&TxLedTimer, 500);
 8001ef0:	21fa      	movs	r1, #250	; 0xfa
 8001ef2:	4821      	ldr	r0, [pc, #132]	; (8001f78 <LoRaWAN_Init+0xfc>)
 8001ef4:	0049      	lsls	r1, r1, #1
 8001ef6:	f00c f8fb 	bl	800e0f0 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&RxLedTimer, 500);
 8001efa:	21fa      	movs	r1, #250	; 0xfa
 8001efc:	4821      	ldr	r0, [pc, #132]	; (8001f84 <LoRaWAN_Init+0x108>)
 8001efe:	0049      	lsls	r1, r1, #1
 8001f00:	f00c f8f6 	bl	800e0f0 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&JoinLedTimer, 500);
 8001f04:	21fa      	movs	r1, #250	; 0xfa
 8001f06:	4821      	ldr	r0, [pc, #132]	; (8001f8c <LoRaWAN_Init+0x110>)
 8001f08:	0049      	lsls	r1, r1, #1
 8001f0a:	f00c f8f1 	bl	800e0f0 <UTIL_TIMER_SetPeriod>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 8001f0e:	0021      	movs	r1, r4
 8001f10:	0028      	movs	r0, r5
 8001f12:	4a1f      	ldr	r2, [pc, #124]	; (8001f90 <LoRaWAN_Init+0x114>)
 8001f14:	f00b fef2 	bl	800dcfc <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 8001f18:	0021      	movs	r1, r4
 8001f1a:	4a1e      	ldr	r2, [pc, #120]	; (8001f94 <LoRaWAN_Init+0x118>)
 8001f1c:	0038      	movs	r0, r7
 8001f1e:	f00b feed 	bl	800dcfc <UTIL_SEQ_RegTask>
  LoraInfo_Init();
 8001f22:	f000 f849 	bl	8001fb8 <LoraInfo_Init>
  LmHandlerInit(&LmHandlerCallbacks);
 8001f26:	4d1c      	ldr	r5, [pc, #112]	; (8001f98 <LoRaWAN_Init+0x11c>)
 8001f28:	0028      	movs	r0, r5
 8001f2a:	3018      	adds	r0, #24
 8001f2c:	f005 f9c2 	bl	80072b4 <LmHandlerInit>
  LmHandlerConfigure(&LmHandlerParams);
 8001f30:	0028      	movs	r0, r5
 8001f32:	3008      	adds	r0, #8
 8001f34:	f004 fe88 	bl	8006c48 <LmHandlerConfigure>
  UTIL_TIMER_Start(&JoinLedTimer);
 8001f38:	4814      	ldr	r0, [pc, #80]	; (8001f8c <LoRaWAN_Init+0x110>)
 8001f3a:	f00c f897 	bl	800e06c <UTIL_TIMER_Start>
  LmHandlerJoin(ActivationType);
 8001f3e:	0038      	movs	r0, r7
 8001f40:	f004 ffce 	bl	8006ee0 <LmHandlerJoin>
    UTIL_TIMER_Create(&TxTimer,  0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 8001f44:	2101      	movs	r1, #1
 8001f46:	0022      	movs	r2, r4
 8001f48:	4b14      	ldr	r3, [pc, #80]	; (8001f9c <LoRaWAN_Init+0x120>)
 8001f4a:	0030      	movs	r0, r6
 8001f4c:	9400      	str	r4, [sp, #0]
 8001f4e:	4249      	negs	r1, r1
 8001f50:	f00b ffd8 	bl	800df04 <UTIL_TIMER_Create>
    UTIL_TIMER_SetPeriod(&TxTimer,  APP_TX_DUTYCYCLE);
 8001f54:	4912      	ldr	r1, [pc, #72]	; (8001fa0 <LoRaWAN_Init+0x124>)
 8001f56:	0030      	movs	r0, r6
 8001f58:	f00c f8ca 	bl	800e0f0 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 8001f5c:	0030      	movs	r0, r6
 8001f5e:	f00c f885 	bl	800e06c <UTIL_TIMER_Start>
}
 8001f62:	b005      	add	sp, #20
 8001f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f66:	46c0      	nop			; (mov r8, r8)
 8001f68:	0800ee43 	.word	0x0800ee43
 8001f6c:	0800ee63 	.word	0x0800ee63
 8001f70:	0800ee83 	.word	0x0800ee83
 8001f74:	08001b9d 	.word	0x08001b9d
 8001f78:	20000140 	.word	0x20000140
 8001f7c:	2000010c 	.word	0x2000010c
 8001f80:	08001e7b 	.word	0x08001e7b
 8001f84:	20000124 	.word	0x20000124
 8001f88:	08001e79 	.word	0x08001e79
 8001f8c:	20000158 	.word	0x20000158
 8001f90:	08006dcd 	.word	0x08006dcd
 8001f94:	08001c85 	.word	0x08001c85
 8001f98:	20000000 	.word	0x20000000
 8001f9c:	08001ba1 	.word	0x08001ba1
 8001fa0:	00002710 	.word	0x00002710

08001fa4 <HAL_GPIO_EXTI_Callback>:
  switch (GPIO_Pin)
 8001fa4:	2380      	movs	r3, #128	; 0x80
{
 8001fa6:	b510      	push	{r4, lr}
  switch (GPIO_Pin)
 8001fa8:	019b      	lsls	r3, r3, #6
 8001faa:	4298      	cmp	r0, r3
 8001fac:	d103      	bne.n	8001fb6 <HAL_GPIO_EXTI_Callback+0x12>
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 8001fae:	2100      	movs	r1, #0
 8001fb0:	2002      	movs	r0, #2
 8001fb2:	f00b fe0f 	bl	800dbd4 <UTIL_SEQ_SetTask>
}
 8001fb6:	bd10      	pop	{r4, pc}

08001fb8 <LoraInfo_Init>:
/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
  loraInfo.ActivationMode = 0;
  loraInfo.Region = 0;
  loraInfo.ClassB = 0;
 8001fb8:	2200      	movs	r2, #0
 8001fba:	4b04      	ldr	r3, [pc, #16]	; (8001fcc <LoraInfo_Init+0x14>)
 8001fbc:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 8001fbe:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433) ;
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868) ;
 8001fc0:	3220      	adds	r2, #32
 8001fc2:	605a      	str	r2, [r3, #4]
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
  loraInfo.ActivationMode = 3;
 8001fc4:	3a1d      	subs	r2, #29
 8001fc6:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 8001fc8:	4770      	bx	lr
 8001fca:	46c0      	nop			; (mov r8, r8)
 8001fcc:	20000264 	.word	0x20000264

08001fd0 <LoraInfo_GetPtr>:
{
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
}
 8001fd0:	4800      	ldr	r0, [pc, #0]	; (8001fd4 <LoraInfo_GetPtr+0x4>)
 8001fd2:	4770      	bx	lr
 8001fd4:	20000264 	.word	0x20000264

08001fd8 <MX_ADC_Init>:
  hadc.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc.Init.LowPowerAutoPowerOff  = DISABLE;
  hadc.Init.LowPowerFrequencyMode = ENABLE;
  hadc.Init.LowPowerAutoWait      = DISABLE;
  hadc.Init.Resolution            = ADC_RESOLUTION_12B;
  hadc.Init.SamplingTime          = ADC_SAMPLETIME_160CYCLES_5;
 8001fd8:	2107      	movs	r1, #7
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 8001fda:	2201      	movs	r2, #1
{
 8001fdc:	b510      	push	{r4, lr}
  hadc.Init.OversamplingMode      = DISABLE;
 8001fde:	4c13      	ldr	r4, [pc, #76]	; (800202c <MX_ADC_Init+0x54>)
 8001fe0:	2300      	movs	r3, #0
  hadc.Init.SamplingTime          = ADC_SAMPLETIME_160CYCLES_5;
 8001fe2:	63a1      	str	r1, [r4, #56]	; 0x38
  hadc.Instance  = ADC1;
 8001fe4:	4912      	ldr	r1, [pc, #72]	; (8002030 <MX_ADC_Init+0x58>)
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 8001fe6:	6362      	str	r2, [r4, #52]	; 0x34
  hadc.Init.ScanConvMode          = ADC_SCAN_DIRECTION_FORWARD;
 8001fe8:	6122      	str	r2, [r4, #16]
  hadc.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
  hadc.Init.ContinuousConvMode    = DISABLE;
  hadc.Init.DiscontinuousConvMode = DISABLE;
  hadc.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 8001fea:	3203      	adds	r2, #3
  hadc.Instance  = ADC1;
 8001fec:	6021      	str	r1, [r4, #0]
  hadc.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 8001fee:	6162      	str	r2, [r4, #20]
  hadc.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001ff0:	2180      	movs	r1, #128	; 0x80
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001ff2:	0022      	movs	r2, r4
  hadc.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001ff4:	0609      	lsls	r1, r1, #24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001ff6:	322c      	adds	r2, #44	; 0x2c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001ff8:	0020      	movs	r0, r4
  hadc.Init.ContinuousConvMode    = DISABLE;
 8001ffa:	8423      	strh	r3, [r4, #32]
  hadc.Init.OversamplingMode      = DISABLE;
 8001ffc:	63e3      	str	r3, [r4, #60]	; 0x3c
  hadc.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ffe:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002000:	6061      	str	r1, [r4, #4]
  hadc.Init.Resolution            = ADC_RESOLUTION_12B;
 8002002:	60a3      	str	r3, [r4, #8]
  hadc.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 8002004:	60e3      	str	r3, [r4, #12]
  hadc.Init.LowPowerAutoWait      = DISABLE;
 8002006:	61a3      	str	r3, [r4, #24]
  hadc.Init.LowPowerAutoPowerOff  = DISABLE;
 8002008:	61e3      	str	r3, [r4, #28]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800200a:	7013      	strb	r3, [r2, #0]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800200c:	f001 fa34 	bl	8003478 <HAL_ADC_Init>
 8002010:	2800      	cmp	r0, #0
 8002012:	d001      	beq.n	8002018 <MX_ADC_Init+0x40>
  {
    Error_Handler();
 8002014:	f000 f942 	bl	800229c <Error_Handler>
  }

  if (HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED) != HAL_OK)
 8002018:	2100      	movs	r1, #0
 800201a:	0020      	movs	r0, r4
 800201c:	f001 fc6a 	bl	80038f4 <HAL_ADCEx_Calibration_Start>
 8002020:	2800      	cmp	r0, #0
 8002022:	d001      	beq.n	8002028 <MX_ADC_Init+0x50>
  {
    Error_Handler();
 8002024:	f000 f93a 	bl	800229c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002028:	bd10      	pop	{r4, pc}
 800202a:	46c0      	nop			; (mov r8, r8)
 800202c:	20000274 	.word	0x20000274
 8002030:	40012400 	.word	0x40012400

08002034 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle)
{

  if (adcHandle->Instance == ADC1)
 8002034:	4b05      	ldr	r3, [pc, #20]	; (800204c <HAL_ADC_MspInit+0x18>)
 8002036:	6802      	ldr	r2, [r0, #0]
 8002038:	429a      	cmp	r2, r3
 800203a:	d105      	bne.n	8002048 <HAL_ADC_MspInit+0x14>
  {
    /* USER CODE BEGIN ADC_MspInit 0 */

    /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800203c:	2380      	movs	r3, #128	; 0x80
 800203e:	4a04      	ldr	r2, [pc, #16]	; (8002050 <HAL_ADC_MspInit+0x1c>)
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8002044:	430b      	orrs	r3, r1
 8002046:	6353      	str	r3, [r2, #52]	; 0x34
    /* USER CODE BEGIN ADC_MspInit 1 */

    /* USER CODE END ADC_MspInit 1 */
  }
}
 8002048:	4770      	bx	lr
 800204a:	46c0      	nop			; (mov r8, r8)
 800204c:	40012400 	.word	0x40012400
 8002050:	40021000 	.word	0x40021000

08002054 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef *adcHandle)
{

  if (adcHandle->Instance == ADC1)
 8002054:	4b08      	ldr	r3, [pc, #32]	; (8002078 <HAL_ADC_MspDeInit+0x24>)
 8002056:	6802      	ldr	r2, [r0, #0]
 8002058:	429a      	cmp	r2, r3
 800205a:	d10c      	bne.n	8002076 <HAL_ADC_MspDeInit+0x22>
  {
    /* USER CODE BEGIN ADC_MspDeInit 0 */

    /* USER CODE END ADC_MspDeInit 0 */

    __HAL_RCC_ADC1_FORCE_RESET();
 800205c:	2280      	movs	r2, #128	; 0x80
 800205e:	4b07      	ldr	r3, [pc, #28]	; (800207c <HAL_ADC_MspDeInit+0x28>)
 8002060:	0092      	lsls	r2, r2, #2
 8002062:	6a59      	ldr	r1, [r3, #36]	; 0x24
    __HAL_RCC_ADC1_RELEASE_RESET();
 8002064:	4806      	ldr	r0, [pc, #24]	; (8002080 <HAL_ADC_MspDeInit+0x2c>)
    __HAL_RCC_ADC1_FORCE_RESET();
 8002066:	430a      	orrs	r2, r1
 8002068:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_RCC_ADC1_RELEASE_RESET();
 800206a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800206c:	4001      	ands	r1, r0
 800206e:	6259      	str	r1, [r3, #36]	; 0x24
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 8002070:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002072:	4002      	ands	r2, r0
 8002074:	635a      	str	r2, [r3, #52]	; 0x34
    /* USER CODE BEGIN ADC_MspDeInit 1 */

    /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8002076:	4770      	bx	lr
 8002078:	40012400 	.word	0x40012400
 800207c:	40021000 	.word	0x40021000
 8002080:	fffffdff 	.word	0xfffffdff

08002084 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8002084:	b573      	push	{r0, r1, r4, r5, r6, lr}
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
  ADC_ChannelConfTypeDef sConfig = {0};
 8002086:	2208      	movs	r2, #8
 8002088:	2100      	movs	r1, #0
{
 800208a:	0006      	movs	r6, r0
  ADC_ChannelConfTypeDef sConfig = {0};
 800208c:	4668      	mov	r0, sp
 800208e:	f00c f9e8 	bl	800e462 <memset>

  MX_ADC_Init();
 8002092:	f7ff ffa1 	bl	8001fd8 <MX_ADC_Init>

  /* wait the the Vrefint used by adc is set */
  while (__HAL_PWR_GET_FLAG(PWR_FLAG_VREFINTRDY) == RESET) {};
 8002096:	2308      	movs	r3, #8
 8002098:	491f      	ldr	r1, [pc, #124]	; (8002118 <ADC_ReadChannels+0x94>)
 800209a:	684a      	ldr	r2, [r1, #4]
 800209c:	421a      	tst	r2, r3
 800209e:	d0fc      	beq.n	800209a <ADC_ReadChannels+0x16>

  __HAL_RCC_ADC1_CLK_ENABLE();
 80020a0:	2380      	movs	r3, #128	; 0x80
 80020a2:	4d1e      	ldr	r5, [pc, #120]	; (800211c <ADC_ReadChannels+0x98>)

  /*calibrate ADC if any calibraiton hardware*/
  HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 80020a4:	4c1e      	ldr	r4, [pc, #120]	; (8002120 <ADC_ReadChannels+0x9c>)
  __HAL_RCC_ADC1_CLK_ENABLE();
 80020a6:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	4313      	orrs	r3, r2
  HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 80020ac:	2100      	movs	r1, #0
  __HAL_RCC_ADC1_CLK_ENABLE();
 80020ae:	636b      	str	r3, [r5, #52]	; 0x34
  HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 80020b0:	0020      	movs	r0, r4
 80020b2:	f001 fc1f 	bl	80038f4 <HAL_ADCEx_Calibration_Start>

  /* Deselects all channels*/
  sConfig.Channel = ADC_CHANNEL_MASK;
 80020b6:	4b1b      	ldr	r3, [pc, #108]	; (8002124 <ADC_ReadChannels+0xa0>)
  sConfig.Rank = ADC_RANK_NONE;
  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 80020b8:	4669      	mov	r1, sp
  sConfig.Channel = ADC_CHANNEL_MASK;
 80020ba:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_RANK_NONE;
 80020bc:	4b1a      	ldr	r3, [pc, #104]	; (8002128 <ADC_ReadChannels+0xa4>)
  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 80020be:	0020      	movs	r0, r4
  sConfig.Rank = ADC_RANK_NONE;
 80020c0:	9301      	str	r3, [sp, #4]
  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 80020c2:	f001 fbb3 	bl	800382c <HAL_ADC_ConfigChannel>

  /* Configure Regular Channel */
  sConfig.Channel = channel;
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80020c6:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80020c8:	4669      	mov	r1, sp
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80020ca:	015b      	lsls	r3, r3, #5
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80020cc:	0020      	movs	r0, r4
  sConfig.Channel = channel;
 80020ce:	9600      	str	r6, [sp, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80020d0:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80020d2:	f001 fbab 	bl	800382c <HAL_ADC_ConfigChannel>
 80020d6:	2800      	cmp	r0, #0
 80020d8:	d001      	beq.n	80020de <ADC_ReadChannels+0x5a>
  {
    Error_Handler();
 80020da:	f000 f8df 	bl	800229c <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 80020de:	0020      	movs	r0, r4
 80020e0:	f001 faf8 	bl	80036d4 <HAL_ADC_Start>
 80020e4:	2800      	cmp	r0, #0
 80020e6:	d001      	beq.n	80020ec <ADC_ReadChannels+0x68>
  {
    /* Start Error */
    Error_Handler();
 80020e8:	f000 f8d8 	bl	800229c <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80020ec:	2101      	movs	r1, #1
 80020ee:	0020      	movs	r0, r4
 80020f0:	4249      	negs	r1, r1
 80020f2:	f001 fb39 	bl	8003768 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc) ;   /* it calls also ADC_Disable() */
 80020f6:	0020      	movs	r0, r4
 80020f8:	f001 fb18 	bl	800372c <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 80020fc:	0020      	movs	r0, r4
 80020fe:	f001 fb91 	bl	8003824 <HAL_ADC_GetValue>
 8002102:	0006      	movs	r6, r0

  HAL_ADC_DeInit(&hadc);
 8002104:	0020      	movs	r0, r4
 8002106:	f001 fa91 	bl	800362c <HAL_ADC_DeInit>

  __HAL_RCC_ADC1_CLK_DISABLE();
 800210a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800210c:	4a07      	ldr	r2, [pc, #28]	; (800212c <ADC_ReadChannels+0xa8>)

  return ADCxConvertedValues;
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 800210e:	0030      	movs	r0, r6
  __HAL_RCC_ADC1_CLK_DISABLE();
 8002110:	4013      	ands	r3, r2
 8002112:	636b      	str	r3, [r5, #52]	; 0x34
}
 8002114:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8002116:	46c0      	nop			; (mov r8, r8)
 8002118:	40007000 	.word	0x40007000
 800211c:	40021000 	.word	0x40021000
 8002120:	20000274 	.word	0x20000274
 8002124:	0007ffff 	.word	0x0007ffff
 8002128:	00001001 	.word	0x00001001
 800212c:	fffffdff 	.word	0xfffffdff

08002130 <SYS_InitMeasurement>:
  hadc.Instance = ADC1;
 8002130:	4b01      	ldr	r3, [pc, #4]	; (8002138 <SYS_InitMeasurement+0x8>)
 8002132:	4a02      	ldr	r2, [pc, #8]	; (800213c <SYS_InitMeasurement+0xc>)
 8002134:	601a      	str	r2, [r3, #0]
}
 8002136:	4770      	bx	lr
 8002138:	20000274 	.word	0x20000274
 800213c:	40012400 	.word	0x40012400

08002140 <SYS_GetBatteryLevel>:
{
 8002140:	b510      	push	{r4, lr}
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8002142:	4807      	ldr	r0, [pc, #28]	; (8002160 <SYS_GetBatteryLevel+0x20>)
 8002144:	f7ff ff9e 	bl	8002084 <ADC_ReadChannels>
 8002148:	0001      	movs	r1, r0
    batteryLevelmV = 0;
 800214a:	2000      	movs	r0, #0
  if (measuredLevel == 0)
 800214c:	4281      	cmp	r1, r0
 800214e:	d006      	beq.n	800215e <SYS_GetBatteryLevel+0x1e>
    batteryLevelmV = (((uint32_t) VDDA_VREFINT_CAL * (*VREFINT_CAL)) / measuredLevel);
 8002150:	4b04      	ldr	r3, [pc, #16]	; (8002164 <SYS_GetBatteryLevel+0x24>)
 8002152:	4805      	ldr	r0, [pc, #20]	; (8002168 <SYS_GetBatteryLevel+0x28>)
 8002154:	881b      	ldrh	r3, [r3, #0]
 8002156:	4358      	muls	r0, r3
 8002158:	f7fe f806 	bl	8000168 <__udivsi3>
 800215c:	b280      	uxth	r0, r0
}
 800215e:	bd10      	pop	{r4, pc}
 8002160:	44020000 	.word	0x44020000
 8002164:	1ff80078 	.word	0x1ff80078
 8002168:	00000bb8 	.word	0x00000bb8

0800216c <SYS_GetTemperatureLevel>:
{
 800216c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 800216e:	f7ff ffe7 	bl	8002140 <SYS_GetBatteryLevel>
 8002172:	0005      	movs	r5, r0
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8002174:	480f      	ldr	r0, [pc, #60]	; (80021b4 <SYS_GetTemperatureLevel+0x48>)
 8002176:	f7ff ff85 	bl	8002084 <ADC_ReadChannels>
  temperatureDegreeC = COMPUTE_TEMPERATURE(measuredLevel, batteryLevelmV);
 800217a:	4b0f      	ldr	r3, [pc, #60]	; (80021b8 <SYS_GetTemperatureLevel+0x4c>)
 800217c:	4368      	muls	r0, r5
 800217e:	490f      	ldr	r1, [pc, #60]	; (80021bc <SYS_GetTemperatureLevel+0x50>)
 8002180:	881c      	ldrh	r4, [r3, #0]
 8002182:	f7fd fff1 	bl	8000168 <__udivsi3>
 8002186:	1b03      	subs	r3, r0, r4
 8002188:	2050      	movs	r0, #80	; 0x50
 800218a:	4358      	muls	r0, r3
 800218c:	4b0c      	ldr	r3, [pc, #48]	; (80021c0 <SYS_GetTemperatureLevel+0x54>)
 800218e:	0200      	lsls	r0, r0, #8
 8002190:	8819      	ldrh	r1, [r3, #0]
 8002192:	1b09      	subs	r1, r1, r4
 8002194:	f7fe f872 	bl	800027c <__divsi3>
 8002198:	23f0      	movs	r3, #240	; 0xf0
  APP_LOG(TS_ON, VLEVEL_L, "temp= %d\n\r", temperatureDegreeC >> 8);
 800219a:	2201      	movs	r2, #1
  temperatureDegreeC = COMPUTE_TEMPERATURE(measuredLevel, batteryLevelmV);
 800219c:	015b      	lsls	r3, r3, #5
 800219e:	18c0      	adds	r0, r0, r3
 80021a0:	b204      	sxth	r4, r0
  APP_LOG(TS_ON, VLEVEL_L, "temp= %d\n\r", temperatureDegreeC >> 8);
 80021a2:	1223      	asrs	r3, r4, #8
 80021a4:	9300      	str	r3, [sp, #0]
 80021a6:	2100      	movs	r1, #0
 80021a8:	0010      	movs	r0, r2
 80021aa:	4b06      	ldr	r3, [pc, #24]	; (80021c4 <SYS_GetTemperatureLevel+0x58>)
 80021ac:	f00b fbea 	bl	800d984 <UTIL_ADV_TRACE_COND_FSend>
}
 80021b0:	0020      	movs	r0, r4
 80021b2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 80021b4:	48040000 	.word	0x48040000
 80021b8:	1ff8007a 	.word	0x1ff8007a
 80021bc:	00000bb8 	.word	0x00000bb8
 80021c0:	1ff8007e 	.word	0x1ff8007e
 80021c4:	0800eed5 	.word	0x0800eed5

080021c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80021c8:	b507      	push	{r0, r1, r2, lr}

  /* DMA controller clock enable */

  __HAL_RCC_DMA1_CLK_ENABLE();
 80021ca:	2001      	movs	r0, #1
 80021cc:	4a08      	ldr	r2, [pc, #32]	; (80021f0 <MX_DMA_Init+0x28>)
 80021ce:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80021d0:	4301      	orrs	r1, r0
 80021d2:	6311      	str	r1, [r2, #48]	; 0x30
 80021d4:	6b13      	ldr	r3, [r2, #48]	; 0x30

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 80021d6:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80021d8:	4003      	ands	r3, r0
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 80021da:	0011      	movs	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 80021dc:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 80021de:	300a      	adds	r0, #10
  __HAL_RCC_DMA1_CLK_ENABLE();
 80021e0:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 80021e2:	f001 fbd7 	bl	8003994 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80021e6:	200b      	movs	r0, #11
 80021e8:	f001 fbfe 	bl	80039e8 <HAL_NVIC_EnableIRQ>

}
 80021ec:	bd07      	pop	{r0, r1, r2, pc}
 80021ee:	46c0      	nop			; (mov r8, r8)
 80021f0:	40021000 	.word	0x40021000

080021f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021f4:	b510      	push	{r4, lr}
 80021f6:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021f8:	222c      	movs	r2, #44	; 0x2c
 80021fa:	2100      	movs	r1, #0
 80021fc:	a807      	add	r0, sp, #28
 80021fe:	f00c f930 	bl	800e462 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002202:	2214      	movs	r2, #20
 8002204:	2100      	movs	r1, #0
 8002206:	a801      	add	r0, sp, #4
 8002208:	f00c f92b 	bl	800e462 <memset>

  /* Enable HSE Oscillator and Activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 800220c:	2302      	movs	r3, #2
 800220e:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSEState            = RCC_HSE_OFF;
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 8002210:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL          = RCC_PLLMUL_6;
 8002212:	2380      	movs	r3, #128	; 0x80
 8002214:	031b      	lsls	r3, r3, #12
 8002216:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 8002218:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 800221a:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800221c:	2410      	movs	r4, #16
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 800221e:	041b      	lsls	r3, r3, #16

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002220:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 8002222:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002224:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 8002226:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002228:	f001 ff94 	bl	8004154 <HAL_RCC_OscConfig>
 800222c:	2800      	cmp	r0, #0
 800222e:	d001      	beq.n	8002234 <SystemClock_Config+0x40>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002230:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002232:	e7fe      	b.n	8002232 <SystemClock_Config+0x3e>
  __HAL_RCC_PWR_CLK_ENABLE();
 8002234:	2380      	movs	r3, #128	; 0x80
 8002236:	4a11      	ldr	r2, [pc, #68]	; (800227c <SystemClock_Config+0x88>)
 8002238:	055b      	lsls	r3, r3, #21
 800223a:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800223c:	430b      	orrs	r3, r1
 800223e:	6393      	str	r3, [r2, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002240:	4a0f      	ldr	r2, [pc, #60]	; (8002280 <SystemClock_Config+0x8c>)
 8002242:	4910      	ldr	r1, [pc, #64]	; (8002284 <SystemClock_Config+0x90>)
 8002244:	6813      	ldr	r3, [r2, #0]
 8002246:	4019      	ands	r1, r3
 8002248:	2380      	movs	r3, #128	; 0x80
 800224a:	011b      	lsls	r3, r3, #4
 800224c:	430b      	orrs	r3, r1
 800224e:	6013      	str	r3, [r2, #0]
  while (__HAL_PWR_GET_FLAG(PWR_FLAG_VOS) != RESET) {};
 8002250:	6851      	ldr	r1, [r2, #4]
 8002252:	000b      	movs	r3, r1
 8002254:	4023      	ands	r3, r4
 8002256:	4221      	tst	r1, r4
 8002258:	d1fa      	bne.n	8002250 <SystemClock_Config+0x5c>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800225a:	220f      	movs	r2, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800225c:	2101      	movs	r1, #1
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800225e:	9201      	str	r2, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002260:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002262:	3a0c      	subs	r2, #12
 8002264:	9202      	str	r2, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002266:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002268:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800226a:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800226c:	f002 f9fc 	bl	8004668 <HAL_RCC_ClockConfig>
 8002270:	2800      	cmp	r0, #0
 8002272:	d001      	beq.n	8002278 <SystemClock_Config+0x84>
 8002274:	b672      	cpsid	i
  while (1)
 8002276:	e7fe      	b.n	8002276 <SystemClock_Config+0x82>
}
 8002278:	b014      	add	sp, #80	; 0x50
 800227a:	bd10      	pop	{r4, pc}
 800227c:	40021000 	.word	0x40021000
 8002280:	40007000 	.word	0x40007000
 8002284:	ffffe7ff 	.word	0xffffe7ff

08002288 <main>:
{
 8002288:	b510      	push	{r4, lr}
  HAL_Init();
 800228a:	f000 ffff 	bl	800328c <HAL_Init>
  SystemClock_Config();
 800228e:	f7ff ffb1 	bl	80021f4 <SystemClock_Config>
  MX_LoRaWAN_Init();
 8002292:	f7ff fc77 	bl	8001b84 <MX_LoRaWAN_Init>
    MX_LoRaWAN_Process();
 8002296:	f7ff fc7b 	bl	8001b90 <MX_LoRaWAN_Process>
  while (1)
 800229a:	e7fc      	b.n	8002296 <main+0xe>

0800229c <Error_Handler>:
 800229c:	b672      	cpsid	i
  while (1)
 800229e:	e7fe      	b.n	800229e <Error_Handler+0x2>

080022a0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80022a0:	b530      	push	{r4, r5, lr}
  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
  RTC_DateTypeDef sDate = {0};
 80022a2:	2500      	movs	r5, #0
{
 80022a4:	b091      	sub	sp, #68	; 0x44
  RTC_TimeTypeDef sTime = {0};
 80022a6:	2214      	movs	r2, #20
 80022a8:	2100      	movs	r1, #0
 80022aa:	a801      	add	r0, sp, #4
 80022ac:	f00c f8d9 	bl	800e462 <memset>
  RTC_AlarmTypeDef sAlarm = {0};
 80022b0:	2228      	movs	r2, #40	; 0x28
 80022b2:	0029      	movs	r1, r5
 80022b4:	a806      	add	r0, sp, #24
  RTC_DateTypeDef sDate = {0};
 80022b6:	9500      	str	r5, [sp, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 80022b8:	f00c f8d3 	bl	800e462 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80022bc:	4c26      	ldr	r4, [pc, #152]	; (8002358 <MX_RTC_Init+0xb8>)
 80022be:	4b27      	ldr	r3, [pc, #156]	; (800235c <MX_RTC_Init+0xbc>)
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;

  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80022c0:	0020      	movs	r0, r4
  hrtc.Instance = RTC;
 80022c2:	6023      	str	r3, [r4, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 80022c4:	231f      	movs	r3, #31
 80022c6:	60a3      	str	r3, [r4, #8]
  hrtc.Init.SynchPrediv = RTC_PREDIV_S;
 80022c8:	4b25      	ldr	r3, [pc, #148]	; (8002360 <MX_RTC_Init+0xc0>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80022ca:	6065      	str	r5, [r4, #4]
  hrtc.Init.SynchPrediv = RTC_PREDIV_S;
 80022cc:	60e3      	str	r3, [r4, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80022ce:	6125      	str	r5, [r4, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80022d0:	6165      	str	r5, [r4, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80022d2:	61a5      	str	r5, [r4, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80022d4:	61e5      	str	r5, [r4, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80022d6:	f002 fc67 	bl	8004ba8 <HAL_RTC_Init>
 80022da:	42a8      	cmp	r0, r5
 80022dc:	d001      	beq.n	80022e2 <MX_RTC_Init+0x42>
  {
    Error_Handler();
 80022de:	f7ff ffdd 	bl	800229c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80022e2:	466b      	mov	r3, sp
  sTime.Minutes = 0;
  sTime.Seconds = 0;
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80022e4:	2200      	movs	r2, #0
 80022e6:	0020      	movs	r0, r4
  sTime.Hours = 0;
 80022e8:	809d      	strh	r5, [r3, #4]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80022ea:	a901      	add	r1, sp, #4
  sTime.Seconds = 0;
 80022ec:	719d      	strb	r5, [r3, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80022ee:	9504      	str	r5, [sp, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80022f0:	9505      	str	r5, [sp, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80022f2:	f002 fcc1 	bl	8004c78 <HAL_RTC_SetTime>
 80022f6:	2800      	cmp	r0, #0
 80022f8:	d001      	beq.n	80022fe <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 80022fa:	f7ff ffcf 	bl	800229c <Error_Handler>
  }

  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80022fe:	466a      	mov	r2, sp
 8002300:	2301      	movs	r3, #1
  sDate.Month = RTC_MONTH_JANUARY;
  sDate.Date = 1;
  sDate.Year = 0;
 8002302:	2500      	movs	r5, #0
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002304:	7013      	strb	r3, [r2, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002306:	7053      	strb	r3, [r2, #1]
  sDate.Date = 1;
 8002308:	7093      	strb	r3, [r2, #2]
  sDate.Year = 0;
 800230a:	70d5      	strb	r5, [r2, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800230c:	4669      	mov	r1, sp
 800230e:	002a      	movs	r2, r5
 8002310:	0020      	movs	r0, r4
 8002312:	f002 fd35 	bl	8004d80 <HAL_RTC_SetDate>
 8002316:	42a8      	cmp	r0, r5
 8002318:	d001      	beq.n	800231e <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 800231a:	f7ff ffbf 	bl	800229c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 800231e:	466b      	mov	r3, sp
 8002320:	831d      	strh	r5, [r3, #24]
  sAlarm.AlarmTime.Minutes = 0;
  sAlarm.AlarmTime.Seconds = 0;
 8002322:	769d      	strb	r5, [r3, #26]
  sAlarm.AlarmTime.SubSeconds = 0;
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_SS14_10;
 8002324:	23a0      	movs	r3, #160	; 0xa0
 8002326:	051b      	lsls	r3, r3, #20
 8002328:	930c      	str	r3, [sp, #48]	; 0x30
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
  sAlarm.AlarmDateWeekDay = 30;
 800232a:	2319      	movs	r3, #25
 800232c:	221e      	movs	r2, #30
 800232e:	446b      	add	r3, sp
 8002330:	77da      	strb	r2, [r3, #31]
  sAlarm.Alarm = RTC_ALARM_A;
 8002332:	2380      	movs	r3, #128	; 0x80
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8002334:	2200      	movs	r2, #0
  sAlarm.Alarm = RTC_ALARM_A;
 8002336:	005b      	lsls	r3, r3, #1
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8002338:	0020      	movs	r0, r4
 800233a:	a906      	add	r1, sp, #24
  sAlarm.AlarmTime.SubSeconds = 0;
 800233c:	9507      	str	r5, [sp, #28]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800233e:	9509      	str	r5, [sp, #36]	; 0x24
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002340:	950a      	str	r5, [sp, #40]	; 0x28
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002342:	950b      	str	r5, [sp, #44]	; 0x2c
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002344:	950d      	str	r5, [sp, #52]	; 0x34
  sAlarm.Alarm = RTC_ALARM_A;
 8002346:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8002348:	f002 fd86 	bl	8004e58 <HAL_RTC_SetAlarm_IT>
 800234c:	2800      	cmp	r0, #0
 800234e:	d001      	beq.n	8002354 <MX_RTC_Init+0xb4>
  {
    Error_Handler();
 8002350:	f7ff ffa4 	bl	800229c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002354:	b011      	add	sp, #68	; 0x44
 8002356:	bd30      	pop	{r4, r5, pc}
 8002358:	200002d0 	.word	0x200002d0
 800235c:	40002800 	.word	0x40002800
 8002360:	000003ff 	.word	0x000003ff

08002364 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef *rtcHandle)
{
 8002364:	b510      	push	{r4, lr}
 8002366:	0004      	movs	r4, r0
 8002368:	b08e      	sub	sp, #56	; 0x38

  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800236a:	2238      	movs	r2, #56	; 0x38
 800236c:	2100      	movs	r1, #0
 800236e:	4668      	mov	r0, sp
 8002370:	f00c f877 	bl	800e462 <memset>
  if (rtcHandle->Instance == RTC)
 8002374:	4b0f      	ldr	r3, [pc, #60]	; (80023b4 <HAL_RTC_MspInit+0x50>)
 8002376:	6822      	ldr	r2, [r4, #0]
 8002378:	429a      	cmp	r2, r3
 800237a:	d118      	bne.n	80023ae <HAL_RTC_MspInit+0x4a>
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /** Initializes the peripherals clocks
      */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 800237c:	2304      	movs	r3, #4
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
    RCC_OscInitStruct.LSIState = RCC_LSI_OFF;
    RCC_OscInitStruct.HSEState = RCC_HSE_OFF;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800237e:	4668      	mov	r0, sp
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 8002380:	9300      	str	r3, [sp, #0]
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002382:	33fc      	adds	r3, #252	; 0xfc
 8002384:	9302      	str	r3, [sp, #8]
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002386:	f001 fee5 	bl	8004154 <HAL_RCC_OscConfig>
 800238a:	2800      	cmp	r0, #0
 800238c:	d001      	beq.n	8002392 <HAL_RTC_MspInit+0x2e>
    {
      Error_Handler();
 800238e:	f7ff ff85 	bl	800229c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002392:	2380      	movs	r3, #128	; 0x80
 8002394:	4a08      	ldr	r2, [pc, #32]	; (80023b8 <HAL_RTC_MspInit+0x54>)
 8002396:	02db      	lsls	r3, r3, #11
 8002398:	6d11      	ldr	r1, [r2, #80]	; 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 800239a:	2002      	movs	r0, #2
    __HAL_RCC_RTC_ENABLE();
 800239c:	430b      	orrs	r3, r1
 800239e:	6513      	str	r3, [r2, #80]	; 0x50
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80023a0:	2200      	movs	r2, #0
 80023a2:	0011      	movs	r1, r2
 80023a4:	f001 faf6 	bl	8003994 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80023a8:	2002      	movs	r0, #2
 80023aa:	f001 fb1d 	bl	80039e8 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN RTC_MspInit 1 */

    /* USER CODE END RTC_MspInit 1 */
  }
}
 80023ae:	b00e      	add	sp, #56	; 0x38
 80023b0:	bd10      	pop	{r4, pc}
 80023b2:	46c0      	nop			; (mov r8, r8)
 80023b4:	40002800 	.word	0x40002800
 80023b8:	40021000 	.word	0x40021000

080023bc <RTC_IF_GetTimerContext>:

uint32_t RTC_IF_GetTimerContext(void)
{
  RTC_IF_DBG_PRINTF("RTC_IF_GetTimerContext=%d\n\r", RtcTimerContext.Rtc_Time);
  /*return time context*/
  return (uint32_t) RtcTimerContext.Rtc_Time;
 80023bc:	4b01      	ldr	r3, [pc, #4]	; (80023c4 <RTC_IF_GetTimerContext+0x8>)
 80023be:	6818      	ldr	r0, [r3, #0]
}
 80023c0:	4770      	bx	lr
 80023c2:	46c0      	nop			; (mov r8, r8)
 80023c4:	200002f4 	.word	0x200002f4

080023c8 <RTC_IF_GetMinimumTimeout>:
}

uint32_t RTC_IF_GetMinimumTimeout(void)
{
  return (MIN_ALARM_DELAY);
}
 80023c8:	2003      	movs	r0, #3
 80023ca:	4770      	bx	lr

080023cc <RTC_IF_Convert_ms2Tick>:

uint32_t RTC_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 80023cc:	b510      	push	{r4, lr}
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 80023ce:	0e41      	lsrs	r1, r0, #25
 80023d0:	227d      	movs	r2, #125	; 0x7d
 80023d2:	2300      	movs	r3, #0
 80023d4:	01c0      	lsls	r0, r0, #7
 80023d6:	f7fe f8b5 	bl	8000544 <__aeabi_uldivmod>
}
 80023da:	bd10      	pop	{r4, pc}

080023dc <RTC_IF_Convert_Tick2ms>:

uint32_t RTC_IF_Convert_Tick2ms(uint32_t tick)
{
 80023dc:	b510      	push	{r4, lr}
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 80023de:	227d      	movs	r2, #125	; 0x7d
 80023e0:	2300      	movs	r3, #0
 80023e2:	2100      	movs	r1, #0
 80023e4:	f7fe f8ce 	bl	8000584 <__aeabi_lmul>
 80023e8:	0649      	lsls	r1, r1, #25
 80023ea:	09c0      	lsrs	r0, r0, #7
 80023ec:	4308      	orrs	r0, r1
}
 80023ee:	bd10      	pop	{r4, pc}

080023f0 <RTC_IF_StopTimer>:
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 80023f0:	4806      	ldr	r0, [pc, #24]	; (800240c <RTC_IF_StopTimer+0x1c>)
 80023f2:	4b07      	ldr	r3, [pc, #28]	; (8002410 <RTC_IF_StopTimer+0x20>)
 80023f4:	6801      	ldr	r1, [r0, #0]
{
 80023f6:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 80023f8:	68ca      	ldr	r2, [r1, #12]
 80023fa:	b2d2      	uxtb	r2, r2
 80023fc:	4313      	orrs	r3, r2
 80023fe:	60cb      	str	r3, [r1, #12]
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002400:	2180      	movs	r1, #128	; 0x80
 8002402:	0049      	lsls	r1, r1, #1
 8002404:	f002 fb08 	bl	8004a18 <HAL_RTC_DeactivateAlarm>
}
 8002408:	2000      	movs	r0, #0
 800240a:	bd10      	pop	{r4, pc}
 800240c:	200002d0 	.word	0x200002d0
 8002410:	fffffe7f 	.word	0xfffffe7f

08002414 <RTC_GetCalendarValue>:
  * @param pointer to RTC_DateStruct
  * @param pointer to RTC_TimeStruct
  * @retval time in ticks
  */
static uint32_t RTC_GetCalendarValue(RTC_DateTypeDef *RTC_DateStruct, RTC_TimeTypeDef *RTC_TimeStruct)
{
 8002414:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t calendarValue = 0;
  uint32_t first_read;
  uint32_t correction;

  /* Get Time and Date*/
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 8002416:	4e25      	ldr	r6, [pc, #148]	; (80024ac <RTC_GetCalendarValue+0x98>)
{
 8002418:	0005      	movs	r5, r0
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 800241a:	2200      	movs	r2, #0
 800241c:	0030      	movs	r0, r6
{
 800241e:	000c      	movs	r4, r1
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 8002420:	f002 fdfa 	bl	8005018 <HAL_RTC_GetTime>
  * @param  RTCx RTC Instance
  * @retval Sub second value (number between 0 and 65535)
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8002424:	4f22      	ldr	r7, [pc, #136]	; (80024b0 <RTC_GetCalendarValue+0x9c>)

  /* make sure it is correct due to asynchronus nature of RTC*/
  do
  {
    first_read = LL_RTC_TIME_GetSubSecond(RTC);
    HAL_RTC_GetDate(&hrtc, RTC_DateStruct, RTC_FORMAT_BIN);
 8002426:	2200      	movs	r2, #0
 8002428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800242a:	0029      	movs	r1, r5
 800242c:	0030      	movs	r0, r6
 800242e:	9301      	str	r3, [sp, #4]
 8002430:	f002 fe1c 	bl	800506c <HAL_RTC_GetDate>
    HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 8002434:	2200      	movs	r2, #0
 8002436:	0021      	movs	r1, r4
 8002438:	0030      	movs	r0, r6
 800243a:	f002 fded 	bl	8005018 <HAL_RTC_GetTime>
 800243e:	466b      	mov	r3, sp
 8002440:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002442:	889b      	ldrh	r3, [r3, #4]
 8002444:	b292      	uxth	r2, r2

  } while (first_read != LL_RTC_TIME_GetSubSecond(RTC));
 8002446:	429a      	cmp	r2, r3
 8002448:	d1ec      	bne.n	8002424 <RTC_GetCalendarValue+0x10>

  /* calculte amount of elapsed days since 01/01/2000 */
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);

  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 800244a:	2103      	movs	r1, #3
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 800244c:	78ea      	ldrb	r2, [r5, #3]
 800244e:	4e19      	ldr	r6, [pc, #100]	; (80024b4 <RTC_GetCalendarValue+0xa0>)

  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8002450:	786f      	ldrb	r7, [r5, #1]
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 8002452:	4356      	muls	r6, r2
  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 8002454:	400a      	ands	r2, r1
 8002456:	4253      	negs	r3, r2
 8002458:	415a      	adcs	r2, r3
 800245a:	4253      	negs	r3, r2
 800245c:	4a16      	ldr	r2, [pc, #88]	; (80024b8 <RTC_GetCalendarValue+0xa4>)
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 800245e:	3f01      	subs	r7, #1
  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 8002460:	4013      	ands	r3, r2
 8002462:	4a16      	ldr	r2, [pc, #88]	; (80024bc <RTC_GetCalendarValue+0xa8>)
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 8002464:	3603      	adds	r6, #3
  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 8002466:	189b      	adds	r3, r3, r2
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8002468:	223d      	movs	r2, #61	; 0x3d
 800246a:	437a      	muls	r2, r7
                         2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 800246c:	007f      	lsls	r7, r7, #1
 800246e:	40fb      	lsrs	r3, r7
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8002470:	3201      	adds	r2, #1
 8002472:	0fd0      	lsrs	r0, r2, #31
 8002474:	1880      	adds	r0, r0, r2

  calendarValue += (RTC_DateStruct->Date - 1);
 8002476:	78aa      	ldrb	r2, [r5, #2]
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 8002478:	08b6      	lsrs	r6, r6, #2
  calendarValue += (RTC_DateStruct->Date - 1);
 800247a:	3a01      	subs	r2, #1
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 800247c:	1040      	asrs	r0, r0, #1
 800247e:	1996      	adds	r6, r2, r6
 8002480:	1986      	adds	r6, r0, r6
                         2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 8002482:	400b      	ands	r3, r1

  /* convert from days to seconds */
  calendarValue *= SECONDS_IN_1DAY;
 8002484:	480e      	ldr	r0, [pc, #56]	; (80024c0 <RTC_GetCalendarValue+0xac>)
  calendarValue += (RTC_DateStruct->Date - 1);
 8002486:	1af3      	subs	r3, r6, r3
  calendarValue *= SECONDS_IN_1DAY;
 8002488:	4343      	muls	r3, r0

  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
                    ((uint32_t)RTC_TimeStruct->Hours * SECONDS_IN_1HOUR)) ;
 800248a:	20e1      	movs	r0, #225	; 0xe1
 800248c:	7822      	ldrb	r2, [r4, #0]
 800248e:	0100      	lsls	r0, r0, #4
 8002490:	4350      	muls	r0, r2
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 8002492:	223c      	movs	r2, #60	; 0x3c
 8002494:	7861      	ldrb	r1, [r4, #1]
 8002496:	434a      	muls	r2, r1
 8002498:	1880      	adds	r0, r0, r2
  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
 800249a:	78a2      	ldrb	r2, [r4, #2]
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 800249c:	1880      	adds	r0, r0, r2
  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
 800249e:	18c0      	adds	r0, r0, r3

  calendarValue = (calendarValue << RTC_N_PREDIV_S) + (RTC_PREDIV_S - RTC_TimeStruct->SubSeconds);
 80024a0:	6863      	ldr	r3, [r4, #4]
 80024a2:	0280      	lsls	r0, r0, #10
 80024a4:	1ac0      	subs	r0, r0, r3
 80024a6:	4b07      	ldr	r3, [pc, #28]	; (80024c4 <RTC_GetCalendarValue+0xb0>)
 80024a8:	18c0      	adds	r0, r0, r3

  return (calendarValue);
}
 80024aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80024ac:	200002d0 	.word	0x200002d0
 80024b0:	40002800 	.word	0x40002800
 80024b4:	000005b5 	.word	0x000005b5
 80024b8:	ffaaaab0 	.word	0xffaaaab0
 80024bc:	0099aaa0 	.word	0x0099aaa0
 80024c0:	00015180 	.word	0x00015180
 80024c4:	000003ff 	.word	0x000003ff

080024c8 <RTC_IF_SetTimerContext>:
{
 80024c8:	b510      	push	{r4, lr}
  RtcTimerContext.Rtc_Time = RTC_GetCalendarValue(&RtcTimerContext.RTC_Calndr_Date, &RtcTimerContext.RTC_Calndr_Time);
 80024ca:	4c04      	ldr	r4, [pc, #16]	; (80024dc <RTC_IF_SetTimerContext+0x14>)
 80024cc:	0020      	movs	r0, r4
 80024ce:	1d21      	adds	r1, r4, #4
 80024d0:	3018      	adds	r0, #24
 80024d2:	f7ff ff9f 	bl	8002414 <RTC_GetCalendarValue>
 80024d6:	6020      	str	r0, [r4, #0]
}
 80024d8:	bd10      	pop	{r4, pc}
 80024da:	46c0      	nop			; (mov r8, r8)
 80024dc:	200002f4 	.word	0x200002f4

080024e0 <RTC_IF_GetTimerElapsedTime>:
{
 80024e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t CalendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 80024e2:	4668      	mov	r0, sp
 80024e4:	a901      	add	r1, sp, #4
 80024e6:	f7ff ff95 	bl	8002414 <RTC_GetCalendarValue>
  return ((uint32_t)(CalendarValue - RtcTimerContext.Rtc_Time));
 80024ea:	4b02      	ldr	r3, [pc, #8]	; (80024f4 <RTC_IF_GetTimerElapsedTime+0x14>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	1ac0      	subs	r0, r0, r3
}
 80024f0:	b007      	add	sp, #28
 80024f2:	bd00      	pop	{pc}
 80024f4:	200002f4 	.word	0x200002f4

080024f8 <RTC_IF_StartTimer>:
{
 80024f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024fa:	b087      	sub	sp, #28
 80024fc:	0006      	movs	r6, r0
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - RTC_IF_GetTimerElapsedTime())))
 80024fe:	f7ff ffef 	bl	80024e0 <RTC_IF_GetTimerElapsedTime>
    UTIL_LPM_SetStopMode((1 << CFG_LPM_RTC_Id), UTIL_LPM_ENABLE);
 8002502:	2100      	movs	r1, #0
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - RTC_IF_GetTimerElapsedTime())))
 8002504:	1a30      	subs	r0, r6, r0
 8002506:	2803      	cmp	r0, #3
 8002508:	d800      	bhi.n	800250c <RTC_IF_StartTimer+0x14>
    UTIL_LPM_SetStopMode((1 << CFG_LPM_RTC_Id), UTIL_LPM_DISABLE);
 800250a:	2101      	movs	r1, #1
 800250c:	2002      	movs	r0, #2
 800250e:	f00b faf1 	bl	800daf4 <UTIL_LPM_SetStopMode>
  if (UTIL_LPM_GetMode() == UTIL_LPM_STOPMODE)
 8002512:	f00b fb1b 	bl	800db4c <UTIL_LPM_GetMode>
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 8002516:	4c40      	ldr	r4, [pc, #256]	; (8002618 <RTC_IF_StartTimer+0x120>)
 8002518:	7923      	ldrb	r3, [r4, #4]
 800251a:	68a7      	ldr	r7, [r4, #8]
 800251c:	9300      	str	r3, [sp, #0]
 800251e:	7963      	ldrb	r3, [r4, #5]
 8002520:	9301      	str	r3, [sp, #4]
 8002522:	79a3      	ldrb	r3, [r4, #6]
 8002524:	9302      	str	r3, [sp, #8]
 8002526:	79e3      	ldrb	r3, [r4, #7]
 8002528:	9303      	str	r3, [sp, #12]
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 800252a:	7e63      	ldrb	r3, [r4, #25]
 800252c:	9304      	str	r3, [sp, #16]
 800252e:	7ee3      	ldrb	r3, [r4, #27]
 8002530:	7ea5      	ldrb	r5, [r4, #26]
 8002532:	9305      	str	r3, [sp, #20]
  RTC_IF_StopTimer();
 8002534:	f7ff ff5c 	bl	80023f0 <RTC_IF_StopTimer>
  rtcAlarmSubSeconds =  RTC_PREDIV_S - RTC_TimeStruct.SubSeconds;
 8002538:	4b38      	ldr	r3, [pc, #224]	; (800261c <RTC_IF_StartTimer+0x124>)
  rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 800253a:	05b2      	lsls	r2, r6, #22
  rtcAlarmSubSeconds =  RTC_PREDIV_S - RTC_TimeStruct.SubSeconds;
 800253c:	1bdf      	subs	r7, r3, r7
  rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 800253e:	0d92      	lsrs	r2, r2, #22
 8002540:	18ba      	adds	r2, r7, r2
  timeoutValue >>= RTC_N_PREDIV_S;  /* convert timeout  in seconds */
 8002542:	0ab3      	lsrs	r3, r6, #10
  while (timeoutValue >= SECONDS_IN_1DAY)
 8002544:	4e36      	ldr	r6, [pc, #216]	; (8002620 <RTC_IF_StartTimer+0x128>)
  rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 8002546:	b292      	uxth	r2, r2
  rtcAlarmDays =  RTC_DateStruct.Date;
 8002548:	b2a8      	uxth	r0, r5
  while (timeoutValue >= SECONDS_IN_1DAY)
 800254a:	42b3      	cmp	r3, r6
 800254c:	d844      	bhi.n	80025d8 <RTC_IF_StartTimer+0xe0>
  rtcAlarmHours = RTC_TimeStruct.Hours;
 800254e:	4669      	mov	r1, sp
 8002550:	880e      	ldrh	r6, [r1, #0]
  while (timeoutValue >= SECONDS_IN_1HOUR)
 8002552:	21e1      	movs	r1, #225	; 0xe1
 8002554:	0109      	lsls	r1, r1, #4
 8002556:	428b      	cmp	r3, r1
 8002558:	d243      	bcs.n	80025e2 <RTC_IF_StartTimer+0xea>
  rtcAlarmMinutes = RTC_TimeStruct.Minutes;
 800255a:	4669      	mov	r1, sp
 800255c:	888f      	ldrh	r7, [r1, #4]
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 800255e:	2b3b      	cmp	r3, #59	; 0x3b
 8002560:	d844      	bhi.n	80025ec <RTC_IF_StartTimer+0xf4>
  while (rtcAlarmSubSeconds >= (RTC_PREDIV_S + 1))
 8002562:	0a95      	lsrs	r5, r2, #10
 8002564:	02a9      	lsls	r1, r5, #10
 8002566:	1a52      	subs	r2, r2, r1
 8002568:	b292      	uxth	r2, r2
 800256a:	9200      	str	r2, [sp, #0]
 800256c:	9a02      	ldr	r2, [sp, #8]
 800256e:	18ad      	adds	r5, r5, r2
 8002570:	18ed      	adds	r5, r5, r3
 8002572:	b2ad      	uxth	r5, r5
  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 8002574:	2d3b      	cmp	r5, #59	; 0x3b
 8002576:	d83d      	bhi.n	80025f4 <RTC_IF_StartTimer+0xfc>
  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 8002578:	2f3b      	cmp	r7, #59	; 0x3b
 800257a:	d840      	bhi.n	80025fe <RTC_IF_StartTimer+0x106>
  while (rtcAlarmHours >= HOURS_IN_1DAY)
 800257c:	2e17      	cmp	r6, #23
 800257e:	d843      	bhi.n	8002608 <RTC_IF_StartTimer+0x110>
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 8002580:	9a04      	ldr	r2, [sp, #16]
  if (RTC_DateStruct.Year % 4 == 0)
 8002582:	9905      	ldr	r1, [sp, #20]
 8002584:	4b27      	ldr	r3, [pc, #156]	; (8002624 <RTC_IF_StartTimer+0x12c>)
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 8002586:	3a01      	subs	r2, #1
  if (RTC_DateStruct.Year % 4 == 0)
 8002588:	0789      	lsls	r1, r1, #30
 800258a:	d142      	bne.n	8002612 <RTC_IF_StartTimer+0x11a>
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 800258c:	5c99      	ldrb	r1, [r3, r2]
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 800258e:	4288      	cmp	r0, r1
 8002590:	d902      	bls.n	8002598 <RTC_IF_StartTimer+0xa0>
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 8002592:	f7fd ff59 	bl	8000448 <__aeabi_idivmod>
 8002596:	b288      	uxth	r0, r1
  RTC_AlarmStructure.AlarmTime.SubSeconds = RTC_PREDIV_S - rtcAlarmSubSeconds;
 8002598:	9a00      	ldr	r2, [sp, #0]
 800259a:	4b20      	ldr	r3, [pc, #128]	; (800261c <RTC_IF_StartTimer+0x124>)
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 800259c:	77a5      	strb	r5, [r4, #30]
  RTC_AlarmStructure.AlarmTime.SubSeconds = RTC_PREDIV_S - rtcAlarmSubSeconds;
 800259e:	1a9b      	subs	r3, r3, r2
 80025a0:	6223      	str	r3, [r4, #32]
  RTC_AlarmStructure.AlarmSubSecondMask  = RTC_ALARMSUBSECONDMASK;
 80025a2:	23a0      	movs	r3, #160	; 0xa0
 80025a4:	051b      	lsls	r3, r3, #20
 80025a6:	6363      	str	r3, [r4, #52]	; 0x34
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 80025a8:	0023      	movs	r3, r4
 80025aa:	333c      	adds	r3, #60	; 0x3c
 80025ac:	7018      	strb	r0, [r3, #0]
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 80025ae:	9b03      	ldr	r3, [sp, #12]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80025b0:	2500      	movs	r5, #0
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 80025b2:	77e3      	strb	r3, [r4, #31]
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 80025b4:	0021      	movs	r1, r4
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 80025b6:	2380      	movs	r3, #128	; 0x80
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 80025b8:	002a      	movs	r2, r5
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 80025ba:	005b      	lsls	r3, r3, #1
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 80025bc:	311c      	adds	r1, #28
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 80025be:	481a      	ldr	r0, [pc, #104]	; (8002628 <RTC_IF_StartTimer+0x130>)
  RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
 80025c0:	7767      	strb	r7, [r4, #29]
  RTC_AlarmStructure.AlarmTime.Hours   = rtcAlarmHours;
 80025c2:	7726      	strb	r6, [r4, #28]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80025c4:	63a5      	str	r5, [r4, #56]	; 0x38
  RTC_AlarmStructure.AlarmMask       = RTC_ALARMMASK_NONE;
 80025c6:	6325      	str	r5, [r4, #48]	; 0x30
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 80025c8:	6423      	str	r3, [r4, #64]	; 0x40
  RTC_AlarmStructure.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80025ca:	62a5      	str	r5, [r4, #40]	; 0x28
  RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80025cc:	62e5      	str	r5, [r4, #44]	; 0x2c
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 80025ce:	f002 fc43 	bl	8004e58 <HAL_RTC_SetAlarm_IT>
}
 80025d2:	0028      	movs	r0, r5
 80025d4:	b007      	add	sp, #28
 80025d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    timeoutValue -= SECONDS_IN_1DAY;
 80025d8:	4914      	ldr	r1, [pc, #80]	; (800262c <RTC_IF_StartTimer+0x134>)
    rtcAlarmDays++;
 80025da:	3001      	adds	r0, #1
    timeoutValue -= SECONDS_IN_1DAY;
 80025dc:	185b      	adds	r3, r3, r1
    rtcAlarmDays++;
 80025de:	b280      	uxth	r0, r0
 80025e0:	e7b3      	b.n	800254a <RTC_IF_StartTimer+0x52>
    timeoutValue -= SECONDS_IN_1HOUR;
 80025e2:	4d13      	ldr	r5, [pc, #76]	; (8002630 <RTC_IF_StartTimer+0x138>)
    rtcAlarmHours++;
 80025e4:	3601      	adds	r6, #1
    timeoutValue -= SECONDS_IN_1HOUR;
 80025e6:	195b      	adds	r3, r3, r5
    rtcAlarmHours++;
 80025e8:	b2b6      	uxth	r6, r6
 80025ea:	e7b4      	b.n	8002556 <RTC_IF_StartTimer+0x5e>
    rtcAlarmMinutes++;
 80025ec:	3701      	adds	r7, #1
    timeoutValue -= SECONDS_IN_1MINUTE;
 80025ee:	3b3c      	subs	r3, #60	; 0x3c
    rtcAlarmMinutes++;
 80025f0:	b2bf      	uxth	r7, r7
 80025f2:	e7b4      	b.n	800255e <RTC_IF_StartTimer+0x66>
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 80025f4:	3d3c      	subs	r5, #60	; 0x3c
    rtcAlarmMinutes++;
 80025f6:	3701      	adds	r7, #1
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 80025f8:	b2ad      	uxth	r5, r5
    rtcAlarmMinutes++;
 80025fa:	b2bf      	uxth	r7, r7
 80025fc:	e7ba      	b.n	8002574 <RTC_IF_StartTimer+0x7c>
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 80025fe:	3f3c      	subs	r7, #60	; 0x3c
    rtcAlarmHours++;
 8002600:	3601      	adds	r6, #1
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 8002602:	b2bf      	uxth	r7, r7
    rtcAlarmHours++;
 8002604:	b2b6      	uxth	r6, r6
 8002606:	e7b7      	b.n	8002578 <RTC_IF_StartTimer+0x80>
    rtcAlarmHours -= HOURS_IN_1DAY;
 8002608:	3e18      	subs	r6, #24
    rtcAlarmDays++;
 800260a:	3001      	adds	r0, #1
    rtcAlarmHours -= HOURS_IN_1DAY;
 800260c:	b2b6      	uxth	r6, r6
    rtcAlarmDays++;
 800260e:	b280      	uxth	r0, r0
 8002610:	e7b4      	b.n	800257c <RTC_IF_StartTimer+0x84>
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 8002612:	189b      	adds	r3, r3, r2
 8002614:	7b19      	ldrb	r1, [r3, #12]
 8002616:	e7ba      	b.n	800258e <RTC_IF_StartTimer+0x96>
 8002618:	200002f4 	.word	0x200002f4
 800261c:	000003ff 	.word	0x000003ff
 8002620:	0001517f 	.word	0x0001517f
 8002624:	0800e5b8 	.word	0x0800e5b8
 8002628:	200002d0 	.word	0x200002d0
 800262c:	fffeae80 	.word	0xfffeae80
 8002630:	fffff1f0 	.word	0xfffff1f0

08002634 <RTC_IF_GetTime>:
{
 8002634:	b530      	push	{r4, r5, lr}
 8002636:	b087      	sub	sp, #28
 8002638:	0005      	movs	r5, r0
  uint64_t calendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 800263a:	a901      	add	r1, sp, #4
 800263c:	4668      	mov	r0, sp
 800263e:	f7ff fee9 	bl	8002414 <RTC_GetCalendarValue>
 8002642:	0004      	movs	r4, r0
  ticks = (uint32_t) calendarValue & RTC_PREDIV_S;
 8002644:	0580      	lsls	r0, r0, #22
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 8002646:	227d      	movs	r2, #125	; 0x7d
 8002648:	2300      	movs	r3, #0
 800264a:	2100      	movs	r1, #0
  ticks = (uint32_t) calendarValue & RTC_PREDIV_S;
 800264c:	0d80      	lsrs	r0, r0, #22
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 800264e:	f7fd ff99 	bl	8000584 <__aeabi_lmul>
 8002652:	09c0      	lsrs	r0, r0, #7
  *mSeconds = RTC_IF_Convert_Tick2ms(ticks);
 8002654:	8028      	strh	r0, [r5, #0]
  uint32_t seconds = (uint32_t)(calendarValue >> RTC_N_PREDIV_S);
 8002656:	0aa0      	lsrs	r0, r4, #10
}
 8002658:	b007      	add	sp, #28
 800265a:	bd30      	pop	{r4, r5, pc}

0800265c <RTC_IF_BkUp_Write_Seconds>:
{
 800265c:	b510      	push	{r4, lr}
 800265e:	0002      	movs	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002660:	2100      	movs	r1, #0
 8002662:	4802      	ldr	r0, [pc, #8]	; (800266c <RTC_IF_BkUp_Write_Seconds+0x10>)
 8002664:	f002 fd24 	bl	80050b0 <HAL_RTCEx_BKUPWrite>
}
 8002668:	bd10      	pop	{r4, pc}
 800266a:	46c0      	nop			; (mov r8, r8)
 800266c:	200002d0 	.word	0x200002d0

08002670 <RTC_IF_BkUp_Write_SubSeconds>:
{
 8002670:	b510      	push	{r4, lr}
 8002672:	0002      	movs	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002674:	2101      	movs	r1, #1
 8002676:	4802      	ldr	r0, [pc, #8]	; (8002680 <RTC_IF_BkUp_Write_SubSeconds+0x10>)
 8002678:	f002 fd1a 	bl	80050b0 <HAL_RTCEx_BKUPWrite>
}
 800267c:	bd10      	pop	{r4, pc}
 800267e:	46c0      	nop			; (mov r8, r8)
 8002680:	200002d0 	.word	0x200002d0

08002684 <RTC_IF_BkUp_Read_Seconds>:
{
 8002684:	b510      	push	{r4, lr}
  return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8002686:	2100      	movs	r1, #0
 8002688:	4801      	ldr	r0, [pc, #4]	; (8002690 <RTC_IF_BkUp_Read_Seconds+0xc>)
 800268a:	f002 fd17 	bl	80050bc <HAL_RTCEx_BKUPRead>
}
 800268e:	bd10      	pop	{r4, pc}
 8002690:	200002d0 	.word	0x200002d0

08002694 <RTC_IF_BkUp_Read_SubSeconds>:
{
 8002694:	b510      	push	{r4, lr}
  return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8002696:	2101      	movs	r1, #1
 8002698:	4801      	ldr	r0, [pc, #4]	; (80026a0 <RTC_IF_BkUp_Read_SubSeconds+0xc>)
 800269a:	f002 fd0f 	bl	80050bc <HAL_RTCEx_BKUPRead>
}
 800269e:	bd10      	pop	{r4, pc}
 80026a0:	200002d0 	.word	0x200002d0

080026a4 <RTC_IF_Init>:
{
 80026a4:	b530      	push	{r4, r5, lr}
  if (RTC_Initalized == false)
 80026a6:	4c11      	ldr	r4, [pc, #68]	; (80026ec <RTC_IF_Init+0x48>)
{
 80026a8:	b08b      	sub	sp, #44	; 0x2c
  if (RTC_Initalized == false)
 80026aa:	3444      	adds	r4, #68	; 0x44
 80026ac:	7823      	ldrb	r3, [r4, #0]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d119      	bne.n	80026e6 <RTC_IF_Init+0x42>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80026b2:	3320      	adds	r3, #32
 80026b4:	9300      	str	r3, [sp, #0]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80026b6:	2380      	movs	r3, #128	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026b8:	4668      	mov	r0, sp
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80026ba:	025b      	lsls	r3, r3, #9
 80026bc:	9301      	str	r3, [sp, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026be:	f002 f8c1 	bl	8004844 <HAL_RCCEx_PeriphCLKConfig>
 80026c2:	2800      	cmp	r0, #0
 80026c4:	d000      	beq.n	80026c8 <RTC_IF_Init+0x24>
      while (1);
 80026c6:	e7fe      	b.n	80026c6 <RTC_IF_Init+0x22>
    MX_RTC_Init();
 80026c8:	f7ff fdea 	bl	80022a0 <MX_RTC_Init>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80026cc:	2180      	movs	r1, #128	; 0x80
 80026ce:	4d08      	ldr	r5, [pc, #32]	; (80026f0 <RTC_IF_Init+0x4c>)
 80026d0:	0049      	lsls	r1, r1, #1
 80026d2:	0028      	movs	r0, r5
 80026d4:	f002 f9a0 	bl	8004a18 <HAL_RTC_DeactivateAlarm>
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 80026d8:	0028      	movs	r0, r5
 80026da:	f002 fcf5 	bl	80050c8 <HAL_RTCEx_EnableBypassShadow>
    RTC_IF_SetTimerContext();
 80026de:	f7ff fef3 	bl	80024c8 <RTC_IF_SetTimerContext>
    RTC_Initalized = true;
 80026e2:	2301      	movs	r3, #1
 80026e4:	7023      	strb	r3, [r4, #0]
}
 80026e6:	2000      	movs	r0, #0
 80026e8:	b00b      	add	sp, #44	; 0x2c
 80026ea:	bd30      	pop	{r4, r5, pc}
 80026ec:	200002f4 	.word	0x200002f4
 80026f0:	200002d0 	.word	0x200002d0

080026f4 <RTC_IF_GetTimerValue>:
{
 80026f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t CalendarValue = 0;
 80026f6:	2000      	movs	r0, #0
  if (RTC_Initalized == true)
 80026f8:	4b05      	ldr	r3, [pc, #20]	; (8002710 <RTC_IF_GetTimerValue+0x1c>)
 80026fa:	3344      	adds	r3, #68	; 0x44
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	4283      	cmp	r3, r0
 8002700:	d003      	beq.n	800270a <RTC_IF_GetTimerValue+0x16>
    CalendarValue = (uint32_t) RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8002702:	4668      	mov	r0, sp
 8002704:	a901      	add	r1, sp, #4
 8002706:	f7ff fe85 	bl	8002414 <RTC_GetCalendarValue>
}
 800270a:	b007      	add	sp, #28
 800270c:	bd00      	pop	{pc}
 800270e:	46c0      	nop			; (mov r8, r8)
 8002710:	200002f4 	.word	0x200002f4

08002714 <RTC_IF_DelayMs>:
{
 8002714:	b570      	push	{r4, r5, r6, lr}
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 8002716:	227d      	movs	r2, #125	; 0x7d
 8002718:	2300      	movs	r3, #0
 800271a:	0e41      	lsrs	r1, r0, #25
 800271c:	01c0      	lsls	r0, r0, #7
 800271e:	f7fd ff11 	bl	8000544 <__aeabi_uldivmod>
 8002722:	0004      	movs	r4, r0
  timeout = RTC_IF_GetTimerValue();
 8002724:	f7ff ffe6 	bl	80026f4 <RTC_IF_GetTimerValue>
 8002728:	0005      	movs	r5, r0
  while (((RTC_IF_GetTimerValue() - timeout)) < delayValue)
 800272a:	f7ff ffe3 	bl	80026f4 <RTC_IF_GetTimerValue>
 800272e:	1b40      	subs	r0, r0, r5
 8002730:	42a0      	cmp	r0, r4
 8002732:	d300      	bcc.n	8002736 <RTC_IF_DelayMs+0x22>
}
 8002734:	bd70      	pop	{r4, r5, r6, pc}
    __NOP();
 8002736:	46c0      	nop			; (mov r8, r8)
 8002738:	e7f7      	b.n	800272a <RTC_IF_DelayMs+0x16>

0800273a <HAL_RTC_AlarmAEventCallback>:
{
 800273a:	b510      	push	{r4, lr}
  UTIL_TIMER_IRQ_Handler();
 800273c:	f00b fcf4 	bl	800e128 <UTIL_TIMER_IRQ_Handler>
}
 8002740:	bd10      	pop	{r4, pc}

08002742 <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8002742:	4770      	bx	lr

08002744 <PWR_EnterStopMode>:

  /* USER CODE END ExitOffMode_1 */
}

void PWR_EnterStopMode(void)
{
 8002744:	b510      	push	{r4, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002746:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800274a:	b672      	cpsid	i
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  UTILS_ENTER_CRITICAL_SECTION();

  Sx_Board_IoDeInit();
 800274c:	f000 fc7e 	bl	800304c <SX1276MB1MAS_RADIO_IoDeInit>

  HAL_ADC_MspDeInit(&hadc);
 8002750:	4807      	ldr	r0, [pc, #28]	; (8002770 <PWR_EnterStopMode+0x2c>)
 8002752:	f7ff fc7f 	bl	8002054 <HAL_ADC_MspDeInit>

  /*clear wake up flag*/
  SET_BIT(PWR->CR, PWR_CR_CWUF);
 8002756:	2304      	movs	r3, #4
 8002758:	4a06      	ldr	r2, [pc, #24]	; (8002774 <PWR_EnterStopMode+0x30>)
 800275a:	6811      	ldr	r1, [r2, #0]
 800275c:	430b      	orrs	r3, r1
 800275e:	6013      	str	r3, [r2, #0]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002760:	f384 8810 	msr	PRIMASK, r4
  UTILS_EXIT_CRITICAL_SECTION();
  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  /* Enter Stop Mode */
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8002764:	2101      	movs	r1, #1
 8002766:	0008      	movs	r0, r1
 8002768:	f001 fc5c 	bl	8004024 <HAL_PWR_EnterSTOPMode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 800276c:	bd10      	pop	{r4, pc}
 800276e:	46c0      	nop			; (mov r8, r8)
 8002770:	20000274 	.word	0x20000274
 8002774:	40007000 	.word	0x40007000

08002778 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8002778:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800277a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800277e:	b672      	cpsid	i

  UTILS_ENTER_CRITICAL_SECTION();

  /* After wake-up from STOP reconfigure the system clock */
  /* Enable HSI */
  __HAL_RCC_HSI_ENABLE();
 8002780:	2201      	movs	r2, #1
 8002782:	4b10      	ldr	r3, [pc, #64]	; (80027c4 <PWR_ExitStopMode+0x4c>)
 8002784:	6819      	ldr	r1, [r3, #0]
 8002786:	430a      	orrs	r2, r1
 8002788:	601a      	str	r2, [r3, #0]

  /* Wait till HSI is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {}
 800278a:	2204      	movs	r2, #4
 800278c:	6819      	ldr	r1, [r3, #0]
 800278e:	4211      	tst	r1, r2
 8002790:	d0fc      	beq.n	800278c <PWR_ExitStopMode+0x14>

  /* Enable PLL */
  __HAL_RCC_PLL_ENABLE();
 8002792:	2280      	movs	r2, #128	; 0x80
 8002794:	6819      	ldr	r1, [r3, #0]
 8002796:	0452      	lsls	r2, r2, #17
 8002798:	430a      	orrs	r2, r1
 800279a:	601a      	str	r2, [r3, #0]
  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {}
 800279c:	2280      	movs	r2, #128	; 0x80
 800279e:	0492      	lsls	r2, r2, #18
 80027a0:	6819      	ldr	r1, [r3, #0]
 80027a2:	4211      	tst	r1, r2
 80027a4:	d0fc      	beq.n	80027a0 <PWR_ExitStopMode+0x28>

  /* Select PLL as system clock source */
  __HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_PLLCLK);
 80027a6:	2203      	movs	r2, #3
 80027a8:	68d9      	ldr	r1, [r3, #12]
 80027aa:	430a      	orrs	r2, r1

  /* Wait till PLL is used as system clock source */
  while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {}
 80027ac:	210c      	movs	r1, #12
  __HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_PLLCLK);
 80027ae:	60da      	str	r2, [r3, #12]
  while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {}
 80027b0:	68da      	ldr	r2, [r3, #12]
 80027b2:	400a      	ands	r2, r1
 80027b4:	2a0c      	cmp	r2, #12
 80027b6:	d1fb      	bne.n	80027b0 <PWR_ExitStopMode+0x38>

  /* initializes the peripherals */
  Sx_Board_IoInit();
 80027b8:	f000 fb84 	bl	8002ec4 <SX1276MB1MAS_RADIO_IoInit>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027bc:	f384 8810 	msr	PRIMASK, r4

  UTILS_EXIT_CRITICAL_SECTION();
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 80027c0:	bd10      	pop	{r4, pc}
 80027c2:	46c0      	nop			; (mov r8, r8)
 80027c4:	40021000 	.word	0x40021000

080027c8 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 80027c8:	b510      	push	{r4, lr}

  /* USER CODE END EnterSleepMode_1 */
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80027ca:	2101      	movs	r1, #1
 80027cc:	2000      	movs	r0, #0
 80027ce:	f001 fbf1 	bl	8003fb4 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 80027d2:	bd10      	pop	{r4, pc}

080027d4 <PWR_ExitSleepMode>:
 80027d4:	4770      	bx	lr

080027d6 <PWR_ExitOffMode>:
 80027d6:	4770      	bx	lr

080027d8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80027d8:	2380      	movs	r3, #128	; 0x80
 80027da:	4a09      	ldr	r2, [pc, #36]	; (8002800 <HAL_MspInit+0x28>)
 80027dc:	055b      	lsls	r3, r3, #21
 80027de:	6b91      	ldr	r1, [r2, #56]	; 0x38
{
 80027e0:	b510      	push	{r4, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 80027e2:	430b      	orrs	r3, r1
 80027e4:	6393      	str	r3, [r2, #56]	; 0x38

  /* Disable the Power Voltage Detector */
  HAL_PWR_DisablePVD();
 80027e6:	f001 fbdd 	bl	8003fa4 <HAL_PWR_DisablePVD>

  /* Enables the Ultra Low Power mode */
  HAL_PWREx_EnableUltraLowPower();
 80027ea:	f001 fc61 	bl	80040b0 <HAL_PWREx_EnableUltraLowPower>

  __HAL_FLASH_SLEEP_POWERDOWN_ENABLE();
 80027ee:	2308      	movs	r3, #8
 80027f0:	4a04      	ldr	r2, [pc, #16]	; (8002804 <HAL_MspInit+0x2c>)
 80027f2:	6811      	ldr	r1, [r2, #0]
 80027f4:	430b      	orrs	r3, r1
 80027f6:	6013      	str	r3, [r2, #0]
   */
  DBG(__HAL_FLASH_SLEEP_POWERDOWN_DISABLE(););

#ifdef ENABLE_FAST_WAKEUP
  /*Enable fast wakeUp*/
  HAL_PWREx_EnableFastWakeUp();
 80027f8:	f001 fc50 	bl	800409c <HAL_PWREx_EnableFastWakeUp>
#endif

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027fc:	bd10      	pop	{r4, pc}
 80027fe:	46c0      	nop			; (mov r8, r8)
 8002800:	40021000 	.word	0x40021000
 8002804:	40022000 	.word	0x40022000

08002808 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002808:	e7fe      	b.n	8002808 <NMI_Handler>

0800280a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800280a:	e7fe      	b.n	800280a <HardFault_Handler>

0800280c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800280c:	4770      	bx	lr

0800280e <PendSV_Handler>:
 800280e:	4770      	bx	lr

08002810 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002810:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002812:	f000 fd4f 	bl	80032b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002816:	bd10      	pop	{r4, pc}

08002818 <EXTI0_1_IRQHandler>:
 8002818:	4770      	bx	lr
	...

0800281c <EXTI2_3_IRQHandler>:
  HAL_EXTI_IRQHandler(&H_EXTI_1);
#endif
}

void EXTI2_3_IRQHandler(void)
{
 800281c:	b510      	push	{r4, lr}
#if (defined(CMWX1ZZABZ0XX))
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
#endif
#if (defined(SX1276MB1MAS) | defined(SX1276MB1LAS) | defined(SX1272MB2DAS))
  HAL_EXTI_IRQHandler(&H_EXTI_3);
 800281e:	4802      	ldr	r0, [pc, #8]	; (8002828 <EXTI2_3_IRQHandler+0xc>)
 8002820:	f001 fa50 	bl	8003cc4 <HAL_EXTI_IRQHandler>
#endif
}
 8002824:	bd10      	pop	{r4, pc}
 8002826:	46c0      	nop			; (mov r8, r8)
 8002828:	200004c4 	.word	0x200004c4

0800282c <EXTI4_15_IRQHandler>:

void EXTI4_15_IRQHandler(void)
{
 800282c:	b510      	push	{r4, lr}
  HAL_EXTI_IRQHandler(&H_EXTI_4);
 800282e:	4807      	ldr	r0, [pc, #28]	; (800284c <EXTI4_15_IRQHandler+0x20>)
 8002830:	f001 fa48 	bl	8003cc4 <HAL_EXTI_IRQHandler>

#if (defined(SX1276MB1MAS) | defined(SX1276MB1LAS) | defined(SX1272MB2DAS))
  HAL_EXTI_IRQHandler(&H_EXTI_5);
 8002834:	4806      	ldr	r0, [pc, #24]	; (8002850 <EXTI4_15_IRQHandler+0x24>)
 8002836:	f001 fa45 	bl	8003cc4 <HAL_EXTI_IRQHandler>
#endif

#if (defined(SX1276MB1MAS) | defined(SX1276MB1LAS) | defined(SX1272MB2DAS))
  HAL_EXTI_IRQHandler(&H_EXTI_10);
 800283a:	4806      	ldr	r0, [pc, #24]	; (8002854 <EXTI4_15_IRQHandler+0x28>)
 800283c:	f001 fa42 	bl	8003cc4 <HAL_EXTI_IRQHandler>
#endif

#if (defined(CMWX1ZZABZ0XX))
  HAL_EXTI_IRQHandler(&H_EXTI_13);
#else
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002840:	2080      	movs	r0, #128	; 0x80
 8002842:	0180      	lsls	r0, r0, #6
 8002844:	f001 fba2 	bl	8003f8c <HAL_GPIO_EXTI_IRQHandler>
#endif
}
 8002848:	bd10      	pop	{r4, pc}
 800284a:	46c0      	nop			; (mov r8, r8)
 800284c:	200004d4 	.word	0x200004d4
 8002850:	200004cc 	.word	0x200004cc
 8002854:	200004bc 	.word	0x200004bc

08002858 <DMA1_Channel4_5_6_7_IRQHandler>:

void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8002858:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800285a:	4802      	ldr	r0, [pc, #8]	; (8002864 <DMA1_Channel4_5_6_7_IRQHandler+0xc>)
 800285c:	f001 f9d9 	bl	8003c12 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8002860:	bd10      	pop	{r4, pc}
 8002862:	46c0      	nop			; (mov r8, r8)
 8002864:	2000033c 	.word	0x2000033c

08002868 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8002868:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800286a:	4802      	ldr	r0, [pc, #8]	; (8002874 <USART2_IRQHandler+0xc>)
 800286c:	f002 ff64 	bl	8005738 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002870:	bd10      	pop	{r4, pc}
 8002872:	46c0      	nop			; (mov r8, r8)
 8002874:	20000384 	.word	0x20000384

08002878 <RTC_IRQHandler>:

void RTC_IRQHandler(void)
{
 8002878:	b510      	push	{r4, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800287a:	4802      	ldr	r0, [pc, #8]	; (8002884 <RTC_IRQHandler+0xc>)
 800287c:	f002 f92e 	bl	8004adc <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002880:	bd10      	pop	{r4, pc}
 8002882:	46c0      	nop			; (mov r8, r8)
 8002884:	200002d0 	.word	0x200002d0

08002888 <tiny_snprintf_like.constprop.0>:
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
 8002888:	b40c      	push	{r2, r3}
 800288a:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 800288c:	2110      	movs	r1, #16
  va_start(vaArgs, strFormat);
 800288e:	ab05      	add	r3, sp, #20
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8002890:	4a03      	ldr	r2, [pc, #12]	; (80028a0 <tiny_snprintf_like.constprop.0+0x18>)
  va_start(vaArgs, strFormat);
 8002892:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8002894:	f00b fc8e 	bl	800e1b4 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8002898:	b003      	add	sp, #12
 800289a:	bc08      	pop	{r3}
 800289c:	b002      	add	sp, #8
 800289e:	4718      	bx	r3
 80028a0:	0800eee0 	.word	0x0800eee0

080028a4 <TimestampNow>:
{
 80028a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80028a6:	0004      	movs	r4, r0
  SysTime_t curtime = SysTimeGet();
 80028a8:	ae02      	add	r6, sp, #8
 80028aa:	0030      	movs	r0, r6
{
 80028ac:	000d      	movs	r5, r1
  SysTime_t curtime = SysTimeGet();
 80028ae:	f00b fa8d 	bl	800ddcc <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 80028b2:	2204      	movs	r2, #4
 80028b4:	5eb3      	ldrsh	r3, [r6, r2]
 80028b6:	2110      	movs	r1, #16
 80028b8:	0020      	movs	r0, r4
 80028ba:	4a05      	ldr	r2, [pc, #20]	; (80028d0 <TimestampNow+0x2c>)
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	9b02      	ldr	r3, [sp, #8]
 80028c0:	f7ff ffe2 	bl	8002888 <tiny_snprintf_like.constprop.0>
  *size = strlen((char *)buff);
 80028c4:	0020      	movs	r0, r4
 80028c6:	f7fd fc1f 	bl	8000108 <strlen>
 80028ca:	8028      	strh	r0, [r5, #0]
}
 80028cc:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 80028ce:	46c0      	nop			; (mov r8, r8)
 80028d0:	0800eee0 	.word	0x0800eee0

080028d4 <SystemApp_Init>:
{
 80028d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028d6:	2501      	movs	r5, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028d8:	2602      	movs	r6, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028da:	2704      	movs	r7, #4
{
 80028dc:	b08b      	sub	sp, #44	; 0x2c
  UTIL_TIMER_Init();
 80028de:	f00b fb05 	bl	800deec <UTIL_TIMER_Init>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e2:	220c      	movs	r2, #12
 80028e4:	2100      	movs	r1, #0
 80028e6:	a807      	add	r0, sp, #28
 80028e8:	f00b fdbb 	bl	800e462 <memset>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80028ec:	2280      	movs	r2, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ee:	4c2e      	ldr	r4, [pc, #184]	; (80029a8 <SystemApp_Init+0xd4>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028f0:	20a0      	movs	r0, #160	; 0xa0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028f4:	a905      	add	r1, sp, #20
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f6:	432b      	orrs	r3, r5
 80028f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80028fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028fc:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028fe:	402b      	ands	r3, r5
 8002900:	9301      	str	r3, [sp, #4]
 8002902:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002904:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002906:	4333      	orrs	r3, r6
 8002908:	62e3      	str	r3, [r4, #44]	; 0x2c
 800290a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800290c:	4033      	ands	r3, r6
 800290e:	9302      	str	r3, [sp, #8]
 8002910:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002912:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002914:	433b      	orrs	r3, r7
 8002916:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002918:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800291a:	403b      	ands	r3, r7
 800291c:	9303      	str	r3, [sp, #12]
 800291e:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002920:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002922:	4313      	orrs	r3, r2
 8002924:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002926:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002928:	4013      	ands	r3, r2
 800292a:	9304      	str	r3, [sp, #16]
 800292c:	9b04      	ldr	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800292e:	2303      	movs	r3, #3
 8002930:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_All & (~(GPIO_PIN_13 | GPIO_PIN_14));
 8002932:	4b1e      	ldr	r3, [pc, #120]	; (80029ac <SystemApp_Init+0xd8>)
 8002934:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002936:	f001 f9d7 	bl	8003ce8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 800293a:	4b1d      	ldr	r3, [pc, #116]	; (80029b0 <SystemApp_Init+0xdc>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800293c:	a905      	add	r1, sp, #20
 800293e:	481d      	ldr	r0, [pc, #116]	; (80029b4 <SystemApp_Init+0xe0>)
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 8002940:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002942:	f001 f9d1 	bl	8003ce8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002946:	a905      	add	r1, sp, #20
 8002948:	481b      	ldr	r0, [pc, #108]	; (80029b8 <SystemApp_Init+0xe4>)
 800294a:	f001 f9cd 	bl	8003ce8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800294e:	a905      	add	r1, sp, #20
 8002950:	481a      	ldr	r0, [pc, #104]	; (80029bc <SystemApp_Init+0xe8>)
 8002952:	f001 f9c9 	bl	8003ce8 <HAL_GPIO_Init>
  __HAL_RCC_GPIOH_CLK_DISABLE();
 8002956:	2280      	movs	r2, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_DISABLE();
 8002958:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800295a:	43ab      	bics	r3, r5
 800295c:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_DISABLE();
 800295e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002960:	43b3      	bics	r3, r6
 8002962:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_DISABLE();
 8002964:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002966:	43bb      	bics	r3, r7
 8002968:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_DISABLE();
 800296a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800296c:	4393      	bics	r3, r2
 800296e:	62e3      	str	r3, [r4, #44]	; 0x2c
  DBG_Disable();
 8002970:	f000 f8a6 	bl	8002ac0 <DBG_Disable>
  DBG_ProbesInit();
 8002974:	f000 f8a8 	bl	8002ac8 <DBG_ProbesInit>
  UTIL_ADV_TRACE_Init();
 8002978:	f00a ff9c 	bl	800d8b4 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 800297c:	4810      	ldr	r0, [pc, #64]	; (80029c0 <SystemApp_Init+0xec>)
 800297e:	f00a ffb3 	bl	800d8e8 <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8002982:	0030      	movs	r0, r6
 8002984:	f00a ffb6 	bl	800d8f4 <UTIL_ADV_TRACE_SetVerboseLevel>
  SYS_InitMeasurement();
 8002988:	f7ff fbd2 	bl	8002130 <SYS_InitMeasurement>
  Sx_Board_Bus_Init();
 800298c:	f000 fc27 	bl	80031de <SX1276MB1MAS_RADIO_Bus_Init>
  Sx_Board_IoInit();
 8002990:	f000 fa98 	bl	8002ec4 <SX1276MB1MAS_RADIO_IoInit>
  EnvSensors_Init();
 8002994:	f000 f8b0 	bl	8002af8 <EnvSensors_Init>
  UTIL_LPM_Init();
 8002998:	f00b f8a4 	bl	800dae4 <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 800299c:	0029      	movs	r1, r5
 800299e:	0028      	movs	r0, r5
 80029a0:	f00b f8be 	bl	800db20 <UTIL_LPM_SetOffMode>
}
 80029a4:	b00b      	add	sp, #44	; 0x2c
 80029a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029a8:	40021000 	.word	0x40021000
 80029ac:	00009fff 	.word	0x00009fff
 80029b0:	0000ffff 	.word	0x0000ffff
 80029b4:	50000400 	.word	0x50000400
 80029b8:	50000800 	.word	0x50000800
 80029bc:	50001c00 	.word	0x50001c00
 80029c0:	080028a5 	.word	0x080028a5

080029c4 <UTIL_SEQ_Idle>:
{
 80029c4:	b510      	push	{r4, lr}
  UTIL_LPM_EnterLowPower();
 80029c6:	f00b f8d3 	bl	800db70 <UTIL_LPM_EnterLowPower>
}
 80029ca:	bd10      	pop	{r4, pc}

080029cc <GetBatteryLevel>:
{
 80029cc:	b513      	push	{r0, r1, r4, lr}
  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 80029ce:	f7ff fbb7 	bl	8002140 <SYS_GetBatteryLevel>
  if (batteryLevelmV > VDD_BAT)
 80029d2:	4b0d      	ldr	r3, [pc, #52]	; (8002a08 <GetBatteryLevel+0x3c>)
    batteryLevel = LORAWAN_MAX_BAT;
 80029d4:	24fe      	movs	r4, #254	; 0xfe
  if (batteryLevelmV > VDD_BAT)
 80029d6:	4298      	cmp	r0, r3
 80029d8:	d80d      	bhi.n	80029f6 <GetBatteryLevel+0x2a>
  else if (batteryLevelmV < VDD_MIN)
 80029da:	23e1      	movs	r3, #225	; 0xe1
    batteryLevel = 0;
 80029dc:	2400      	movs	r4, #0
  else if (batteryLevelmV < VDD_MIN)
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	4298      	cmp	r0, r3
 80029e2:	d308      	bcc.n	80029f6 <GetBatteryLevel+0x2a>
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 80029e4:	4b09      	ldr	r3, [pc, #36]	; (8002a0c <GetBatteryLevel+0x40>)
 80029e6:	2196      	movs	r1, #150	; 0x96
 80029e8:	18c0      	adds	r0, r0, r3
 80029ea:	23fe      	movs	r3, #254	; 0xfe
 80029ec:	00c9      	lsls	r1, r1, #3
 80029ee:	4358      	muls	r0, r3
 80029f0:	f7fd fbba 	bl	8000168 <__udivsi3>
 80029f4:	b2c4      	uxtb	r4, r0
  APP_LOG(TS_ON, VLEVEL_M, "VDDA= %d\r\n", batteryLevel);
 80029f6:	2201      	movs	r2, #1
 80029f8:	2100      	movs	r1, #0
 80029fa:	4b05      	ldr	r3, [pc, #20]	; (8002a10 <GetBatteryLevel+0x44>)
 80029fc:	9400      	str	r4, [sp, #0]
 80029fe:	2002      	movs	r0, #2
 8002a00:	f00a ffc0 	bl	800d984 <UTIL_ADV_TRACE_COND_FSend>
}
 8002a04:	0020      	movs	r0, r4
 8002a06:	bd16      	pop	{r1, r2, r4, pc}
 8002a08:	00000bb8 	.word	0x00000bb8
 8002a0c:	fffff8f8 	.word	0xfffff8f8
 8002a10:	0800eee9 	.word	0x0800eee9

08002a14 <GetTemperatureLevel>:
{
 8002a14:	b510      	push	{r4, lr}
  temperatureLevel = (uint16_t)(SYS_GetTemperatureLevel() / 256);
 8002a16:	f7ff fba9 	bl	800216c <SYS_GetTemperatureLevel>
 8002a1a:	0002      	movs	r2, r0
 8002a1c:	17c0      	asrs	r0, r0, #31
 8002a1e:	b2c0      	uxtb	r0, r0
 8002a20:	1880      	adds	r0, r0, r2
 8002a22:	1200      	asrs	r0, r0, #8
  return temperatureLevel;
 8002a24:	b280      	uxth	r0, r0
}
 8002a26:	bd10      	pop	{r4, pc}

08002a28 <GetUniqueId>:
{
 8002a28:	b570      	push	{r4, r5, r6, lr}
 8002a2a:	0004      	movs	r4, r0
  uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8002a2c:	f000 fc4e 	bl	80032cc <HAL_GetUIDw0>
 8002a30:	0005      	movs	r5, r0
 8002a32:	f000 fc57 	bl	80032e4 <HAL_GetUIDw2>
 8002a36:	182d      	adds	r5, r5, r0
  uint32_t ID_2_val = HAL_GetUIDw1();
 8002a38:	f000 fc4e 	bl	80032d8 <HAL_GetUIDw1>
  id[7] = (ID_1_3_val) >> 24;
 8002a3c:	0e2b      	lsrs	r3, r5, #24
 8002a3e:	71e3      	strb	r3, [r4, #7]
  id[6] = (ID_1_3_val) >> 16;
 8002a40:	0c2b      	lsrs	r3, r5, #16
 8002a42:	71a3      	strb	r3, [r4, #6]
  id[5] = (ID_1_3_val) >> 8;
 8002a44:	0a2b      	lsrs	r3, r5, #8
 8002a46:	7163      	strb	r3, [r4, #5]
  id[3] = (ID_2_val) >> 24;
 8002a48:	0e03      	lsrs	r3, r0, #24
 8002a4a:	70e3      	strb	r3, [r4, #3]
  id[2] = (ID_2_val) >> 16;
 8002a4c:	0c03      	lsrs	r3, r0, #16
 8002a4e:	70a3      	strb	r3, [r4, #2]
  id[1] = (ID_2_val) >> 8;
 8002a50:	0a03      	lsrs	r3, r0, #8
  id[4] = (ID_1_3_val);
 8002a52:	7125      	strb	r5, [r4, #4]
  id[1] = (ID_2_val) >> 8;
 8002a54:	7063      	strb	r3, [r4, #1]
  id[0] = (ID_2_val);
 8002a56:	7020      	strb	r0, [r4, #0]
}
 8002a58:	bd70      	pop	{r4, r5, r6, pc}

08002a5a <GetDevAddr>:
{
 8002a5a:	b510      	push	{r4, lr}
  return ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8002a5c:	f000 fc36 	bl	80032cc <HAL_GetUIDw0>
 8002a60:	0004      	movs	r4, r0
 8002a62:	f000 fc39 	bl	80032d8 <HAL_GetUIDw1>
 8002a66:	4044      	eors	r4, r0
 8002a68:	f000 fc3c 	bl	80032e4 <HAL_GetUIDw2>
 8002a6c:	4060      	eors	r0, r4
}
 8002a6e:	bd10      	pop	{r4, pc}

08002a70 <UTIL_ADV_TRACE_PreSendHook>:
{
 8002a70:	b510      	push	{r4, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8002a72:	2101      	movs	r1, #1
 8002a74:	2004      	movs	r0, #4
 8002a76:	f00b f83d 	bl	800daf4 <UTIL_LPM_SetStopMode>
}
 8002a7a:	bd10      	pop	{r4, pc}

08002a7c <UTIL_ADV_TRACE_PostSendHook>:
{
 8002a7c:	b510      	push	{r4, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8002a7e:	2100      	movs	r1, #0
 8002a80:	2004      	movs	r0, #4
 8002a82:	f00b f837 	bl	800daf4 <UTIL_LPM_SetStopMode>
}
 8002a86:	bd10      	pop	{r4, pc}

08002a88 <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8002a88:	2000      	movs	r0, #0
 8002a8a:	4770      	bx	lr

08002a8c <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8002a8c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return RTC_IF_GetTimerValue();
 8002a8e:	f7ff fe31 	bl	80026f4 <RTC_IF_GetTimerValue>
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
}
 8002a92:	bd10      	pop	{r4, pc}

08002a94 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8002a94:	b507      	push	{r0, r1, r2, lr}
 8002a96:	9001      	str	r0, [sp, #4]
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  RTC_IF_DelayMs(Delay);   /* based on RTC */
 8002a98:	9801      	ldr	r0, [sp, #4]
 8002a9a:	f7ff fe3b 	bl	8002714 <RTC_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8002a9e:	bd07      	pop	{r0, r1, r2, pc}

08002aa0 <DBG_ConfigForLpm.part.0>:
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  if (enable_dbg == 1)
  {
    __HAL_RCC_DBGMCU_CLK_ENABLE();
 8002aa0:	2380      	movs	r3, #128	; 0x80
 8002aa2:	4a06      	ldr	r2, [pc, #24]	; (8002abc <DBG_ConfigForLpm.part.0+0x1c>)
void DBG_ConfigForLpm(uint8_t enableDbg)
 8002aa4:	b510      	push	{r4, lr}
    __HAL_RCC_DBGMCU_CLK_ENABLE();
 8002aa6:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8002aa8:	03db      	lsls	r3, r3, #15
 8002aaa:	430b      	orrs	r3, r1
 8002aac:	6353      	str	r3, [r2, #52]	; 0x34

    HAL_DBGMCU_EnableDBGSleepMode();
 8002aae:	f000 fc1f 	bl	80032f0 <HAL_DBGMCU_EnableDBGSleepMode>
    HAL_DBGMCU_EnableDBGStopMode();
 8002ab2:	f000 fc25 	bl	8003300 <HAL_DBGMCU_EnableDBGStopMode>
    HAL_DBGMCU_EnableDBGStandbyMode();
 8002ab6:	f000 fc2b 	bl	8003310 <HAL_DBGMCU_EnableDBGStandbyMode>
  }

  /* USER CODE BEGIN DBG_ConfigForLpm_Last */

  /* USER CODE END DBG_ConfigForLpm_Last */
}
 8002aba:	bd10      	pop	{r4, pc}
 8002abc:	40021000 	.word	0x40021000

08002ac0 <DBG_Disable>:
{
 8002ac0:	b510      	push	{r4, lr}
 8002ac2:	f7ff ffed 	bl	8002aa0 <DBG_ConfigForLpm.part.0>
}
 8002ac6:	bd10      	pop	{r4, pc}

08002ac8 <DBG_ProbesInit>:
#endif /* PROBE_PINS_ENABLED */

  /* USER CODE BEGIN DBG_ProbesInit_Last */

  /* USER CODE END DBG_ProbesInit_Last */
}
 8002ac8:	4770      	bx	lr
	...

08002acc <EnvSensors_Read>:
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8002acc:	4b05      	ldr	r3, [pc, #20]	; (8002ae4 <EnvSensors_Read+0x18>)
 8002ace:	6083      	str	r3, [r0, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8002ad0:	4b05      	ldr	r3, [pc, #20]	; (8002ae8 <EnvSensors_Read+0x1c>)
 8002ad2:	6043      	str	r3, [r0, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8002ad4:	4b05      	ldr	r3, [pc, #20]	; (8002aec <EnvSensors_Read+0x20>)
 8002ad6:	6003      	str	r3, [r0, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8002ad8:	4b05      	ldr	r3, [pc, #20]	; (8002af0 <EnvSensors_Read+0x24>)
 8002ada:	60c3      	str	r3, [r0, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8002adc:	4b05      	ldr	r3, [pc, #20]	; (8002af4 <EnvSensors_Read+0x28>)
 8002ade:	6103      	str	r3, [r0, #16]

  return 0;
  /* USER CODE END EnvSensors_Read */
}
 8002ae0:	2000      	movs	r0, #0
 8002ae2:	4770      	bx	lr
 8002ae4:	42480000 	.word	0x42480000
 8002ae8:	41900000 	.word	0x41900000
 8002aec:	447a0000 	.word	0x447a0000
 8002af0:	003e090d 	.word	0x003e090d
 8002af4:	000503ab 	.word	0x000503ab

08002af8 <EnvSensors_Init>:
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
  /* USER CODE END EnvSensors_Init */
}
 8002af8:	2000      	movs	r0, #0
 8002afa:	4770      	bx	lr

08002afc <MX_USART2_UART_Init>:
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance        = USART2;
 8002afc:	480a      	ldr	r0, [pc, #40]	; (8002b28 <MX_USART2_UART_Init+0x2c>)
 8002afe:	4b0b      	ldr	r3, [pc, #44]	; (8002b2c <MX_USART2_UART_Init+0x30>)
{
 8002b00:	b510      	push	{r4, lr}
  huart2.Instance        = USART2;
 8002b02:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate   = USART_BAUDRATE;
 8002b04:	23e1      	movs	r3, #225	; 0xe1
 8002b06:	025b      	lsls	r3, r3, #9
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits   = UART_STOPBITS_1;
  huart2.Init.Parity     = UART_PARITY_NONE;
  huart2.Init.Mode       = UART_MODE_TX;
 8002b08:	2208      	movs	r2, #8
  huart2.Init.BaudRate   = USART_BAUDRATE;
 8002b0a:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b0c:	2300      	movs	r3, #0
  huart2.Init.Mode       = UART_MODE_TX;
 8002b0e:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b10:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits   = UART_STOPBITS_1;
 8002b12:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity     = UART_PARITY_NONE;
 8002b14:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8002b16:	6183      	str	r3, [r0, #24]

  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b18:	f003 f9a6 	bl	8005e68 <HAL_UART_Init>
 8002b1c:	2800      	cmp	r0, #0
 8002b1e:	d001      	beq.n	8002b24 <MX_USART2_UART_Init+0x28>
  {
    Error_Handler();
 8002b20:	f7ff fbbc 	bl	800229c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002b24:	bd10      	pop	{r4, pc}
 8002b26:	46c0      	nop			; (mov r8, r8)
 8002b28:	20000384 	.word	0x20000384
 8002b2c:	40004400 	.word	0x40004400

08002b30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle)
{
 8002b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b32:	0005      	movs	r5, r0
 8002b34:	b093      	sub	sp, #76	; 0x4c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b36:	2214      	movs	r2, #20
 8002b38:	2100      	movs	r1, #0
 8002b3a:	a803      	add	r0, sp, #12
 8002b3c:	f00b fc91 	bl	800e462 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b40:	2228      	movs	r2, #40	; 0x28
 8002b42:	2100      	movs	r1, #0
 8002b44:	a808      	add	r0, sp, #32
 8002b46:	f00b fc8c 	bl	800e462 <memset>

  if (uartHandle->Instance == USART2)
 8002b4a:	4b37      	ldr	r3, [pc, #220]	; (8002c28 <HAL_UART_MspInit+0xf8>)
 8002b4c:	682a      	ldr	r2, [r5, #0]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d168      	bne.n	8002c24 <HAL_UART_MspInit+0xf4>

    /* USER CODE END USART2_MspInit 0 */

    /* Enable peripherals and GPIO Clocks */
    /* Enable GPIO TX/RX clock */
    USARTx_TX_GPIO_CLK_ENABLE();
 8002b52:	2201      	movs	r2, #1
 8002b54:	4b35      	ldr	r3, [pc, #212]	; (8002c2c <HAL_UART_MspInit+0xfc>)
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();

    /* Select SYSTEM clock for USART2 commuincation TX/RX */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8002b56:	2604      	movs	r6, #4
    USARTx_TX_GPIO_CLK_ENABLE();
 8002b58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b5a:	4311      	orrs	r1, r2
 8002b5c:	62d9      	str	r1, [r3, #44]	; 0x2c
 8002b5e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b60:	4011      	ands	r1, r2
 8002b62:	9100      	str	r1, [sp, #0]
 8002b64:	9900      	ldr	r1, [sp, #0]
    USARTx_RX_GPIO_CLK_ENABLE();
 8002b66:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b68:	4311      	orrs	r1, r2
 8002b6a:	62d9      	str	r1, [r3, #44]	; 0x2c
 8002b6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b6e:	4011      	ands	r1, r2
 8002b70:	9101      	str	r1, [sp, #4]
 8002b72:	9901      	ldr	r1, [sp, #4]
    __USART2_CLK_ENABLE();
 8002b74:	2180      	movs	r1, #128	; 0x80
 8002b76:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002b78:	0289      	lsls	r1, r1, #10
 8002b7a:	4308      	orrs	r0, r1
 8002b7c:	6398      	str	r0, [r3, #56]	; 0x38
    DMAx_CLK_ENABLE();
 8002b7e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002b80:	4310      	orrs	r0, r2
 8002b82:	6318      	str	r0, [r3, #48]	; 0x30
 8002b84:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002b86:	4002      	ands	r2, r0
 8002b88:	9202      	str	r2, [sp, #8]
 8002b8a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b8e:	a808      	add	r0, sp, #32
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b90:	4311      	orrs	r1, r2
 8002b92:	6399      	str	r1, [r3, #56]	; 0x38
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002b94:	2302      	movs	r3, #2
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8002b96:	960c      	str	r6, [sp, #48]	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002b98:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b9a:	f001 fe53 	bl	8004844 <HAL_RCCEx_PeriphCLKConfig>
 8002b9e:	2800      	cmp	r0, #0
 8002ba0:	d001      	beq.n	8002ba6 <HAL_UART_MspInit+0x76>
    {
      Error_Handler();
 8002ba2:	f7ff fb7b 	bl	800229c <Error_Handler>
    GPIO_InitStruct.Pin = USARTx_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = USARTx_TX_AF;
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 8002ba6:	20a0      	movs	r0, #160	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba8:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002baa:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8002bac:	2303      	movs	r3, #3
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 8002bae:	a903      	add	r1, sp, #12
 8002bb0:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb2:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8002bb4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = USARTx_TX_Pin;
 8002bb6:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb8:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8002bba:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 8002bbc:	f001 f894 	bl	8003ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USARTx_RX_Pin;
 8002bc0:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = USARTx_RX_AF;
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 8002bc2:	20a0      	movs	r0, #160	; 0xa0
    GPIO_InitStruct.Pin = USARTx_RX_Pin;
 8002bc4:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 8002bc6:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8002bc8:	3b05      	subs	r3, #5
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 8002bca:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bcc:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8002bce:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd0:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8002bd2:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 8002bd4:	f001 f888 	bl	8003ce8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    /* Configure the DMA handler for Transmission process */
    hdma_usart2_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 8002bd8:	4f15      	ldr	r7, [pc, #84]	; (8002c30 <HAL_UART_MspInit+0x100>)
 8002bda:	4b16      	ldr	r3, [pc, #88]	; (8002c34 <HAL_UART_MspInit+0x104>)
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
    hdma_usart2_tx.Init.Mode                = DMA_NORMAL;
    hdma_usart2_tx.Init.Priority            = DMA_PRIORITY_LOW;

    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002bdc:	0038      	movs	r0, r7
    hdma_usart2_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 8002bde:	603b      	str	r3, [r7, #0]
    hdma_usart2_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8002be0:	2310      	movs	r3, #16
 8002be2:	60bb      	str	r3, [r7, #8]
    hdma_usart2_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8002be4:	3370      	adds	r3, #112	; 0x70
    hdma_usart2_tx.Init.Request             = USARTx_TX_DMA_REQUEST;
 8002be6:	607e      	str	r6, [r7, #4]
    hdma_usart2_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8002be8:	60fc      	str	r4, [r7, #12]
    hdma_usart2_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8002bea:	613b      	str	r3, [r7, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bec:	617c      	str	r4, [r7, #20]
    hdma_usart2_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8002bee:	61bc      	str	r4, [r7, #24]
    hdma_usart2_tx.Init.Mode                = DMA_NORMAL;
 8002bf0:	61fc      	str	r4, [r7, #28]
    hdma_usart2_tx.Init.Priority            = DMA_PRIORITY_LOW;
 8002bf2:	623c      	str	r4, [r7, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002bf4:	f000 ff14 	bl	8003a20 <HAL_DMA_Init>
 8002bf8:	42a0      	cmp	r0, r4
 8002bfa:	d001      	beq.n	8002c00 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8002bfc:	f7ff fb4e 	bl	800229c <Error_Handler>
    /* Associate the initialized DMA handle to the UART handle */
    __HAL_LINKDMA(uartHandle, hdmatx, hdma_usart2_tx);

    /* Configure the NVIC for DMA */
    /* NVIC configuration for DMA transfer complete interrupt (USART1_TX) */
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 8002c00:	2201      	movs	r2, #1
 8002c02:	2100      	movs	r1, #0
 8002c04:	200b      	movs	r0, #11
    __HAL_LINKDMA(uartHandle, hdmatx, hdma_usart2_tx);
 8002c06:	66ef      	str	r7, [r5, #108]	; 0x6c
 8002c08:	62bd      	str	r5, [r7, #40]	; 0x28
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 8002c0a:	f000 fec3 	bl	8003994 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 8002c0e:	200b      	movs	r0, #11
 8002c10:	f000 feea 	bl	80039e8 <HAL_NVIC_EnableIRQ>

    /* NVIC for USART, to catch the TX complete */
    HAL_NVIC_SetPriority(USARTx_IRQn, USARTx_DMA_Priority, 1);
 8002c14:	201c      	movs	r0, #28
 8002c16:	2201      	movs	r2, #1
 8002c18:	2100      	movs	r1, #0
 8002c1a:	f000 febb 	bl	8003994 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_IRQn);
 8002c1e:	201c      	movs	r0, #28
 8002c20:	f000 fee2 	bl	80039e8 <HAL_NVIC_EnableIRQ>

    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }
}
 8002c24:	b013      	add	sp, #76	; 0x4c
 8002c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c28:	40004400 	.word	0x40004400
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	2000033c 	.word	0x2000033c
 8002c34:	40020080 	.word	0x40020080

08002c38 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef *uartHandle)
{

  if (uartHandle->Instance == USART2)
 8002c38:	4b0b      	ldr	r3, [pc, #44]	; (8002c68 <HAL_UART_MspDeInit+0x30>)
 8002c3a:	6802      	ldr	r2, [r0, #0]
{
 8002c3c:	b510      	push	{r4, lr}
 8002c3e:	0004      	movs	r4, r0
  if (uartHandle->Instance == USART2)
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d10f      	bne.n	8002c64 <HAL_UART_MspDeInit+0x2c>

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
      */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 8002c44:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART2_CLK_DISABLE();
 8002c46:	4a09      	ldr	r2, [pc, #36]	; (8002c6c <HAL_UART_MspDeInit+0x34>)
 8002c48:	4909      	ldr	r1, [pc, #36]	; (8002c70 <HAL_UART_MspDeInit+0x38>)
 8002c4a:	6b93      	ldr	r3, [r2, #56]	; 0x38
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 8002c4c:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART2_CLK_DISABLE();
 8002c4e:	400b      	ands	r3, r1
 8002c50:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 8002c52:	210c      	movs	r1, #12
 8002c54:	f001 f90e 	bl	8003e74 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002c58:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002c5a:	f000 ff25 	bl	8003aa8 <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8002c5e:	201c      	movs	r0, #28
 8002c60:	f000 fece 	bl	8003a00 <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN USART2_MspDeInit 1 */

    /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8002c64:	bd10      	pop	{r4, pc}
 8002c66:	46c0      	nop			; (mov r8, r8)
 8002c68:	40004400 	.word	0x40004400
 8002c6c:	40021000 	.word	0x40021000
 8002c70:	fffdffff 	.word	0xfffdffff

08002c74 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002c74:	b510      	push	{r4, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8002c76:	4b04      	ldr	r3, [pc, #16]	; (8002c88 <vcom_Init+0x14>)
 8002c78:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 8002c7a:	f7ff faa5 	bl	80021c8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002c7e:	f7ff ff3d 	bl	8002afc <MX_USART2_UART_Init>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002c82:	2000      	movs	r0, #0
 8002c84:	bd10      	pop	{r4, pc}
 8002c86:	46c0      	nop			; (mov r8, r8)
 8002c88:	20000408 	.word	0x20000408

08002c8c <vcom_DeInit>:
{
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
 8002c8c:	2280      	movs	r2, #128	; 0x80
 8002c8e:	4b09      	ldr	r3, [pc, #36]	; (8002cb4 <vcom_DeInit+0x28>)
 8002c90:	0292      	lsls	r2, r2, #10
 8002c92:	6a99      	ldr	r1, [r3, #40]	; 0x28
{
 8002c94:	b510      	push	{r4, lr}
  __HAL_RCC_USART2_FORCE_RESET();
 8002c96:	430a      	orrs	r2, r1
 8002c98:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_USART2_RELEASE_RESET();
 8002c9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c9c:	4906      	ldr	r1, [pc, #24]	; (8002cb8 <vcom_DeInit+0x2c>)

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 8002c9e:	4807      	ldr	r0, [pc, #28]	; (8002cbc <vcom_DeInit+0x30>)
  __HAL_RCC_USART2_RELEASE_RESET();
 8002ca0:	400a      	ands	r2, r1
 8002ca2:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_UART_MspDeInit(&huart2);
 8002ca4:	f7ff ffc8 	bl	8002c38 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8002ca8:	200b      	movs	r0, #11
 8002caa:	f000 fea9 	bl	8003a00 <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8002cae:	2000      	movs	r0, #0
 8002cb0:	bd10      	pop	{r4, pc}
 8002cb2:	46c0      	nop			; (mov r8, r8)
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	fffdffff 	.word	0xfffdffff
 8002cbc:	20000384 	.word	0x20000384

08002cc0 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8002cc0:	b510      	push	{r4, lr}
 8002cc2:	000a      	movs	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 8002cc4:	0001      	movs	r1, r0
 8002cc6:	4802      	ldr	r0, [pc, #8]	; (8002cd0 <vcom_Trace_DMA+0x10>)
 8002cc8:	f002 fc8c 	bl	80055e4 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8002ccc:	2000      	movs	r0, #0
 8002cce:	bd10      	pop	{r4, pc}
 8002cd0:	20000384 	.word	0x20000384

08002cd4 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002cd4:	b537      	push	{r0, r1, r2, r4, r5, lr}

  /*record call back*/
  RxCpltCallback = RxCb;

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002cd6:	2180      	movs	r1, #128	; 0x80

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 8002cd8:	4c10      	ldr	r4, [pc, #64]	; (8002d1c <vcom_ReceiveInit+0x48>)
  RxCpltCallback = RxCb;
 8002cda:	4d11      	ldr	r5, [pc, #68]	; (8002d20 <vcom_ReceiveInit+0x4c>)
  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 8002cdc:	9a01      	ldr	r2, [sp, #4]
  RxCpltCallback = RxCb;
 8002cde:	6068      	str	r0, [r5, #4]
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002ce0:	0389      	lsls	r1, r1, #14
  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 8002ce2:	0020      	movs	r0, r4
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002ce4:	9100      	str	r1, [sp, #0]
  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 8002ce6:	f003 f971 	bl	8005fcc <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 8002cea:	2280      	movs	r2, #128	; 0x80
 8002cec:	6823      	ldr	r3, [r4, #0]
 8002cee:	0252      	lsls	r2, r2, #9
 8002cf0:	69d9      	ldr	r1, [r3, #28]
 8002cf2:	4211      	tst	r1, r2
 8002cf4:	d1fc      	bne.n	8002cf0 <vcom_ReceiveInit+0x1c>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 8002cf6:	2280      	movs	r2, #128	; 0x80
 8002cf8:	03d2      	lsls	r2, r2, #15
 8002cfa:	69d9      	ldr	r1, [r3, #28]
 8002cfc:	4211      	tst	r1, r2
 8002cfe:	d0fc      	beq.n	8002cfa <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 8002d00:	6899      	ldr	r1, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 8002d02:	0020      	movs	r0, r4
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 8002d04:	430a      	orrs	r2, r1
 8002d06:	609a      	str	r2, [r3, #8]
  HAL_UARTEx_EnableStopMode(&huart2);
 8002d08:	f003 f9a8 	bl	800605c <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 8002d0c:	0029      	movs	r1, r5
 8002d0e:	2201      	movs	r2, #1
 8002d10:	0020      	movs	r0, r4
 8002d12:	3108      	adds	r1, #8
 8002d14:	f003 f924 	bl	8005f60 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8002d18:	2000      	movs	r0, #0
 8002d1a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8002d1c:	20000384 	.word	0x20000384
 8002d20:	20000408 	.word	0x20000408

08002d24 <HAL_UART_TxCpltCallback>:

  /* USER CODE END vcom_Resume_2 */
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart2)
{
 8002d24:	b510      	push	{r4, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  TxCpltCallback(NULL);
 8002d26:	4b02      	ldr	r3, [pc, #8]	; (8002d30 <HAL_UART_TxCpltCallback+0xc>)
 8002d28:	2000      	movs	r0, #0
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4798      	blx	r3
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8002d2e:	bd10      	pop	{r4, pc}
 8002d30:	20000408 	.word	0x20000408

08002d34 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart2)
{
 8002d34:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart2->ErrorCode))
 8002d36:	4c0a      	ldr	r4, [pc, #40]	; (8002d60 <HAL_UART_RxCpltCallback+0x2c>)
{
 8002d38:	0005      	movs	r5, r0
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart2->ErrorCode))
 8002d3a:	6863      	ldr	r3, [r4, #4]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d007      	beq.n	8002d50 <HAL_UART_RxCpltCallback+0x1c>
 8002d40:	1d02      	adds	r2, r0, #4
 8002d42:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8002d44:	2a00      	cmp	r2, #0
 8002d46:	d103      	bne.n	8002d50 <HAL_UART_RxCpltCallback+0x1c>
  {
    RxCpltCallback(&charRx, 1, 0);
 8002d48:	0020      	movs	r0, r4
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	3008      	adds	r0, #8
 8002d4e:	4798      	blx	r3
  }
  HAL_UART_Receive_IT(huart2, &charRx, 1);
 8002d50:	0021      	movs	r1, r4
 8002d52:	0028      	movs	r0, r5
 8002d54:	2201      	movs	r2, #1
 8002d56:	3108      	adds	r1, #8
 8002d58:	f003 f902 	bl	8005f60 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8002d5c:	bd70      	pop	{r4, r5, r6, pc}
 8002d5e:	46c0      	nop			; (mov r8, r8)
 8002d60:	20000408 	.word	0x20000408

08002d64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002d64:	480d      	ldr	r0, [pc, #52]	; (8002d9c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8002d66:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d68:	480d      	ldr	r0, [pc, #52]	; (8002da0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002d6a:	490e      	ldr	r1, [pc, #56]	; (8002da4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d6c:	4a0e      	ldr	r2, [pc, #56]	; (8002da8 <LoopForever+0xe>)
  movs r3, #0
 8002d6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d70:	e002      	b.n	8002d78 <LoopCopyDataInit>

08002d72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d76:	3304      	adds	r3, #4

08002d78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d7c:	d3f9      	bcc.n	8002d72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d7e:	4a0b      	ldr	r2, [pc, #44]	; (8002dac <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d80:	4c0b      	ldr	r4, [pc, #44]	; (8002db0 <LoopForever+0x16>)
  movs r3, #0
 8002d82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d84:	e001      	b.n	8002d8a <LoopFillZerobss>

08002d86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d88:	3204      	adds	r2, #4

08002d8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d8c:	d3fb      	bcc.n	8002d86 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002d8e:	f000 fa4f 	bl	8003230 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d92:	f00b fb39 	bl	800e408 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d96:	f7ff fa77 	bl	8002288 <main>

08002d9a <LoopForever>:

LoopForever:
    b LoopForever
 8002d9a:	e7fe      	b.n	8002d9a <LoopForever>
   ldr   r0, =_estack
 8002d9c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8002da0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002da4:	200000f0 	.word	0x200000f0
  ldr r2, =_sidata
 8002da8:	0800f200 	.word	0x0800f200
  ldr r2, =_sbss
 8002dac:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 8002db0:	2000187c 	.word	0x2000187c

08002db4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002db4:	e7fe      	b.n	8002db4 <ADC1_COMP_IRQHandler>
	...

08002db8 <BSP_SPI1_SendRecv>:
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t len)
{
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;

  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8002db8:	23fa      	movs	r3, #250	; 0xfa
{
 8002dba:	b513      	push	{r0, r1, r4, lr}
  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8002dbc:	009b      	lsls	r3, r3, #2
{
 8002dbe:	0014      	movs	r4, r2
  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8002dc0:	9300      	str	r3, [sp, #0]
 8002dc2:	0013      	movs	r3, r2
 8002dc4:	000a      	movs	r2, r1
 8002dc6:	0001      	movs	r1, r0
 8002dc8:	4804      	ldr	r0, [pc, #16]	; (8002ddc <BSP_SPI1_SendRecv+0x24>)
 8002dca:	f002 fa97 	bl	80052fc <HAL_SPI_TransmitReceive>
 8002dce:	2800      	cmp	r0, #0
 8002dd0:	d101      	bne.n	8002dd6 <BSP_SPI1_SendRecv+0x1e>
  {
    ret = len;
 8002dd2:	0020      	movs	r0, r4
  }
  return ret;
}
 8002dd4:	bd16      	pop	{r1, r2, r4, pc}
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8002dd6:	2006      	movs	r0, #6
 8002dd8:	4240      	negs	r0, r0
  return ret;
 8002dda:	e7fb      	b.n	8002dd4 <BSP_SPI1_SendRecv+0x1c>
 8002ddc:	20000414 	.word	0x20000414

08002de0 <MX_SPI1_Init>:
/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef *hspi)
{
  HAL_StatusTypeDef ret = HAL_OK;
  hspi->Instance = SPI1;
 8002de0:	4b14      	ldr	r3, [pc, #80]	; (8002e34 <MX_SPI1_Init+0x54>)
{
 8002de2:	b570      	push	{r4, r5, r6, lr}
  hspi->Instance = SPI1;
 8002de4:	6003      	str	r3, [r0, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8002de6:	2382      	movs	r3, #130	; 0x82
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8002de8:	2500      	movs	r5, #0
  hspi->Init.Mode = SPI_MODE_MASTER;
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	6043      	str	r3, [r0, #4]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi->Init.NSS = SPI_NSS_SOFT;
 8002dee:	33fc      	adds	r3, #252	; 0xfc
 8002df0:	6183      	str	r3, [r0, #24]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8002df2:	6085      	str	r5, [r0, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8002df4:	60c5      	str	r5, [r0, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002df6:	6105      	str	r5, [r0, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8002df8:	6145      	str	r5, [r0, #20]
{
 8002dfa:	0004      	movs	r4, r0
  /* SPI1 is on APB2 for L0x3 -> HAL_RCC_GetPCLK2Freq */
  hspi->Init.BaudRatePrescaler = SPI_GetPrescaler(HAL_RCC_GetPCLK2Freq(), RADIO_SPI_BAUDRATE);
 8002dfc:	f001 fd12 	bl	8004824 <HAL_RCC_GetPCLK2Freq>
  /* USER CODE END SPI1_MspDeInit 1 */
}

static uint32_t SPI_GetPrescaler(uint32_t clock_src_hz, uint32_t baudrate_mbps)
{
  uint32_t divisor = 0;
 8002e00:	002b      	movs	r3, r5
    SPI_BAUDRATEPRESCALER_64,
    SPI_BAUDRATEPRESCALER_128,
    SPI_BAUDRATEPRESCALER_256,
  };

  while (spi_clk > baudrate_mbps)
 8002e02:	4a0d      	ldr	r2, [pc, #52]	; (8002e38 <MX_SPI1_Init+0x58>)
  {
    presc = baudrate[divisor];
 8002e04:	490d      	ldr	r1, [pc, #52]	; (8002e3c <MX_SPI1_Init+0x5c>)
  while (spi_clk > baudrate_mbps)
 8002e06:	4290      	cmp	r0, r2
 8002e08:	d80d      	bhi.n	8002e26 <MX_SPI1_Init+0x46>
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	6223      	str	r3, [r4, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8002e0e:	6263      	str	r3, [r4, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e10:	62a3      	str	r3, [r4, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8002e12:	3307      	adds	r3, #7
  hspi->Init.BaudRatePrescaler = SPI_GetPrescaler(HAL_RCC_GetPCLK2Freq(), RADIO_SPI_BAUDRATE);
 8002e14:	61e5      	str	r5, [r4, #28]
  hspi->Init.CRCPolynomial = 7;
 8002e16:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8002e18:	0020      	movs	r0, r4
 8002e1a:	f002 fa07 	bl	800522c <HAL_SPI_Init>
 8002e1e:	1e43      	subs	r3, r0, #1
 8002e20:	4198      	sbcs	r0, r3
  return ret;
 8002e22:	b2c0      	uxtb	r0, r0
}
 8002e24:	bd70      	pop	{r4, r5, r6, pc}
    presc = baudrate[divisor];
 8002e26:	009d      	lsls	r5, r3, #2
    if (++divisor > 7)
 8002e28:	3301      	adds	r3, #1
    presc = baudrate[divisor];
 8002e2a:	586d      	ldr	r5, [r5, r1]
    if (++divisor > 7)
 8002e2c:	2b08      	cmp	r3, #8
 8002e2e:	d0ec      	beq.n	8002e0a <MX_SPI1_Init+0x2a>
    {
      break;
    }

    spi_clk = (spi_clk >> 1);
 8002e30:	0840      	lsrs	r0, r0, #1
 8002e32:	e7e8      	b.n	8002e06 <MX_SPI1_Init+0x26>
 8002e34:	40013000 	.word	0x40013000
 8002e38:	00989680 	.word	0x00989680
 8002e3c:	0800e638 	.word	0x0800e638

08002e40 <BSP_SPI1_Init>:
{
 8002e40:	b530      	push	{r4, r5, lr}
  hspi1.Instance  = SPI1;
 8002e42:	4d1b      	ldr	r5, [pc, #108]	; (8002eb0 <BSP_SPI1_Init+0x70>)
 8002e44:	4b1b      	ldr	r3, [pc, #108]	; (8002eb4 <BSP_SPI1_Init+0x74>)
  if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8002e46:	0028      	movs	r0, r5
{
 8002e48:	b087      	sub	sp, #28
  hspi1.Instance  = SPI1;
 8002e4a:	602b      	str	r3, [r5, #0]
  if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8002e4c:	f002 fbac 	bl	80055a8 <HAL_SPI_GetState>
 8002e50:	1e04      	subs	r4, r0, #0
 8002e52:	d002      	beq.n	8002e5a <BSP_SPI1_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 8002e54:	2000      	movs	r0, #0
}
 8002e56:	b007      	add	sp, #28
 8002e58:	bd30      	pop	{r4, r5, pc}
  __HAL_RCC_SPI1_CLK_ENABLE();
 8002e5a:	2380      	movs	r3, #128	; 0x80
 8002e5c:	4a16      	ldr	r2, [pc, #88]	; (8002eb8 <BSP_SPI1_Init+0x78>)
 8002e5e:	015b      	lsls	r3, r3, #5
 8002e60:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8002e62:	430b      	orrs	r3, r1
 8002e64:	6353      	str	r3, [r2, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e66:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e68:	9003      	str	r0, [sp, #12]
  GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8002e6a:	9005      	str	r0, [sp, #20]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002e6c:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e6e:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e70:	3301      	adds	r3, #1
 8002e72:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002e74:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8002e76:	337d      	adds	r3, #125	; 0x7d
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002e78:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8002e7a:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002e7c:	f000 ff34 	bl	8003ce8 <HAL_GPIO_Init>
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002e80:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8002e82:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002e84:	a901      	add	r1, sp, #4
 8002e86:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8002e88:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8002e8a:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002e8c:	f000 ff2c 	bl	8003ce8 <HAL_GPIO_Init>
  HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8002e90:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8002e92:	2320      	movs	r3, #32
  HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8002e94:	05c0      	lsls	r0, r0, #23
 8002e96:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8002e98:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8002e9a:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8002e9c:	f000 ff24 	bl	8003ce8 <HAL_GPIO_Init>
    if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8002ea0:	0028      	movs	r0, r5
 8002ea2:	f7ff ff9d 	bl	8002de0 <MX_SPI1_Init>
 8002ea6:	2800      	cmp	r0, #0
 8002ea8:	d0d4      	beq.n	8002e54 <BSP_SPI1_Init+0x14>
      ret = BSP_ERROR_BUS_FAILURE;
 8002eaa:	2008      	movs	r0, #8
 8002eac:	4240      	negs	r0, r0
  return ret;
 8002eae:	e7d2      	b.n	8002e56 <BSP_SPI1_Init+0x16>
 8002eb0:	20000414 	.word	0x20000414
 8002eb4:	40013000 	.word	0x40013000
 8002eb8:	40021000 	.word	0x40021000

08002ebc <SX1276MB1MAS_RADIO_GetWakeUpTime>:

/* Exported functions ---------------------------------------------------------*/
uint32_t SX1276MB1MAS_RADIO_GetWakeUpTime(void)
{
  return  BOARD_WAKEUP_TIME;
}
 8002ebc:	2000      	movs	r0, #0
 8002ebe:	4770      	bx	lr

08002ec0 <SX1276MB1MAS_RADIO_SetXO>:

void SX1276MB1MAS_RADIO_SetXO(uint8_t state)
{
}
 8002ec0:	4770      	bx	lr
	...

08002ec4 <SX1276MB1MAS_RADIO_IoInit>:

void SX1276MB1MAS_RADIO_IoInit(void)
{
  GPIO_InitTypeDef initStruct = {0};
 8002ec4:	2300      	movs	r3, #0
{
 8002ec6:	b5f0      	push	{r4, r5, r6, r7, lr}
  SPI_HandleTypeDef dummy_hspi;

  /* Enable DIO GPIO clock */
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 8002ec8:	2601      	movs	r6, #1
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 8002eca:	2502      	movs	r5, #2
{
 8002ecc:	b095      	sub	sp, #84	; 0x54
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 8002ece:	4c5a      	ldr	r4, [pc, #360]	; (8003038 <SX1276MB1MAS_RADIO_IoInit+0x174>)
  GPIO_InitTypeDef initStruct = {0};
 8002ed0:	930e      	str	r3, [sp, #56]	; 0x38
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 8002ed2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  initStruct.Pull = GPIO_PULLDOWN;
  initStruct.Speed = GPIO_SPEED_HIGH;

  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
  {
    initStruct.Mode = RADIO_DIO_MODE[i];
 8002ed4:	4959      	ldr	r1, [pc, #356]	; (800303c <SX1276MB1MAS_RADIO_IoInit+0x178>)
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 8002ed6:	4333      	orrs	r3, r6
 8002ed8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002eda:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    initStruct.Pin = RADIO_DIO_PIN[i];
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002edc:	a80a      	add	r0, sp, #40	; 0x28
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 8002ede:	4033      	ands	r3, r6
 8002ee0:	9301      	str	r3, [sp, #4]
 8002ee2:	9b01      	ldr	r3, [sp, #4]
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 8002ee4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  initStruct.Speed = GPIO_SPEED_HIGH;
 8002ee6:	2203      	movs	r2, #3
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 8002ee8:	432b      	orrs	r3, r5
 8002eea:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002eec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002eee:	4f54      	ldr	r7, [pc, #336]	; (8003040 <SX1276MB1MAS_RADIO_IoInit+0x17c>)
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 8002ef0:	402b      	ands	r3, r5
 8002ef2:	9302      	str	r3, [sp, #8]
 8002ef4:	9b02      	ldr	r3, [sp, #8]
  RADIO_DIO_2_GPIO_CLK_ENABLE();
 8002ef6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002ef8:	432b      	orrs	r3, r5
 8002efa:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002efc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002efe:	402b      	ands	r3, r5
 8002f00:	9303      	str	r3, [sp, #12]
 8002f02:	9b03      	ldr	r3, [sp, #12]
  RADIO_DIO_3_GPIO_CLK_ENABLE();
 8002f04:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002f06:	432b      	orrs	r3, r5
 8002f08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002f0a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    initStruct.Mode = RADIO_DIO_MODE[i];
 8002f0c:	910b      	str	r1, [sp, #44]	; 0x2c
  RADIO_DIO_3_GPIO_CLK_ENABLE();
 8002f0e:	402b      	ands	r3, r5
 8002f10:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002f12:	0001      	movs	r1, r0
  RADIO_DIO_3_GPIO_CLK_ENABLE();
 8002f14:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002f16:	20a0      	movs	r0, #160	; 0xa0
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002f18:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002f1a:	05c0      	lsls	r0, r0, #23
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002f1c:	00db      	lsls	r3, r3, #3
  initStruct.Speed = GPIO_SPEED_HIGH;
 8002f1e:	920d      	str	r2, [sp, #52]	; 0x34
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002f20:	930a      	str	r3, [sp, #40]	; 0x28
  initStruct.Pull = GPIO_PULLDOWN;
 8002f22:	950c      	str	r5, [sp, #48]	; 0x30
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002f24:	f000 fee0 	bl	8003ce8 <HAL_GPIO_Init>
    initStruct.Mode = RADIO_DIO_MODE[i];
 8002f28:	4b46      	ldr	r3, [pc, #280]	; (8003044 <SX1276MB1MAS_RADIO_IoInit+0x180>)
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002f2a:	a80a      	add	r0, sp, #40	; 0x28
    initStruct.Mode = RADIO_DIO_MODE[i];
 8002f2c:	930b      	str	r3, [sp, #44]	; 0x2c
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002f2e:	2308      	movs	r3, #8
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002f30:	0001      	movs	r1, r0
 8002f32:	0038      	movs	r0, r7
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002f34:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002f36:	f000 fed7 	bl	8003ce8 <HAL_GPIO_Init>
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002f3a:	2020      	movs	r0, #32
    initStruct.Mode = RADIO_DIO_MODE[i];
 8002f3c:	493f      	ldr	r1, [pc, #252]	; (800303c <SX1276MB1MAS_RADIO_IoInit+0x178>)
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002f3e:	900a      	str	r0, [sp, #40]	; 0x28
    initStruct.Mode = RADIO_DIO_MODE[i];
 8002f40:	910b      	str	r1, [sp, #44]	; 0x2c
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002f42:	0038      	movs	r0, r7
 8002f44:	a90a      	add	r1, sp, #40	; 0x28
 8002f46:	f000 fecf 	bl	8003ce8 <HAL_GPIO_Init>
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002f4a:	2310      	movs	r3, #16
    initStruct.Mode = RADIO_DIO_MODE[i];
 8002f4c:	493b      	ldr	r1, [pc, #236]	; (800303c <SX1276MB1MAS_RADIO_IoInit+0x178>)
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002f4e:	0038      	movs	r0, r7
    initStruct.Mode = RADIO_DIO_MODE[i];
 8002f50:	910b      	str	r1, [sp, #44]	; 0x2c
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002f52:	a90a      	add	r1, sp, #40	; 0x28
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002f54:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002f56:	f000 fec7 	bl	8003ce8 <HAL_GPIO_Init>
  }

  /* Antenna IO Init */
  RADIO_ANT_CLK_ENABLE();
 8002f5a:	2104      	movs	r1, #4
 8002f5c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

  initStruct.Pin = RADIO_ANT_SWITCH_PIN;
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
  initStruct.Pull = GPIO_NOPULL;
  initStruct.Speed = GPIO_SPEED_HIGH;
 8002f5e:	2203      	movs	r2, #3
  RADIO_ANT_CLK_ENABLE();
 8002f60:	430b      	orrs	r3, r1
 8002f62:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002f64:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT, &initStruct);
 8002f66:	4838      	ldr	r0, [pc, #224]	; (8003048 <SX1276MB1MAS_RADIO_IoInit+0x184>)
  RADIO_ANT_CLK_ENABLE();
 8002f68:	400b      	ands	r3, r1
 8002f6a:	9305      	str	r3, [sp, #20]
 8002f6c:	9b05      	ldr	r3, [sp, #20]
  initStruct.Pull = GPIO_NOPULL;
 8002f6e:	2300      	movs	r3, #0
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT, &initStruct);
 8002f70:	a90a      	add	r1, sp, #40	; 0x28
  initStruct.Pull = GPIO_NOPULL;
 8002f72:	930c      	str	r3, [sp, #48]	; 0x30
  initStruct.Speed = GPIO_SPEED_HIGH;
 8002f74:	920d      	str	r2, [sp, #52]	; 0x34
  initStruct.Pin = RADIO_ANT_SWITCH_PIN;
 8002f76:	950a      	str	r5, [sp, #40]	; 0x28
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f78:	960b      	str	r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT, &initStruct);
 8002f7a:	f000 feb5 	bl	8003ce8 <HAL_GPIO_Init>
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /* Enable Peripheral clock */
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 8002f7e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;

  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002f80:	20a0      	movs	r0, #160	; 0xa0
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 8002f82:	4333      	orrs	r3, r6
 8002f84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002f86:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f88:	2203      	movs	r2, #3
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 8002f8a:	4033      	ands	r3, r6
 8002f8c:	9307      	str	r3, [sp, #28]
 8002f8e:	9b07      	ldr	r3, [sp, #28]
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 8002f90:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002f92:	a90f      	add	r1, sp, #60	; 0x3c
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 8002f94:	4333      	orrs	r3, r6
 8002f96:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002f98:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002f9a:	05c0      	lsls	r0, r0, #23
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 8002f9c:	4033      	ands	r3, r6
 8002f9e:	9308      	str	r3, [sp, #32]
 8002fa0:	9b08      	ldr	r3, [sp, #32]
  RADIO_SPI_MISO_GPIO_CLK_ENABLE();
 8002fa2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002fa4:	4333      	orrs	r3, r6
 8002fa6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002fa8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002faa:	9212      	str	r2, [sp, #72]	; 0x48
  RADIO_SPI_MISO_GPIO_CLK_ENABLE();
 8002fac:	4033      	ands	r3, r6
 8002fae:	9309      	str	r3, [sp, #36]	; 0x24
 8002fb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	9313      	str	r3, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 8002fb6:	3380      	adds	r3, #128	; 0x80
 8002fb8:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fba:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002fbc:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002fbe:	f000 fe93 	bl	8003ce8 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_MISO_GPIO_AF;
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 8002fc2:	2040      	movs	r0, #64	; 0x40
 8002fc4:	900f      	str	r0, [sp, #60]	; 0x3c
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002fc6:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Alternate = RADIO_SPI_MISO_GPIO_AF;
 8002fc8:	2300      	movs	r3, #0
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002fca:	a90f      	add	r1, sp, #60	; 0x3c
 8002fcc:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Alternate = RADIO_SPI_MISO_GPIO_AF;
 8002fce:	9313      	str	r3, [sp, #76]	; 0x4c
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002fd0:	f000 fe8a 	bl	8003ce8 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_SCK_GPIO_AF;
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 8002fd4:	2020      	movs	r0, #32
 8002fd6:	900f      	str	r0, [sp, #60]	; 0x3c
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8002fd8:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Alternate = RADIO_SPI_SCK_GPIO_AF;
 8002fda:	2300      	movs	r3, #0
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8002fdc:	a90f      	add	r1, sp, #60	; 0x3c
 8002fde:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Alternate = RADIO_SPI_SCK_GPIO_AF;
 8002fe0:	9313      	str	r3, [sp, #76]	; 0x4c
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8002fe2:	f000 fe81 	bl	8003ce8 <HAL_GPIO_Init>
  initStruct.Pin = RADIO_NSS_PIN;
 8002fe6:	2040      	movs	r0, #64	; 0x40
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fe8:	960b      	str	r6, [sp, #44]	; 0x2c
  initStruct.Pin = RADIO_NSS_PIN;
 8002fea:	900a      	str	r0, [sp, #40]	; 0x28
  initStruct.Pull = GPIO_PULLUP;
 8002fec:	960c      	str	r6, [sp, #48]	; 0x30
  RADIO_NSS_CLK_ENABLE();
 8002fee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 8002ff0:	a80a      	add	r0, sp, #40	; 0x28
  RADIO_NSS_CLK_ENABLE();
 8002ff2:	432b      	orrs	r3, r5
 8002ff4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002ff6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 8002ff8:	0001      	movs	r1, r0
  RADIO_NSS_CLK_ENABLE();
 8002ffa:	402b      	ands	r3, r5
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 8002ffc:	0038      	movs	r0, r7
  RADIO_NSS_CLK_ENABLE();
 8002ffe:	9306      	str	r3, [sp, #24]
 8003000:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 8003002:	f000 fe71 	bl	8003ce8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 8003006:	0032      	movs	r2, r6
 8003008:	0038      	movs	r0, r7
 800300a:	2140      	movs	r1, #64	; 0x40
 800300c:	f000 ffb8 	bl	8003f80 <HAL_GPIO_WritePin>
  RADIO_ANT_CLK_ENABLE();
 8003010:	2104      	movs	r1, #4
 8003012:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  initStruct.Speed = GPIO_SPEED_HIGH;
 8003014:	2203      	movs	r2, #3
  RADIO_ANT_CLK_ENABLE();
 8003016:	430b      	orrs	r3, r1
 8003018:	62e3      	str	r3, [r4, #44]	; 0x2c
 800301a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT, &initStruct);
 800301c:	480a      	ldr	r0, [pc, #40]	; (8003048 <SX1276MB1MAS_RADIO_IoInit+0x184>)
  RADIO_ANT_CLK_ENABLE();
 800301e:	400b      	ands	r3, r1
 8003020:	930f      	str	r3, [sp, #60]	; 0x3c
 8003022:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  initStruct.Pull = GPIO_NOPULL;
 8003024:	2300      	movs	r3, #0
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT, &initStruct);
 8003026:	a90a      	add	r1, sp, #40	; 0x28
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003028:	960b      	str	r6, [sp, #44]	; 0x2c
  initStruct.Pull = GPIO_NOPULL;
 800302a:	930c      	str	r3, [sp, #48]	; 0x30
  initStruct.Speed = GPIO_SPEED_HIGH;
 800302c:	920d      	str	r2, [sp, #52]	; 0x34
  initStruct.Pin = RADIO_ANT_SWITCH_PIN;
 800302e:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT, &initStruct);
 8003030:	f000 fe5a 	bl	8003ce8 <HAL_GPIO_Init>
}
 8003034:	b015      	add	sp, #84	; 0x54
 8003036:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003038:	40021000 	.word	0x40021000
 800303c:	10110000 	.word	0x10110000
 8003040:	50000400 	.word	0x50000400
 8003044:	10310000 	.word	0x10310000
 8003048:	50000800 	.word	0x50000800

0800304c <SX1276MB1MAS_RADIO_IoDeInit>:
{
 800304c:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef initStruct = {0};
 800304e:	2508      	movs	r5, #8
{
 8003050:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef initStruct = {0};
 8003052:	002a      	movs	r2, r5
 8003054:	2100      	movs	r1, #0
 8003056:	a803      	add	r0, sp, #12
 8003058:	f00b fa03 	bl	800e462 <memset>
  initStruct.Pull = GPIO_PULLDOWN;
 800305c:	2302      	movs	r3, #2
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 800305e:	24a0      	movs	r4, #160	; 0xa0
  initStruct.Pull = GPIO_PULLDOWN;
 8003060:	9302      	str	r3, [sp, #8]
    initStruct.Pin = RADIO_DIO_PIN[i];
 8003062:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8003064:	05e4      	lsls	r4, r4, #23
    initStruct.Mode = RADIO_DIO_MODE[i];
 8003066:	4f22      	ldr	r7, [pc, #136]	; (80030f0 <SX1276MB1MAS_RADIO_IoDeInit+0xa4>)
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8003068:	4e22      	ldr	r6, [pc, #136]	; (80030f4 <SX1276MB1MAS_RADIO_IoDeInit+0xa8>)
 800306a:	4669      	mov	r1, sp
 800306c:	0020      	movs	r0, r4
    initStruct.Pin = RADIO_DIO_PIN[i];
 800306e:	00db      	lsls	r3, r3, #3
    initStruct.Mode = RADIO_DIO_MODE[i];
 8003070:	9701      	str	r7, [sp, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 8003072:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8003074:	f000 fe38 	bl	8003ce8 <HAL_GPIO_Init>
    initStruct.Mode = RADIO_DIO_MODE[i];
 8003078:	4b1f      	ldr	r3, [pc, #124]	; (80030f8 <SX1276MB1MAS_RADIO_IoDeInit+0xac>)
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 800307a:	4669      	mov	r1, sp
 800307c:	0030      	movs	r0, r6
    initStruct.Mode = RADIO_DIO_MODE[i];
 800307e:	9301      	str	r3, [sp, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 8003080:	9500      	str	r5, [sp, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8003082:	f000 fe31 	bl	8003ce8 <HAL_GPIO_Init>
    initStruct.Pin = RADIO_DIO_PIN[i];
 8003086:	3518      	adds	r5, #24
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8003088:	4669      	mov	r1, sp
 800308a:	0030      	movs	r0, r6
    initStruct.Mode = RADIO_DIO_MODE[i];
 800308c:	9701      	str	r7, [sp, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 800308e:	9500      	str	r5, [sp, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8003090:	f000 fe2a 	bl	8003ce8 <HAL_GPIO_Init>
    initStruct.Pin = RADIO_DIO_PIN[i];
 8003094:	2310      	movs	r3, #16
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8003096:	4669      	mov	r1, sp
 8003098:	0030      	movs	r0, r6
    initStruct.Mode = RADIO_DIO_MODE[i];
 800309a:	9701      	str	r7, [sp, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 800309c:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 800309e:	f000 fe23 	bl	8003ce8 <HAL_GPIO_Init>

  /* DeInitialize Peripheral GPIOs */
  /* Instead of using HAL_GPIO_DeInit() which set ANALOG mode
     it's preferred to set in OUTPUT_PP mode, with the pins set to 0 */

  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030a2:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 80030a4:	2780      	movs	r7, #128	; 0x80
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 80030a6:	2640      	movs	r6, #64	; 0x40
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80030a8:	0020      	movs	r0, r4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030aa:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80030ac:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80030ae:	18db      	adds	r3, r3, r3
 80030b0:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 80030b2:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80030b4:	f000 fe18 	bl	8003ce8 <HAL_GPIO_Init>
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 80030b8:	0020      	movs	r0, r4
 80030ba:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 80030bc:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 80030be:	f000 fe13 	bl	8003ce8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 80030c2:	0020      	movs	r0, r4
 80030c4:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 80030c6:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 80030c8:	f000 fe0e 	bl	8003ce8 <HAL_GPIO_Init>


  HAL_GPIO_WritePin(RADIO_SPI_MOSI_GPIO_PORT, RADIO_SPI_MOSI_GPIO_PIN, GPIO_PIN_RESET);
 80030cc:	0039      	movs	r1, r7
 80030ce:	0020      	movs	r0, r4
 80030d0:	2200      	movs	r2, #0
 80030d2:	f000 ff55 	bl	8003f80 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SPI_MISO_GPIO_PORT, RADIO_SPI_MISO_GPIO_PIN, GPIO_PIN_RESET);
 80030d6:	0031      	movs	r1, r6
 80030d8:	0020      	movs	r0, r4
 80030da:	2200      	movs	r2, #0
 80030dc:	f000 ff50 	bl	8003f80 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SPI_SCK_GPIO_PORT, RADIO_SPI_SCK_GPIO_PIN, GPIO_PIN_RESET);
 80030e0:	2200      	movs	r2, #0
 80030e2:	0029      	movs	r1, r5
 80030e4:	0020      	movs	r0, r4
 80030e6:	f000 ff4b 	bl	8003f80 <HAL_GPIO_WritePin>
}
 80030ea:	b00b      	add	sp, #44	; 0x2c
 80030ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030ee:	46c0      	nop			; (mov r8, r8)
 80030f0:	10110000 	.word	0x10110000
 80030f4:	50000400 	.word	0x50000400
 80030f8:	10310000 	.word	0x10310000

080030fc <SX1276MB1MAS_RADIO_IoIrqInit>:
{
 80030fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80030fe:	9000      	str	r0, [sp, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003100:	f3ef 8310 	mrs	r3, PRIMASK
 8003104:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8003106:	b672      	cpsid	i
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8003108:	2400      	movs	r4, #0
    HAL_EXTI_GetHandle(&hRADIO_DIO_exti[i], RADIO_DIO_EXTI_LINE[i]);
 800310a:	4e11      	ldr	r6, [pc, #68]	; (8003150 <SX1276MB1MAS_RADIO_IoIrqInit+0x54>)
 800310c:	4d11      	ldr	r5, [pc, #68]	; (8003154 <SX1276MB1MAS_RADIO_IoIrqInit+0x58>)
 800310e:	00e3      	lsls	r3, r4, #3
 8003110:	18f6      	adds	r6, r6, r3
 8003112:	00a7      	lsls	r7, r4, #2
 8003114:	5979      	ldr	r1, [r7, r5]
 8003116:	0030      	movs	r0, r6
 8003118:	f000 fdcd 	bl	8003cb6 <HAL_EXTI_GetHandle>
    HAL_EXTI_RegisterCallback(&hRADIO_DIO_exti[i], HAL_EXTI_COMMON_CB_ID, irqHandlers[i]);
 800311c:	9b00      	ldr	r3, [sp, #0]
 800311e:	2100      	movs	r1, #0
 8003120:	59da      	ldr	r2, [r3, r7]
 8003122:	0030      	movs	r0, r6
 8003124:	f000 fdc0 	bl	8003ca8 <HAL_EXTI_RegisterCallback>
    HAL_NVIC_SetPriority(RADIO_DIO_IRQn[i], RADIO_DIO_IT_PRIO[i], 0x00);
 8003128:	002b      	movs	r3, r5
 800312a:	3310      	adds	r3, #16
 800312c:	56e6      	ldrsb	r6, [r4, r3]
 800312e:	3514      	adds	r5, #20
 8003130:	2200      	movs	r2, #0
 8003132:	0030      	movs	r0, r6
 8003134:	5979      	ldr	r1, [r7, r5]
 8003136:	f000 fc2d 	bl	8003994 <HAL_NVIC_SetPriority>
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 800313a:	3401      	adds	r4, #1
    HAL_NVIC_EnableIRQ(RADIO_DIO_IRQn[i]);
 800313c:	0030      	movs	r0, r6
 800313e:	f000 fc53 	bl	80039e8 <HAL_NVIC_EnableIRQ>
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8003142:	2c04      	cmp	r4, #4
 8003144:	d1e1      	bne.n	800310a <SX1276MB1MAS_RADIO_IoIrqInit+0xe>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003146:	9b01      	ldr	r3, [sp, #4]
 8003148:	f383 8810 	msr	PRIMASK, r3
}
 800314c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800314e:	46c0      	nop			; (mov r8, r8)
 8003150:	200004bc 	.word	0x200004bc
 8003154:	0800e658 	.word	0x0800e658

08003158 <SX1276MB1MAS_RADIO_GetPaSelect>:
  if (channel > RF_MID_BAND_THRESH)
 8003158:	4a03      	ldr	r2, [pc, #12]	; (8003168 <SX1276MB1MAS_RADIO_GetPaSelect+0x10>)
    return CONF_RFO_LP;
 800315a:	2301      	movs	r3, #1
  if (channel > RF_MID_BAND_THRESH)
 800315c:	4290      	cmp	r0, r2
 800315e:	d800      	bhi.n	8003162 <SX1276MB1MAS_RADIO_GetPaSelect+0xa>
    return CONF_RFO_LF;
 8003160:	3302      	adds	r3, #2
}
 8003162:	0018      	movs	r0, r3
 8003164:	4770      	bx	lr
 8003166:	46c0      	nop			; (mov r8, r8)
 8003168:	1f4add40 	.word	0x1f4add40

0800316c <SX1276MB1MAS_RADIO_SetAntSw>:
{
 800316c:	0001      	movs	r1, r0
 800316e:	b510      	push	{r4, lr}
  switch (state)
 8003170:	2802      	cmp	r0, #2
 8003172:	d008      	beq.n	8003186 <SX1276MB1MAS_RADIO_SetAntSw+0x1a>
 8003174:	3903      	subs	r1, #3
 8003176:	2901      	cmp	r1, #1
 8003178:	d904      	bls.n	8003184 <SX1276MB1MAS_RADIO_SetAntSw+0x18>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT, RADIO_ANT_SWITCH_PIN, GPIO_PIN_RESET);
 800317a:	2200      	movs	r2, #0
 800317c:	2102      	movs	r1, #2
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT, RADIO_ANT_SWITCH_PIN, GPIO_PIN_SET);
 800317e:	4803      	ldr	r0, [pc, #12]	; (800318c <SX1276MB1MAS_RADIO_SetAntSw+0x20>)
 8003180:	f000 fefe 	bl	8003f80 <HAL_GPIO_WritePin>
}
 8003184:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT, RADIO_ANT_SWITCH_PIN, GPIO_PIN_SET);
 8003186:	2201      	movs	r2, #1
 8003188:	e7f9      	b.n	800317e <SX1276MB1MAS_RADIO_SetAntSw+0x12>
 800318a:	46c0      	nop			; (mov r8, r8)
 800318c:	50000800 	.word	0x50000800

08003190 <SX1276MB1MAS_RADIO_CheckRfFrequency>:
}
 8003190:	2001      	movs	r0, #1
 8003192:	4770      	bx	lr

08003194 <SX1276MB1MAS_RADIO_Reset>:
{
 8003194:	b530      	push	{r4, r5, lr}
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 8003196:	25a0      	movs	r5, #160	; 0xa0
{
 8003198:	b087      	sub	sp, #28
  GPIO_InitTypeDef initStruct = { 0 };
 800319a:	220c      	movs	r2, #12
 800319c:	2100      	movs	r1, #0
 800319e:	a803      	add	r0, sp, #12
 80031a0:	f00b f95f 	bl	800e462 <memset>
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031a4:	2401      	movs	r4, #1
  initStruct.Speed = GPIO_SPEED_HIGH;
 80031a6:	2303      	movs	r3, #3
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 80031a8:	05ed      	lsls	r5, r5, #23
 80031aa:	0028      	movs	r0, r5
 80031ac:	a901      	add	r1, sp, #4
  initStruct.Speed = GPIO_SPEED_HIGH;
 80031ae:	9304      	str	r3, [sp, #16]
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031b0:	9402      	str	r4, [sp, #8]
  initStruct.Pin = RADIO_RESET_PIN;
 80031b2:	9401      	str	r4, [sp, #4]
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 80031b4:	f000 fd98 	bl	8003ce8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_RESET_PORT, RADIO_RESET_PIN, GPIO_PIN_RESET);
 80031b8:	2200      	movs	r2, #0
 80031ba:	0021      	movs	r1, r4
 80031bc:	0028      	movs	r0, r5
 80031be:	f000 fedf 	bl	8003f80 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80031c2:	0020      	movs	r0, r4
 80031c4:	f7ff fc66 	bl	8002a94 <HAL_Delay>
  initStruct.Mode = GPIO_NOPULL;
 80031c8:	2300      	movs	r3, #0
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 80031ca:	0028      	movs	r0, r5
 80031cc:	a901      	add	r1, sp, #4
  initStruct.Mode = GPIO_NOPULL;
 80031ce:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 80031d0:	f000 fd8a 	bl	8003ce8 <HAL_GPIO_Init>
  HAL_Delay(6);
 80031d4:	2006      	movs	r0, #6
 80031d6:	f7ff fc5d 	bl	8002a94 <HAL_Delay>
}
 80031da:	b007      	add	sp, #28
 80031dc:	bd30      	pop	{r4, r5, pc}

080031de <SX1276MB1MAS_RADIO_Bus_Init>:
{
 80031de:	b510      	push	{r4, lr}
  RADIO_SPI_Init();
 80031e0:	f7ff fe2e 	bl	8002e40 <BSP_SPI1_Init>
}
 80031e4:	bd10      	pop	{r4, pc}

080031e6 <SX1276MB1MAS_RADIO_SendRecv>:
{
 80031e6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 80031e8:	240e      	movs	r4, #14
{
 80031ea:	466b      	mov	r3, sp
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 80031ec:	446c      	add	r4, sp
{
 80031ee:	80d8      	strh	r0, [r3, #6]
 80031f0:	3306      	adds	r3, #6
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 80031f2:	2201      	movs	r2, #1
 80031f4:	0021      	movs	r1, r4
 80031f6:	0018      	movs	r0, r3
 80031f8:	f7ff fdde 	bl	8002db8 <BSP_SPI1_SendRecv>
  return rxData;
 80031fc:	8820      	ldrh	r0, [r4, #0]
}
 80031fe:	b004      	add	sp, #16
 8003200:	bd10      	pop	{r4, pc}
	...

08003204 <SX1276MB1MAS_RADIO_ChipSelect>:
{
 8003204:	0002      	movs	r2, r0
 8003206:	b510      	push	{r4, lr}
  if (state == 0)
 8003208:	2800      	cmp	r0, #0
 800320a:	d104      	bne.n	8003216 <SX1276MB1MAS_RADIO_ChipSelect+0x12>
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 800320c:	2140      	movs	r1, #64	; 0x40
 800320e:	4803      	ldr	r0, [pc, #12]	; (800321c <SX1276MB1MAS_RADIO_ChipSelect+0x18>)
 8003210:	f000 feb6 	bl	8003f80 <HAL_GPIO_WritePin>
}
 8003214:	bd10      	pop	{r4, pc}
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 8003216:	2201      	movs	r2, #1
 8003218:	e7f8      	b.n	800320c <SX1276MB1MAS_RADIO_ChipSelect+0x8>
 800321a:	46c0      	nop			; (mov r8, r8)
 800321c:	50000400 	.word	0x50000400

08003220 <SX1276MB1MAS_RADIO_GetDio1PinState>:
{
 8003220:	b510      	push	{r4, lr}
  return HAL_GPIO_ReadPin(RADIO_DIO_1_PORT, RADIO_DIO_1_PIN);
 8003222:	2108      	movs	r1, #8
 8003224:	4801      	ldr	r0, [pc, #4]	; (800322c <SX1276MB1MAS_RADIO_GetDio1PinState+0xc>)
 8003226:	f000 fea5 	bl	8003f74 <HAL_GPIO_ReadPin>
}
 800322a:	bd10      	pop	{r4, pc}
 800322c:	50000400 	.word	0x50000400

08003230 <SystemInit>:
  * @retval None
  */
void SystemInit(void)
{
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8003230:	2280      	movs	r2, #128	; 0x80
 8003232:	4b10      	ldr	r3, [pc, #64]	; (8003274 <SystemInit+0x44>)
 8003234:	0052      	lsls	r2, r2, #1
 8003236:	6819      	ldr	r1, [r3, #0]
 8003238:	430a      	orrs	r2, r1
 800323a:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 800323c:	68da      	ldr	r2, [r3, #12]
 800323e:	490e      	ldr	r1, [pc, #56]	; (8003278 <SystemInit+0x48>)
 8003240:	400a      	ands	r2, r1
 8003242:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	490d      	ldr	r1, [pc, #52]	; (800327c <SystemInit+0x4c>)
 8003248:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800324a:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 800324c:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800324e:	689a      	ldr	r2, [r3, #8]
 8003250:	438a      	bics	r2, r1
 8003252:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	490a      	ldr	r1, [pc, #40]	; (8003280 <SystemInit+0x50>)
 8003258:	400a      	ands	r2, r1
 800325a:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 800325c:	68da      	ldr	r2, [r3, #12]
 800325e:	4909      	ldr	r1, [pc, #36]	; (8003284 <SystemInit+0x54>)
 8003260:	400a      	ands	r2, r1
 8003262:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003264:	2200      	movs	r2, #0
 8003266:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003268:	2280      	movs	r2, #128	; 0x80
 800326a:	4b07      	ldr	r3, [pc, #28]	; (8003288 <SystemInit+0x58>)
 800326c:	0512      	lsls	r2, r2, #20
 800326e:	609a      	str	r2, [r3, #8]
#endif
}
 8003270:	4770      	bx	lr
 8003272:	46c0      	nop			; (mov r8, r8)
 8003274:	40021000 	.word	0x40021000
 8003278:	88ff400c 	.word	0x88ff400c
 800327c:	fef6fff6 	.word	0xfef6fff6
 8003280:	fffbffff 	.word	0xfffbffff
 8003284:	ff02ffff 	.word	0xff02ffff
 8003288:	e000ed00 	.word	0xe000ed00

0800328c <HAL_Init>:
#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
#endif /* PREREAD_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800328c:	2302      	movs	r3, #2
 800328e:	4a08      	ldr	r2, [pc, #32]	; (80032b0 <HAL_Init+0x24>)
{
 8003290:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003292:	6811      	ldr	r1, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003294:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003296:	430b      	orrs	r3, r1
 8003298:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800329a:	f7ff fbf5 	bl	8002a88 <HAL_InitTick>
 800329e:	1e04      	subs	r4, r0, #0
 80032a0:	d103      	bne.n	80032aa <HAL_Init+0x1e>
    status = HAL_ERROR;
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80032a2:	f7ff fa99 	bl	80027d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
}
 80032a6:	0020      	movs	r0, r4
 80032a8:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80032aa:	2401      	movs	r4, #1
 80032ac:	e7fb      	b.n	80032a6 <HAL_Init+0x1a>
 80032ae:	46c0      	nop			; (mov r8, r8)
 80032b0:	40022000 	.word	0x40022000

080032b4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80032b4:	4a03      	ldr	r2, [pc, #12]	; (80032c4 <HAL_IncTick+0x10>)
 80032b6:	4b04      	ldr	r3, [pc, #16]	; (80032c8 <HAL_IncTick+0x14>)
 80032b8:	6811      	ldr	r1, [r2, #0]
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	185b      	adds	r3, r3, r1
 80032be:	6013      	str	r3, [r2, #0]
}
 80032c0:	4770      	bx	lr
 80032c2:	46c0      	nop			; (mov r8, r8)
 80032c4:	200004dc 	.word	0x200004dc
 80032c8:	20000050 	.word	0x20000050

080032cc <HAL_GetUIDw0>:
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return(READ_REG(*((uint32_t *)UID_BASE)));
 80032cc:	4b01      	ldr	r3, [pc, #4]	; (80032d4 <HAL_GetUIDw0+0x8>)
 80032ce:	6818      	ldr	r0, [r3, #0]
}
 80032d0:	4770      	bx	lr
 80032d2:	46c0      	nop			; (mov r8, r8)
 80032d4:	1ff80050 	.word	0x1ff80050

080032d8 <HAL_GetUIDw1>:
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 80032d8:	4b01      	ldr	r3, [pc, #4]	; (80032e0 <HAL_GetUIDw1+0x8>)
 80032da:	6818      	ldr	r0, [r3, #0]
}
 80032dc:	4770      	bx	lr
 80032de:	46c0      	nop			; (mov r8, r8)
 80032e0:	1ff80054 	.word	0x1ff80054

080032e4 <HAL_GetUIDw2>:
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 80032e4:	4b01      	ldr	r3, [pc, #4]	; (80032ec <HAL_GetUIDw2+0x8>)
 80032e6:	6818      	ldr	r0, [r3, #0]
}
 80032e8:	4770      	bx	lr
 80032ea:	46c0      	nop			; (mov r8, r8)
 80032ec:	1ff80064 	.word	0x1ff80064

080032f0 <HAL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enables the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80032f0:	2301      	movs	r3, #1
 80032f2:	4a02      	ldr	r2, [pc, #8]	; (80032fc <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 80032f4:	6851      	ldr	r1, [r2, #4]
 80032f6:	430b      	orrs	r3, r1
 80032f8:	6053      	str	r3, [r2, #4]
}
 80032fa:	4770      	bx	lr
 80032fc:	40015800 	.word	0x40015800

08003300 <HAL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enables the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003300:	2302      	movs	r3, #2
 8003302:	4a02      	ldr	r2, [pc, #8]	; (800330c <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 8003304:	6851      	ldr	r1, [r2, #4]
 8003306:	430b      	orrs	r3, r1
 8003308:	6053      	str	r3, [r2, #4]
}
 800330a:	4770      	bx	lr
 800330c:	40015800 	.word	0x40015800

08003310 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @brief  Enables the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8003310:	2304      	movs	r3, #4
 8003312:	4a02      	ldr	r2, [pc, #8]	; (800331c <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
 8003314:	6851      	ldr	r1, [r2, #4]
 8003316:	430b      	orrs	r3, r1
 8003318:	6053      	str	r3, [r2, #4]
}
 800331a:	4770      	bx	lr
 800331c:	40015800 	.word	0x40015800

08003320 <ADC_DelayMicroSecond>:
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8003320:	4b08      	ldr	r3, [pc, #32]	; (8003344 <ADC_DelayMicroSecond+0x24>)
{
 8003322:	b513      	push	{r0, r1, r4, lr}
 8003324:	0004      	movs	r4, r0
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8003326:	4908      	ldr	r1, [pc, #32]	; (8003348 <ADC_DelayMicroSecond+0x28>)
 8003328:	6818      	ldr	r0, [r3, #0]
 800332a:	f7fc ff1d 	bl	8000168 <__udivsi3>
 800332e:	4344      	muls	r4, r0
 8003330:	9401      	str	r4, [sp, #4]

  while(waitLoopIndex != 0U)
 8003332:	9b01      	ldr	r3, [sp, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d100      	bne.n	800333a <ADC_DelayMicroSecond+0x1a>
  {
    waitLoopIndex--;
  } 
}
 8003338:	bd13      	pop	{r0, r1, r4, pc}
    waitLoopIndex--;
 800333a:	9b01      	ldr	r3, [sp, #4]
 800333c:	3b01      	subs	r3, #1
 800333e:	9301      	str	r3, [sp, #4]
 8003340:	e7f7      	b.n	8003332 <ADC_DelayMicroSecond+0x12>
 8003342:	46c0      	nop			; (mov r8, r8)
 8003344:	2000004c 	.word	0x2000004c
 8003348:	000f4240 	.word	0x000f4240

0800334c <ADC_Disable>:
  if (ADC_IS_ENABLE(hadc) != RESET)
 800334c:	2103      	movs	r1, #3
 800334e:	6803      	ldr	r3, [r0, #0]
{
 8003350:	b570      	push	{r4, r5, r6, lr}
 8003352:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003354:	6898      	ldr	r0, [r3, #8]
 8003356:	4008      	ands	r0, r1
 8003358:	2801      	cmp	r0, #1
 800335a:	d001      	beq.n	8003360 <ADC_Disable+0x14>
  return HAL_OK;
 800335c:	2000      	movs	r0, #0
}
 800335e:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	4202      	tst	r2, r0
 8003364:	d0fa      	beq.n	800335c <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003366:	2205      	movs	r2, #5
 8003368:	689d      	ldr	r5, [r3, #8]
 800336a:	4015      	ands	r5, r2
 800336c:	2d01      	cmp	r5, #1
 800336e:	d119      	bne.n	80033a4 <ADC_Disable+0x58>
      __HAL_ADC_DISABLE(hadc);
 8003370:	6898      	ldr	r0, [r3, #8]
 8003372:	3a03      	subs	r2, #3
 8003374:	4302      	orrs	r2, r0
 8003376:	609a      	str	r2, [r3, #8]
 8003378:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 800337a:	f7ff fb87 	bl	8002a8c <HAL_GetTick>
 800337e:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003380:	6823      	ldr	r3, [r4, #0]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	422b      	tst	r3, r5
 8003386:	d0e9      	beq.n	800335c <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003388:	f7ff fb80 	bl	8002a8c <HAL_GetTick>
 800338c:	1b80      	subs	r0, r0, r6
 800338e:	280a      	cmp	r0, #10
 8003390:	d9f6      	bls.n	8003380 <ADC_Disable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003392:	2310      	movs	r3, #16
 8003394:	6d62      	ldr	r2, [r4, #84]	; 0x54
        return HAL_ERROR;
 8003396:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003398:	4313      	orrs	r3, r2
 800339a:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800339c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800339e:	431d      	orrs	r5, r3
 80033a0:	65a5      	str	r5, [r4, #88]	; 0x58
        return HAL_ERROR;
 80033a2:	e7dc      	b.n	800335e <ADC_Disable+0x12>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033a4:	2310      	movs	r3, #16
 80033a6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80033a8:	4313      	orrs	r3, r2
 80033aa:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80033ae:	4303      	orrs	r3, r0
 80033b0:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 80033b2:	e7d4      	b.n	800335e <ADC_Disable+0x12>

080033b4 <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 80033b4:	2103      	movs	r1, #3
 80033b6:	6803      	ldr	r3, [r0, #0]
{
 80033b8:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80033ba:	689a      	ldr	r2, [r3, #8]
{
 80033bc:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80033be:	400a      	ands	r2, r1
 80033c0:	2a01      	cmp	r2, #1
 80033c2:	d104      	bne.n	80033ce <ADC_Enable+0x1a>
 80033c4:	6819      	ldr	r1, [r3, #0]
 80033c6:	4211      	tst	r1, r2
 80033c8:	d001      	beq.n	80033ce <ADC_Enable+0x1a>
  return HAL_OK;
 80033ca:	2000      	movs	r0, #0
}
 80033cc:	bd70      	pop	{r4, r5, r6, pc}
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80033ce:	6899      	ldr	r1, [r3, #8]
 80033d0:	4a13      	ldr	r2, [pc, #76]	; (8003420 <ADC_Enable+0x6c>)
 80033d2:	4211      	tst	r1, r2
 80033d4:	d008      	beq.n	80033e8 <ADC_Enable+0x34>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033d6:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033d8:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033da:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80033dc:	4313      	orrs	r3, r2
 80033de:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80033e2:	4303      	orrs	r3, r0
 80033e4:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 80033e6:	e7f1      	b.n	80033cc <ADC_Enable+0x18>
    __HAL_ADC_ENABLE(hadc);
 80033e8:	2501      	movs	r5, #1
 80033ea:	689a      	ldr	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80033ec:	0028      	movs	r0, r5
    __HAL_ADC_ENABLE(hadc);
 80033ee:	432a      	orrs	r2, r5
 80033f0:	609a      	str	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80033f2:	f7ff ff95 	bl	8003320 <ADC_DelayMicroSecond>
    tickstart = HAL_GetTick();
 80033f6:	f7ff fb49 	bl	8002a8c <HAL_GetTick>
 80033fa:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80033fc:	6823      	ldr	r3, [r4, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	422b      	tst	r3, r5
 8003402:	d1e2      	bne.n	80033ca <ADC_Enable+0x16>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003404:	f7ff fb42 	bl	8002a8c <HAL_GetTick>
 8003408:	1b80      	subs	r0, r0, r6
 800340a:	280a      	cmp	r0, #10
 800340c:	d9f6      	bls.n	80033fc <ADC_Enable+0x48>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800340e:	2310      	movs	r3, #16
 8003410:	6d62      	ldr	r2, [r4, #84]	; 0x54
        return HAL_ERROR;
 8003412:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003414:	4313      	orrs	r3, r2
 8003416:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003418:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800341a:	431d      	orrs	r5, r3
 800341c:	65a5      	str	r5, [r4, #88]	; 0x58
        return HAL_ERROR;
 800341e:	e7d5      	b.n	80033cc <ADC_Enable+0x18>
 8003420:	80000017 	.word	0x80000017

08003424 <ADC_ConversionStop>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8003424:	2204      	movs	r2, #4
 8003426:	6803      	ldr	r3, [r0, #0]
{
 8003428:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800342a:	6899      	ldr	r1, [r3, #8]
{
 800342c:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800342e:	4211      	tst	r1, r2
 8003430:	d101      	bne.n	8003436 <ADC_ConversionStop+0x12>
  return HAL_OK;
 8003432:	2000      	movs	r0, #0
}
 8003434:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003436:	6899      	ldr	r1, [r3, #8]
 8003438:	4211      	tst	r1, r2
 800343a:	d006      	beq.n	800344a <ADC_ConversionStop+0x26>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 800343c:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800343e:	0792      	lsls	r2, r2, #30
 8003440:	d403      	bmi.n	800344a <ADC_ConversionStop+0x26>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8003442:	2210      	movs	r2, #16
 8003444:	6899      	ldr	r1, [r3, #8]
 8003446:	430a      	orrs	r2, r1
 8003448:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800344a:	f7ff fb1f 	bl	8002a8c <HAL_GetTick>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800344e:	2604      	movs	r6, #4
    tickstart = HAL_GetTick();
 8003450:	0005      	movs	r5, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003452:	6823      	ldr	r3, [r4, #0]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	4233      	tst	r3, r6
 8003458:	d0eb      	beq.n	8003432 <ADC_ConversionStop+0xe>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800345a:	f7ff fb17 	bl	8002a8c <HAL_GetTick>
 800345e:	1b40      	subs	r0, r0, r5
 8003460:	280a      	cmp	r0, #10
 8003462:	d9f6      	bls.n	8003452 <ADC_ConversionStop+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003464:	2310      	movs	r3, #16
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003466:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003468:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800346a:	4313      	orrs	r3, r2
 800346c:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800346e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003470:	4303      	orrs	r3, r0
 8003472:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 8003474:	e7de      	b.n	8003434 <ADC_ConversionStop+0x10>
	...

08003478 <HAL_ADC_Init>:
{
 8003478:	b570      	push	{r4, r5, r6, lr}
 800347a:	0004      	movs	r4, r0
    return HAL_ERROR;
 800347c:	2001      	movs	r0, #1
  if(hadc == NULL)
 800347e:	2c00      	cmp	r4, #0
 8003480:	d01b      	beq.n	80034ba <HAL_ADC_Init+0x42>
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003482:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003484:	2b00      	cmp	r3, #0
 8003486:	d106      	bne.n	8003496 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 8003488:	0022      	movs	r2, r4
 800348a:	3250      	adds	r2, #80	; 0x50
    ADC_CLEAR_ERRORCODE(hadc);
 800348c:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_MspInit(hadc);
 800348e:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8003490:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 8003492:	f7fe fdcf 	bl	8002034 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8003496:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003498:	06db      	lsls	r3, r3, #27
 800349a:	d406      	bmi.n	80034aa <HAL_ADC_Init+0x32>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 800349c:	6823      	ldr	r3, [r4, #0]
 800349e:	2204      	movs	r2, #4
 80034a0:	6899      	ldr	r1, [r3, #8]
 80034a2:	0008      	movs	r0, r1
 80034a4:	4010      	ands	r0, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80034a6:	4211      	tst	r1, r2
 80034a8:	d008      	beq.n	80034bc <HAL_ADC_Init+0x44>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034aa:	2310      	movs	r3, #16
 80034ac:	6d62      	ldr	r2, [r4, #84]	; 0x54
    return HAL_ERROR;
 80034ae:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034b0:	4313      	orrs	r3, r2
 80034b2:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 80034b4:	2300      	movs	r3, #0
 80034b6:	3450      	adds	r4, #80	; 0x50
 80034b8:	7023      	strb	r3, [r4, #0]
}
 80034ba:	bd70      	pop	{r4, r5, r6, pc}
  ADC_STATE_CLR_SET(hadc->State,
 80034bc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80034be:	4955      	ldr	r1, [pc, #340]	; (8003614 <HAL_ADC_Init+0x19c>)
 80034c0:	4011      	ands	r1, r2
 80034c2:	2202      	movs	r2, #2
 80034c4:	430a      	orrs	r2, r1
 80034c6:	6562      	str	r2, [r4, #84]	; 0x54
  if (ADC_IS_ENABLE(hadc) == RESET)
 80034c8:	2203      	movs	r2, #3
 80034ca:	6899      	ldr	r1, [r3, #8]
 80034cc:	4011      	ands	r1, r2
 80034ce:	4a52      	ldr	r2, [pc, #328]	; (8003618 <HAL_ADC_Init+0x1a0>)
 80034d0:	2901      	cmp	r1, #1
 80034d2:	d102      	bne.n	80034da <HAL_ADC_Init+0x62>
 80034d4:	681d      	ldr	r5, [r3, #0]
 80034d6:	420d      	tst	r5, r1
 80034d8:	d119      	bne.n	800350e <HAL_ADC_Init+0x96>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80034da:	2680      	movs	r6, #128	; 0x80
 80034dc:	6861      	ldr	r1, [r4, #4]
 80034de:	05f6      	lsls	r6, r6, #23
 80034e0:	004d      	lsls	r5, r1, #1
 80034e2:	086d      	lsrs	r5, r5, #1
 80034e4:	42b5      	cmp	r5, r6
 80034e6:	d003      	beq.n	80034f0 <HAL_ADC_Init+0x78>
 80034e8:	2580      	movs	r5, #128	; 0x80
 80034ea:	062d      	lsls	r5, r5, #24
 80034ec:	42a9      	cmp	r1, r5
 80034ee:	d176      	bne.n	80035de <HAL_ADC_Init+0x166>
 80034f0:	691d      	ldr	r5, [r3, #16]
 80034f2:	00ad      	lsls	r5, r5, #2
 80034f4:	08ad      	lsrs	r5, r5, #2
 80034f6:	611d      	str	r5, [r3, #16]
 80034f8:	691d      	ldr	r5, [r3, #16]
 80034fa:	4329      	orrs	r1, r5
 80034fc:	6119      	str	r1, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 80034fe:	2518      	movs	r5, #24
 8003500:	68d9      	ldr	r1, [r3, #12]
 8003502:	43a9      	bics	r1, r5
 8003504:	60d9      	str	r1, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8003506:	68d9      	ldr	r1, [r3, #12]
 8003508:	68a5      	ldr	r5, [r4, #8]
 800350a:	4329      	orrs	r1, r5
 800350c:	60d9      	str	r1, [r3, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800350e:	6811      	ldr	r1, [r2, #0]
 8003510:	4d42      	ldr	r5, [pc, #264]	; (800361c <HAL_ADC_Init+0x1a4>)
 8003512:	4029      	ands	r1, r5
 8003514:	6011      	str	r1, [r2, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8003516:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003518:	6815      	ldr	r5, [r2, #0]
 800351a:	0649      	lsls	r1, r1, #25
 800351c:	4329      	orrs	r1, r5
 800351e:	6011      	str	r1, [r2, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8003520:	2280      	movs	r2, #128	; 0x80
 8003522:	6899      	ldr	r1, [r3, #8]
 8003524:	0552      	lsls	r2, r2, #21
 8003526:	4211      	tst	r1, r2
 8003528:	d102      	bne.n	8003530 <HAL_ADC_Init+0xb8>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800352a:	6899      	ldr	r1, [r3, #8]
 800352c:	430a      	orrs	r2, r1
 800352e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8003530:	68da      	ldr	r2, [r3, #12]
 8003532:	493b      	ldr	r1, [pc, #236]	; (8003620 <HAL_ADC_Init+0x1a8>)
 8003534:	400a      	ands	r2, r1
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003536:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8003538:	60da      	str	r2, [r3, #12]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800353a:	68dd      	ldr	r5, [r3, #12]
 800353c:	68e2      	ldr	r2, [r4, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800353e:	2902      	cmp	r1, #2
 8003540:	d100      	bne.n	8003544 <HAL_ADC_Init+0xcc>
 8003542:	2004      	movs	r0, #4
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003544:	6b26      	ldr	r6, [r4, #48]	; 0x30
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003546:	1c61      	adds	r1, r4, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003548:	4332      	orrs	r2, r6
 800354a:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800354c:	69a5      	ldr	r5, [r4, #24]
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800354e:	7fc9      	ldrb	r1, [r1, #31]
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8003550:	03ad      	lsls	r5, r5, #14
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003552:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8003554:	69e5      	ldr	r5, [r4, #28]
 8003556:	03ed      	lsls	r5, r5, #15
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003558:	432a      	orrs	r2, r5
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800355a:	034d      	lsls	r5, r1, #13
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800355c:	432a      	orrs	r2, r5
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800355e:	0025      	movs	r5, r4
 8003560:	352c      	adds	r5, #44	; 0x2c
 8003562:	782d      	ldrb	r5, [r5, #0]
 8003564:	006d      	lsls	r5, r5, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003566:	432a      	orrs	r2, r5
 8003568:	4302      	orrs	r2, r0
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800356a:	20c2      	movs	r0, #194	; 0xc2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800356c:	60da      	str	r2, [r3, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800356e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003570:	30ff      	adds	r0, #255	; 0xff
 8003572:	4282      	cmp	r2, r0
 8003574:	d004      	beq.n	8003580 <HAL_ADC_Init+0x108>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8003576:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8003578:	68d8      	ldr	r0, [r3, #12]
 800357a:	432a      	orrs	r2, r5
 800357c:	4302      	orrs	r2, r0
 800357e:	60da      	str	r2, [r3, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003580:	1ca2      	adds	r2, r4, #2
 8003582:	7fd2      	ldrb	r2, [r2, #31]
 8003584:	2a01      	cmp	r2, #1
 8003586:	d106      	bne.n	8003596 <HAL_ADC_Init+0x11e>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8003588:	2900      	cmp	r1, #0
 800358a:	d134      	bne.n	80035f6 <HAL_ADC_Init+0x17e>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800358c:	2280      	movs	r2, #128	; 0x80
 800358e:	68d9      	ldr	r1, [r3, #12]
 8003590:	0252      	lsls	r2, r2, #9
 8003592:	430a      	orrs	r2, r1
 8003594:	60da      	str	r2, [r3, #12]
  if (hadc->Init.OversamplingMode == ENABLE)
 8003596:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8003598:	691a      	ldr	r2, [r3, #16]
  if (hadc->Init.OversamplingMode == ENABLE)
 800359a:	2901      	cmp	r1, #1
 800359c:	d133      	bne.n	8003606 <HAL_ADC_Init+0x18e>
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 800359e:	4821      	ldr	r0, [pc, #132]	; (8003624 <HAL_ADC_Init+0x1ac>)
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80035a0:	6c65      	ldr	r5, [r4, #68]	; 0x44
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 80035a2:	4002      	ands	r2, r0
 80035a4:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80035a6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80035a8:	6918      	ldr	r0, [r3, #16]
 80035aa:	432a      	orrs	r2, r5
                               hadc->Init.Oversample.RightBitShift             |
 80035ac:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80035ae:	432a      	orrs	r2, r5
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80035b0:	4302      	orrs	r2, r0
 80035b2:	611a      	str	r2, [r3, #16]
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80035b4:	691a      	ldr	r2, [r3, #16]
 80035b6:	4311      	orrs	r1, r2
 80035b8:	6119      	str	r1, [r3, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80035ba:	2107      	movs	r1, #7
 80035bc:	695a      	ldr	r2, [r3, #20]
  ADC_CLEAR_ERRORCODE(hadc);
 80035be:	2000      	movs	r0, #0
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80035c0:	438a      	bics	r2, r1
 80035c2:	615a      	str	r2, [r3, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80035c4:	695a      	ldr	r2, [r3, #20]
 80035c6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80035c8:	430a      	orrs	r2, r1
 80035ca:	615a      	str	r2, [r3, #20]
  ADC_STATE_CLR_SET(hadc->State,
 80035cc:	2203      	movs	r2, #3
  ADC_CLEAR_ERRORCODE(hadc);
 80035ce:	65a0      	str	r0, [r4, #88]	; 0x58
  ADC_STATE_CLR_SET(hadc->State,
 80035d0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80035d2:	4393      	bics	r3, r2
 80035d4:	001a      	movs	r2, r3
 80035d6:	2301      	movs	r3, #1
 80035d8:	4313      	orrs	r3, r2
 80035da:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 80035dc:	e76d      	b.n	80034ba <HAL_ADC_Init+0x42>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80035de:	691d      	ldr	r5, [r3, #16]
 80035e0:	4e11      	ldr	r6, [pc, #68]	; (8003628 <HAL_ADC_Init+0x1b0>)
 80035e2:	00ad      	lsls	r5, r5, #2
 80035e4:	08ad      	lsrs	r5, r5, #2
 80035e6:	611d      	str	r5, [r3, #16]
 80035e8:	6815      	ldr	r5, [r2, #0]
 80035ea:	4035      	ands	r5, r6
 80035ec:	6015      	str	r5, [r2, #0]
 80035ee:	6815      	ldr	r5, [r2, #0]
 80035f0:	4329      	orrs	r1, r5
 80035f2:	6011      	str	r1, [r2, #0]
 80035f4:	e783      	b.n	80034fe <HAL_ADC_Init+0x86>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035f6:	2120      	movs	r1, #32
 80035f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80035fa:	4301      	orrs	r1, r0
 80035fc:	6561      	str	r1, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035fe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003600:	430a      	orrs	r2, r1
 8003602:	65a2      	str	r2, [r4, #88]	; 0x58
 8003604:	e7c7      	b.n	8003596 <HAL_ADC_Init+0x11e>
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8003606:	2101      	movs	r1, #1
 8003608:	420a      	tst	r2, r1
 800360a:	d0d6      	beq.n	80035ba <HAL_ADC_Init+0x142>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800360c:	691a      	ldr	r2, [r3, #16]
 800360e:	438a      	bics	r2, r1
 8003610:	611a      	str	r2, [r3, #16]
 8003612:	e7d2      	b.n	80035ba <HAL_ADC_Init+0x142>
 8003614:	fffffefd 	.word	0xfffffefd
 8003618:	40012708 	.word	0x40012708
 800361c:	fdffffff 	.word	0xfdffffff
 8003620:	fffe0219 	.word	0xfffe0219
 8003624:	fffffc03 	.word	0xfffffc03
 8003628:	ffc3ffff 	.word	0xffc3ffff

0800362c <HAL_ADC_DeInit>:
{
 800362c:	b570      	push	{r4, r5, r6, lr}
 800362e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003630:	2501      	movs	r5, #1
  if(hadc == NULL)
 8003632:	2800      	cmp	r0, #0
 8003634:	d011      	beq.n	800365a <HAL_ADC_DeInit+0x2e>
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003636:	2302      	movs	r3, #2
 8003638:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800363a:	4313      	orrs	r3, r2
 800363c:	6543      	str	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 800363e:	f7ff fef1 	bl	8003424 <ADC_ConversionStop>
 8003642:	1e05      	subs	r5, r0, #0
  if (tmp_hal_status == HAL_OK)
 8003644:	d137      	bne.n	80036b6 <HAL_ADC_DeInit+0x8a>
    tmp_hal_status = ADC_Disable(hadc);
 8003646:	0020      	movs	r0, r4
 8003648:	f7ff fe80 	bl	800334c <ADC_Disable>
 800364c:	0005      	movs	r5, r0
    if (tmp_hal_status != HAL_ERROR)
 800364e:	2801      	cmp	r0, #1
 8003650:	d105      	bne.n	800365e <HAL_ADC_DeInit+0x32>
{
 8003652:	2501      	movs	r5, #1
  __HAL_UNLOCK(hadc);
 8003654:	2300      	movs	r3, #0
 8003656:	3450      	adds	r4, #80	; 0x50
 8003658:	7023      	strb	r3, [r4, #0]
}
 800365a:	0028      	movs	r0, r5
 800365c:	bd70      	pop	{r4, r5, r6, pc}
      hadc->State = HAL_ADC_STATE_READY;
 800365e:	2301      	movs	r3, #1
 8003660:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD | ADC_IT_OVR | ADC_IT_EOCAL | ADC_IT_EOS |  \
 8003662:	6823      	ldr	r3, [r4, #0]
 8003664:	4915      	ldr	r1, [pc, #84]	; (80036bc <HAL_ADC_DeInit+0x90>)
 8003666:	685a      	ldr	r2, [r3, #4]
    HAL_ADC_MspDeInit(hadc);
 8003668:	0020      	movs	r0, r4
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD | ADC_IT_OVR | ADC_IT_EOCAL | ADC_IT_EOS |  \
 800366a:	400a      	ands	r2, r1
 800366c:	605a      	str	r2, [r3, #4]
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_EOCAL | ADC_FLAG_OVR | ADC_FLAG_EOS |  \
 800366e:	4a14      	ldr	r2, [pc, #80]	; (80036c0 <HAL_ADC_DeInit+0x94>)
    hadc->Instance->CR &= ~ADC_CR_ADVREGEN;
 8003670:	4914      	ldr	r1, [pc, #80]	; (80036c4 <HAL_ADC_DeInit+0x98>)
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_EOCAL | ADC_FLAG_OVR | ADC_FLAG_EOS |  \
 8003672:	601a      	str	r2, [r3, #0]
    hadc->Instance->CR &= ~ADC_CR_ADVREGEN;
 8003674:	689a      	ldr	r2, [r3, #8]
 8003676:	400a      	ands	r2, r1
 8003678:	609a      	str	r2, [r3, #8]
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWDCH  | ADC_CFGR1_AWDEN  | ADC_CFGR1_AWDSGL | \
 800367a:	68da      	ldr	r2, [r3, #12]
 800367c:	4912      	ldr	r1, [pc, #72]	; (80036c8 <HAL_ADC_DeInit+0x9c>)
 800367e:	400a      	ands	r2, r1
 8003680:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_TOVS  | ADC_CFGR2_OVSS  | ADC_CFGR2_OVSR | \
 8003682:	691a      	ldr	r2, [r3, #16]
 8003684:	4911      	ldr	r1, [pc, #68]	; (80036cc <HAL_ADC_DeInit+0xa0>)
 8003686:	400a      	ands	r2, r1
    hadc->Instance->SMPR &= ~(ADC_SMPR_SMPR);
 8003688:	2107      	movs	r1, #7
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_TOVS  | ADC_CFGR2_OVSS  | ADC_CFGR2_OVSR | \
 800368a:	611a      	str	r2, [r3, #16]
    hadc->Instance->SMPR &= ~(ADC_SMPR_SMPR);
 800368c:	695a      	ldr	r2, [r3, #20]
 800368e:	438a      	bics	r2, r1
 8003690:	615a      	str	r2, [r3, #20]
    hadc->Instance->TR &= ~(ADC_TR_LT | ADC_TR_HT);
 8003692:	6a1a      	ldr	r2, [r3, #32]
 8003694:	490e      	ldr	r1, [pc, #56]	; (80036d0 <HAL_ADC_DeInit+0xa4>)
 8003696:	400a      	ands	r2, r1
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 8003698:	217f      	movs	r1, #127	; 0x7f
    hadc->Instance->TR &= ~(ADC_TR_LT | ADC_TR_HT);
 800369a:	621a      	str	r2, [r3, #32]
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 800369c:	33b4      	adds	r3, #180	; 0xb4
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	438a      	bics	r2, r1
 80036a2:	601a      	str	r2, [r3, #0]
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	438a      	bics	r2, r1
 80036a8:	601a      	str	r2, [r3, #0]
    HAL_ADC_MspDeInit(hadc);
 80036aa:	f7fe fcd3 	bl	8002054 <HAL_ADC_MspDeInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80036ae:	2300      	movs	r3, #0
 80036b0:	65a3      	str	r3, [r4, #88]	; 0x58
    hadc->State = HAL_ADC_STATE_RESET;
 80036b2:	6563      	str	r3, [r4, #84]	; 0x54
 80036b4:	e7ce      	b.n	8003654 <HAL_ADC_DeInit+0x28>
  if (tmp_hal_status != HAL_ERROR)
 80036b6:	2801      	cmp	r0, #1
 80036b8:	d0cb      	beq.n	8003652 <HAL_ADC_DeInit+0x26>
 80036ba:	e7d2      	b.n	8003662 <HAL_ADC_DeInit+0x36>
 80036bc:	fffff760 	.word	0xfffff760
 80036c0:	0000089f 	.word	0x0000089f
 80036c4:	efffffff 	.word	0xefffffff
 80036c8:	833e0200 	.word	0x833e0200
 80036cc:	3ffffc02 	.word	0x3ffffc02
 80036d0:	f000f000 	.word	0xf000f000

080036d4 <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80036d4:	6803      	ldr	r3, [r0, #0]
{
 80036d6:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80036d8:	689b      	ldr	r3, [r3, #8]
{
 80036da:	0004      	movs	r4, r0
    tmp_hal_status = HAL_BUSY;
 80036dc:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80036de:	075b      	lsls	r3, r3, #29
 80036e0:	d41a      	bmi.n	8003718 <HAL_ADC_Start+0x44>
    __HAL_LOCK(hadc);
 80036e2:	0025      	movs	r5, r4
 80036e4:	3550      	adds	r5, #80	; 0x50
 80036e6:	782b      	ldrb	r3, [r5, #0]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d015      	beq.n	8003718 <HAL_ADC_Start+0x44>
 80036ec:	2301      	movs	r3, #1
 80036ee:	702b      	strb	r3, [r5, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80036f0:	69e3      	ldr	r3, [r4, #28]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d111      	bne.n	800371a <HAL_ADC_Start+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 80036f6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80036f8:	4a0b      	ldr	r2, [pc, #44]	; (8003728 <HAL_ADC_Start+0x54>)
      ADC_CLEAR_ERRORCODE(hadc);
 80036fa:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 80036fc:	401a      	ands	r2, r3
 80036fe:	2380      	movs	r3, #128	; 0x80
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003704:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 8003706:	6563      	str	r3, [r4, #84]	; 0x54
      ADC_CLEAR_ERRORCODE(hadc);
 8003708:	65a0      	str	r0, [r4, #88]	; 0x58
      __HAL_UNLOCK(hadc);
 800370a:	7028      	strb	r0, [r5, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800370c:	6823      	ldr	r3, [r4, #0]
 800370e:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8003710:	6899      	ldr	r1, [r3, #8]
 8003712:	3a18      	subs	r2, #24
 8003714:	430a      	orrs	r2, r1
 8003716:	609a      	str	r2, [r3, #8]
}
 8003718:	bd70      	pop	{r4, r5, r6, pc}
      tmp_hal_status = ADC_Enable(hadc);
 800371a:	0020      	movs	r0, r4
 800371c:	f7ff fe4a 	bl	80033b4 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8003720:	2800      	cmp	r0, #0
 8003722:	d0e8      	beq.n	80036f6 <HAL_ADC_Start+0x22>
 8003724:	e7f8      	b.n	8003718 <HAL_ADC_Start+0x44>
 8003726:	46c0      	nop			; (mov r8, r8)
 8003728:	fffff0fe 	.word	0xfffff0fe

0800372c <HAL_ADC_Stop>:
{
 800372c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 800372e:	0006      	movs	r6, r0
 8003730:	3650      	adds	r6, #80	; 0x50
 8003732:	7833      	ldrb	r3, [r6, #0]
{
 8003734:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8003736:	2002      	movs	r0, #2
 8003738:	2b01      	cmp	r3, #1
 800373a:	d012      	beq.n	8003762 <HAL_ADC_Stop+0x36>
 800373c:	2501      	movs	r5, #1
  tmp_hal_status = ADC_ConversionStop(hadc);
 800373e:	0020      	movs	r0, r4
  __HAL_LOCK(hadc);
 8003740:	7035      	strb	r5, [r6, #0]
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003742:	f7ff fe6f 	bl	8003424 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8003746:	2800      	cmp	r0, #0
 8003748:	d109      	bne.n	800375e <HAL_ADC_Stop+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 800374a:	0020      	movs	r0, r4
 800374c:	f7ff fdfe 	bl	800334c <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8003750:	2800      	cmp	r0, #0
 8003752:	d104      	bne.n	800375e <HAL_ADC_Stop+0x32>
      ADC_STATE_CLR_SET(hadc->State,
 8003754:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003756:	4a03      	ldr	r2, [pc, #12]	; (8003764 <HAL_ADC_Stop+0x38>)
 8003758:	4013      	ands	r3, r2
 800375a:	431d      	orrs	r5, r3
 800375c:	6565      	str	r5, [r4, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 800375e:	2300      	movs	r3, #0
 8003760:	7033      	strb	r3, [r6, #0]
}
 8003762:	bd70      	pop	{r4, r5, r6, pc}
 8003764:	fffffefe 	.word	0xfffffefe

08003768 <HAL_ADC_PollForConversion>:
{
 8003768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800376a:	6946      	ldr	r6, [r0, #20]
{
 800376c:	0004      	movs	r4, r0
 800376e:	000d      	movs	r5, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003770:	2e08      	cmp	r6, #8
 8003772:	d00d      	beq.n	8003790 <HAL_ADC_PollForConversion+0x28>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8003774:	6803      	ldr	r3, [r0, #0]
 8003776:	2001      	movs	r0, #1
 8003778:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800377a:	260c      	movs	r6, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800377c:	4203      	tst	r3, r0
 800377e:	d007      	beq.n	8003790 <HAL_ADC_PollForConversion+0x28>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003780:	2320      	movs	r3, #32
 8003782:	6d62      	ldr	r2, [r4, #84]	; 0x54
      __HAL_UNLOCK(hadc);
 8003784:	3450      	adds	r4, #80	; 0x50
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003786:	4313      	orrs	r3, r2
 8003788:	6063      	str	r3, [r4, #4]
      __HAL_UNLOCK(hadc);
 800378a:	2300      	movs	r3, #0
 800378c:	7023      	strb	r3, [r4, #0]
}
 800378e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tickstart = HAL_GetTick();
 8003790:	f7ff f97c 	bl	8002a8c <HAL_GetTick>
 8003794:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003796:	6823      	ldr	r3, [r4, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	4216      	tst	r6, r2
 800379c:	d024      	beq.n	80037e8 <HAL_ADC_PollForConversion+0x80>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800379e:	2280      	movs	r2, #128	; 0x80
 80037a0:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80037a2:	0092      	lsls	r2, r2, #2
 80037a4:	430a      	orrs	r2, r1
 80037a6:	6562      	str	r2, [r4, #84]	; 0x54
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80037a8:	22c0      	movs	r2, #192	; 0xc0
 80037aa:	68d9      	ldr	r1, [r3, #12]
 80037ac:	0112      	lsls	r2, r2, #4
 80037ae:	4211      	tst	r1, r2
 80037b0:	d113      	bne.n	80037da <HAL_ADC_PollForConversion+0x72>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80037b2:	1c62      	adds	r2, r4, #1
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80037b4:	7fd2      	ldrb	r2, [r2, #31]
 80037b6:	2a00      	cmp	r2, #0
 80037b8:	d10f      	bne.n	80037da <HAL_ADC_PollForConversion+0x72>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	0712      	lsls	r2, r2, #28
 80037be:	d50c      	bpl.n	80037da <HAL_ADC_PollForConversion+0x72>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80037c0:	689a      	ldr	r2, [r3, #8]
 80037c2:	0752      	lsls	r2, r2, #29
 80037c4:	d423      	bmi.n	800380e <HAL_ADC_PollForConversion+0xa6>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80037c6:	210c      	movs	r1, #12
 80037c8:	685a      	ldr	r2, [r3, #4]
 80037ca:	438a      	bics	r2, r1
 80037cc:	605a      	str	r2, [r3, #4]
        ADC_STATE_CLR_SET(hadc->State,
 80037ce:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80037d0:	4913      	ldr	r1, [pc, #76]	; (8003820 <HAL_ADC_PollForConversion+0xb8>)
 80037d2:	4011      	ands	r1, r2
 80037d4:	2201      	movs	r2, #1
 80037d6:	430a      	orrs	r2, r1
 80037d8:	6562      	str	r2, [r4, #84]	; 0x54
  return HAL_OK;
 80037da:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80037dc:	69a2      	ldr	r2, [r4, #24]
 80037de:	4282      	cmp	r2, r0
 80037e0:	d1d5      	bne.n	800378e <HAL_ADC_PollForConversion+0x26>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80037e2:	220c      	movs	r2, #12
 80037e4:	601a      	str	r2, [r3, #0]
 80037e6:	e7d2      	b.n	800378e <HAL_ADC_PollForConversion+0x26>
    if(Timeout != HAL_MAX_DELAY)
 80037e8:	1c6a      	adds	r2, r5, #1
 80037ea:	d0d5      	beq.n	8003798 <HAL_ADC_PollForConversion+0x30>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80037ec:	2d00      	cmp	r5, #0
 80037ee:	d108      	bne.n	8003802 <HAL_ADC_PollForConversion+0x9a>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80037f0:	2304      	movs	r3, #4
 80037f2:	6d62      	ldr	r2, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 80037f4:	3450      	adds	r4, #80	; 0x50
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80037f6:	4313      	orrs	r3, r2
 80037f8:	6063      	str	r3, [r4, #4]
        __HAL_UNLOCK(hadc);
 80037fa:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 80037fc:	2003      	movs	r0, #3
        __HAL_UNLOCK(hadc);
 80037fe:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 8003800:	e7c5      	b.n	800378e <HAL_ADC_PollForConversion+0x26>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003802:	f7ff f943 	bl	8002a8c <HAL_GetTick>
 8003806:	1bc0      	subs	r0, r0, r7
 8003808:	42a8      	cmp	r0, r5
 800380a:	d9c4      	bls.n	8003796 <HAL_ADC_PollForConversion+0x2e>
 800380c:	e7f0      	b.n	80037f0 <HAL_ADC_PollForConversion+0x88>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800380e:	2220      	movs	r2, #32
 8003810:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003812:	430a      	orrs	r2, r1
 8003814:	6562      	str	r2, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003816:	2201      	movs	r2, #1
 8003818:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800381a:	430a      	orrs	r2, r1
 800381c:	65a2      	str	r2, [r4, #88]	; 0x58
 800381e:	e7dc      	b.n	80037da <HAL_ADC_PollForConversion+0x72>
 8003820:	fffffefe 	.word	0xfffffefe

08003824 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8003824:	6803      	ldr	r3, [r0, #0]
 8003826:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8003828:	4770      	bx	lr
	...

0800382c <HAL_ADC_ConfigChannel>:
{
 800382c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 800382e:	0004      	movs	r4, r0
 8003830:	3450      	adds	r4, #80	; 0x50
 8003832:	7822      	ldrb	r2, [r4, #0]
{
 8003834:	0003      	movs	r3, r0
 8003836:	000d      	movs	r5, r1
  __HAL_LOCK(hadc);
 8003838:	2002      	movs	r0, #2
 800383a:	2a01      	cmp	r2, #1
 800383c:	d00b      	beq.n	8003856 <HAL_ADC_ConfigChannel+0x2a>
 800383e:	3801      	subs	r0, #1
 8003840:	7020      	strb	r0, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	6891      	ldr	r1, [r2, #8]
 8003846:	0749      	lsls	r1, r1, #29
 8003848:	d506      	bpl.n	8003858 <HAL_ADC_ConfigChannel+0x2c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800384a:	2220      	movs	r2, #32
 800384c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800384e:	430a      	orrs	r2, r1
 8003850:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8003852:	2300      	movs	r3, #0
 8003854:	7023      	strb	r3, [r4, #0]
}
 8003856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003858:	2180      	movs	r1, #128	; 0x80
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800385a:	682b      	ldr	r3, [r5, #0]
  if (sConfig->Rank != ADC_RANK_NONE)
 800385c:	4e20      	ldr	r6, [pc, #128]	; (80038e0 <HAL_ADC_ConfigChannel+0xb4>)
 800385e:	686f      	ldr	r7, [r5, #4]
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8003860:	0358      	lsls	r0, r3, #13
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003862:	02c9      	lsls	r1, r1, #11
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8003864:	0b40      	lsrs	r0, r0, #13
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003866:	4019      	ands	r1, r3
  if (sConfig->Rank != ADC_RANK_NONE)
 8003868:	42b7      	cmp	r7, r6
 800386a:	d021      	beq.n	80038b0 <HAL_ADC_ConfigChannel+0x84>
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800386c:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800386e:	4318      	orrs	r0, r3
 8003870:	6290      	str	r0, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003872:	2900      	cmp	r1, #0
 8003874:	d008      	beq.n	8003888 <HAL_ADC_ConfigChannel+0x5c>
      ADC->CCR |= ADC_CCR_TSEN;   
 8003876:	2380      	movs	r3, #128	; 0x80
 8003878:	4a1a      	ldr	r2, [pc, #104]	; (80038e4 <HAL_ADC_ConfigChannel+0xb8>)
 800387a:	041b      	lsls	r3, r3, #16
 800387c:	6811      	ldr	r1, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800387e:	200a      	movs	r0, #10
      ADC->CCR |= ADC_CCR_TSEN;   
 8003880:	430b      	orrs	r3, r1
 8003882:	6013      	str	r3, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8003884:	f7ff fd4c 	bl	8003320 <ADC_DelayMicroSecond>
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8003888:	682a      	ldr	r2, [r5, #0]
 800388a:	0393      	lsls	r3, r2, #14
 800388c:	d505      	bpl.n	800389a <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR |= ADC_CCR_VREFEN;   
 800388e:	2380      	movs	r3, #128	; 0x80
 8003890:	4914      	ldr	r1, [pc, #80]	; (80038e4 <HAL_ADC_ConfigChannel+0xb8>)
 8003892:	03db      	lsls	r3, r3, #15
 8003894:	6808      	ldr	r0, [r1, #0]
 8003896:	4303      	orrs	r3, r0
 8003898:	600b      	str	r3, [r1, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 800389a:	03d3      	lsls	r3, r2, #15
 800389c:	d505      	bpl.n	80038aa <HAL_ADC_ConfigChannel+0x7e>
      ADC->CCR |= ADC_CCR_VLCDEN;   
 800389e:	2380      	movs	r3, #128	; 0x80
 80038a0:	4a10      	ldr	r2, [pc, #64]	; (80038e4 <HAL_ADC_ConfigChannel+0xb8>)
 80038a2:	045b      	lsls	r3, r3, #17
 80038a4:	6811      	ldr	r1, [r2, #0]
 80038a6:	430b      	orrs	r3, r1
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 80038a8:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hadc);
 80038aa:	2000      	movs	r0, #0
 80038ac:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 80038ae:	e7d2      	b.n	8003856 <HAL_ADC_ConfigChannel+0x2a>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80038b0:	6a95      	ldr	r5, [r2, #40]	; 0x28
 80038b2:	4385      	bics	r5, r0
 80038b4:	6295      	str	r5, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80038b6:	2900      	cmp	r1, #0
 80038b8:	d004      	beq.n	80038c4 <HAL_ADC_ConfigChannel+0x98>
      ADC->CCR &= ~ADC_CCR_TSEN;   
 80038ba:	490a      	ldr	r1, [pc, #40]	; (80038e4 <HAL_ADC_ConfigChannel+0xb8>)
 80038bc:	480a      	ldr	r0, [pc, #40]	; (80038e8 <HAL_ADC_ConfigChannel+0xbc>)
 80038be:	680a      	ldr	r2, [r1, #0]
 80038c0:	4002      	ands	r2, r0
 80038c2:	600a      	str	r2, [r1, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80038c4:	039a      	lsls	r2, r3, #14
 80038c6:	d504      	bpl.n	80038d2 <HAL_ADC_ConfigChannel+0xa6>
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80038c8:	4906      	ldr	r1, [pc, #24]	; (80038e4 <HAL_ADC_ConfigChannel+0xb8>)
 80038ca:	4808      	ldr	r0, [pc, #32]	; (80038ec <HAL_ADC_ConfigChannel+0xc0>)
 80038cc:	680a      	ldr	r2, [r1, #0]
 80038ce:	4002      	ands	r2, r0
 80038d0:	600a      	str	r2, [r1, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80038d2:	03db      	lsls	r3, r3, #15
 80038d4:	d5e9      	bpl.n	80038aa <HAL_ADC_ConfigChannel+0x7e>
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 80038d6:	4a03      	ldr	r2, [pc, #12]	; (80038e4 <HAL_ADC_ConfigChannel+0xb8>)
 80038d8:	4905      	ldr	r1, [pc, #20]	; (80038f0 <HAL_ADC_ConfigChannel+0xc4>)
 80038da:	6813      	ldr	r3, [r2, #0]
 80038dc:	400b      	ands	r3, r1
 80038de:	e7e3      	b.n	80038a8 <HAL_ADC_ConfigChannel+0x7c>
 80038e0:	00001001 	.word	0x00001001
 80038e4:	40012708 	.word	0x40012708
 80038e8:	ff7fffff 	.word	0xff7fffff
 80038ec:	ffbfffff 	.word	0xffbfffff
 80038f0:	feffffff 	.word	0xfeffffff

080038f4 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 80038f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80038f6:	0005      	movs	r5, r0
 80038f8:	3550      	adds	r5, #80	; 0x50
 80038fa:	782b      	ldrb	r3, [r5, #0]
{
 80038fc:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 80038fe:	2002      	movs	r0, #2
 8003900:	2b01      	cmp	r3, #1
 8003902:	d044      	beq.n	800398e <HAL_ADCEx_Calibration_Start+0x9a>
 8003904:	2301      	movs	r3, #1
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003906:	2203      	movs	r2, #3
  __HAL_LOCK(hadc);
 8003908:	702b      	strb	r3, [r5, #0]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800390a:	6823      	ldr	r3, [r4, #0]
 800390c:	6898      	ldr	r0, [r3, #8]
 800390e:	4010      	ands	r0, r2
 8003910:	2801      	cmp	r0, #1
 8003912:	d109      	bne.n	8003928 <HAL_ADCEx_Calibration_Start+0x34>
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	4202      	tst	r2, r0
 8003918:	d006      	beq.n	8003928 <HAL_ADCEx_Calibration_Start+0x34>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800391a:	2320      	movs	r3, #32
 800391c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800391e:	4313      	orrs	r3, r2
 8003920:	6563      	str	r3, [r4, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003922:	2300      	movs	r3, #0
 8003924:	702b      	strb	r3, [r5, #0]
  
  /* Return function status */
  return tmp_hal_status;
 8003926:	e032      	b.n	800398e <HAL_ADCEx_Calibration_Start+0x9a>
    ADC_STATE_CLR_SET(hadc->State, 
 8003928:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800392a:	4919      	ldr	r1, [pc, #100]	; (8003990 <HAL_ADCEx_Calibration_Start+0x9c>)
 800392c:	4011      	ands	r1, r2
 800392e:	2202      	movs	r2, #2
 8003930:	430a      	orrs	r2, r1
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003932:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State, 
 8003934:	6562      	str	r2, [r4, #84]	; 0x54
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003936:	68de      	ldr	r6, [r3, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003938:	68da      	ldr	r2, [r3, #12]
 800393a:	438a      	bics	r2, r1
 800393c:	60da      	str	r2, [r3, #12]
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800393e:	2280      	movs	r2, #128	; 0x80
 8003940:	6899      	ldr	r1, [r3, #8]
 8003942:	0612      	lsls	r2, r2, #24
 8003944:	430a      	orrs	r2, r1
 8003946:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 8003948:	f7ff f8a0 	bl	8002a8c <HAL_GetTick>
 800394c:	0007      	movs	r7, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800394e:	6823      	ldr	r3, [r4, #0]
 8003950:	689a      	ldr	r2, [r3, #8]
 8003952:	2a00      	cmp	r2, #0
 8003954:	db0c      	blt.n	8003970 <HAL_ADCEx_Calibration_Start+0x7c>
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003956:	2203      	movs	r2, #3
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8003958:	68d9      	ldr	r1, [r3, #12]
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800395a:	4016      	ands	r6, r2
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 800395c:	430e      	orrs	r6, r1
 800395e:	60de      	str	r6, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8003960:	6d63      	ldr	r3, [r4, #84]	; 0x54
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003962:	2000      	movs	r0, #0
    ADC_STATE_CLR_SET(hadc->State,
 8003964:	4393      	bics	r3, r2
 8003966:	001a      	movs	r2, r3
 8003968:	2301      	movs	r3, #1
 800396a:	4313      	orrs	r3, r2
 800396c:	6563      	str	r3, [r4, #84]	; 0x54
 800396e:	e7d8      	b.n	8003922 <HAL_ADCEx_Calibration_Start+0x2e>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003970:	f7ff f88c 	bl	8002a8c <HAL_GetTick>
 8003974:	1bc0      	subs	r0, r0, r7
 8003976:	280a      	cmp	r0, #10
 8003978:	d9e9      	bls.n	800394e <HAL_ADCEx_Calibration_Start+0x5a>
        ADC_STATE_CLR_SET(hadc->State,
 800397a:	2212      	movs	r2, #18
 800397c:	6d63      	ldr	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 800397e:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 8003980:	4393      	bics	r3, r2
 8003982:	001a      	movs	r2, r3
 8003984:	2310      	movs	r3, #16
 8003986:	4313      	orrs	r3, r2
 8003988:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 800398a:	2300      	movs	r3, #0
 800398c:	702b      	strb	r3, [r5, #0]
}
 800398e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003990:	fffffefd 	.word	0xfffffefd

08003994 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003994:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003996:	25ff      	movs	r5, #255	; 0xff
 8003998:	2403      	movs	r4, #3
 800399a:	002a      	movs	r2, r5
 800399c:	4004      	ands	r4, r0
 800399e:	00e4      	lsls	r4, r4, #3
 80039a0:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80039a2:	0189      	lsls	r1, r1, #6
 80039a4:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039a6:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80039a8:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039aa:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 80039ac:	2800      	cmp	r0, #0
 80039ae:	db0a      	blt.n	80039c6 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039b0:	24c0      	movs	r4, #192	; 0xc0
 80039b2:	4b0b      	ldr	r3, [pc, #44]	; (80039e0 <HAL_NVIC_SetPriority+0x4c>)
 80039b4:	0880      	lsrs	r0, r0, #2
 80039b6:	0080      	lsls	r0, r0, #2
 80039b8:	18c0      	adds	r0, r0, r3
 80039ba:	00a4      	lsls	r4, r4, #2
 80039bc:	5903      	ldr	r3, [r0, r4]
 80039be:	401a      	ands	r2, r3
 80039c0:	4311      	orrs	r1, r2
 80039c2:	5101      	str	r1, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80039c4:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039c6:	200f      	movs	r0, #15
 80039c8:	4003      	ands	r3, r0
 80039ca:	3b08      	subs	r3, #8
 80039cc:	4805      	ldr	r0, [pc, #20]	; (80039e4 <HAL_NVIC_SetPriority+0x50>)
 80039ce:	089b      	lsrs	r3, r3, #2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	181b      	adds	r3, r3, r0
 80039d4:	69d8      	ldr	r0, [r3, #28]
 80039d6:	4002      	ands	r2, r0
 80039d8:	4311      	orrs	r1, r2
 80039da:	61d9      	str	r1, [r3, #28]
 80039dc:	e7f2      	b.n	80039c4 <HAL_NVIC_SetPriority+0x30>
 80039de:	46c0      	nop			; (mov r8, r8)
 80039e0:	e000e100 	.word	0xe000e100
 80039e4:	e000ed00 	.word	0xe000ed00

080039e8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80039e8:	2800      	cmp	r0, #0
 80039ea:	db05      	blt.n	80039f8 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039ec:	231f      	movs	r3, #31
 80039ee:	4018      	ands	r0, r3
 80039f0:	3b1e      	subs	r3, #30
 80039f2:	4083      	lsls	r3, r0
 80039f4:	4a01      	ldr	r2, [pc, #4]	; (80039fc <HAL_NVIC_EnableIRQ+0x14>)
 80039f6:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80039f8:	4770      	bx	lr
 80039fa:	46c0      	nop			; (mov r8, r8)
 80039fc:	e000e100 	.word	0xe000e100

08003a00 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003a00:	2800      	cmp	r0, #0
 8003a02:	db09      	blt.n	8003a18 <HAL_NVIC_DisableIRQ+0x18>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a04:	231f      	movs	r3, #31
 8003a06:	4018      	ands	r0, r3
 8003a08:	3b1e      	subs	r3, #30
 8003a0a:	4083      	lsls	r3, r0
 8003a0c:	4a03      	ldr	r2, [pc, #12]	; (8003a1c <HAL_NVIC_DisableIRQ+0x1c>)
 8003a0e:	67d3      	str	r3, [r2, #124]	; 0x7c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003a10:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003a14:	f3bf 8f6f 	isb	sy
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8003a18:	4770      	bx	lr
 8003a1a:	46c0      	nop			; (mov r8, r8)
 8003a1c:	e000e104 	.word	0xe000e104

08003a20 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a22:	0004      	movs	r4, r0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8003a24:	2001      	movs	r0, #1
  if(hdma == NULL)
 8003a26:	2c00      	cmp	r4, #0
 8003a28:	d035      	beq.n	8003a96 <HAL_DMA_Init+0x76>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003a2a:	6825      	ldr	r5, [r4, #0]
 8003a2c:	4b1a      	ldr	r3, [pc, #104]	; (8003a98 <HAL_DMA_Init+0x78>)
 8003a2e:	2114      	movs	r1, #20
 8003a30:	18e8      	adds	r0, r5, r3
 8003a32:	f7fc fb99 	bl	8000168 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8003a36:	4b19      	ldr	r3, [pc, #100]	; (8003a9c <HAL_DMA_Init+0x7c>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003a38:	0080      	lsls	r0, r0, #2
  hdma->DmaBaseAddress = DMA1;
 8003a3a:	6423      	str	r3, [r4, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	1da2      	adds	r2, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003a40:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a42:	77d3      	strb	r3, [r2, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003a44:	682e      	ldr	r6, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003a46:	4b16      	ldr	r3, [pc, #88]	; (8003aa0 <HAL_DMA_Init+0x80>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003a48:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003a4a:	401e      	ands	r6, r3
  tmp |=  hdma->Init.Direction        |
 8003a4c:	68e3      	ldr	r3, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a4e:	6927      	ldr	r7, [r4, #16]
  tmp |=  hdma->Init.Direction        |
 8003a50:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a52:	433b      	orrs	r3, r7
 8003a54:	6967      	ldr	r7, [r4, #20]
 8003a56:	433b      	orrs	r3, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a58:	69a7      	ldr	r7, [r4, #24]
 8003a5a:	433b      	orrs	r3, r7
 8003a5c:	69e7      	ldr	r7, [r4, #28]
 8003a5e:	433b      	orrs	r3, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a60:	6a27      	ldr	r7, [r4, #32]
 8003a62:	433b      	orrs	r3, r7
  tmp |=  hdma->Init.Direction        |
 8003a64:	4333      	orrs	r3, r6

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003a66:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003a68:	2380      	movs	r3, #128	; 0x80
 8003a6a:	01db      	lsls	r3, r3, #7
 8003a6c:	4299      	cmp	r1, r3
 8003a6e:	d00c      	beq.n	8003a8a <HAL_DMA_Init+0x6a>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003a70:	251c      	movs	r5, #28
 8003a72:	4028      	ands	r0, r5
 8003a74:	3d0d      	subs	r5, #13
 8003a76:	4085      	lsls	r5, r0
 8003a78:	490a      	ldr	r1, [pc, #40]	; (8003aa4 <HAL_DMA_Init+0x84>)
 8003a7a:	680b      	ldr	r3, [r1, #0]
 8003a7c:	43ab      	bics	r3, r5
 8003a7e:	600b      	str	r3, [r1, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003a80:	6863      	ldr	r3, [r4, #4]
 8003a82:	680d      	ldr	r5, [r1, #0]
 8003a84:	4083      	lsls	r3, r0
 8003a86:	432b      	orrs	r3, r5
 8003a88:	600b      	str	r3, [r1, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a8a:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003a8c:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a8e:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003a90:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 8003a92:	77d3      	strb	r3, [r2, #31]
  hdma->Lock = HAL_UNLOCKED;
 8003a94:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 8003a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a98:	bffdfff8 	.word	0xbffdfff8
 8003a9c:	40020000 	.word	0x40020000
 8003aa0:	ffff800f 	.word	0xffff800f
 8003aa4:	400200a8 	.word	0x400200a8

08003aa8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003aa8:	b570      	push	{r4, r5, r6, lr}
 8003aaa:	2501      	movs	r5, #1
 8003aac:	0004      	movs	r4, r0

  /* Check the DMA handle allocation */
  if (NULL == hdma )
  {
    return HAL_ERROR;
 8003aae:	0028      	movs	r0, r5
  if (NULL == hdma )
 8003ab0:	2c00      	cmp	r4, #0
 8003ab2:	d021      	beq.n	8003af8 <HAL_DMA_DeInit+0x50>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8003ab4:	6826      	ldr	r6, [r4, #0]

  /* Compute the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003ab6:	2114      	movs	r1, #20
  __HAL_DMA_DISABLE(hdma);
 8003ab8:	6833      	ldr	r3, [r6, #0]
 8003aba:	43ab      	bics	r3, r5
 8003abc:	6033      	str	r3, [r6, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003abe:	4b0f      	ldr	r3, [pc, #60]	; (8003afc <HAL_DMA_DeInit+0x54>)
 8003ac0:	18f0      	adds	r0, r6, r3
 8003ac2:	f7fc fb51 	bl	8000168 <__udivsi3>

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003ac6:	211c      	movs	r1, #28
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003ac8:	0083      	lsls	r3, r0, #2
 8003aca:	6463      	str	r3, [r4, #68]	; 0x44
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003acc:	400b      	ands	r3, r1
  hdma->Instance->CCR  = 0U;
 8003ace:	2000      	movs	r0, #0
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003ad0:	409d      	lsls	r5, r3

  /* Reset DMA channel selection register */
  /* DMA1 */
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003ad2:	390d      	subs	r1, #13
 8003ad4:	4099      	lsls	r1, r3
  hdma->DmaBaseAddress = DMA1;
 8003ad6:	4a0a      	ldr	r2, [pc, #40]	; (8003b00 <HAL_DMA_DeInit+0x58>)

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003ad8:	1da3      	adds	r3, r4, #6
  hdma->DmaBaseAddress = DMA1;
 8003ada:	6422      	str	r2, [r4, #64]	; 0x40
  hdma->Instance->CCR  = 0U;
 8003adc:	6030      	str	r0, [r6, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003ade:	6055      	str	r5, [r2, #4]
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003ae0:	4d08      	ldr	r5, [pc, #32]	; (8003b04 <HAL_DMA_DeInit+0x5c>)
 8003ae2:	682a      	ldr	r2, [r5, #0]
 8003ae4:	438a      	bics	r2, r1
 8003ae6:	602a      	str	r2, [r5, #0]
  hdma->XferCpltCallback = NULL;
 8003ae8:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8003aea:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8003aec:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8003aee:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003af0:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003af2:	3405      	adds	r4, #5
  hdma->State = HAL_DMA_STATE_RESET;
 8003af4:	77d8      	strb	r0, [r3, #31]
  __HAL_UNLOCK(hdma);
 8003af6:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 8003af8:	bd70      	pop	{r4, r5, r6, pc}
 8003afa:	46c0      	nop			; (mov r8, r8)
 8003afc:	bffdfff8 	.word	0xbffdfff8
 8003b00:	40020000 	.word	0x40020000
 8003b04:	400200a8 	.word	0x400200a8

08003b08 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003b0a:	1d45      	adds	r5, r0, #5
{
 8003b0c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hdma);
 8003b0e:	7feb      	ldrb	r3, [r5, #31]
{
 8003b10:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8003b12:	2002      	movs	r0, #2
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d029      	beq.n	8003b6c <HAL_DMA_Start_IT+0x64>
 8003b18:	2301      	movs	r3, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 8003b1a:	1da7      	adds	r7, r4, #6
  __HAL_LOCK(hdma);
 8003b1c:	77eb      	strb	r3, [r5, #31]
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b1e:	7ffb      	ldrb	r3, [r7, #31]
 8003b20:	2600      	movs	r6, #0
 8003b22:	469c      	mov	ip, r3
 8003b24:	4660      	mov	r0, ip
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	2801      	cmp	r0, #1
 8003b2a:	d12a      	bne.n	8003b82 <HAL_DMA_Start_IT+0x7a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b2c:	3001      	adds	r0, #1
 8003b2e:	77f8      	strb	r0, [r7, #31]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003b30:	6820      	ldr	r0, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b32:	63e6      	str	r6, [r4, #60]	; 0x3c
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003b34:	6c67      	ldr	r7, [r4, #68]	; 0x44
    __HAL_DMA_DISABLE(hdma);
 8003b36:	6805      	ldr	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003b38:	361c      	adds	r6, #28
 8003b3a:	403e      	ands	r6, r7
    __HAL_DMA_DISABLE(hdma);
 8003b3c:	439d      	bics	r5, r3
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003b3e:	40b3      	lsls	r3, r6
    __HAL_DMA_DISABLE(hdma);
 8003b40:	6005      	str	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003b42:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8003b44:	606b      	str	r3, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003b46:	9b01      	ldr	r3, [sp, #4]
 8003b48:	6043      	str	r3, [r0, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b4a:	68a3      	ldr	r3, [r4, #8]
 8003b4c:	2b10      	cmp	r3, #16
 8003b4e:	d10e      	bne.n	8003b6e <HAL_DMA_Start_IT+0x66>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003b50:	6082      	str	r2, [r0, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003b52:	60c1      	str	r1, [r0, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8003b54:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00c      	beq.n	8003b74 <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b5a:	230e      	movs	r3, #14
 8003b5c:	6802      	ldr	r2, [r0, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	6003      	str	r3, [r0, #0]
    __HAL_DMA_ENABLE(hdma);
 8003b62:	2301      	movs	r3, #1
 8003b64:	6802      	ldr	r2, [r0, #0]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b6a:	2000      	movs	r0, #0
}
 8003b6c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8003b6e:	6081      	str	r1, [r0, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8003b70:	60c2      	str	r2, [r0, #12]
 8003b72:	e7ef      	b.n	8003b54 <HAL_DMA_Start_IT+0x4c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b74:	2204      	movs	r2, #4
 8003b76:	6803      	ldr	r3, [r0, #0]
 8003b78:	4393      	bics	r3, r2
 8003b7a:	6003      	str	r3, [r0, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003b7c:	6802      	ldr	r2, [r0, #0]
 8003b7e:	230a      	movs	r3, #10
 8003b80:	e7ed      	b.n	8003b5e <HAL_DMA_Start_IT+0x56>
    status = HAL_BUSY;
 8003b82:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);
 8003b84:	77ee      	strb	r6, [r5, #31]
    status = HAL_BUSY;
 8003b86:	e7f1      	b.n	8003b6c <HAL_DMA_Start_IT+0x64>

08003b88 <HAL_DMA_Abort>:
{
 8003b88:	b530      	push	{r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b8a:	1d85      	adds	r5, r0, #6
 8003b8c:	7feb      	ldrb	r3, [r5, #31]
 8003b8e:	1d44      	adds	r4, r0, #5
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d005      	beq.n	8003ba0 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b94:	2304      	movs	r3, #4
 8003b96:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8003b98:	2300      	movs	r3, #0
    return HAL_ERROR;
 8003b9a:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8003b9c:	77e3      	strb	r3, [r4, #31]
}
 8003b9e:	bd30      	pop	{r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ba0:	210e      	movs	r1, #14
 8003ba2:	6803      	ldr	r3, [r0, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	438a      	bics	r2, r1
 8003ba8:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8003baa:	2201      	movs	r2, #1
 8003bac:	6819      	ldr	r1, [r3, #0]
 8003bae:	4391      	bics	r1, r2
 8003bb0:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003bb2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003bb4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003bb6:	201c      	movs	r0, #28
 8003bb8:	4003      	ands	r3, r0
 8003bba:	0010      	movs	r0, r2
 8003bbc:	4098      	lsls	r0, r3
 8003bbe:	6048      	str	r0, [r1, #4]
    __HAL_UNLOCK(hdma);
 8003bc0:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 8003bc2:	77ea      	strb	r2, [r5, #31]
    __HAL_UNLOCK(hdma);
 8003bc4:	77e0      	strb	r0, [r4, #31]
    return status;
 8003bc6:	e7ea      	b.n	8003b9e <HAL_DMA_Abort+0x16>

08003bc8 <HAL_DMA_Abort_IT>:
{
 8003bc8:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003bca:	1d84      	adds	r4, r0, #6
 8003bcc:	7fe3      	ldrb	r3, [r4, #31]
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d004      	beq.n	8003bdc <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bd2:	2304      	movs	r3, #4
 8003bd4:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8003bd6:	3b03      	subs	r3, #3
}
 8003bd8:	0018      	movs	r0, r3
 8003bda:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bdc:	210e      	movs	r1, #14
 8003bde:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003be0:	6c45      	ldr	r5, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	438a      	bics	r2, r1
 8003be6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8003be8:	2201      	movs	r2, #1
 8003bea:	6819      	ldr	r1, [r3, #0]
 8003bec:	4391      	bics	r1, r2
 8003bee:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003bf0:	231c      	movs	r3, #28
 8003bf2:	402b      	ands	r3, r5
 8003bf4:	0015      	movs	r5, r2
 8003bf6:	409d      	lsls	r5, r3
 8003bf8:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_UNLOCK(hdma);
 8003bfa:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003bfc:	604d      	str	r5, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003bfe:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 8003c00:	2400      	movs	r4, #0
 8003c02:	77dc      	strb	r4, [r3, #31]
    if(hdma->XferAbortCallback != NULL)
 8003c04:	6b82      	ldr	r2, [r0, #56]	; 0x38
  HAL_StatusTypeDef status = HAL_OK;
 8003c06:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 8003c08:	42a2      	cmp	r2, r4
 8003c0a:	d0e5      	beq.n	8003bd8 <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 8003c0c:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8003c0e:	0023      	movs	r3, r4
 8003c10:	e7e2      	b.n	8003bd8 <HAL_DMA_Abort_IT+0x10>

08003c12 <HAL_DMA_IRQHandler>:
{
 8003c12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8003c14:	221c      	movs	r2, #28
 8003c16:	2704      	movs	r7, #4
 8003c18:	6c46      	ldr	r6, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003c1a:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8003c1c:	4032      	ands	r2, r6
 8003c1e:	003e      	movs	r6, r7
 8003c20:	4096      	lsls	r6, r2
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003c22:	680d      	ldr	r5, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003c24:	6803      	ldr	r3, [r0, #0]
 8003c26:	681c      	ldr	r4, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8003c28:	4235      	tst	r5, r6
 8003c2a:	d00d      	beq.n	8003c48 <HAL_DMA_IRQHandler+0x36>
 8003c2c:	423c      	tst	r4, r7
 8003c2e:	d00b      	beq.n	8003c48 <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	0692      	lsls	r2, r2, #26
 8003c34:	d402      	bmi.n	8003c3c <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	43ba      	bics	r2, r7
 8003c3a:	601a      	str	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 8003c3c:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8003c3e:	604e      	str	r6, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d019      	beq.n	8003c78 <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 8003c44:	4798      	blx	r3
  return;
 8003c46:	e017      	b.n	8003c78 <HAL_DMA_IRQHandler+0x66>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8003c48:	2702      	movs	r7, #2
 8003c4a:	003e      	movs	r6, r7
 8003c4c:	4096      	lsls	r6, r2
 8003c4e:	4235      	tst	r5, r6
 8003c50:	d013      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x68>
 8003c52:	423c      	tst	r4, r7
 8003c54:	d011      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x68>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	0692      	lsls	r2, r2, #26
 8003c5a:	d406      	bmi.n	8003c6a <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003c5c:	240a      	movs	r4, #10
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	43a2      	bics	r2, r4
 8003c62:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8003c64:	2201      	movs	r2, #1
 8003c66:	1d83      	adds	r3, r0, #6
 8003c68:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003c6e:	604e      	str	r6, [r1, #4]
    __HAL_UNLOCK(hdma);
 8003c70:	77da      	strb	r2, [r3, #31]
    if(hdma->XferCpltCallback != NULL)
 8003c72:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d1e5      	bne.n	8003c44 <HAL_DMA_IRQHandler+0x32>
}
 8003c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8003c7a:	2608      	movs	r6, #8
 8003c7c:	0037      	movs	r7, r6
 8003c7e:	4097      	lsls	r7, r2
 8003c80:	423d      	tst	r5, r7
 8003c82:	d0f9      	beq.n	8003c78 <HAL_DMA_IRQHandler+0x66>
 8003c84:	4234      	tst	r4, r6
 8003c86:	d0f7      	beq.n	8003c78 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c88:	250e      	movs	r5, #14
 8003c8a:	681c      	ldr	r4, [r3, #0]
 8003c8c:	43ac      	bics	r4, r5
 8003c8e:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003c90:	2301      	movs	r3, #1
 8003c92:	001c      	movs	r4, r3
 8003c94:	4094      	lsls	r4, r2
    hdma->State = HAL_DMA_STATE_READY;
 8003c96:	1d82      	adds	r2, r0, #6
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003c98:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c9a:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8003c9c:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	1d43      	adds	r3, r0, #5
 8003ca2:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 8003ca4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003ca6:	e7e5      	b.n	8003c74 <HAL_DMA_IRQHandler+0x62>

08003ca8 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8003ca8:	0003      	movs	r3, r0
 8003caa:	1e08      	subs	r0, r1, #0
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
 8003cac:	d101      	bne.n	8003cb2 <HAL_EXTI_RegisterCallback+0xa>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8003cae:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
      break;
  }

  return status;
}
 8003cb0:	4770      	bx	lr
      status = HAL_ERROR;
 8003cb2:	2001      	movs	r0, #1
 8003cb4:	e7fc      	b.n	8003cb0 <HAL_EXTI_RegisterCallback+0x8>

08003cb6 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8003cb6:	0003      	movs	r3, r0
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
  {
    return HAL_ERROR;
 8003cb8:	2001      	movs	r0, #1
  if (hexti == NULL)
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d001      	beq.n	8003cc2 <HAL_EXTI_GetHandle+0xc>
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;

    return HAL_OK;
 8003cbe:	2000      	movs	r0, #0
    hexti->Line = ExtiLine;
 8003cc0:	6019      	str	r1, [r3, #0]
  }
}
 8003cc2:	4770      	bx	lr

08003cc4 <HAL_EXTI_IRQHandler>:
{
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8003cc4:	221f      	movs	r2, #31
 8003cc6:	6803      	ldr	r3, [r0, #0]
{
 8003cc8:	b510      	push	{r4, lr}
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8003cca:	401a      	ands	r2, r3
 8003ccc:	2301      	movs	r3, #1
 8003cce:	4093      	lsls	r3, r2

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 8003cd0:	4a04      	ldr	r2, [pc, #16]	; (8003ce4 <HAL_EXTI_IRQHandler+0x20>)
 8003cd2:	6951      	ldr	r1, [r2, #20]
  if (regval != 0x00u)
 8003cd4:	420b      	tst	r3, r1
 8003cd6:	d004      	beq.n	8003ce2 <HAL_EXTI_IRQHandler+0x1e>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 8003cd8:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8003cda:	6843      	ldr	r3, [r0, #4]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d000      	beq.n	8003ce2 <HAL_EXTI_IRQHandler+0x1e>
    {
      hexti->PendingCallback();
 8003ce0:	4798      	blx	r3
    }
  }
}
 8003ce2:	bd10      	pop	{r4, pc}
 8003ce4:	40010400 	.word	0x40010400

08003ce8 <HAL_GPIO_Init>:
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003ce8:	4a5a      	ldr	r2, [pc, #360]	; (8003e54 <HAL_GPIO_Init+0x16c>)
{
 8003cea:	b5f0      	push	{r4, r5, r6, r7, lr}
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003cec:	1882      	adds	r2, r0, r2
 8003cee:	1e54      	subs	r4, r2, #1
 8003cf0:	41a2      	sbcs	r2, r4
  uint32_t position = 0x00U;
 8003cf2:	2300      	movs	r3, #0
{
 8003cf4:	b087      	sub	sp, #28
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003cf6:	3205      	adds	r2, #5
{
 8003cf8:	9102      	str	r1, [sp, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003cfa:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003cfc:	9a02      	ldr	r2, [sp, #8]
 8003cfe:	6812      	ldr	r2, [r2, #0]
 8003d00:	0014      	movs	r4, r2
 8003d02:	40dc      	lsrs	r4, r3
 8003d04:	d101      	bne.n	8003d0a <HAL_GPIO_Init+0x22>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 8003d06:	b007      	add	sp, #28
 8003d08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003d0a:	2101      	movs	r1, #1
 8003d0c:	000d      	movs	r5, r1
 8003d0e:	0014      	movs	r4, r2
 8003d10:	409d      	lsls	r5, r3
 8003d12:	402c      	ands	r4, r5
 8003d14:	9401      	str	r4, [sp, #4]
    if (iocurrent)
 8003d16:	422a      	tst	r2, r5
 8003d18:	d100      	bne.n	8003d1c <HAL_GPIO_Init+0x34>
 8003d1a:	e099      	b.n	8003e50 <HAL_GPIO_Init+0x168>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d1c:	9a02      	ldr	r2, [sp, #8]
 8003d1e:	005f      	lsls	r7, r3, #1
 8003d20:	6854      	ldr	r4, [r2, #4]
 8003d22:	2210      	movs	r2, #16
 8003d24:	0026      	movs	r6, r4
 8003d26:	4396      	bics	r6, r2
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003d28:	3a0d      	subs	r2, #13
 8003d2a:	40ba      	lsls	r2, r7
 8003d2c:	43d2      	mvns	r2, r2
 8003d2e:	9203      	str	r2, [sp, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d30:	0032      	movs	r2, r6
 8003d32:	3a01      	subs	r2, #1
 8003d34:	9604      	str	r6, [sp, #16]
 8003d36:	428a      	cmp	r2, r1
 8003d38:	d80f      	bhi.n	8003d5a <HAL_GPIO_Init+0x72>
        temp = GPIOx->OSPEEDR;
 8003d3a:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003d3c:	9a03      	ldr	r2, [sp, #12]
 8003d3e:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d40:	9a02      	ldr	r2, [sp, #8]
 8003d42:	68d2      	ldr	r2, [r2, #12]
 8003d44:	40ba      	lsls	r2, r7
 8003d46:	4332      	orrs	r2, r6
        GPIOx->OSPEEDR = temp;
 8003d48:	6082      	str	r2, [r0, #8]
        temp = GPIOx->OTYPER;
 8003d4a:	6842      	ldr	r2, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d4c:	43aa      	bics	r2, r5
 8003d4e:	0015      	movs	r5, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003d50:	0922      	lsrs	r2, r4, #4
 8003d52:	400a      	ands	r2, r1
 8003d54:	409a      	lsls	r2, r3
 8003d56:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 8003d58:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8003d5a:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d5c:	9a03      	ldr	r2, [sp, #12]
 8003d5e:	4015      	ands	r5, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d60:	9a02      	ldr	r2, [sp, #8]
 8003d62:	6892      	ldr	r2, [r2, #8]
 8003d64:	40ba      	lsls	r2, r7
 8003d66:	432a      	orrs	r2, r5
      GPIOx->PUPDR = temp;
 8003d68:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d6a:	9a04      	ldr	r2, [sp, #16]
 8003d6c:	2a02      	cmp	r2, #2
 8003d6e:	d10e      	bne.n	8003d8e <HAL_GPIO_Init+0xa6>
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003d70:	2507      	movs	r5, #7
 8003d72:	210f      	movs	r1, #15
 8003d74:	401d      	ands	r5, r3
 8003d76:	00ad      	lsls	r5, r5, #2
 8003d78:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3U];
 8003d7a:	08da      	lsrs	r2, r3, #3
 8003d7c:	0092      	lsls	r2, r2, #2
 8003d7e:	1882      	adds	r2, r0, r2
 8003d80:	6a16      	ldr	r6, [r2, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003d82:	438e      	bics	r6, r1
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003d84:	9902      	ldr	r1, [sp, #8]
 8003d86:	6909      	ldr	r1, [r1, #16]
 8003d88:	40a9      	lsls	r1, r5
 8003d8a:	430e      	orrs	r6, r1
        GPIOx->AFR[position >> 3U] = temp;
 8003d8c:	6216      	str	r6, [r2, #32]
      temp = GPIOx->MODER;
 8003d8e:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003d90:	9a03      	ldr	r2, [sp, #12]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d92:	2603      	movs	r6, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003d94:	402a      	ands	r2, r5
 8003d96:	0015      	movs	r5, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d98:	0022      	movs	r2, r4
 8003d9a:	4032      	ands	r2, r6
 8003d9c:	40ba      	lsls	r2, r7
 8003d9e:	4315      	orrs	r5, r2
      GPIOx->MODER = temp;
 8003da0:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003da2:	00e2      	lsls	r2, r4, #3
 8003da4:	d554      	bpl.n	8003e50 <HAL_GPIO_Init+0x168>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003da6:	2701      	movs	r7, #1
 8003da8:	4d2b      	ldr	r5, [pc, #172]	; (8003e58 <HAL_GPIO_Init+0x170>)
 8003daa:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8003dac:	433a      	orrs	r2, r7
 8003dae:	636a      	str	r2, [r5, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 8003db0:	4a2a      	ldr	r2, [pc, #168]	; (8003e5c <HAL_GPIO_Init+0x174>)
 8003db2:	089d      	lsrs	r5, r3, #2
 8003db4:	00ad      	lsls	r5, r5, #2
 8003db6:	18ad      	adds	r5, r5, r2
 8003db8:	68aa      	ldr	r2, [r5, #8]
 8003dba:	4694      	mov	ip, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003dbc:	001a      	movs	r2, r3
 8003dbe:	4032      	ands	r2, r6
 8003dc0:	0092      	lsls	r2, r2, #2
 8003dc2:	9203      	str	r2, [sp, #12]
 8003dc4:	220f      	movs	r2, #15
 8003dc6:	9903      	ldr	r1, [sp, #12]
 8003dc8:	408a      	lsls	r2, r1
 8003dca:	4661      	mov	r1, ip
 8003dcc:	4391      	bics	r1, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003dce:	22a0      	movs	r2, #160	; 0xa0
 8003dd0:	05d2      	lsls	r2, r2, #23
 8003dd2:	4694      	mov	ip, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003dd4:	9104      	str	r1, [sp, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	4560      	cmp	r0, ip
 8003dda:	d011      	beq.n	8003e00 <HAL_GPIO_Init+0x118>
 8003ddc:	4a20      	ldr	r2, [pc, #128]	; (8003e60 <HAL_GPIO_Init+0x178>)
 8003dde:	4694      	mov	ip, r2
 8003de0:	003a      	movs	r2, r7
 8003de2:	4560      	cmp	r0, ip
 8003de4:	d00c      	beq.n	8003e00 <HAL_GPIO_Init+0x118>
 8003de6:	4f1f      	ldr	r7, [pc, #124]	; (8003e64 <HAL_GPIO_Init+0x17c>)
 8003de8:	1892      	adds	r2, r2, r2
 8003dea:	42b8      	cmp	r0, r7
 8003dec:	d008      	beq.n	8003e00 <HAL_GPIO_Init+0x118>
 8003dee:	4f1e      	ldr	r7, [pc, #120]	; (8003e68 <HAL_GPIO_Init+0x180>)
 8003df0:	0032      	movs	r2, r6
 8003df2:	42b8      	cmp	r0, r7
 8003df4:	d004      	beq.n	8003e00 <HAL_GPIO_Init+0x118>
 8003df6:	4e1d      	ldr	r6, [pc, #116]	; (8003e6c <HAL_GPIO_Init+0x184>)
 8003df8:	3201      	adds	r2, #1
 8003dfa:	42b0      	cmp	r0, r6
 8003dfc:	d000      	beq.n	8003e00 <HAL_GPIO_Init+0x118>
 8003dfe:	9a05      	ldr	r2, [sp, #20]
 8003e00:	9903      	ldr	r1, [sp, #12]
 8003e02:	408a      	lsls	r2, r1
 8003e04:	9904      	ldr	r1, [sp, #16]
 8003e06:	430a      	orrs	r2, r1
        temp &= ~((uint32_t)iocurrent);
 8003e08:	9901      	ldr	r1, [sp, #4]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e0a:	60aa      	str	r2, [r5, #8]
          temp |= iocurrent;
 8003e0c:	000e      	movs	r6, r1
        temp = EXTI->IMR;
 8003e0e:	4a18      	ldr	r2, [pc, #96]	; (8003e70 <HAL_GPIO_Init+0x188>)
        temp &= ~((uint32_t)iocurrent);
 8003e10:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 8003e12:	6817      	ldr	r7, [r2, #0]
          temp |= iocurrent;
 8003e14:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e16:	03e1      	lsls	r1, r4, #15
 8003e18:	d401      	bmi.n	8003e1e <HAL_GPIO_Init+0x136>
        temp &= ~((uint32_t)iocurrent);
 8003e1a:	003e      	movs	r6, r7
 8003e1c:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 8003e1e:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8003e20:	6857      	ldr	r7, [r2, #4]
          temp |= iocurrent;
 8003e22:	9e01      	ldr	r6, [sp, #4]
 8003e24:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e26:	03a1      	lsls	r1, r4, #14
 8003e28:	d401      	bmi.n	8003e2e <HAL_GPIO_Init+0x146>
        temp &= ~((uint32_t)iocurrent);
 8003e2a:	003e      	movs	r6, r7
 8003e2c:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 8003e2e:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8003e30:	6897      	ldr	r7, [r2, #8]
          temp |= iocurrent;
 8003e32:	9e01      	ldr	r6, [sp, #4]
 8003e34:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e36:	02e1      	lsls	r1, r4, #11
 8003e38:	d401      	bmi.n	8003e3e <HAL_GPIO_Init+0x156>
        temp &= ~((uint32_t)iocurrent);
 8003e3a:	003e      	movs	r6, r7
 8003e3c:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 8003e3e:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8003e40:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 8003e42:	9f01      	ldr	r7, [sp, #4]
 8003e44:	4337      	orrs	r7, r6
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e46:	02a1      	lsls	r1, r4, #10
 8003e48:	d401      	bmi.n	8003e4e <HAL_GPIO_Init+0x166>
        temp &= ~((uint32_t)iocurrent);
 8003e4a:	402e      	ands	r6, r5
 8003e4c:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 8003e4e:	60d7      	str	r7, [r2, #12]
    position++;
 8003e50:	3301      	adds	r3, #1
 8003e52:	e753      	b.n	8003cfc <HAL_GPIO_Init+0x14>
 8003e54:	afffe400 	.word	0xafffe400
 8003e58:	40021000 	.word	0x40021000
 8003e5c:	40010000 	.word	0x40010000
 8003e60:	50000400 	.word	0x50000400
 8003e64:	50000800 	.word	0x50000800
 8003e68:	50000c00 	.word	0x50000c00
 8003e6c:	50001000 	.word	0x50001000
 8003e70:	40010400 	.word	0x40010400

08003e74 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003e74:	b5f0      	push	{r4, r5, r6, r7, lr}
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003e76:	4a38      	ldr	r2, [pc, #224]	; (8003f58 <HAL_GPIO_DeInit+0xe4>)
{
 8003e78:	b087      	sub	sp, #28
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003e7a:	1882      	adds	r2, r0, r2
{
 8003e7c:	9102      	str	r1, [sp, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003e7e:	1e51      	subs	r1, r2, #1
 8003e80:	418a      	sbcs	r2, r1
  uint32_t position = 0x00U;
 8003e82:	2300      	movs	r3, #0
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003e84:	3205      	adds	r2, #5
 8003e86:	9205      	str	r2, [sp, #20]
  while ((GPIO_Pin >> position) != 0)
 8003e88:	9a02      	ldr	r2, [sp, #8]
 8003e8a:	40da      	lsrs	r2, r3
 8003e8c:	d101      	bne.n	8003e92 <HAL_GPIO_DeInit+0x1e>
      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
    }
    position++;
  }
}
 8003e8e:	b007      	add	sp, #28
 8003e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Pin) & (1U << position);
 8003e92:	2701      	movs	r7, #1
 8003e94:	003a      	movs	r2, r7
 8003e96:	409a      	lsls	r2, r3
 8003e98:	9c02      	ldr	r4, [sp, #8]
 8003e9a:	9201      	str	r2, [sp, #4]
 8003e9c:	4014      	ands	r4, r2
    if (iocurrent)
 8003e9e:	9901      	ldr	r1, [sp, #4]
 8003ea0:	9a02      	ldr	r2, [sp, #8]
 8003ea2:	420a      	tst	r2, r1
 8003ea4:	d056      	beq.n	8003f54 <HAL_GPIO_DeInit+0xe0>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003ea6:	4a2d      	ldr	r2, [pc, #180]	; (8003f5c <HAL_GPIO_DeInit+0xe8>)
 8003ea8:	0899      	lsrs	r1, r3, #2
 8003eaa:	0089      	lsls	r1, r1, #2
 8003eac:	1889      	adds	r1, r1, r2
 8003eae:	688a      	ldr	r2, [r1, #8]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 8003eb0:	001d      	movs	r5, r3
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003eb2:	0016      	movs	r6, r2
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 8003eb4:	2203      	movs	r2, #3
 8003eb6:	4015      	ands	r5, r2
 8003eb8:	00ad      	lsls	r5, r5, #2
 8003eba:	320c      	adds	r2, #12
 8003ebc:	40aa      	lsls	r2, r5
 8003ebe:	9203      	str	r2, [sp, #12]
 8003ec0:	4032      	ands	r2, r6
 8003ec2:	9204      	str	r2, [sp, #16]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003ec4:	22a0      	movs	r2, #160	; 0xa0
 8003ec6:	05d2      	lsls	r2, r2, #23
 8003ec8:	4694      	mov	ip, r2
 8003eca:	2200      	movs	r2, #0
 8003ecc:	4560      	cmp	r0, ip
 8003ece:	d011      	beq.n	8003ef4 <HAL_GPIO_DeInit+0x80>
 8003ed0:	4a23      	ldr	r2, [pc, #140]	; (8003f60 <HAL_GPIO_DeInit+0xec>)
 8003ed2:	4694      	mov	ip, r2
 8003ed4:	003a      	movs	r2, r7
 8003ed6:	4560      	cmp	r0, ip
 8003ed8:	d00c      	beq.n	8003ef4 <HAL_GPIO_DeInit+0x80>
 8003eda:	4f22      	ldr	r7, [pc, #136]	; (8003f64 <HAL_GPIO_DeInit+0xf0>)
 8003edc:	1892      	adds	r2, r2, r2
 8003ede:	42b8      	cmp	r0, r7
 8003ee0:	d008      	beq.n	8003ef4 <HAL_GPIO_DeInit+0x80>
 8003ee2:	4f21      	ldr	r7, [pc, #132]	; (8003f68 <HAL_GPIO_DeInit+0xf4>)
 8003ee4:	3201      	adds	r2, #1
 8003ee6:	42b8      	cmp	r0, r7
 8003ee8:	d004      	beq.n	8003ef4 <HAL_GPIO_DeInit+0x80>
 8003eea:	4e20      	ldr	r6, [pc, #128]	; (8003f6c <HAL_GPIO_DeInit+0xf8>)
 8003eec:	3201      	adds	r2, #1
 8003eee:	42b0      	cmp	r0, r6
 8003ef0:	d000      	beq.n	8003ef4 <HAL_GPIO_DeInit+0x80>
 8003ef2:	9a05      	ldr	r2, [sp, #20]
 8003ef4:	40aa      	lsls	r2, r5
 8003ef6:	9d04      	ldr	r5, [sp, #16]
 8003ef8:	42aa      	cmp	r2, r5
 8003efa:	d110      	bne.n	8003f1e <HAL_GPIO_DeInit+0xaa>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003efc:	4a1c      	ldr	r2, [pc, #112]	; (8003f70 <HAL_GPIO_DeInit+0xfc>)
 8003efe:	6815      	ldr	r5, [r2, #0]
 8003f00:	43a5      	bics	r5, r4
 8003f02:	6015      	str	r5, [r2, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003f04:	6855      	ldr	r5, [r2, #4]
 8003f06:	43a5      	bics	r5, r4
 8003f08:	6055      	str	r5, [r2, #4]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003f0a:	6895      	ldr	r5, [r2, #8]
 8003f0c:	43a5      	bics	r5, r4
 8003f0e:	6095      	str	r5, [r2, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003f10:	68d5      	ldr	r5, [r2, #12]
 8003f12:	43a5      	bics	r5, r4
 8003f14:	60d5      	str	r5, [r2, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003f16:	688a      	ldr	r2, [r1, #8]
 8003f18:	9c03      	ldr	r4, [sp, #12]
 8003f1a:	43a2      	bics	r2, r4
 8003f1c:	608a      	str	r2, [r1, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8003f1e:	2103      	movs	r1, #3
 8003f20:	005c      	lsls	r4, r3, #1
 8003f22:	40a1      	lsls	r1, r4
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003f24:	2407      	movs	r4, #7
 8003f26:	260f      	movs	r6, #15
 8003f28:	401c      	ands	r4, r3
 8003f2a:	00a4      	lsls	r4, r4, #2
 8003f2c:	40a6      	lsls	r6, r4
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8003f2e:	6802      	ldr	r2, [r0, #0]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 8003f30:	9c01      	ldr	r4, [sp, #4]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8003f32:	430a      	orrs	r2, r1
 8003f34:	6002      	str	r2, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003f36:	08da      	lsrs	r2, r3, #3
 8003f38:	0092      	lsls	r2, r2, #2
 8003f3a:	1882      	adds	r2, r0, r2
 8003f3c:	6a15      	ldr	r5, [r2, #32]
 8003f3e:	43b5      	bics	r5, r6
 8003f40:	6215      	str	r5, [r2, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f42:	68c2      	ldr	r2, [r0, #12]
 8003f44:	438a      	bics	r2, r1
 8003f46:	60c2      	str	r2, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 8003f48:	6842      	ldr	r2, [r0, #4]
 8003f4a:	43a2      	bics	r2, r4
 8003f4c:	6042      	str	r2, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003f4e:	6882      	ldr	r2, [r0, #8]
 8003f50:	438a      	bics	r2, r1
 8003f52:	6082      	str	r2, [r0, #8]
    position++;
 8003f54:	3301      	adds	r3, #1
 8003f56:	e797      	b.n	8003e88 <HAL_GPIO_DeInit+0x14>
 8003f58:	afffe400 	.word	0xafffe400
 8003f5c:	40010000 	.word	0x40010000
 8003f60:	50000400 	.word	0x50000400
 8003f64:	50000800 	.word	0x50000800
 8003f68:	50000c00 	.word	0x50000c00
 8003f6c:	50001000 	.word	0x50001000
 8003f70:	40010400 	.word	0x40010400

08003f74 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003f74:	6900      	ldr	r0, [r0, #16]
 8003f76:	4008      	ands	r0, r1
 8003f78:	1e43      	subs	r3, r0, #1
 8003f7a:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8003f7c:	b2c0      	uxtb	r0, r0
}
 8003f7e:	4770      	bx	lr

08003f80 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f80:	2a00      	cmp	r2, #0
 8003f82:	d001      	beq.n	8003f88 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f84:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8003f86:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8003f88:	6281      	str	r1, [r0, #40]	; 0x28
}
 8003f8a:	e7fc      	b.n	8003f86 <HAL_GPIO_WritePin+0x6>

08003f8c <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003f8c:	4b04      	ldr	r3, [pc, #16]	; (8003fa0 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8003f8e:	b510      	push	{r4, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003f90:	695a      	ldr	r2, [r3, #20]
 8003f92:	4210      	tst	r0, r2
 8003f94:	d002      	beq.n	8003f9c <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f96:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f98:	f7fe f804 	bl	8001fa4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f9c:	bd10      	pop	{r4, pc}
 8003f9e:	46c0      	nop			; (mov r8, r8)
 8003fa0:	40010400 	.word	0x40010400

08003fa4 <HAL_PWR_DisablePVD>:
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
  /* Disable the power voltage detector */
  CLEAR_BIT(PWR->CR, PWR_CR_PVDE);
 8003fa4:	2110      	movs	r1, #16
 8003fa6:	4a02      	ldr	r2, [pc, #8]	; (8003fb0 <HAL_PWR_DisablePVD+0xc>)
 8003fa8:	6813      	ldr	r3, [r2, #0]
 8003faa:	438b      	bics	r3, r1
 8003fac:	6013      	str	r3, [r2, #0]
}
 8003fae:	4770      	bx	lr
 8003fb0:	40007000 	.word	0x40007000

08003fb4 <HAL_PWR_EnterSLEEPMode>:
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003fb4:	4b17      	ldr	r3, [pc, #92]	; (8004014 <HAL_PWR_EnterSLEEPMode+0x60>)
{
 8003fb6:	b5f0      	push	{r4, r5, r6, r7, lr}
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8003fb8:	4a17      	ldr	r2, [pc, #92]	; (8004018 <HAL_PWR_EnterSLEEPMode+0x64>)
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003fba:	681e      	ldr	r6, [r3, #0]
{
 8003fbc:	0005      	movs	r5, r0
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003fbe:	2080      	movs	r0, #128	; 0x80
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8003fc0:	6a17      	ldr	r7, [r2, #32]
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003fc2:	0034      	movs	r4, r6
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8003fc4:	2201      	movs	r2, #1
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003fc6:	0080      	lsls	r0, r0, #2
 8003fc8:	4004      	ands	r4, r0
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8003fca:	403a      	ands	r2, r7
  if((ulpbit != 0) && (vrefinbit != 0))
 8003fcc:	4206      	tst	r6, r0
 8003fce:	d005      	beq.n	8003fdc <HAL_PWR_EnterSLEEPMode+0x28>
 8003fd0:	2a00      	cmp	r2, #0
 8003fd2:	d003      	beq.n	8003fdc <HAL_PWR_EnterSLEEPMode+0x28>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8003fd4:	6818      	ldr	r0, [r3, #0]
 8003fd6:	4e11      	ldr	r6, [pc, #68]	; (800401c <HAL_PWR_EnterSLEEPMode+0x68>)
 8003fd8:	4030      	ands	r0, r6
 8003fda:	6018      	str	r0, [r3, #0]

  /* Select the regulator state in Sleep mode ---------------------------------*/
  tmpreg = PWR->CR;

  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8003fdc:	2603      	movs	r6, #3
  tmpreg = PWR->CR;
 8003fde:	6818      	ldr	r0, [r3, #0]
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8003fe0:	43b0      	bics	r0, r6

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8003fe2:	4328      	orrs	r0, r5

  /* Store the new value */
  PWR->CR = tmpreg;
  
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8003fe4:	4d0e      	ldr	r5, [pc, #56]	; (8004020 <HAL_PWR_EnterSLEEPMode+0x6c>)
  PWR->CR = tmpreg;
 8003fe6:	6018      	str	r0, [r3, #0]
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8003fe8:	6928      	ldr	r0, [r5, #16]
 8003fea:	3601      	adds	r6, #1
 8003fec:	43b0      	bics	r0, r6
 8003fee:	6128      	str	r0, [r5, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8003ff0:	2901      	cmp	r1, #1
 8003ff2:	d10b      	bne.n	800400c <HAL_PWR_EnterSLEEPMode+0x58>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003ff4:	bf30      	wfi
    __SEV();
    __WFE();
    __WFE();
  }

  if((ulpbit != 0) && (vrefinbit != 0))
 8003ff6:	2c00      	cmp	r4, #0
 8003ff8:	d006      	beq.n	8004008 <HAL_PWR_EnterSLEEPMode+0x54>
 8003ffa:	2a00      	cmp	r2, #0
 8003ffc:	d004      	beq.n	8004008 <HAL_PWR_EnterSLEEPMode+0x54>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8003ffe:	2280      	movs	r2, #128	; 0x80
 8004000:	6819      	ldr	r1, [r3, #0]
 8004002:	0092      	lsls	r2, r2, #2
 8004004:	430a      	orrs	r2, r1
 8004006:	601a      	str	r2, [r3, #0]
  }

  /* Additional NOP to ensure all pending instructions are flushed before entering low power mode */
  __NOP();
 8004008:	46c0      	nop			; (mov r8, r8)

}
 800400a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __SEV();
 800400c:	bf40      	sev
    __WFE();
 800400e:	bf20      	wfe
    __WFE();
 8004010:	bf20      	wfe
 8004012:	e7f0      	b.n	8003ff6 <HAL_PWR_EnterSLEEPMode+0x42>
 8004014:	40007000 	.word	0x40007000
 8004018:	40010000 	.word	0x40010000
 800401c:	fffffdff 	.word	0xfffffdff
 8004020:	e000ed00 	.word	0xe000ed00

08004024 <HAL_PWR_EnterSTOPMode>:
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8004024:	4b19      	ldr	r3, [pc, #100]	; (800408c <HAL_PWR_EnterSTOPMode+0x68>)
{
 8004026:	b5f0      	push	{r4, r5, r6, r7, lr}
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8004028:	4a19      	ldr	r2, [pc, #100]	; (8004090 <HAL_PWR_EnterSTOPMode+0x6c>)
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 800402a:	681e      	ldr	r6, [r3, #0]
{
 800402c:	0005      	movs	r5, r0
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 800402e:	2080      	movs	r0, #128	; 0x80
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8004030:	6a17      	ldr	r7, [r2, #32]
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8004032:	0034      	movs	r4, r6
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8004034:	2201      	movs	r2, #1
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8004036:	0080      	lsls	r0, r0, #2
 8004038:	4004      	ands	r4, r0
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 800403a:	403a      	ands	r2, r7
  if((ulpbit != 0) && (vrefinbit != 0))
 800403c:	4206      	tst	r6, r0
 800403e:	d005      	beq.n	800404c <HAL_PWR_EnterSTOPMode+0x28>
 8004040:	2a00      	cmp	r2, #0
 8004042:	d003      	beq.n	800404c <HAL_PWR_EnterSTOPMode+0x28>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8004044:	6818      	ldr	r0, [r3, #0]
 8004046:	4e13      	ldr	r6, [pc, #76]	; (8004094 <HAL_PWR_EnterSTOPMode+0x70>)
 8004048:	4030      	ands	r0, r6
 800404a:	6018      	str	r0, [r3, #0]

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 800404c:	2603      	movs	r6, #3
  tmpreg = PWR->CR;
 800404e:	6818      	ldr	r0, [r3, #0]
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8004050:	43b0      	bics	r0, r6

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8004052:	4328      	orrs	r0, r5

  /* Store the new value */
  PWR->CR = tmpreg;

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8004054:	2504      	movs	r5, #4
  PWR->CR = tmpreg;
 8004056:	6018      	str	r0, [r3, #0]
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8004058:	480f      	ldr	r0, [pc, #60]	; (8004098 <HAL_PWR_EnterSTOPMode+0x74>)
 800405a:	6906      	ldr	r6, [r0, #16]
 800405c:	4335      	orrs	r5, r6
 800405e:	6105      	str	r5, [r0, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8004060:	2901      	cmp	r1, #1
 8004062:	d10e      	bne.n	8004082 <HAL_PWR_EnterSTOPMode+0x5e>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004064:	bf30      	wfi
    __WFE();
    __WFE();
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8004066:	2504      	movs	r5, #4
 8004068:	6901      	ldr	r1, [r0, #16]
 800406a:	43a9      	bics	r1, r5
 800406c:	6101      	str	r1, [r0, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 800406e:	2c00      	cmp	r4, #0
 8004070:	d006      	beq.n	8004080 <HAL_PWR_EnterSTOPMode+0x5c>
 8004072:	2a00      	cmp	r2, #0
 8004074:	d004      	beq.n	8004080 <HAL_PWR_EnterSTOPMode+0x5c>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8004076:	2280      	movs	r2, #128	; 0x80
 8004078:	6819      	ldr	r1, [r3, #0]
 800407a:	0092      	lsls	r2, r2, #2
 800407c:	430a      	orrs	r2, r1
 800407e:	601a      	str	r2, [r3, #0]
  }
}
 8004080:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __SEV();
 8004082:	bf40      	sev
    __WFE();
 8004084:	bf20      	wfe
    __WFE();
 8004086:	bf20      	wfe
 8004088:	e7ed      	b.n	8004066 <HAL_PWR_EnterSTOPMode+0x42>
 800408a:	46c0      	nop			; (mov r8, r8)
 800408c:	40007000 	.word	0x40007000
 8004090:	40010000 	.word	0x40010000
 8004094:	fffffdff 	.word	0xfffffdff
 8004098:	e000ed00 	.word	0xe000ed00

0800409c <HAL_PWREx_EnableFastWakeUp>:
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 800409c:	2380      	movs	r3, #128	; 0x80
 800409e:	4a03      	ldr	r2, [pc, #12]	; (80040ac <HAL_PWREx_EnableFastWakeUp+0x10>)
 80040a0:	00db      	lsls	r3, r3, #3
 80040a2:	6811      	ldr	r1, [r2, #0]
 80040a4:	430b      	orrs	r3, r1
 80040a6:	6013      	str	r3, [r2, #0]
}
 80040a8:	4770      	bx	lr
 80040aa:	46c0      	nop			; (mov r8, r8)
 80040ac:	40007000 	.word	0x40007000

080040b0 <HAL_PWREx_EnableUltraLowPower>:
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 80040b0:	2380      	movs	r3, #128	; 0x80
 80040b2:	4a03      	ldr	r2, [pc, #12]	; (80040c0 <HAL_PWREx_EnableUltraLowPower+0x10>)
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	6811      	ldr	r1, [r2, #0]
 80040b8:	430b      	orrs	r3, r1
 80040ba:	6013      	str	r3, [r2, #0]
}
 80040bc:	4770      	bx	lr
 80040be:	46c0      	nop			; (mov r8, r8)
 80040c0:	40007000 	.word	0x40007000

080040c4 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80040c4:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 80040c6:	4b1d      	ldr	r3, [pc, #116]	; (800413c <HAL_RCC_GetSysClockFreq+0x78>)
{
 80040c8:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 80040ca:	68dc      	ldr	r4, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 80040cc:	4022      	ands	r2, r4
 80040ce:	2a08      	cmp	r2, #8
 80040d0:	d031      	beq.n	8004136 <HAL_RCC_GetSysClockFreq+0x72>
 80040d2:	2a0c      	cmp	r2, #12
 80040d4:	d009      	beq.n	80040ea <HAL_RCC_GetSysClockFreq+0x26>
 80040d6:	2a04      	cmp	r2, #4
 80040d8:	d125      	bne.n	8004126 <HAL_RCC_GetSysClockFreq+0x62>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80040da:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 80040dc:	4b18      	ldr	r3, [pc, #96]	; (8004140 <HAL_RCC_GetSysClockFreq+0x7c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80040de:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 80040e0:	17c0      	asrs	r0, r0, #31
 80040e2:	4018      	ands	r0, r3
 80040e4:	4b17      	ldr	r3, [pc, #92]	; (8004144 <HAL_RCC_GetSysClockFreq+0x80>)
 80040e6:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 80040e8:	bd70      	pop	{r4, r5, r6, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80040ea:	02a2      	lsls	r2, r4, #10
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80040ec:	4816      	ldr	r0, [pc, #88]	; (8004148 <HAL_RCC_GetSysClockFreq+0x84>)
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80040ee:	0f12      	lsrs	r2, r2, #28
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80040f0:	5c80      	ldrb	r0, [r0, r2]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040f2:	2280      	movs	r2, #128	; 0x80
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80040f4:	0224      	lsls	r4, r4, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040f6:	68d9      	ldr	r1, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80040f8:	0fa4      	lsrs	r4, r4, #30
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040fa:	0252      	lsls	r2, r2, #9
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80040fc:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040fe:	4211      	tst	r1, r2
 8004100:	d009      	beq.n	8004116 <HAL_RCC_GetSysClockFreq+0x52>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004102:	4a12      	ldr	r2, [pc, #72]	; (800414c <HAL_RCC_GetSysClockFreq+0x88>)
 8004104:	2300      	movs	r3, #0
 8004106:	2100      	movs	r1, #0
 8004108:	f7fc fa3c 	bl	8000584 <__aeabi_lmul>
 800410c:	0022      	movs	r2, r4
 800410e:	2300      	movs	r3, #0
 8004110:	f7fc fa18 	bl	8000544 <__aeabi_uldivmod>
 8004114:	e7e8      	b.n	80040e8 <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	2310      	movs	r3, #16
 800411a:	421a      	tst	r2, r3
 800411c:	d001      	beq.n	8004122 <HAL_RCC_GetSysClockFreq+0x5e>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800411e:	4a0c      	ldr	r2, [pc, #48]	; (8004150 <HAL_RCC_GetSysClockFreq+0x8c>)
 8004120:	e7f0      	b.n	8004104 <HAL_RCC_GetSysClockFreq+0x40>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004122:	4a08      	ldr	r2, [pc, #32]	; (8004144 <HAL_RCC_GetSysClockFreq+0x80>)
 8004124:	e7ee      	b.n	8004104 <HAL_RCC_GetSysClockFreq+0x40>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004126:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004128:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800412a:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800412c:	041b      	lsls	r3, r3, #16
 800412e:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004130:	3301      	adds	r3, #1
 8004132:	4098      	lsls	r0, r3
      break;
 8004134:	e7d8      	b.n	80040e8 <HAL_RCC_GetSysClockFreq+0x24>
  switch (tmpreg & RCC_CFGR_SWS)
 8004136:	4805      	ldr	r0, [pc, #20]	; (800414c <HAL_RCC_GetSysClockFreq+0x88>)
 8004138:	e7d6      	b.n	80040e8 <HAL_RCC_GetSysClockFreq+0x24>
 800413a:	46c0      	nop			; (mov r8, r8)
 800413c:	40021000 	.word	0x40021000
 8004140:	ff48e500 	.word	0xff48e500
 8004144:	00f42400 	.word	0x00f42400
 8004148:	0800e67c 	.word	0x0800e67c
 800414c:	007a1200 	.word	0x007a1200
 8004150:	003d0900 	.word	0x003d0900

08004154 <HAL_RCC_OscConfig>:
{
 8004154:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004156:	0005      	movs	r5, r0
 8004158:	b085      	sub	sp, #20
  if(RCC_OscInitStruct == NULL)
 800415a:	2800      	cmp	r0, #0
 800415c:	d05a      	beq.n	8004214 <HAL_RCC_OscConfig+0xc0>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800415e:	230c      	movs	r3, #12
 8004160:	4cb8      	ldr	r4, [pc, #736]	; (8004444 <HAL_RCC_OscConfig+0x2f0>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004162:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004164:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004166:	68e7      	ldr	r7, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004168:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800416a:	2380      	movs	r3, #128	; 0x80
 800416c:	025b      	lsls	r3, r3, #9
 800416e:	0019      	movs	r1, r3
 8004170:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004172:	07d2      	lsls	r2, r2, #31
 8004174:	d442      	bmi.n	80041fc <HAL_RCC_OscConfig+0xa8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004176:	682b      	ldr	r3, [r5, #0]
 8004178:	079b      	lsls	r3, r3, #30
 800417a:	d500      	bpl.n	800417e <HAL_RCC_OscConfig+0x2a>
 800417c:	e08b      	b.n	8004296 <HAL_RCC_OscConfig+0x142>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800417e:	682b      	ldr	r3, [r5, #0]
 8004180:	06db      	lsls	r3, r3, #27
 8004182:	d529      	bpl.n	80041d8 <HAL_RCC_OscConfig+0x84>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004184:	2e00      	cmp	r6, #0
 8004186:	d000      	beq.n	800418a <HAL_RCC_OscConfig+0x36>
 8004188:	e0e4      	b.n	8004354 <HAL_RCC_OscConfig+0x200>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800418a:	6823      	ldr	r3, [r4, #0]
 800418c:	059b      	lsls	r3, r3, #22
 800418e:	d502      	bpl.n	8004196 <HAL_RCC_OscConfig+0x42>
 8004190:	69eb      	ldr	r3, [r5, #28]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d03e      	beq.n	8004214 <HAL_RCC_OscConfig+0xc0>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004196:	6862      	ldr	r2, [r4, #4]
 8004198:	49ab      	ldr	r1, [pc, #684]	; (8004448 <HAL_RCC_OscConfig+0x2f4>)
 800419a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800419c:	400a      	ands	r2, r1
 800419e:	431a      	orrs	r2, r3
 80041a0:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041a2:	6861      	ldr	r1, [r4, #4]
 80041a4:	6a2a      	ldr	r2, [r5, #32]
 80041a6:	0209      	lsls	r1, r1, #8
 80041a8:	0a09      	lsrs	r1, r1, #8
 80041aa:	0612      	lsls	r2, r2, #24
 80041ac:	430a      	orrs	r2, r1
 80041ae:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80041b0:	2280      	movs	r2, #128	; 0x80
 80041b2:	0b5b      	lsrs	r3, r3, #13
 80041b4:	3301      	adds	r3, #1
 80041b6:	0212      	lsls	r2, r2, #8
 80041b8:	409a      	lsls	r2, r3
 80041ba:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80041bc:	68e1      	ldr	r1, [r4, #12]
 80041be:	060a      	lsls	r2, r1, #24
 80041c0:	49a2      	ldr	r1, [pc, #648]	; (800444c <HAL_RCC_OscConfig+0x2f8>)
 80041c2:	0f12      	lsrs	r2, r2, #28
 80041c4:	5c8a      	ldrb	r2, [r1, r2]
 80041c6:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80041c8:	4aa1      	ldr	r2, [pc, #644]	; (8004450 <HAL_RCC_OscConfig+0x2fc>)
 80041ca:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 80041cc:	4ba1      	ldr	r3, [pc, #644]	; (8004454 <HAL_RCC_OscConfig+0x300>)
 80041ce:	6818      	ldr	r0, [r3, #0]
 80041d0:	f7fe fc5a 	bl	8002a88 <HAL_InitTick>
        if(status != HAL_OK)
 80041d4:	2800      	cmp	r0, #0
 80041d6:	d134      	bne.n	8004242 <HAL_RCC_OscConfig+0xee>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041d8:	682b      	ldr	r3, [r5, #0]
 80041da:	071b      	lsls	r3, r3, #28
 80041dc:	d500      	bpl.n	80041e0 <HAL_RCC_OscConfig+0x8c>
 80041de:	e0f0      	b.n	80043c2 <HAL_RCC_OscConfig+0x26e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041e0:	682b      	ldr	r3, [r5, #0]
 80041e2:	075b      	lsls	r3, r3, #29
 80041e4:	d500      	bpl.n	80041e8 <HAL_RCC_OscConfig+0x94>
 80041e6:	e112      	b.n	800440e <HAL_RCC_OscConfig+0x2ba>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80041e8:	682b      	ldr	r3, [r5, #0]
 80041ea:	069b      	lsls	r3, r3, #26
 80041ec:	d500      	bpl.n	80041f0 <HAL_RCC_OscConfig+0x9c>
 80041ee:	e196      	b.n	800451e <HAL_RCC_OscConfig+0x3ca>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041f0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d000      	beq.n	80041f8 <HAL_RCC_OscConfig+0xa4>
 80041f6:	e1c5      	b.n	8004584 <HAL_RCC_OscConfig+0x430>
  return HAL_OK;
 80041f8:	2000      	movs	r0, #0
 80041fa:	e022      	b.n	8004242 <HAL_RCC_OscConfig+0xee>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80041fc:	2e08      	cmp	r6, #8
 80041fe:	d003      	beq.n	8004208 <HAL_RCC_OscConfig+0xb4>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004200:	2e0c      	cmp	r6, #12
 8004202:	d109      	bne.n	8004218 <HAL_RCC_OscConfig+0xc4>
 8004204:	2f00      	cmp	r7, #0
 8004206:	d007      	beq.n	8004218 <HAL_RCC_OscConfig+0xc4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004208:	6823      	ldr	r3, [r4, #0]
 800420a:	039b      	lsls	r3, r3, #14
 800420c:	d5b3      	bpl.n	8004176 <HAL_RCC_OscConfig+0x22>
 800420e:	686b      	ldr	r3, [r5, #4]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d1b0      	bne.n	8004176 <HAL_RCC_OscConfig+0x22>
          return HAL_ERROR;
 8004214:	2001      	movs	r0, #1
 8004216:	e014      	b.n	8004242 <HAL_RCC_OscConfig+0xee>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004218:	686a      	ldr	r2, [r5, #4]
 800421a:	428a      	cmp	r2, r1
 800421c:	d113      	bne.n	8004246 <HAL_RCC_OscConfig+0xf2>
 800421e:	6822      	ldr	r2, [r4, #0]
 8004220:	4313      	orrs	r3, r2
 8004222:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004224:	f7fe fc32 	bl	8002a8c <HAL_GetTick>
 8004228:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800422a:	2280      	movs	r2, #128	; 0x80
 800422c:	6823      	ldr	r3, [r4, #0]
 800422e:	0292      	lsls	r2, r2, #10
 8004230:	4213      	tst	r3, r2
 8004232:	d1a0      	bne.n	8004176 <HAL_RCC_OscConfig+0x22>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004234:	f7fe fc2a 	bl	8002a8c <HAL_GetTick>
 8004238:	9b00      	ldr	r3, [sp, #0]
 800423a:	1ac0      	subs	r0, r0, r3
 800423c:	2864      	cmp	r0, #100	; 0x64
 800423e:	d9f4      	bls.n	800422a <HAL_RCC_OscConfig+0xd6>
            return HAL_TIMEOUT;
 8004240:	2003      	movs	r0, #3
}
 8004242:	b005      	add	sp, #20
 8004244:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004246:	21a0      	movs	r1, #160	; 0xa0
 8004248:	02c9      	lsls	r1, r1, #11
 800424a:	428a      	cmp	r2, r1
 800424c:	d105      	bne.n	800425a <HAL_RCC_OscConfig+0x106>
 800424e:	2280      	movs	r2, #128	; 0x80
 8004250:	6821      	ldr	r1, [r4, #0]
 8004252:	02d2      	lsls	r2, r2, #11
 8004254:	430a      	orrs	r2, r1
 8004256:	6022      	str	r2, [r4, #0]
 8004258:	e7e1      	b.n	800421e <HAL_RCC_OscConfig+0xca>
 800425a:	6821      	ldr	r1, [r4, #0]
 800425c:	487e      	ldr	r0, [pc, #504]	; (8004458 <HAL_RCC_OscConfig+0x304>)
 800425e:	4001      	ands	r1, r0
 8004260:	6021      	str	r1, [r4, #0]
 8004262:	6821      	ldr	r1, [r4, #0]
 8004264:	400b      	ands	r3, r1
 8004266:	9303      	str	r3, [sp, #12]
 8004268:	9b03      	ldr	r3, [sp, #12]
 800426a:	497c      	ldr	r1, [pc, #496]	; (800445c <HAL_RCC_OscConfig+0x308>)
 800426c:	6823      	ldr	r3, [r4, #0]
 800426e:	400b      	ands	r3, r1
 8004270:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004272:	2a00      	cmp	r2, #0
 8004274:	d1d6      	bne.n	8004224 <HAL_RCC_OscConfig+0xd0>
        tickstart = HAL_GetTick();
 8004276:	f7fe fc09 	bl	8002a8c <HAL_GetTick>
 800427a:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800427c:	2280      	movs	r2, #128	; 0x80
 800427e:	6823      	ldr	r3, [r4, #0]
 8004280:	0292      	lsls	r2, r2, #10
 8004282:	4213      	tst	r3, r2
 8004284:	d100      	bne.n	8004288 <HAL_RCC_OscConfig+0x134>
 8004286:	e776      	b.n	8004176 <HAL_RCC_OscConfig+0x22>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004288:	f7fe fc00 	bl	8002a8c <HAL_GetTick>
 800428c:	9b00      	ldr	r3, [sp, #0]
 800428e:	1ac0      	subs	r0, r0, r3
 8004290:	2864      	cmp	r0, #100	; 0x64
 8004292:	d9f3      	bls.n	800427c <HAL_RCC_OscConfig+0x128>
 8004294:	e7d4      	b.n	8004240 <HAL_RCC_OscConfig+0xec>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8004296:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 8004298:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800429a:	4213      	tst	r3, r2
 800429c:	d003      	beq.n	80042a6 <HAL_RCC_OscConfig+0x152>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800429e:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 80042a0:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80042a2:	4311      	orrs	r1, r2
 80042a4:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80042a6:	2e04      	cmp	r6, #4
 80042a8:	d003      	beq.n	80042b2 <HAL_RCC_OscConfig+0x15e>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80042aa:	2e0c      	cmp	r6, #12
 80042ac:	d124      	bne.n	80042f8 <HAL_RCC_OscConfig+0x1a4>
 80042ae:	2f00      	cmp	r7, #0
 80042b0:	d122      	bne.n	80042f8 <HAL_RCC_OscConfig+0x1a4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80042b2:	6822      	ldr	r2, [r4, #0]
 80042b4:	0752      	lsls	r2, r2, #29
 80042b6:	d501      	bpl.n	80042bc <HAL_RCC_OscConfig+0x168>
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d0ab      	beq.n	8004214 <HAL_RCC_OscConfig+0xc0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042bc:	6861      	ldr	r1, [r4, #4]
 80042be:	692a      	ldr	r2, [r5, #16]
 80042c0:	4867      	ldr	r0, [pc, #412]	; (8004460 <HAL_RCC_OscConfig+0x30c>)
 80042c2:	0212      	lsls	r2, r2, #8
 80042c4:	4001      	ands	r1, r0
 80042c6:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80042c8:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042ca:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80042cc:	6822      	ldr	r2, [r4, #0]
 80042ce:	438a      	bics	r2, r1
 80042d0:	4313      	orrs	r3, r2
 80042d2:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042d4:	f7ff fef6 	bl	80040c4 <HAL_RCC_GetSysClockFreq>
 80042d8:	68e3      	ldr	r3, [r4, #12]
 80042da:	4a5c      	ldr	r2, [pc, #368]	; (800444c <HAL_RCC_OscConfig+0x2f8>)
 80042dc:	061b      	lsls	r3, r3, #24
 80042de:	0f1b      	lsrs	r3, r3, #28
 80042e0:	5cd3      	ldrb	r3, [r2, r3]
 80042e2:	40d8      	lsrs	r0, r3
 80042e4:	4b5a      	ldr	r3, [pc, #360]	; (8004450 <HAL_RCC_OscConfig+0x2fc>)
 80042e6:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (uwTickPrio);
 80042e8:	4b5a      	ldr	r3, [pc, #360]	; (8004454 <HAL_RCC_OscConfig+0x300>)
 80042ea:	6818      	ldr	r0, [r3, #0]
 80042ec:	f7fe fbcc 	bl	8002a88 <HAL_InitTick>
      if(status != HAL_OK)
 80042f0:	2800      	cmp	r0, #0
 80042f2:	d100      	bne.n	80042f6 <HAL_RCC_OscConfig+0x1a2>
 80042f4:	e743      	b.n	800417e <HAL_RCC_OscConfig+0x2a>
 80042f6:	e7a4      	b.n	8004242 <HAL_RCC_OscConfig+0xee>
      if(hsi_state != RCC_HSI_OFF)
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d019      	beq.n	8004330 <HAL_RCC_OscConfig+0x1dc>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80042fc:	2109      	movs	r1, #9
 80042fe:	6822      	ldr	r2, [r4, #0]
 8004300:	438a      	bics	r2, r1
 8004302:	4313      	orrs	r3, r2
 8004304:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004306:	f7fe fbc1 	bl	8002a8c <HAL_GetTick>
 800430a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800430c:	2204      	movs	r2, #4
 800430e:	6823      	ldr	r3, [r4, #0]
 8004310:	4213      	tst	r3, r2
 8004312:	d007      	beq.n	8004324 <HAL_RCC_OscConfig+0x1d0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004314:	6862      	ldr	r2, [r4, #4]
 8004316:	692b      	ldr	r3, [r5, #16]
 8004318:	4951      	ldr	r1, [pc, #324]	; (8004460 <HAL_RCC_OscConfig+0x30c>)
 800431a:	021b      	lsls	r3, r3, #8
 800431c:	400a      	ands	r2, r1
 800431e:	4313      	orrs	r3, r2
 8004320:	6063      	str	r3, [r4, #4]
 8004322:	e72c      	b.n	800417e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004324:	f7fe fbb2 	bl	8002a8c <HAL_GetTick>
 8004328:	1bc0      	subs	r0, r0, r7
 800432a:	2802      	cmp	r0, #2
 800432c:	d9ee      	bls.n	800430c <HAL_RCC_OscConfig+0x1b8>
 800432e:	e787      	b.n	8004240 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_HSI_DISABLE();
 8004330:	2201      	movs	r2, #1
 8004332:	6823      	ldr	r3, [r4, #0]
 8004334:	4393      	bics	r3, r2
 8004336:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004338:	f7fe fba8 	bl	8002a8c <HAL_GetTick>
 800433c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800433e:	2204      	movs	r2, #4
 8004340:	6823      	ldr	r3, [r4, #0]
 8004342:	4213      	tst	r3, r2
 8004344:	d100      	bne.n	8004348 <HAL_RCC_OscConfig+0x1f4>
 8004346:	e71a      	b.n	800417e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004348:	f7fe fba0 	bl	8002a8c <HAL_GetTick>
 800434c:	1bc0      	subs	r0, r0, r7
 800434e:	2802      	cmp	r0, #2
 8004350:	d9f5      	bls.n	800433e <HAL_RCC_OscConfig+0x1ea>
 8004352:	e775      	b.n	8004240 <HAL_RCC_OscConfig+0xec>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004354:	69eb      	ldr	r3, [r5, #28]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d020      	beq.n	800439c <HAL_RCC_OscConfig+0x248>
        __HAL_RCC_MSI_ENABLE();
 800435a:	2380      	movs	r3, #128	; 0x80
 800435c:	6822      	ldr	r2, [r4, #0]
 800435e:	005b      	lsls	r3, r3, #1
 8004360:	4313      	orrs	r3, r2
 8004362:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004364:	f7fe fb92 	bl	8002a8c <HAL_GetTick>
 8004368:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800436a:	2280      	movs	r2, #128	; 0x80
 800436c:	6823      	ldr	r3, [r4, #0]
 800436e:	0092      	lsls	r2, r2, #2
 8004370:	4213      	tst	r3, r2
 8004372:	d00d      	beq.n	8004390 <HAL_RCC_OscConfig+0x23c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004374:	6863      	ldr	r3, [r4, #4]
 8004376:	4a34      	ldr	r2, [pc, #208]	; (8004448 <HAL_RCC_OscConfig+0x2f4>)
 8004378:	4013      	ands	r3, r2
 800437a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800437c:	4313      	orrs	r3, r2
 800437e:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004380:	6862      	ldr	r2, [r4, #4]
 8004382:	6a2b      	ldr	r3, [r5, #32]
 8004384:	0212      	lsls	r2, r2, #8
 8004386:	061b      	lsls	r3, r3, #24
 8004388:	0a12      	lsrs	r2, r2, #8
 800438a:	4313      	orrs	r3, r2
 800438c:	6063      	str	r3, [r4, #4]
 800438e:	e723      	b.n	80041d8 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004390:	f7fe fb7c 	bl	8002a8c <HAL_GetTick>
 8004394:	1bc0      	subs	r0, r0, r7
 8004396:	2802      	cmp	r0, #2
 8004398:	d9e7      	bls.n	800436a <HAL_RCC_OscConfig+0x216>
 800439a:	e751      	b.n	8004240 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_MSI_DISABLE();
 800439c:	6823      	ldr	r3, [r4, #0]
 800439e:	4a31      	ldr	r2, [pc, #196]	; (8004464 <HAL_RCC_OscConfig+0x310>)
 80043a0:	4013      	ands	r3, r2
 80043a2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80043a4:	f7fe fb72 	bl	8002a8c <HAL_GetTick>
 80043a8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80043aa:	2280      	movs	r2, #128	; 0x80
 80043ac:	6823      	ldr	r3, [r4, #0]
 80043ae:	0092      	lsls	r2, r2, #2
 80043b0:	4213      	tst	r3, r2
 80043b2:	d100      	bne.n	80043b6 <HAL_RCC_OscConfig+0x262>
 80043b4:	e710      	b.n	80041d8 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80043b6:	f7fe fb69 	bl	8002a8c <HAL_GetTick>
 80043ba:	1bc0      	subs	r0, r0, r7
 80043bc:	2802      	cmp	r0, #2
 80043be:	d9f4      	bls.n	80043aa <HAL_RCC_OscConfig+0x256>
 80043c0:	e73e      	b.n	8004240 <HAL_RCC_OscConfig+0xec>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043c2:	696a      	ldr	r2, [r5, #20]
 80043c4:	2301      	movs	r3, #1
 80043c6:	2a00      	cmp	r2, #0
 80043c8:	d010      	beq.n	80043ec <HAL_RCC_OscConfig+0x298>
      __HAL_RCC_LSI_ENABLE();
 80043ca:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80043cc:	4313      	orrs	r3, r2
 80043ce:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80043d0:	f7fe fb5c 	bl	8002a8c <HAL_GetTick>
 80043d4:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80043d6:	2202      	movs	r2, #2
 80043d8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80043da:	4213      	tst	r3, r2
 80043dc:	d000      	beq.n	80043e0 <HAL_RCC_OscConfig+0x28c>
 80043de:	e6ff      	b.n	80041e0 <HAL_RCC_OscConfig+0x8c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043e0:	f7fe fb54 	bl	8002a8c <HAL_GetTick>
 80043e4:	1bc0      	subs	r0, r0, r7
 80043e6:	2802      	cmp	r0, #2
 80043e8:	d9f5      	bls.n	80043d6 <HAL_RCC_OscConfig+0x282>
 80043ea:	e729      	b.n	8004240 <HAL_RCC_OscConfig+0xec>
      __HAL_RCC_LSI_DISABLE();
 80043ec:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80043ee:	439a      	bics	r2, r3
 80043f0:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80043f2:	f7fe fb4b 	bl	8002a8c <HAL_GetTick>
 80043f6:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80043f8:	2202      	movs	r2, #2
 80043fa:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80043fc:	4213      	tst	r3, r2
 80043fe:	d100      	bne.n	8004402 <HAL_RCC_OscConfig+0x2ae>
 8004400:	e6ee      	b.n	80041e0 <HAL_RCC_OscConfig+0x8c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004402:	f7fe fb43 	bl	8002a8c <HAL_GetTick>
 8004406:	1bc0      	subs	r0, r0, r7
 8004408:	2802      	cmp	r0, #2
 800440a:	d9f5      	bls.n	80043f8 <HAL_RCC_OscConfig+0x2a4>
 800440c:	e718      	b.n	8004240 <HAL_RCC_OscConfig+0xec>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800440e:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8004410:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004412:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004414:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8004416:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004418:	421a      	tst	r2, r3
 800441a:	d104      	bne.n	8004426 <HAL_RCC_OscConfig+0x2d2>
      __HAL_RCC_PWR_CLK_ENABLE();
 800441c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800441e:	4313      	orrs	r3, r2
 8004420:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8004422:	2301      	movs	r3, #1
 8004424:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004426:	2280      	movs	r2, #128	; 0x80
 8004428:	4f0f      	ldr	r7, [pc, #60]	; (8004468 <HAL_RCC_OscConfig+0x314>)
 800442a:	0052      	lsls	r2, r2, #1
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	4213      	tst	r3, r2
 8004430:	d01c      	beq.n	800446c <HAL_RCC_OscConfig+0x318>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004432:	2280      	movs	r2, #128	; 0x80
 8004434:	68ab      	ldr	r3, [r5, #8]
 8004436:	0052      	lsls	r2, r2, #1
 8004438:	4293      	cmp	r3, r2
 800443a:	d12b      	bne.n	8004494 <HAL_RCC_OscConfig+0x340>
 800443c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800443e:	4313      	orrs	r3, r2
 8004440:	6523      	str	r3, [r4, #80]	; 0x50
 8004442:	e04c      	b.n	80044de <HAL_RCC_OscConfig+0x38a>
 8004444:	40021000 	.word	0x40021000
 8004448:	ffff1fff 	.word	0xffff1fff
 800444c:	0800e685 	.word	0x0800e685
 8004450:	2000004c 	.word	0x2000004c
 8004454:	20000054 	.word	0x20000054
 8004458:	fffeffff 	.word	0xfffeffff
 800445c:	fffbffff 	.word	0xfffbffff
 8004460:	ffffe0ff 	.word	0xffffe0ff
 8004464:	fffffeff 	.word	0xfffffeff
 8004468:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800446c:	2280      	movs	r2, #128	; 0x80
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	0052      	lsls	r2, r2, #1
 8004472:	4313      	orrs	r3, r2
 8004474:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8004476:	f7fe fb09 	bl	8002a8c <HAL_GetTick>
 800447a:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800447c:	2280      	movs	r2, #128	; 0x80
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	0052      	lsls	r2, r2, #1
 8004482:	4213      	tst	r3, r2
 8004484:	d1d5      	bne.n	8004432 <HAL_RCC_OscConfig+0x2de>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004486:	f7fe fb01 	bl	8002a8c <HAL_GetTick>
 800448a:	9b01      	ldr	r3, [sp, #4]
 800448c:	1ac0      	subs	r0, r0, r3
 800448e:	2864      	cmp	r0, #100	; 0x64
 8004490:	d9f4      	bls.n	800447c <HAL_RCC_OscConfig+0x328>
 8004492:	e6d5      	b.n	8004240 <HAL_RCC_OscConfig+0xec>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004494:	2b00      	cmp	r3, #0
 8004496:	d116      	bne.n	80044c6 <HAL_RCC_OscConfig+0x372>
 8004498:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800449a:	4a6b      	ldr	r2, [pc, #428]	; (8004648 <HAL_RCC_OscConfig+0x4f4>)
 800449c:	4013      	ands	r3, r2
 800449e:	6523      	str	r3, [r4, #80]	; 0x50
 80044a0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80044a2:	4a6a      	ldr	r2, [pc, #424]	; (800464c <HAL_RCC_OscConfig+0x4f8>)
 80044a4:	4013      	ands	r3, r2
 80044a6:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80044a8:	f7fe faf0 	bl	8002a8c <HAL_GetTick>
 80044ac:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80044ae:	2280      	movs	r2, #128	; 0x80
 80044b0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80044b2:	0092      	lsls	r2, r2, #2
 80044b4:	4213      	tst	r3, r2
 80044b6:	d01a      	beq.n	80044ee <HAL_RCC_OscConfig+0x39a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044b8:	f7fe fae8 	bl	8002a8c <HAL_GetTick>
 80044bc:	4b64      	ldr	r3, [pc, #400]	; (8004650 <HAL_RCC_OscConfig+0x4fc>)
 80044be:	1bc0      	subs	r0, r0, r7
 80044c0:	4298      	cmp	r0, r3
 80044c2:	d9f4      	bls.n	80044ae <HAL_RCC_OscConfig+0x35a>
 80044c4:	e6bc      	b.n	8004240 <HAL_RCC_OscConfig+0xec>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044c6:	21a0      	movs	r1, #160	; 0xa0
 80044c8:	00c9      	lsls	r1, r1, #3
 80044ca:	428b      	cmp	r3, r1
 80044cc:	d118      	bne.n	8004500 <HAL_RCC_OscConfig+0x3ac>
 80044ce:	2380      	movs	r3, #128	; 0x80
 80044d0:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80044d2:	00db      	lsls	r3, r3, #3
 80044d4:	430b      	orrs	r3, r1
 80044d6:	6523      	str	r3, [r4, #80]	; 0x50
 80044d8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80044da:	431a      	orrs	r2, r3
 80044dc:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80044de:	f7fe fad5 	bl	8002a8c <HAL_GetTick>
 80044e2:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80044e4:	2280      	movs	r2, #128	; 0x80
 80044e6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80044e8:	0092      	lsls	r2, r2, #2
 80044ea:	4213      	tst	r3, r2
 80044ec:	d010      	beq.n	8004510 <HAL_RCC_OscConfig+0x3bc>
    if(pwrclkchanged == SET)
 80044ee:	9b00      	ldr	r3, [sp, #0]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d000      	beq.n	80044f6 <HAL_RCC_OscConfig+0x3a2>
 80044f4:	e678      	b.n	80041e8 <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_PWR_CLK_DISABLE();
 80044f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80044f8:	4a56      	ldr	r2, [pc, #344]	; (8004654 <HAL_RCC_OscConfig+0x500>)
 80044fa:	4013      	ands	r3, r2
 80044fc:	63a3      	str	r3, [r4, #56]	; 0x38
 80044fe:	e673      	b.n	80041e8 <HAL_RCC_OscConfig+0x94>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004500:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004502:	4a51      	ldr	r2, [pc, #324]	; (8004648 <HAL_RCC_OscConfig+0x4f4>)
 8004504:	4013      	ands	r3, r2
 8004506:	6523      	str	r3, [r4, #80]	; 0x50
 8004508:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800450a:	4a50      	ldr	r2, [pc, #320]	; (800464c <HAL_RCC_OscConfig+0x4f8>)
 800450c:	4013      	ands	r3, r2
 800450e:	e797      	b.n	8004440 <HAL_RCC_OscConfig+0x2ec>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004510:	f7fe fabc 	bl	8002a8c <HAL_GetTick>
 8004514:	4b4e      	ldr	r3, [pc, #312]	; (8004650 <HAL_RCC_OscConfig+0x4fc>)
 8004516:	1bc0      	subs	r0, r0, r7
 8004518:	4298      	cmp	r0, r3
 800451a:	d9e3      	bls.n	80044e4 <HAL_RCC_OscConfig+0x390>
 800451c:	e690      	b.n	8004240 <HAL_RCC_OscConfig+0xec>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800451e:	69a9      	ldr	r1, [r5, #24]
 8004520:	2301      	movs	r3, #1
 8004522:	4a4d      	ldr	r2, [pc, #308]	; (8004658 <HAL_RCC_OscConfig+0x504>)
 8004524:	2900      	cmp	r1, #0
 8004526:	d018      	beq.n	800455a <HAL_RCC_OscConfig+0x406>
        __HAL_RCC_HSI48_ENABLE();
 8004528:	68a1      	ldr	r1, [r4, #8]
 800452a:	4319      	orrs	r1, r3
 800452c:	60a1      	str	r1, [r4, #8]
 800452e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004530:	430b      	orrs	r3, r1
 8004532:	6363      	str	r3, [r4, #52]	; 0x34
 8004534:	2380      	movs	r3, #128	; 0x80
 8004536:	6a11      	ldr	r1, [r2, #32]
 8004538:	019b      	lsls	r3, r3, #6
 800453a:	430b      	orrs	r3, r1
 800453c:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 800453e:	f7fe faa5 	bl	8002a8c <HAL_GetTick>
 8004542:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004544:	2202      	movs	r2, #2
 8004546:	68a3      	ldr	r3, [r4, #8]
 8004548:	4213      	tst	r3, r2
 800454a:	d000      	beq.n	800454e <HAL_RCC_OscConfig+0x3fa>
 800454c:	e650      	b.n	80041f0 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800454e:	f7fe fa9d 	bl	8002a8c <HAL_GetTick>
 8004552:	1bc0      	subs	r0, r0, r7
 8004554:	2802      	cmp	r0, #2
 8004556:	d9f5      	bls.n	8004544 <HAL_RCC_OscConfig+0x3f0>
 8004558:	e672      	b.n	8004240 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_HSI48_DISABLE();
 800455a:	68a1      	ldr	r1, [r4, #8]
 800455c:	4399      	bics	r1, r3
 800455e:	60a1      	str	r1, [r4, #8]
 8004560:	6a13      	ldr	r3, [r2, #32]
 8004562:	493e      	ldr	r1, [pc, #248]	; (800465c <HAL_RCC_OscConfig+0x508>)
 8004564:	400b      	ands	r3, r1
 8004566:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8004568:	f7fe fa90 	bl	8002a8c <HAL_GetTick>
 800456c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800456e:	2202      	movs	r2, #2
 8004570:	68a3      	ldr	r3, [r4, #8]
 8004572:	4213      	tst	r3, r2
 8004574:	d100      	bne.n	8004578 <HAL_RCC_OscConfig+0x424>
 8004576:	e63b      	b.n	80041f0 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004578:	f7fe fa88 	bl	8002a8c <HAL_GetTick>
 800457c:	1bc0      	subs	r0, r0, r7
 800457e:	2802      	cmp	r0, #2
 8004580:	d9f5      	bls.n	800456e <HAL_RCC_OscConfig+0x41a>
 8004582:	e65d      	b.n	8004240 <HAL_RCC_OscConfig+0xec>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004584:	2e0c      	cmp	r6, #12
 8004586:	d043      	beq.n	8004610 <HAL_RCC_OscConfig+0x4bc>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004588:	4a35      	ldr	r2, [pc, #212]	; (8004660 <HAL_RCC_OscConfig+0x50c>)
 800458a:	2b02      	cmp	r3, #2
 800458c:	d12e      	bne.n	80045ec <HAL_RCC_OscConfig+0x498>
        __HAL_RCC_PLL_DISABLE();
 800458e:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004590:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8004592:	4013      	ands	r3, r2
 8004594:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004596:	f7fe fa79 	bl	8002a8c <HAL_GetTick>
 800459a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800459c:	04bf      	lsls	r7, r7, #18
 800459e:	6823      	ldr	r3, [r4, #0]
 80045a0:	423b      	tst	r3, r7
 80045a2:	d11d      	bne.n	80045e0 <HAL_RCC_OscConfig+0x48c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045a4:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80045a6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80045a8:	68e2      	ldr	r2, [r4, #12]
 80045aa:	430b      	orrs	r3, r1
 80045ac:	492d      	ldr	r1, [pc, #180]	; (8004664 <HAL_RCC_OscConfig+0x510>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80045ae:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045b0:	400a      	ands	r2, r1
 80045b2:	4313      	orrs	r3, r2
 80045b4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80045b6:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045b8:	4313      	orrs	r3, r2
 80045ba:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 80045bc:	2380      	movs	r3, #128	; 0x80
 80045be:	6822      	ldr	r2, [r4, #0]
 80045c0:	045b      	lsls	r3, r3, #17
 80045c2:	4313      	orrs	r3, r2
 80045c4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80045c6:	f7fe fa61 	bl	8002a8c <HAL_GetTick>
 80045ca:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80045cc:	6823      	ldr	r3, [r4, #0]
 80045ce:	4233      	tst	r3, r6
 80045d0:	d000      	beq.n	80045d4 <HAL_RCC_OscConfig+0x480>
 80045d2:	e611      	b.n	80041f8 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045d4:	f7fe fa5a 	bl	8002a8c <HAL_GetTick>
 80045d8:	1b40      	subs	r0, r0, r5
 80045da:	2802      	cmp	r0, #2
 80045dc:	d9f6      	bls.n	80045cc <HAL_RCC_OscConfig+0x478>
 80045de:	e62f      	b.n	8004240 <HAL_RCC_OscConfig+0xec>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045e0:	f7fe fa54 	bl	8002a8c <HAL_GetTick>
 80045e4:	1b80      	subs	r0, r0, r6
 80045e6:	2802      	cmp	r0, #2
 80045e8:	d9d9      	bls.n	800459e <HAL_RCC_OscConfig+0x44a>
 80045ea:	e629      	b.n	8004240 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_PLL_DISABLE();
 80045ec:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80045ee:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80045f0:	4013      	ands	r3, r2
 80045f2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80045f4:	f7fe fa4a 	bl	8002a8c <HAL_GetTick>
 80045f8:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80045fa:	04b6      	lsls	r6, r6, #18
 80045fc:	6823      	ldr	r3, [r4, #0]
 80045fe:	4233      	tst	r3, r6
 8004600:	d100      	bne.n	8004604 <HAL_RCC_OscConfig+0x4b0>
 8004602:	e5f9      	b.n	80041f8 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004604:	f7fe fa42 	bl	8002a8c <HAL_GetTick>
 8004608:	1b40      	subs	r0, r0, r5
 800460a:	2802      	cmp	r0, #2
 800460c:	d9f6      	bls.n	80045fc <HAL_RCC_OscConfig+0x4a8>
 800460e:	e617      	b.n	8004240 <HAL_RCC_OscConfig+0xec>
        return HAL_ERROR;
 8004610:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004612:	2b01      	cmp	r3, #1
 8004614:	d100      	bne.n	8004618 <HAL_RCC_OscConfig+0x4c4>
 8004616:	e614      	b.n	8004242 <HAL_RCC_OscConfig+0xee>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004618:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 800461a:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800461c:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800461e:	0252      	lsls	r2, r2, #9
 8004620:	401a      	ands	r2, r3
 8004622:	428a      	cmp	r2, r1
 8004624:	d000      	beq.n	8004628 <HAL_RCC_OscConfig+0x4d4>
 8004626:	e5f5      	b.n	8004214 <HAL_RCC_OscConfig+0xc0>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004628:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800462a:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800462c:	0392      	lsls	r2, r2, #14
 800462e:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004630:	428a      	cmp	r2, r1
 8004632:	d000      	beq.n	8004636 <HAL_RCC_OscConfig+0x4e2>
 8004634:	e5ee      	b.n	8004214 <HAL_RCC_OscConfig+0xc0>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004636:	22c0      	movs	r2, #192	; 0xc0
 8004638:	0412      	lsls	r2, r2, #16
 800463a:	4013      	ands	r3, r2
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800463c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800463e:	4293      	cmp	r3, r2
 8004640:	d100      	bne.n	8004644 <HAL_RCC_OscConfig+0x4f0>
 8004642:	e5d9      	b.n	80041f8 <HAL_RCC_OscConfig+0xa4>
 8004644:	e5e6      	b.n	8004214 <HAL_RCC_OscConfig+0xc0>
 8004646:	46c0      	nop			; (mov r8, r8)
 8004648:	fffffeff 	.word	0xfffffeff
 800464c:	fffffbff 	.word	0xfffffbff
 8004650:	00001388 	.word	0x00001388
 8004654:	efffffff 	.word	0xefffffff
 8004658:	40010000 	.word	0x40010000
 800465c:	ffffdfff 	.word	0xffffdfff
 8004660:	feffffff 	.word	0xfeffffff
 8004664:	ff02ffff 	.word	0xff02ffff

08004668 <HAL_RCC_ClockConfig>:
{
 8004668:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800466a:	1e04      	subs	r4, r0, #0
 800466c:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 800466e:	d101      	bne.n	8004674 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8004670:	2001      	movs	r0, #1
}
 8004672:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004674:	2501      	movs	r5, #1
 8004676:	4e5b      	ldr	r6, [pc, #364]	; (80047e4 <HAL_RCC_ClockConfig+0x17c>)
 8004678:	9a01      	ldr	r2, [sp, #4]
 800467a:	6833      	ldr	r3, [r6, #0]
 800467c:	402b      	ands	r3, r5
 800467e:	4293      	cmp	r3, r2
 8004680:	d331      	bcc.n	80046e6 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004682:	6822      	ldr	r2, [r4, #0]
 8004684:	0793      	lsls	r3, r2, #30
 8004686:	d443      	bmi.n	8004710 <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004688:	07d3      	lsls	r3, r2, #31
 800468a:	d449      	bmi.n	8004720 <HAL_RCC_ClockConfig+0xb8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800468c:	2501      	movs	r5, #1
 800468e:	6833      	ldr	r3, [r6, #0]
 8004690:	9a01      	ldr	r2, [sp, #4]
 8004692:	402b      	ands	r3, r5
 8004694:	4293      	cmp	r3, r2
 8004696:	d909      	bls.n	80046ac <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004698:	6833      	ldr	r3, [r6, #0]
 800469a:	43ab      	bics	r3, r5
 800469c:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800469e:	f7fe f9f5 	bl	8002a8c <HAL_GetTick>
 80046a2:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046a4:	6833      	ldr	r3, [r6, #0]
 80046a6:	422b      	tst	r3, r5
 80046a8:	d000      	beq.n	80046ac <HAL_RCC_ClockConfig+0x44>
 80046aa:	e08c      	b.n	80047c6 <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046ac:	6822      	ldr	r2, [r4, #0]
 80046ae:	4d4e      	ldr	r5, [pc, #312]	; (80047e8 <HAL_RCC_ClockConfig+0x180>)
 80046b0:	0753      	lsls	r3, r2, #29
 80046b2:	d500      	bpl.n	80046b6 <HAL_RCC_ClockConfig+0x4e>
 80046b4:	e08f      	b.n	80047d6 <HAL_RCC_ClockConfig+0x16e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046b6:	0713      	lsls	r3, r2, #28
 80046b8:	d506      	bpl.n	80046c8 <HAL_RCC_ClockConfig+0x60>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80046ba:	68e9      	ldr	r1, [r5, #12]
 80046bc:	6923      	ldr	r3, [r4, #16]
 80046be:	4a4b      	ldr	r2, [pc, #300]	; (80047ec <HAL_RCC_ClockConfig+0x184>)
 80046c0:	00db      	lsls	r3, r3, #3
 80046c2:	400a      	ands	r2, r1
 80046c4:	4313      	orrs	r3, r2
 80046c6:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046c8:	f7ff fcfc 	bl	80040c4 <HAL_RCC_GetSysClockFreq>
 80046cc:	68eb      	ldr	r3, [r5, #12]
 80046ce:	4a48      	ldr	r2, [pc, #288]	; (80047f0 <HAL_RCC_ClockConfig+0x188>)
 80046d0:	061b      	lsls	r3, r3, #24
 80046d2:	0f1b      	lsrs	r3, r3, #28
 80046d4:	5cd3      	ldrb	r3, [r2, r3]
 80046d6:	40d8      	lsrs	r0, r3
 80046d8:	4b46      	ldr	r3, [pc, #280]	; (80047f4 <HAL_RCC_ClockConfig+0x18c>)
 80046da:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 80046dc:	4b46      	ldr	r3, [pc, #280]	; (80047f8 <HAL_RCC_ClockConfig+0x190>)
 80046de:	6818      	ldr	r0, [r3, #0]
 80046e0:	f7fe f9d2 	bl	8002a88 <HAL_InitTick>
  if(status != HAL_OK)
 80046e4:	e7c5      	b.n	8004672 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046e6:	6833      	ldr	r3, [r6, #0]
 80046e8:	9a01      	ldr	r2, [sp, #4]
 80046ea:	43ab      	bics	r3, r5
 80046ec:	4313      	orrs	r3, r2
 80046ee:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80046f0:	f7fe f9cc 	bl	8002a8c <HAL_GetTick>
 80046f4:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046f6:	6833      	ldr	r3, [r6, #0]
 80046f8:	9a01      	ldr	r2, [sp, #4]
 80046fa:	402b      	ands	r3, r5
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d0c0      	beq.n	8004682 <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004700:	f7fe f9c4 	bl	8002a8c <HAL_GetTick>
 8004704:	4b3d      	ldr	r3, [pc, #244]	; (80047fc <HAL_RCC_ClockConfig+0x194>)
 8004706:	1bc0      	subs	r0, r0, r7
 8004708:	4298      	cmp	r0, r3
 800470a:	d9f4      	bls.n	80046f6 <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 800470c:	2003      	movs	r0, #3
 800470e:	e7b0      	b.n	8004672 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004710:	20f0      	movs	r0, #240	; 0xf0
 8004712:	4935      	ldr	r1, [pc, #212]	; (80047e8 <HAL_RCC_ClockConfig+0x180>)
 8004714:	68cb      	ldr	r3, [r1, #12]
 8004716:	4383      	bics	r3, r0
 8004718:	68a0      	ldr	r0, [r4, #8]
 800471a:	4303      	orrs	r3, r0
 800471c:	60cb      	str	r3, [r1, #12]
 800471e:	e7b3      	b.n	8004688 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004720:	4d31      	ldr	r5, [pc, #196]	; (80047e8 <HAL_RCC_ClockConfig+0x180>)
 8004722:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004724:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004726:	2a02      	cmp	r2, #2
 8004728:	d118      	bne.n	800475c <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800472a:	039b      	lsls	r3, r3, #14
 800472c:	d5a0      	bpl.n	8004670 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800472e:	2103      	movs	r1, #3
 8004730:	68eb      	ldr	r3, [r5, #12]
 8004732:	438b      	bics	r3, r1
 8004734:	4313      	orrs	r3, r2
 8004736:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8004738:	f7fe f9a8 	bl	8002a8c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800473c:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 800473e:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004740:	2b02      	cmp	r3, #2
 8004742:	d118      	bne.n	8004776 <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004744:	220c      	movs	r2, #12
 8004746:	68eb      	ldr	r3, [r5, #12]
 8004748:	4013      	ands	r3, r2
 800474a:	2b08      	cmp	r3, #8
 800474c:	d09e      	beq.n	800468c <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800474e:	f7fe f99d 	bl	8002a8c <HAL_GetTick>
 8004752:	4b2a      	ldr	r3, [pc, #168]	; (80047fc <HAL_RCC_ClockConfig+0x194>)
 8004754:	1bc0      	subs	r0, r0, r7
 8004756:	4298      	cmp	r0, r3
 8004758:	d9f4      	bls.n	8004744 <HAL_RCC_ClockConfig+0xdc>
 800475a:	e7d7      	b.n	800470c <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800475c:	2a03      	cmp	r2, #3
 800475e:	d102      	bne.n	8004766 <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004760:	019b      	lsls	r3, r3, #6
 8004762:	d4e4      	bmi.n	800472e <HAL_RCC_ClockConfig+0xc6>
 8004764:	e784      	b.n	8004670 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004766:	2a01      	cmp	r2, #1
 8004768:	d102      	bne.n	8004770 <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800476a:	075b      	lsls	r3, r3, #29
 800476c:	d4df      	bmi.n	800472e <HAL_RCC_ClockConfig+0xc6>
 800476e:	e77f      	b.n	8004670 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004770:	059b      	lsls	r3, r3, #22
 8004772:	d4dc      	bmi.n	800472e <HAL_RCC_ClockConfig+0xc6>
 8004774:	e77c      	b.n	8004670 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004776:	2b03      	cmp	r3, #3
 8004778:	d10b      	bne.n	8004792 <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800477a:	220c      	movs	r2, #12
 800477c:	68eb      	ldr	r3, [r5, #12]
 800477e:	4013      	ands	r3, r2
 8004780:	4293      	cmp	r3, r2
 8004782:	d083      	beq.n	800468c <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004784:	f7fe f982 	bl	8002a8c <HAL_GetTick>
 8004788:	4b1c      	ldr	r3, [pc, #112]	; (80047fc <HAL_RCC_ClockConfig+0x194>)
 800478a:	1bc0      	subs	r0, r0, r7
 800478c:	4298      	cmp	r0, r3
 800478e:	d9f4      	bls.n	800477a <HAL_RCC_ClockConfig+0x112>
 8004790:	e7bc      	b.n	800470c <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004792:	2b01      	cmp	r3, #1
 8004794:	d011      	beq.n	80047ba <HAL_RCC_ClockConfig+0x152>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004796:	220c      	movs	r2, #12
 8004798:	68eb      	ldr	r3, [r5, #12]
 800479a:	4213      	tst	r3, r2
 800479c:	d100      	bne.n	80047a0 <HAL_RCC_ClockConfig+0x138>
 800479e:	e775      	b.n	800468c <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047a0:	f7fe f974 	bl	8002a8c <HAL_GetTick>
 80047a4:	4b15      	ldr	r3, [pc, #84]	; (80047fc <HAL_RCC_ClockConfig+0x194>)
 80047a6:	1bc0      	subs	r0, r0, r7
 80047a8:	4298      	cmp	r0, r3
 80047aa:	d9f4      	bls.n	8004796 <HAL_RCC_ClockConfig+0x12e>
 80047ac:	e7ae      	b.n	800470c <HAL_RCC_ClockConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047ae:	f7fe f96d 	bl	8002a8c <HAL_GetTick>
 80047b2:	4b12      	ldr	r3, [pc, #72]	; (80047fc <HAL_RCC_ClockConfig+0x194>)
 80047b4:	1bc0      	subs	r0, r0, r7
 80047b6:	4298      	cmp	r0, r3
 80047b8:	d8a8      	bhi.n	800470c <HAL_RCC_ClockConfig+0xa4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80047ba:	220c      	movs	r2, #12
 80047bc:	68eb      	ldr	r3, [r5, #12]
 80047be:	4013      	ands	r3, r2
 80047c0:	2b04      	cmp	r3, #4
 80047c2:	d1f4      	bne.n	80047ae <HAL_RCC_ClockConfig+0x146>
 80047c4:	e762      	b.n	800468c <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047c6:	f7fe f961 	bl	8002a8c <HAL_GetTick>
 80047ca:	4b0c      	ldr	r3, [pc, #48]	; (80047fc <HAL_RCC_ClockConfig+0x194>)
 80047cc:	1bc0      	subs	r0, r0, r7
 80047ce:	4298      	cmp	r0, r3
 80047d0:	d800      	bhi.n	80047d4 <HAL_RCC_ClockConfig+0x16c>
 80047d2:	e767      	b.n	80046a4 <HAL_RCC_ClockConfig+0x3c>
 80047d4:	e79a      	b.n	800470c <HAL_RCC_ClockConfig+0xa4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047d6:	68eb      	ldr	r3, [r5, #12]
 80047d8:	4909      	ldr	r1, [pc, #36]	; (8004800 <HAL_RCC_ClockConfig+0x198>)
 80047da:	400b      	ands	r3, r1
 80047dc:	68e1      	ldr	r1, [r4, #12]
 80047de:	430b      	orrs	r3, r1
 80047e0:	60eb      	str	r3, [r5, #12]
 80047e2:	e768      	b.n	80046b6 <HAL_RCC_ClockConfig+0x4e>
 80047e4:	40022000 	.word	0x40022000
 80047e8:	40021000 	.word	0x40021000
 80047ec:	ffffc7ff 	.word	0xffffc7ff
 80047f0:	0800e685 	.word	0x0800e685
 80047f4:	2000004c 	.word	0x2000004c
 80047f8:	20000054 	.word	0x20000054
 80047fc:	00001388 	.word	0x00001388
 8004800:	fffff8ff 	.word	0xfffff8ff

08004804 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004804:	4b04      	ldr	r3, [pc, #16]	; (8004818 <HAL_RCC_GetPCLK1Freq+0x14>)
 8004806:	4a05      	ldr	r2, [pc, #20]	; (800481c <HAL_RCC_GetPCLK1Freq+0x18>)
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	055b      	lsls	r3, r3, #21
 800480c:	0f5b      	lsrs	r3, r3, #29
 800480e:	5cd3      	ldrb	r3, [r2, r3]
 8004810:	4a03      	ldr	r2, [pc, #12]	; (8004820 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004812:	6810      	ldr	r0, [r2, #0]
 8004814:	40d8      	lsrs	r0, r3
}
 8004816:	4770      	bx	lr
 8004818:	40021000 	.word	0x40021000
 800481c:	0800e695 	.word	0x0800e695
 8004820:	2000004c 	.word	0x2000004c

08004824 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004824:	4b04      	ldr	r3, [pc, #16]	; (8004838 <HAL_RCC_GetPCLK2Freq+0x14>)
 8004826:	4a05      	ldr	r2, [pc, #20]	; (800483c <HAL_RCC_GetPCLK2Freq+0x18>)
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	049b      	lsls	r3, r3, #18
 800482c:	0f5b      	lsrs	r3, r3, #29
 800482e:	5cd3      	ldrb	r3, [r2, r3]
 8004830:	4a03      	ldr	r2, [pc, #12]	; (8004840 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004832:	6810      	ldr	r0, [r2, #0]
 8004834:	40d8      	lsrs	r0, r3
}
 8004836:	4770      	bx	lr
 8004838:	40021000 	.word	0x40021000
 800483c:	0800e695 	.word	0x0800e695
 8004840:	2000004c 	.word	0x2000004c

08004844 <HAL_RCCEx_PeriphCLKConfig>:
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8004844:	2382      	movs	r3, #130	; 0x82
{
 8004846:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004848:	6802      	ldr	r2, [r0, #0]
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800484a:	011b      	lsls	r3, r3, #4
{
 800484c:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800484e:	421a      	tst	r2, r3
 8004850:	d048      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004852:	2380      	movs	r3, #128	; 0x80
  FlagStatus       pwrclkchanged = RESET;
 8004854:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004856:	4c65      	ldr	r4, [pc, #404]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004858:	055b      	lsls	r3, r3, #21
 800485a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  FlagStatus       pwrclkchanged = RESET;
 800485c:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800485e:	421a      	tst	r2, r3
 8004860:	d104      	bne.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x28>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004862:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004864:	4313      	orrs	r3, r2
 8004866:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8004868:	2301      	movs	r3, #1
 800486a:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800486c:	2780      	movs	r7, #128	; 0x80
 800486e:	4e60      	ldr	r6, [pc, #384]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004870:	007f      	lsls	r7, r7, #1
 8004872:	6833      	ldr	r3, [r6, #0]
 8004874:	423b      	tst	r3, r7
 8004876:	d077      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x124>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004878:	686b      	ldr	r3, [r5, #4]
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800487a:	21c0      	movs	r1, #192	; 0xc0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800487c:	001e      	movs	r6, r3
 800487e:	22c0      	movs	r2, #192	; 0xc0
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004880:	6820      	ldr	r0, [r4, #0]
 8004882:	0389      	lsls	r1, r1, #14
 8004884:	4008      	ands	r0, r1
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004886:	400e      	ands	r6, r1
 8004888:	0292      	lsls	r2, r2, #10
 800488a:	4286      	cmp	r6, r0
 800488c:	d103      	bne.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x52>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 800488e:	68a8      	ldr	r0, [r5, #8]
 8004890:	4001      	ands	r1, r0
 8004892:	42b1      	cmp	r1, r6
 8004894:	d007      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x62>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004896:	0019      	movs	r1, r3
 8004898:	4011      	ands	r1, r2
 800489a:	4291      	cmp	r1, r2
 800489c:	d103      	bne.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x62>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800489e:	6821      	ldr	r1, [r4, #0]
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80048a0:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80048a2:	0389      	lsls	r1, r1, #14
 80048a4:	d471      	bmi.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x146>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80048a6:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80048a8:	0008      	movs	r0, r1
 80048aa:	4010      	ands	r0, r2

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80048ac:	4211      	tst	r1, r2
 80048ae:	d000      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80048b0:	e06c      	b.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x148>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048b2:	6869      	ldr	r1, [r5, #4]
 80048b4:	23c0      	movs	r3, #192	; 0xc0
 80048b6:	000a      	movs	r2, r1
 80048b8:	029b      	lsls	r3, r3, #10
 80048ba:	401a      	ands	r2, r3
 80048bc:	429a      	cmp	r2, r3
 80048be:	d107      	bne.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 80048c0:	6823      	ldr	r3, [r4, #0]
 80048c2:	484c      	ldr	r0, [pc, #304]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80048c4:	4003      	ands	r3, r0
 80048c6:	20c0      	movs	r0, #192	; 0xc0
 80048c8:	0380      	lsls	r0, r0, #14
 80048ca:	4001      	ands	r1, r0
 80048cc:	430b      	orrs	r3, r1
 80048ce:	6023      	str	r3, [r4, #0]
 80048d0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80048d2:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80048d4:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048d6:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d103      	bne.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80048de:	4a46      	ldr	r2, [pc, #280]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80048e0:	4013      	ands	r3, r2
 80048e2:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048e4:	682b      	ldr	r3, [r5, #0]
 80048e6:	07da      	lsls	r2, r3, #31
 80048e8:	d506      	bpl.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0xb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048ea:	2003      	movs	r0, #3
 80048ec:	493f      	ldr	r1, [pc, #252]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80048ee:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80048f0:	4382      	bics	r2, r0
 80048f2:	68e8      	ldr	r0, [r5, #12]
 80048f4:	4302      	orrs	r2, r0
 80048f6:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048f8:	079a      	lsls	r2, r3, #30
 80048fa:	d506      	bpl.n	800490a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048fc:	200c      	movs	r0, #12
 80048fe:	493b      	ldr	r1, [pc, #236]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004900:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004902:	4382      	bics	r2, r0
 8004904:	6928      	ldr	r0, [r5, #16]
 8004906:	4302      	orrs	r2, r0
 8004908:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800490a:	075a      	lsls	r2, r3, #29
 800490c:	d506      	bpl.n	800491c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800490e:	4937      	ldr	r1, [pc, #220]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004910:	483a      	ldr	r0, [pc, #232]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004912:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004914:	4002      	ands	r2, r0
 8004916:	6968      	ldr	r0, [r5, #20]
 8004918:	4302      	orrs	r2, r0
 800491a:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800491c:	071a      	lsls	r2, r3, #28
 800491e:	d506      	bpl.n	800492e <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004920:	4932      	ldr	r1, [pc, #200]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004922:	4837      	ldr	r0, [pc, #220]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004924:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004926:	4002      	ands	r2, r0
 8004928:	69a8      	ldr	r0, [r5, #24]
 800492a:	4302      	orrs	r2, r0
 800492c:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800492e:	05da      	lsls	r2, r3, #23
 8004930:	d506      	bpl.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0xfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004932:	492e      	ldr	r1, [pc, #184]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004934:	4833      	ldr	r0, [pc, #204]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004936:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004938:	4002      	ands	r2, r0
 800493a:	69e8      	ldr	r0, [r5, #28]
 800493c:	4302      	orrs	r2, r0
 800493e:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004940:	065a      	lsls	r2, r3, #25
 8004942:	d506      	bpl.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004944:	4929      	ldr	r1, [pc, #164]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004946:	4830      	ldr	r0, [pc, #192]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004948:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800494a:	4002      	ands	r2, r0
 800494c:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800494e:	4302      	orrs	r2, r0
 8004950:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8004952:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004954:	061b      	lsls	r3, r3, #24
 8004956:	d518      	bpl.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x146>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004958:	4a24      	ldr	r2, [pc, #144]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800495a:	492c      	ldr	r1, [pc, #176]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800495c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800495e:	400b      	ands	r3, r1
 8004960:	6a29      	ldr	r1, [r5, #32]
 8004962:	430b      	orrs	r3, r1
 8004964:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004966:	e010      	b.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x146>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004968:	6833      	ldr	r3, [r6, #0]
 800496a:	433b      	orrs	r3, r7
 800496c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800496e:	f7fe f88d 	bl	8002a8c <HAL_GetTick>
 8004972:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004974:	6833      	ldr	r3, [r6, #0]
 8004976:	423b      	tst	r3, r7
 8004978:	d000      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x138>
 800497a:	e77d      	b.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x34>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800497c:	f7fe f886 	bl	8002a8c <HAL_GetTick>
 8004980:	9b01      	ldr	r3, [sp, #4]
 8004982:	1ac0      	subs	r0, r0, r3
 8004984:	2864      	cmp	r0, #100	; 0x64
 8004986:	d9f5      	bls.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x130>
          return HAL_TIMEOUT;
 8004988:	2003      	movs	r0, #3
}
 800498a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800498c:	6829      	ldr	r1, [r5, #0]
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800498e:	4013      	ands	r3, r2
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004990:	4298      	cmp	r0, r3
 8004992:	d001      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x154>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004994:	068b      	lsls	r3, r1, #26
 8004996:	d409      	bmi.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x168>
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8004998:	23c0      	movs	r3, #192	; 0xc0
 800499a:	68aa      	ldr	r2, [r5, #8]
 800499c:	029b      	lsls	r3, r3, #10
 800499e:	4013      	ands	r3, r2
 80049a0:	4283      	cmp	r3, r0
 80049a2:	d100      	bne.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x162>
 80049a4:	e785      	b.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80049a6:	050b      	lsls	r3, r1, #20
 80049a8:	d400      	bmi.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x168>
 80049aa:	e782      	b.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      __HAL_RCC_BACKUPRESET_FORCE();
 80049ac:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80049ae:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 80049b0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80049b2:	0312      	lsls	r2, r2, #12
 80049b4:	4302      	orrs	r2, r0
 80049b6:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80049b8:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80049ba:	4b12      	ldr	r3, [pc, #72]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 80049bc:	4814      	ldr	r0, [pc, #80]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80049be:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 80049c0:	4002      	ands	r2, r0
 80049c2:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 80049c4:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80049c6:	05cb      	lsls	r3, r1, #23
 80049c8:	d400      	bmi.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x188>
 80049ca:	e772      	b.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        tickstart = HAL_GetTick();
 80049cc:	f7fe f85e 	bl	8002a8c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80049d0:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 80049d2:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80049d4:	00bf      	lsls	r7, r7, #2
 80049d6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80049d8:	423b      	tst	r3, r7
 80049da:	d000      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x19a>
 80049dc:	e769      	b.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049de:	f7fe f855 	bl	8002a8c <HAL_GetTick>
 80049e2:	4b0c      	ldr	r3, [pc, #48]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049e4:	1b80      	subs	r0, r0, r6
 80049e6:	4298      	cmp	r0, r3
 80049e8:	d9f5      	bls.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80049ea:	e7cd      	b.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x144>
 80049ec:	40021000 	.word	0x40021000
 80049f0:	40007000 	.word	0x40007000
 80049f4:	ffcfffff 	.word	0xffcfffff
 80049f8:	efffffff 	.word	0xefffffff
 80049fc:	fffff3ff 	.word	0xfffff3ff
 8004a00:	ffffcfff 	.word	0xffffcfff
 8004a04:	fffcffff 	.word	0xfffcffff
 8004a08:	fbffffff 	.word	0xfbffffff
 8004a0c:	fff3ffff 	.word	0xfff3ffff
 8004a10:	fff7ffff 	.word	0xfff7ffff
 8004a14:	00001388 	.word	0x00001388

08004a18 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8004a18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a1a:	2702      	movs	r7, #2

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004a1c:	1c45      	adds	r5, r0, #1
 8004a1e:	7feb      	ldrb	r3, [r5, #31]
{
 8004a20:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 8004a22:	0038      	movs	r0, r7
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d027      	beq.n	8004a78 <HAL_RTC_DeactivateAlarm+0x60>
 8004a28:	2301      	movs	r3, #1

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a2a:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a2c:	19e6      	adds	r6, r4, r7
  __HAL_LOCK(hrtc);
 8004a2e:	77eb      	strb	r3, [r5, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a30:	77f7      	strb	r7, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a32:	6823      	ldr	r3, [r4, #0]
 8004a34:	625a      	str	r2, [r3, #36]	; 0x24
 8004a36:	3a77      	subs	r2, #119	; 0x77
 8004a38:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8004a3a:	32ad      	adds	r2, #173	; 0xad
 8004a3c:	4291      	cmp	r1, r2
 8004a3e:	d12a      	bne.n	8004a96 <HAL_RTC_DeactivateAlarm+0x7e>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004a40:	689a      	ldr	r2, [r3, #8]
 8004a42:	4922      	ldr	r1, [pc, #136]	; (8004acc <HAL_RTC_DeactivateAlarm+0xb4>)
    tickstart = HAL_GetTick();

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004a44:	27fa      	movs	r7, #250	; 0xfa
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004a46:	400a      	ands	r2, r1
 8004a48:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8004a4a:	689a      	ldr	r2, [r3, #8]
 8004a4c:	4920      	ldr	r1, [pc, #128]	; (8004ad0 <HAL_RTC_DeactivateAlarm+0xb8>)
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004a4e:	00bf      	lsls	r7, r7, #2
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8004a50:	400a      	ands	r2, r1
 8004a52:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8004a54:	f7fe f81a 	bl	8002a8c <HAL_GetTick>
 8004a58:	9000      	str	r0, [sp, #0]
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	6823      	ldr	r3, [r4, #0]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	401a      	ands	r2, r3
 8004a62:	9201      	str	r2, [sp, #4]
 8004a64:	2201      	movs	r2, #1
 8004a66:	4213      	tst	r3, r2
 8004a68:	d007      	beq.n	8004a7a <HAL_RTC_DeactivateAlarm+0x62>
        return HAL_TIMEOUT;
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a6a:	22ff      	movs	r2, #255	; 0xff
 8004a6c:	6823      	ldr	r3, [r4, #0]

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004a6e:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a70:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8004a72:	2301      	movs	r3, #1
 8004a74:	77f3      	strb	r3, [r6, #31]
  __HAL_UNLOCK(hrtc);
 8004a76:	77e8      	strb	r0, [r5, #31]

  return HAL_OK;
}
 8004a78:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004a7a:	f7fe f807 	bl	8002a8c <HAL_GetTick>
 8004a7e:	9b00      	ldr	r3, [sp, #0]
 8004a80:	1ac0      	subs	r0, r0, r3
 8004a82:	42b8      	cmp	r0, r7
 8004a84:	d9e9      	bls.n	8004a5a <HAL_RTC_DeactivateAlarm+0x42>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a86:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004a88:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a8a:	6823      	ldr	r3, [r4, #0]
 8004a8c:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004a8e:	77f0      	strb	r0, [r6, #31]
        __HAL_UNLOCK(hrtc);
 8004a90:	9b01      	ldr	r3, [sp, #4]
 8004a92:	77eb      	strb	r3, [r5, #31]
        return HAL_TIMEOUT;
 8004a94:	e7f0      	b.n	8004a78 <HAL_RTC_DeactivateAlarm+0x60>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004a96:	689a      	ldr	r2, [r3, #8]
 8004a98:	490e      	ldr	r1, [pc, #56]	; (8004ad4 <HAL_RTC_DeactivateAlarm+0xbc>)
 8004a9a:	400a      	ands	r2, r1
 8004a9c:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8004a9e:	689a      	ldr	r2, [r3, #8]
 8004aa0:	490d      	ldr	r1, [pc, #52]	; (8004ad8 <HAL_RTC_DeactivateAlarm+0xc0>)
 8004aa2:	400a      	ands	r2, r1
 8004aa4:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8004aa6:	f7fd fff1 	bl	8002a8c <HAL_GetTick>
 8004aaa:	9000      	str	r0, [sp, #0]
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004aac:	6823      	ldr	r3, [r4, #0]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	001a      	movs	r2, r3
 8004ab2:	403a      	ands	r2, r7
 8004ab4:	9201      	str	r2, [sp, #4]
 8004ab6:	423b      	tst	r3, r7
 8004ab8:	d1d7      	bne.n	8004a6a <HAL_RTC_DeactivateAlarm+0x52>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004aba:	f7fd ffe7 	bl	8002a8c <HAL_GetTick>
 8004abe:	9b00      	ldr	r3, [sp, #0]
 8004ac0:	1ac0      	subs	r0, r0, r3
 8004ac2:	23fa      	movs	r3, #250	; 0xfa
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	4298      	cmp	r0, r3
 8004ac8:	d9f0      	bls.n	8004aac <HAL_RTC_DeactivateAlarm+0x94>
 8004aca:	e7dc      	b.n	8004a86 <HAL_RTC_DeactivateAlarm+0x6e>
 8004acc:	fffffeff 	.word	0xfffffeff
 8004ad0:	ffffefff 	.word	0xffffefff
 8004ad4:	fffffdff 	.word	0xfffffdff
 8004ad8:	ffffdfff 	.word	0xffffdfff

08004adc <HAL_RTC_AlarmIRQHandler>:
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004adc:	6803      	ldr	r3, [r0, #0]
{
 8004ade:	b510      	push	{r4, lr}
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004ae0:	689a      	ldr	r2, [r3, #8]
{
 8004ae2:	0004      	movs	r4, r0
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004ae4:	04d2      	lsls	r2, r2, #19
 8004ae6:	d50a      	bpl.n	8004afe <HAL_RTC_AlarmIRQHandler+0x22>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	05db      	lsls	r3, r3, #23
 8004aec:	d507      	bpl.n	8004afe <HAL_RTC_AlarmIRQHandler+0x22>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004aee:	f7fd fe24 	bl	800273a <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004af2:	6821      	ldr	r1, [r4, #0]
 8004af4:	4b0e      	ldr	r3, [pc, #56]	; (8004b30 <HAL_RTC_AlarmIRQHandler+0x54>)
 8004af6:	68ca      	ldr	r2, [r1, #12]
 8004af8:	b2d2      	uxtb	r2, r2
 8004afa:	4313      	orrs	r3, r2
 8004afc:	60cb      	str	r3, [r1, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8004afe:	6823      	ldr	r3, [r4, #0]
 8004b00:	689a      	ldr	r2, [r3, #8]
 8004b02:	0492      	lsls	r2, r2, #18
 8004b04:	d50b      	bpl.n	8004b1e <HAL_RTC_AlarmIRQHandler+0x42>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	059b      	lsls	r3, r3, #22
 8004b0a:	d508      	bpl.n	8004b1e <HAL_RTC_AlarmIRQHandler+0x42>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004b0c:	0020      	movs	r0, r4
 8004b0e:	f000 faf5 	bl	80050fc <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004b12:	6821      	ldr	r1, [r4, #0]
 8004b14:	4b07      	ldr	r3, [pc, #28]	; (8004b34 <HAL_RTC_AlarmIRQHandler+0x58>)
 8004b16:	68ca      	ldr	r2, [r1, #12]
 8004b18:	b2d2      	uxtb	r2, r2
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	60cb      	str	r3, [r1, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004b1e:	2280      	movs	r2, #128	; 0x80
 8004b20:	4b05      	ldr	r3, [pc, #20]	; (8004b38 <HAL_RTC_AlarmIRQHandler+0x5c>)
 8004b22:	0292      	lsls	r2, r2, #10
 8004b24:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004b26:	2301      	movs	r3, #1
 8004b28:	3402      	adds	r4, #2
 8004b2a:	77e3      	strb	r3, [r4, #31]
}
 8004b2c:	bd10      	pop	{r4, pc}
 8004b2e:	46c0      	nop			; (mov r8, r8)
 8004b30:	fffffe7f 	.word	0xfffffe7f
 8004b34:	fffffd7f 	.word	0xfffffd7f
 8004b38:	40010400 	.word	0x40010400

08004b3c <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004b3c:	21a0      	movs	r1, #160	; 0xa0
 8004b3e:	6802      	ldr	r2, [r0, #0]
{
 8004b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004b42:	68d3      	ldr	r3, [r2, #12]
{
 8004b44:	0004      	movs	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004b46:	438b      	bics	r3, r1
 8004b48:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8004b4a:	f7fd ff9f 	bl	8002a8c <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004b4e:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 8004b50:	0005      	movs	r5, r0
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004b52:	2620      	movs	r6, #32
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004b54:	00bf      	lsls	r7, r7, #2
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004b56:	6823      	ldr	r3, [r4, #0]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	4233      	tst	r3, r6
 8004b5c:	d001      	beq.n	8004b62 <HAL_RTC_WaitForSynchro+0x26>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8004b5e:	2000      	movs	r0, #0
}
 8004b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004b62:	f7fd ff93 	bl	8002a8c <HAL_GetTick>
 8004b66:	1b40      	subs	r0, r0, r5
 8004b68:	42b8      	cmp	r0, r7
 8004b6a:	d9f4      	bls.n	8004b56 <HAL_RTC_WaitForSynchro+0x1a>
      return HAL_TIMEOUT;
 8004b6c:	2003      	movs	r0, #3
 8004b6e:	e7f7      	b.n	8004b60 <HAL_RTC_WaitForSynchro+0x24>

08004b70 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004b72:	2640      	movs	r6, #64	; 0x40
 8004b74:	6803      	ldr	r3, [r0, #0]
{
 8004b76:	0004      	movs	r4, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004b78:	68da      	ldr	r2, [r3, #12]
 8004b7a:	4232      	tst	r2, r6
 8004b7c:	d001      	beq.n	8004b82 <RTC_EnterInitMode+0x12>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8004b7e:	2000      	movs	r0, #0
}
 8004b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004b82:	2201      	movs	r2, #1
 8004b84:	4252      	negs	r2, r2
 8004b86:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8004b88:	f7fd ff80 	bl	8002a8c <HAL_GetTick>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004b8c:	27fa      	movs	r7, #250	; 0xfa
    tickstart = HAL_GetTick();
 8004b8e:	0005      	movs	r5, r0
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004b90:	00bf      	lsls	r7, r7, #2
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004b92:	6823      	ldr	r3, [r4, #0]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	4233      	tst	r3, r6
 8004b98:	d1f1      	bne.n	8004b7e <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004b9a:	f7fd ff77 	bl	8002a8c <HAL_GetTick>
 8004b9e:	1b40      	subs	r0, r0, r5
 8004ba0:	42b8      	cmp	r0, r7
 8004ba2:	d9f6      	bls.n	8004b92 <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 8004ba4:	2003      	movs	r0, #3
 8004ba6:	e7eb      	b.n	8004b80 <RTC_EnterInitMode+0x10>

08004ba8 <HAL_RTC_Init>:
{
 8004ba8:	b570      	push	{r4, r5, r6, lr}
 8004baa:	0004      	movs	r4, r0
    return HAL_ERROR;
 8004bac:	2501      	movs	r5, #1
  if (hrtc == NULL)
 8004bae:	2800      	cmp	r0, #0
 8004bb0:	d01a      	beq.n	8004be8 <HAL_RTC_Init+0x40>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004bb2:	1c86      	adds	r6, r0, #2
 8004bb4:	7ff3      	ldrb	r3, [r6, #31]
 8004bb6:	b2da      	uxtb	r2, r3
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d103      	bne.n	8004bc4 <HAL_RTC_Init+0x1c>
    hrtc->Lock = HAL_UNLOCKED;
 8004bbc:	1943      	adds	r3, r0, r5
 8004bbe:	77da      	strb	r2, [r3, #31]
    HAL_RTC_MspInit(hrtc);
 8004bc0:	f7fd fbd0 	bl	8002364 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004bc4:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004bc6:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004bc8:	77f3      	strb	r3, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004bca:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004bcc:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004bce:	625a      	str	r2, [r3, #36]	; 0x24
 8004bd0:	3a77      	subs	r2, #119	; 0x77
 8004bd2:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004bd4:	f7ff ffcc 	bl	8004b70 <RTC_EnterInitMode>
 8004bd8:	6823      	ldr	r3, [r4, #0]
 8004bda:	1e05      	subs	r5, r0, #0
 8004bdc:	d006      	beq.n	8004bec <HAL_RTC_Init+0x44>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bde:	22ff      	movs	r2, #255	; 0xff
 8004be0:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004be2:	2304      	movs	r3, #4
 8004be4:	77f3      	strb	r3, [r6, #31]
        return HAL_ERROR;
 8004be6:	2501      	movs	r5, #1
}
 8004be8:	0028      	movs	r0, r5
 8004bea:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004bec:	689a      	ldr	r2, [r3, #8]
 8004bee:	491b      	ldr	r1, [pc, #108]	; (8004c5c <HAL_RTC_Init+0xb4>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004bf0:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004bf2:	400a      	ands	r2, r1
 8004bf4:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004bf6:	6862      	ldr	r2, [r4, #4]
 8004bf8:	6899      	ldr	r1, [r3, #8]
 8004bfa:	4302      	orrs	r2, r0
 8004bfc:	69a0      	ldr	r0, [r4, #24]
 8004bfe:	4302      	orrs	r2, r0
 8004c00:	430a      	orrs	r2, r1
 8004c02:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004c04:	68e2      	ldr	r2, [r4, #12]
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004c06:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004c08:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004c0a:	68a2      	ldr	r2, [r4, #8]
 8004c0c:	6919      	ldr	r1, [r3, #16]
 8004c0e:	0412      	lsls	r2, r2, #16
 8004c10:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004c12:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004c14:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004c16:	68da      	ldr	r2, [r3, #12]
 8004c18:	438a      	bics	r2, r1
 8004c1a:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004c1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c1e:	397d      	subs	r1, #125	; 0x7d
 8004c20:	438a      	bics	r2, r1
 8004c22:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004c24:	69e2      	ldr	r2, [r4, #28]
 8004c26:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004c28:	4302      	orrs	r2, r0
 8004c2a:	430a      	orrs	r2, r1
 8004c2c:	64da      	str	r2, [r3, #76]	; 0x4c
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	069b      	lsls	r3, r3, #26
 8004c32:	d40c      	bmi.n	8004c4e <HAL_RTC_Init+0xa6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004c34:	0020      	movs	r0, r4
 8004c36:	f7ff ff81 	bl	8004b3c <HAL_RTC_WaitForSynchro>
 8004c3a:	2800      	cmp	r0, #0
 8004c3c:	d007      	beq.n	8004c4e <HAL_RTC_Init+0xa6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c3e:	22ff      	movs	r2, #255	; 0xff
 8004c40:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(hrtc);
 8004c42:	3401      	adds	r4, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c44:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004c46:	2304      	movs	r3, #4
 8004c48:	77f3      	strb	r3, [r6, #31]
        __HAL_UNLOCK(hrtc);
 8004c4a:	77e5      	strb	r5, [r4, #31]
 8004c4c:	e7cb      	b.n	8004be6 <HAL_RTC_Init+0x3e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c4e:	22ff      	movs	r2, #255	; 0xff
 8004c50:	6823      	ldr	r3, [r4, #0]
 8004c52:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8004c54:	2301      	movs	r3, #1
 8004c56:	77f3      	strb	r3, [r6, #31]
    return HAL_OK;
 8004c58:	e7c6      	b.n	8004be8 <HAL_RTC_Init+0x40>
 8004c5a:	46c0      	nop			; (mov r8, r8)
 8004c5c:	ff8fffbf 	.word	0xff8fffbf

08004c60 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8004c60:	2300      	movs	r3, #0
  uint8_t Param = Value;

  while (Param >= 10U)
 8004c62:	2809      	cmp	r0, #9
 8004c64:	d803      	bhi.n	8004c6e <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Param -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8004c66:	011b      	lsls	r3, r3, #4
 8004c68:	4318      	orrs	r0, r3
 8004c6a:	b2c0      	uxtb	r0, r0
}
 8004c6c:	4770      	bx	lr
    Param -= 10U;
 8004c6e:	380a      	subs	r0, #10
    bcdhigh++;
 8004c70:	3301      	adds	r3, #1
    Param -= 10U;
 8004c72:	b2c0      	uxtb	r0, r0
 8004c74:	e7f5      	b.n	8004c62 <RTC_ByteToBcd2+0x2>
	...

08004c78 <HAL_RTC_SetTime>:
{
 8004c78:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8004c7a:	1c43      	adds	r3, r0, #1
{
 8004c7c:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 8004c7e:	9301      	str	r3, [sp, #4]
{
 8004c80:	000c      	movs	r4, r1
  __HAL_LOCK(hrtc);
 8004c82:	7fd9      	ldrb	r1, [r3, #31]
 8004c84:	2302      	movs	r3, #2
{
 8004c86:	0005      	movs	r5, r0
  __HAL_LOCK(hrtc);
 8004c88:	001f      	movs	r7, r3
 8004c8a:	2901      	cmp	r1, #1
 8004c8c:	d036      	beq.n	8004cfc <HAL_RTC_SetTime+0x84>
 8004c8e:	2101      	movs	r1, #1
 8004c90:	1840      	adds	r0, r0, r1
 8004c92:	77c1      	strb	r1, [r0, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c94:	18e9      	adds	r1, r5, r3
 8004c96:	77cb      	strb	r3, [r1, #31]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004c98:	682f      	ldr	r7, [r5, #0]
 8004c9a:	7820      	ldrb	r0, [r4, #0]
 8004c9c:	7866      	ldrb	r6, [r4, #1]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c9e:	9102      	str	r1, [sp, #8]
 8004ca0:	333e      	adds	r3, #62	; 0x3e
  if (Format == RTC_FORMAT_BIN)
 8004ca2:	2a00      	cmp	r2, #0
 8004ca4:	d12d      	bne.n	8004d02 <HAL_RTC_SetTime+0x8a>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004ca6:	68ba      	ldr	r2, [r7, #8]
 8004ca8:	0011      	movs	r1, r2
 8004caa:	4019      	ands	r1, r3
 8004cac:	421a      	tst	r2, r3
 8004cae:	d100      	bne.n	8004cb2 <HAL_RTC_SetTime+0x3a>
      sTime->TimeFormat = 0x00U;
 8004cb0:	70e1      	strb	r1, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004cb2:	f7ff ffd5 	bl	8004c60 <RTC_ByteToBcd2>
 8004cb6:	9003      	str	r0, [sp, #12]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004cb8:	0030      	movs	r0, r6
 8004cba:	f7ff ffd1 	bl	8004c60 <RTC_ByteToBcd2>
 8004cbe:	0006      	movs	r6, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004cc0:	78a0      	ldrb	r0, [r4, #2]
 8004cc2:	f7ff ffcd 	bl	8004c60 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004cc6:	78e3      	ldrb	r3, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004cc8:	9a03      	ldr	r2, [sp, #12]
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004cca:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004ccc:	4303      	orrs	r3, r0
 8004cce:	0412      	lsls	r2, r2, #16
 8004cd0:	4313      	orrs	r3, r2
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004cd2:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004cd4:	431e      	orrs	r6, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004cd6:	23ca      	movs	r3, #202	; 0xca
 8004cd8:	627b      	str	r3, [r7, #36]	; 0x24
 8004cda:	3b77      	subs	r3, #119	; 0x77
 8004cdc:	627b      	str	r3, [r7, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004cde:	0028      	movs	r0, r5
 8004ce0:	f7ff ff46 	bl	8004b70 <RTC_EnterInitMode>
 8004ce4:	682b      	ldr	r3, [r5, #0]
 8004ce6:	1e07      	subs	r7, r0, #0
 8004ce8:	d019      	beq.n	8004d1e <HAL_RTC_SetTime+0xa6>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004cea:	22ff      	movs	r2, #255	; 0xff
 8004cec:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004cee:	2304      	movs	r3, #4
 8004cf0:	9a02      	ldr	r2, [sp, #8]
 8004cf2:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	9a01      	ldr	r2, [sp, #4]
 8004cf8:	77d3      	strb	r3, [r2, #31]
        return HAL_ERROR;
 8004cfa:	2701      	movs	r7, #1
}
 8004cfc:	0038      	movs	r0, r7
 8004cfe:	b005      	add	sp, #20
 8004d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004d02:	68ba      	ldr	r2, [r7, #8]
 8004d04:	0011      	movs	r1, r2
 8004d06:	4019      	ands	r1, r3
 8004d08:	421a      	tst	r2, r3
 8004d0a:	d100      	bne.n	8004d0e <HAL_RTC_SetTime+0x96>
      sTime->TimeFormat = 0x00U;
 8004d0c:	70e1      	strb	r1, [r4, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004d0e:	0400      	lsls	r0, r0, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004d10:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004d12:	4306      	orrs	r6, r0
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004d14:	78e3      	ldrb	r3, [r4, #3]
              ((uint32_t)sTime->Seconds) | \
 8004d16:	78a0      	ldrb	r0, [r4, #2]
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004d18:	041b      	lsls	r3, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004d1a:	4306      	orrs	r6, r0
 8004d1c:	e7da      	b.n	8004cd4 <HAL_RTC_SetTime+0x5c>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004d1e:	4816      	ldr	r0, [pc, #88]	; (8004d78 <HAL_RTC_SetTime+0x100>)
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004d20:	4916      	ldr	r1, [pc, #88]	; (8004d7c <HAL_RTC_SetTime+0x104>)
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004d22:	4006      	ands	r6, r0
 8004d24:	601e      	str	r6, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004d26:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004d28:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004d2a:	400a      	ands	r2, r1
 8004d2c:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004d2e:	68e2      	ldr	r2, [r4, #12]
 8004d30:	6899      	ldr	r1, [r3, #8]
 8004d32:	4302      	orrs	r2, r0
 8004d34:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004d36:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004d38:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004d3a:	68da      	ldr	r2, [r3, #12]
 8004d3c:	438a      	bics	r2, r1
 8004d3e:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	069b      	lsls	r3, r3, #26
 8004d44:	d40d      	bmi.n	8004d62 <HAL_RTC_SetTime+0xea>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004d46:	0028      	movs	r0, r5
 8004d48:	f7ff fef8 	bl	8004b3c <HAL_RTC_WaitForSynchro>
 8004d4c:	2800      	cmp	r0, #0
 8004d4e:	d008      	beq.n	8004d62 <HAL_RTC_SetTime+0xea>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d50:	22ff      	movs	r2, #255	; 0xff
 8004d52:	682b      	ldr	r3, [r5, #0]
 8004d54:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004d56:	2304      	movs	r3, #4
 8004d58:	9a02      	ldr	r2, [sp, #8]
 8004d5a:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 8004d5c:	9b01      	ldr	r3, [sp, #4]
 8004d5e:	77df      	strb	r7, [r3, #31]
 8004d60:	e7cb      	b.n	8004cfa <HAL_RTC_SetTime+0x82>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d62:	22ff      	movs	r2, #255	; 0xff
 8004d64:	682b      	ldr	r3, [r5, #0]
 8004d66:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	9a02      	ldr	r2, [sp, #8]
 8004d6c:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8004d6e:	2300      	movs	r3, #0
 8004d70:	9a01      	ldr	r2, [sp, #4]
 8004d72:	77d3      	strb	r3, [r2, #31]
    return HAL_OK;
 8004d74:	e7c2      	b.n	8004cfc <HAL_RTC_SetTime+0x84>
 8004d76:	46c0      	nop			; (mov r8, r8)
 8004d78:	007f7f7f 	.word	0x007f7f7f
 8004d7c:	fffbffff 	.word	0xfffbffff

08004d80 <HAL_RTC_SetDate>:
  __HAL_LOCK(hrtc);
 8004d80:	2302      	movs	r3, #2
{
 8004d82:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8004d84:	1c47      	adds	r7, r0, #1
{
 8004d86:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 8004d88:	7ff9      	ldrb	r1, [r7, #31]
{
 8004d8a:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 8004d8c:	001d      	movs	r5, r3
{
 8004d8e:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 8004d90:	2901      	cmp	r1, #1
 8004d92:	d036      	beq.n	8004e02 <HAL_RTC_SetDate+0x82>
 8004d94:	2101      	movs	r1, #1
 8004d96:	77f9      	strb	r1, [r7, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d98:	18c1      	adds	r1, r0, r3
 8004d9a:	77cb      	strb	r3, [r1, #31]
 8004d9c:	9101      	str	r1, [sp, #4]
                  ((uint32_t)sDate->WeekDay << 13U));
 8004d9e:	7831      	ldrb	r1, [r6, #0]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004da0:	78f0      	ldrb	r0, [r6, #3]
                  ((uint32_t)sDate->WeekDay << 13U));
 8004da2:	0349      	lsls	r1, r1, #13
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004da4:	7873      	ldrb	r3, [r6, #1]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004da6:	78b5      	ldrb	r5, [r6, #2]
                  ((uint32_t)sDate->WeekDay << 13U));
 8004da8:	9102      	str	r1, [sp, #8]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004daa:	2a00      	cmp	r2, #0
 8004dac:	d14c      	bne.n	8004e48 <HAL_RTC_SetDate+0xc8>
 8004dae:	3210      	adds	r2, #16
 8004db0:	4213      	tst	r3, r2
 8004db2:	d002      	beq.n	8004dba <HAL_RTC_SetDate+0x3a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004db4:	4393      	bics	r3, r2
 8004db6:	330a      	adds	r3, #10
 8004db8:	7073      	strb	r3, [r6, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004dba:	f7ff ff51 	bl	8004c60 <RTC_ByteToBcd2>
 8004dbe:	9003      	str	r0, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004dc0:	7870      	ldrb	r0, [r6, #1]
 8004dc2:	f7ff ff4d 	bl	8004c60 <RTC_ByteToBcd2>
 8004dc6:	0006      	movs	r6, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004dc8:	0028      	movs	r0, r5
 8004dca:	f7ff ff49 	bl	8004c60 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004dce:	9b03      	ldr	r3, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004dd0:	0236      	lsls	r6, r6, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004dd2:	041d      	lsls	r5, r3, #16
 8004dd4:	9b02      	ldr	r3, [sp, #8]
 8004dd6:	4318      	orrs	r0, r3
 8004dd8:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004dda:	22ca      	movs	r2, #202	; 0xca
 8004ddc:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004dde:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004de0:	625a      	str	r2, [r3, #36]	; 0x24
 8004de2:	3a77      	subs	r2, #119	; 0x77
 8004de4:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004de6:	f7ff fec3 	bl	8004b70 <RTC_EnterInitMode>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004dea:	432e      	orrs	r6, r5
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004dec:	6823      	ldr	r3, [r4, #0]
 8004dee:	1e05      	subs	r5, r0, #0
 8004df0:	d00a      	beq.n	8004e08 <HAL_RTC_SetDate+0x88>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004df2:	22ff      	movs	r2, #255	; 0xff
 8004df4:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004df6:	2304      	movs	r3, #4
 8004df8:	9a01      	ldr	r2, [sp, #4]
 8004dfa:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	77fb      	strb	r3, [r7, #31]
        return HAL_ERROR;
 8004e00:	2501      	movs	r5, #1
}
 8004e02:	0028      	movs	r0, r5
 8004e04:	b005      	add	sp, #20
 8004e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004e08:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004e0a:	4812      	ldr	r0, [pc, #72]	; (8004e54 <HAL_RTC_SetDate+0xd4>)
 8004e0c:	4006      	ands	r6, r0
 8004e0e:	605e      	str	r6, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004e10:	68da      	ldr	r2, [r3, #12]
 8004e12:	438a      	bics	r2, r1
 8004e14:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	069b      	lsls	r3, r3, #26
 8004e1a:	d40c      	bmi.n	8004e36 <HAL_RTC_SetDate+0xb6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004e1c:	0020      	movs	r0, r4
 8004e1e:	f7ff fe8d 	bl	8004b3c <HAL_RTC_WaitForSynchro>
 8004e22:	2800      	cmp	r0, #0
 8004e24:	d007      	beq.n	8004e36 <HAL_RTC_SetDate+0xb6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e26:	22ff      	movs	r2, #255	; 0xff
 8004e28:	6823      	ldr	r3, [r4, #0]
 8004e2a:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004e2c:	2304      	movs	r3, #4
 8004e2e:	9a01      	ldr	r2, [sp, #4]
 8004e30:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 8004e32:	77fd      	strb	r5, [r7, #31]
 8004e34:	e7e4      	b.n	8004e00 <HAL_RTC_SetDate+0x80>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e36:	22ff      	movs	r2, #255	; 0xff
 8004e38:	6823      	ldr	r3, [r4, #0]
 8004e3a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	9a01      	ldr	r2, [sp, #4]
 8004e40:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8004e42:	2300      	movs	r3, #0
 8004e44:	77fb      	strb	r3, [r7, #31]
    return HAL_OK;
 8004e46:	e7dc      	b.n	8004e02 <HAL_RTC_SetDate+0x82>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004e48:	9a02      	ldr	r2, [sp, #8]
 8004e4a:	0406      	lsls	r6, r0, #16
 8004e4c:	4316      	orrs	r6, r2
 8004e4e:	4335      	orrs	r5, r6
                  (((uint32_t)sDate->Month) << 8U) | \
 8004e50:	021e      	lsls	r6, r3, #8
 8004e52:	e7c2      	b.n	8004dda <HAL_RTC_SetDate+0x5a>
 8004e54:	00ffff3f 	.word	0x00ffff3f

08004e58 <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 8004e58:	2302      	movs	r3, #2
{
 8004e5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e5c:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 8004e5e:	1c41      	adds	r1, r0, #1
 8004e60:	7fce      	ldrb	r6, [r1, #31]
{
 8004e62:	0004      	movs	r4, r0
 8004e64:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 8004e66:	0018      	movs	r0, r3
 8004e68:	2e01      	cmp	r6, #1
 8004e6a:	d100      	bne.n	8004e6e <HAL_RTC_SetAlarm_IT+0x16>
 8004e6c:	e095      	b.n	8004f9a <HAL_RTC_SetAlarm_IT+0x142>
 8004e6e:	3801      	subs	r0, #1
 8004e70:	77c8      	strb	r0, [r1, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004e72:	18e1      	adds	r1, r4, r3
 8004e74:	77cb      	strb	r3, [r1, #31]
  if (Format == RTC_FORMAT_BIN)
 8004e76:	7869      	ldrb	r1, [r5, #1]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004e78:	6826      	ldr	r6, [r4, #0]
 8004e7a:	9101      	str	r1, [sp, #4]
 8004e7c:	7828      	ldrb	r0, [r5, #0]
 8004e7e:	78af      	ldrb	r7, [r5, #2]
 8004e80:	333e      	adds	r3, #62	; 0x3e
  if (Format == RTC_FORMAT_BIN)
 8004e82:	2a00      	cmp	r2, #0
 8004e84:	d165      	bne.n	8004f52 <HAL_RTC_SetAlarm_IT+0xfa>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004e86:	68b2      	ldr	r2, [r6, #8]
 8004e88:	0011      	movs	r1, r2
 8004e8a:	4019      	ands	r1, r3
 8004e8c:	421a      	tst	r2, r3
 8004e8e:	d100      	bne.n	8004e92 <HAL_RTC_SetAlarm_IT+0x3a>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004e90:	70e9      	strb	r1, [r5, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004e92:	f7ff fee5 	bl	8004c60 <RTC_ByteToBcd2>
 8004e96:	9002      	str	r0, [sp, #8]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004e98:	9801      	ldr	r0, [sp, #4]
 8004e9a:	f7ff fee1 	bl	8004c60 <RTC_ByteToBcd2>
 8004e9e:	9001      	str	r0, [sp, #4]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8004ea0:	0038      	movs	r0, r7
 8004ea2:	f7ff fedd 	bl	8004c60 <RTC_ByteToBcd2>
 8004ea6:	0007      	movs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004ea8:	1c6b      	adds	r3, r5, #1
 8004eaa:	7fd8      	ldrb	r0, [r3, #31]
 8004eac:	f7ff fed8 	bl	8004c60 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004eb0:	696a      	ldr	r2, [r5, #20]
 8004eb2:	69eb      	ldr	r3, [r5, #28]
 8004eb4:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004eb6:	78ea      	ldrb	r2, [r5, #3]
 8004eb8:	0412      	lsls	r2, r2, #16
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	431f      	orrs	r7, r3
 8004ebe:	9b02      	ldr	r3, [sp, #8]
 8004ec0:	041b      	lsls	r3, r3, #16
 8004ec2:	431f      	orrs	r7, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004ec4:	9b01      	ldr	r3, [sp, #4]
 8004ec6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004ec8:	431f      	orrs	r7, r3
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004eca:	69aa      	ldr	r2, [r5, #24]
 8004ecc:	686b      	ldr	r3, [r5, #4]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004ece:	0600      	lsls	r0, r0, #24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	9301      	str	r3, [sp, #4]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ed4:	23ca      	movs	r3, #202	; 0xca
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004ed6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ed8:	6273      	str	r3, [r6, #36]	; 0x24
 8004eda:	3b77      	subs	r3, #119	; 0x77
 8004edc:	6273      	str	r3, [r6, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004ede:	33ad      	adds	r3, #173	; 0xad
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004ee0:	4307      	orrs	r7, r0
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d15b      	bne.n	8004f9e <HAL_RTC_SetAlarm_IT+0x146>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004ee6:	68b3      	ldr	r3, [r6, #8]
 8004ee8:	4a41      	ldr	r2, [pc, #260]	; (8004ff0 <HAL_RTC_SetAlarm_IT+0x198>)
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004eea:	2501      	movs	r5, #1
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004eec:	4013      	ands	r3, r2
 8004eee:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004ef0:	68f2      	ldr	r2, [r6, #12]
 8004ef2:	4b40      	ldr	r3, [pc, #256]	; (8004ff4 <HAL_RTC_SetAlarm_IT+0x19c>)
 8004ef4:	b2d2      	uxtb	r2, r2
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8004efa:	f7fd fdc7 	bl	8002a8c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004efe:	26fa      	movs	r6, #250	; 0xfa
    tickstart = HAL_GetTick();
 8004f00:	9002      	str	r0, [sp, #8]
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004f02:	00b6      	lsls	r6, r6, #2
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004f04:	6823      	ldr	r3, [r4, #0]
 8004f06:	68da      	ldr	r2, [r3, #12]
 8004f08:	0011      	movs	r1, r2
 8004f0a:	4029      	ands	r1, r5
 8004f0c:	9103      	str	r1, [sp, #12]
 8004f0e:	422a      	tst	r2, r5
 8004f10:	d034      	beq.n	8004f7c <HAL_RTC_SetAlarm_IT+0x124>
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004f12:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004f14:	61df      	str	r7, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004f16:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004f18:	2280      	movs	r2, #128	; 0x80
 8004f1a:	6899      	ldr	r1, [r3, #8]
 8004f1c:	0052      	lsls	r2, r2, #1
 8004f1e:	430a      	orrs	r2, r1
 8004f20:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8004f22:	2280      	movs	r2, #128	; 0x80
 8004f24:	6899      	ldr	r1, [r3, #8]
 8004f26:	0152      	lsls	r2, r2, #5
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004f28:	430a      	orrs	r2, r1
 8004f2a:	609a      	str	r2, [r3, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004f2c:	2280      	movs	r2, #128	; 0x80
 8004f2e:	4b32      	ldr	r3, [pc, #200]	; (8004ff8 <HAL_RTC_SetAlarm_IT+0x1a0>)
 8004f30:	0292      	lsls	r2, r2, #10
 8004f32:	6819      	ldr	r1, [r3, #0]
  __HAL_UNLOCK(hrtc);
 8004f34:	2000      	movs	r0, #0
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004f36:	4311      	orrs	r1, r2
 8004f38:	6019      	str	r1, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8004f3a:	6899      	ldr	r1, [r3, #8]
 8004f3c:	430a      	orrs	r2, r1
 8004f3e:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f40:	22ff      	movs	r2, #255	; 0xff
 8004f42:	6823      	ldr	r3, [r4, #0]
 8004f44:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8004f46:	3afe      	subs	r2, #254	; 0xfe
 8004f48:	1ca3      	adds	r3, r4, #2
  __HAL_UNLOCK(hrtc);
 8004f4a:	18a4      	adds	r4, r4, r2
  hrtc->State = HAL_RTC_STATE_READY;
 8004f4c:	77da      	strb	r2, [r3, #31]
  __HAL_UNLOCK(hrtc);
 8004f4e:	77e0      	strb	r0, [r4, #31]
  return HAL_OK;
 8004f50:	e023      	b.n	8004f9a <HAL_RTC_SetAlarm_IT+0x142>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004f52:	68b2      	ldr	r2, [r6, #8]
 8004f54:	0011      	movs	r1, r2
 8004f56:	4019      	ands	r1, r3
 8004f58:	421a      	tst	r2, r3
 8004f5a:	d100      	bne.n	8004f5e <HAL_RTC_SetAlarm_IT+0x106>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004f5c:	70e9      	strb	r1, [r5, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004f5e:	69eb      	ldr	r3, [r5, #28]
 8004f60:	696a      	ldr	r2, [r5, #20]
 8004f62:	0400      	lsls	r0, r0, #16
 8004f64:	4313      	orrs	r3, r2
 8004f66:	431f      	orrs	r7, r3
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004f68:	9b01      	ldr	r3, [sp, #4]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004f6a:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004f6c:	0218      	lsls	r0, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004f6e:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004f70:	78e8      	ldrb	r0, [r5, #3]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004f72:	1c6b      	adds	r3, r5, #1
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004f74:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004f76:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004f78:	7fd8      	ldrb	r0, [r3, #31]
 8004f7a:	e7a6      	b.n	8004eca <HAL_RTC_SetAlarm_IT+0x72>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004f7c:	f7fd fd86 	bl	8002a8c <HAL_GetTick>
 8004f80:	9b02      	ldr	r3, [sp, #8]
 8004f82:	1ac0      	subs	r0, r0, r3
 8004f84:	42b0      	cmp	r0, r6
 8004f86:	d9bd      	bls.n	8004f04 <HAL_RTC_SetAlarm_IT+0xac>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f88:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004f8a:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f8c:	6823      	ldr	r3, [r4, #0]
 8004f8e:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004f90:	1ca3      	adds	r3, r4, #2
 8004f92:	77d8      	strb	r0, [r3, #31]
        __HAL_UNLOCK(hrtc);
 8004f94:	9b03      	ldr	r3, [sp, #12]
 8004f96:	3401      	adds	r4, #1
 8004f98:	77e3      	strb	r3, [r4, #31]
}
 8004f9a:	b005      	add	sp, #20
 8004f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004f9e:	68b3      	ldr	r3, [r6, #8]
 8004fa0:	4a16      	ldr	r2, [pc, #88]	; (8004ffc <HAL_RTC_SetAlarm_IT+0x1a4>)
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004fa2:	2502      	movs	r5, #2
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004fa8:	68f2      	ldr	r2, [r6, #12]
 8004faa:	4b15      	ldr	r3, [pc, #84]	; (8005000 <HAL_RTC_SetAlarm_IT+0x1a8>)
 8004fac:	b2d2      	uxtb	r2, r2
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8004fb2:	f7fd fd6b 	bl	8002a8c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004fb6:	26fa      	movs	r6, #250	; 0xfa
    tickstart = HAL_GetTick();
 8004fb8:	9002      	str	r0, [sp, #8]
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004fba:	00b6      	lsls	r6, r6, #2
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004fbc:	6823      	ldr	r3, [r4, #0]
 8004fbe:	68da      	ldr	r2, [r3, #12]
 8004fc0:	0011      	movs	r1, r2
 8004fc2:	4029      	ands	r1, r5
 8004fc4:	9103      	str	r1, [sp, #12]
 8004fc6:	422a      	tst	r2, r5
 8004fc8:	d00b      	beq.n	8004fe2 <HAL_RTC_SetAlarm_IT+0x18a>
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004fca:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004fcc:	621f      	str	r7, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004fce:	649a      	str	r2, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004fd0:	2280      	movs	r2, #128	; 0x80
 8004fd2:	6899      	ldr	r1, [r3, #8]
 8004fd4:	0092      	lsls	r2, r2, #2
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004fda:	2280      	movs	r2, #128	; 0x80
 8004fdc:	6899      	ldr	r1, [r3, #8]
 8004fde:	0192      	lsls	r2, r2, #6
 8004fe0:	e7a2      	b.n	8004f28 <HAL_RTC_SetAlarm_IT+0xd0>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004fe2:	f7fd fd53 	bl	8002a8c <HAL_GetTick>
 8004fe6:	9b02      	ldr	r3, [sp, #8]
 8004fe8:	1ac0      	subs	r0, r0, r3
 8004fea:	42b0      	cmp	r0, r6
 8004fec:	d9e6      	bls.n	8004fbc <HAL_RTC_SetAlarm_IT+0x164>
 8004fee:	e7cb      	b.n	8004f88 <HAL_RTC_SetAlarm_IT+0x130>
 8004ff0:	fffffeff 	.word	0xfffffeff
 8004ff4:	fffffe7f 	.word	0xfffffe7f
 8004ff8:	40010400 	.word	0x40010400
 8004ffc:	fffffdff 	.word	0xfffffdff
 8005000:	fffffd7f 	.word	0xfffffd7f

08005004 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8005004:	0902      	lsrs	r2, r0, #4
{
 8005006:	0003      	movs	r3, r0
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8005008:	200a      	movs	r0, #10
 800500a:	4350      	muls	r0, r2
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800500c:	220f      	movs	r2, #15
 800500e:	4013      	ands	r3, r2
 8005010:	18c0      	adds	r0, r0, r3
 8005012:	b2c0      	uxtb	r0, r0
}
 8005014:	4770      	bx	lr
	...

08005018 <HAL_RTC_GetTime>:
{
 8005018:	b570      	push	{r4, r5, r6, lr}
 800501a:	000c      	movs	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800501c:	6801      	ldr	r1, [r0, #0]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800501e:	203f      	movs	r0, #63	; 0x3f
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005020:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8005022:	6063      	str	r3, [r4, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005024:	690b      	ldr	r3, [r1, #16]
 8005026:	045b      	lsls	r3, r3, #17
 8005028:	0c5b      	lsrs	r3, r3, #17
 800502a:	60a3      	str	r3, [r4, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800502c:	680b      	ldr	r3, [r1, #0]
 800502e:	490e      	ldr	r1, [pc, #56]	; (8005068 <HAL_RTC_GetTime+0x50>)
 8005030:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8005032:	0c19      	lsrs	r1, r3, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8005034:	0a1e      	lsrs	r6, r3, #8
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8005036:	b2dd      	uxtb	r5, r3
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8005038:	2340      	movs	r3, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800503a:	4008      	ands	r0, r1
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800503c:	b2f6      	uxtb	r6, r6
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800503e:	4019      	ands	r1, r3
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8005040:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8005042:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8005044:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8005046:	70e1      	strb	r1, [r4, #3]
  if (Format == RTC_FORMAT_BIN)
 8005048:	2a00      	cmp	r2, #0
 800504a:	d10a      	bne.n	8005062 <HAL_RTC_GetTime+0x4a>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800504c:	f7ff ffda 	bl	8005004 <RTC_Bcd2ToByte>
 8005050:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005052:	0030      	movs	r0, r6
 8005054:	f7ff ffd6 	bl	8005004 <RTC_Bcd2ToByte>
 8005058:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800505a:	0028      	movs	r0, r5
 800505c:	f7ff ffd2 	bl	8005004 <RTC_Bcd2ToByte>
 8005060:	70a0      	strb	r0, [r4, #2]
}
 8005062:	2000      	movs	r0, #0
 8005064:	bd70      	pop	{r4, r5, r6, pc}
 8005066:	46c0      	nop			; (mov r8, r8)
 8005068:	007f7f7f 	.word	0x007f7f7f

0800506c <HAL_RTC_GetDate>:
{
 800506c:	b570      	push	{r4, r5, r6, lr}
 800506e:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005070:	6803      	ldr	r3, [r0, #0]
 8005072:	490e      	ldr	r1, [pc, #56]	; (80050ac <HAL_RTC_GetDate+0x40>)
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8005078:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800507a:	04dd      	lsls	r5, r3, #19
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800507c:	b2de      	uxtb	r6, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800507e:	041b      	lsls	r3, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8005080:	0eed      	lsrs	r5, r5, #27
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8005082:	0f5b      	lsrs	r3, r3, #29
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8005084:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8005086:	7065      	strb	r5, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005088:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800508a:	7023      	strb	r3, [r4, #0]
  if (Format == RTC_FORMAT_BIN)
 800508c:	2a00      	cmp	r2, #0
 800508e:	d10a      	bne.n	80050a6 <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005090:	f7ff ffb8 	bl	8005004 <RTC_Bcd2ToByte>
 8005094:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005096:	0028      	movs	r0, r5
 8005098:	f7ff ffb4 	bl	8005004 <RTC_Bcd2ToByte>
 800509c:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800509e:	0030      	movs	r0, r6
 80050a0:	f7ff ffb0 	bl	8005004 <RTC_Bcd2ToByte>
 80050a4:	70a0      	strb	r0, [r4, #2]
}
 80050a6:	2000      	movs	r0, #0
 80050a8:	bd70      	pop	{r4, r5, r6, pc}
 80050aa:	46c0      	nop			; (mov r8, r8)
 80050ac:	00ffff3f 	.word	0x00ffff3f

080050b0 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80050b0:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4U);
 80050b2:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80050b4:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);
 80050b6:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80050b8:	600a      	str	r2, [r1, #0]
}
 80050ba:	4770      	bx	lr

080050bc <HAL_RTCEx_BKUPRead>:
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80050bc:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4U);
 80050be:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80050c0:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);
 80050c2:	18c9      	adds	r1, r1, r3

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80050c4:	6808      	ldr	r0, [r1, #0]
}
 80050c6:	4770      	bx	lr

080050c8 <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80050c8:	2202      	movs	r2, #2
{
 80050ca:	b510      	push	{r4, lr}
  __HAL_LOCK(hrtc);
 80050cc:	1c41      	adds	r1, r0, #1
 80050ce:	7fcc      	ldrb	r4, [r1, #31]
{
 80050d0:	0003      	movs	r3, r0
  __HAL_LOCK(hrtc);
 80050d2:	0010      	movs	r0, r2
 80050d4:	2c01      	cmp	r4, #1
 80050d6:	d010      	beq.n	80050fa <HAL_RTCEx_EnableBypassShadow+0x32>

  hrtc->State = HAL_RTC_STATE_BUSY;
 80050d8:	1898      	adds	r0, r3, r2
 80050da:	77c2      	strb	r2, [r0, #31]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	32c8      	adds	r2, #200	; 0xc8
 80050e0:	625a      	str	r2, [r3, #36]	; 0x24
 80050e2:	3a77      	subs	r2, #119	; 0x77
 80050e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 80050e6:	689c      	ldr	r4, [r3, #8]
 80050e8:	3a33      	subs	r2, #51	; 0x33
 80050ea:	4322      	orrs	r2, r4
 80050ec:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050ee:	22ff      	movs	r2, #255	; 0xff
 80050f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80050f2:	2301      	movs	r3, #1
 80050f4:	77c3      	strb	r3, [r0, #31]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80050f6:	2000      	movs	r0, #0
 80050f8:	77c8      	strb	r0, [r1, #31]

  return HAL_OK;
}
 80050fa:	bd10      	pop	{r4, pc}

080050fc <HAL_RTCEx_AlarmBEventCallback>:
 80050fc:	4770      	bx	lr
	...

08005100 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005102:	001f      	movs	r7, r3
 8005104:	b085      	sub	sp, #20
 8005106:	000e      	movs	r6, r1
 8005108:	9201      	str	r2, [sp, #4]
 800510a:	0004      	movs	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800510c:	f7fd fcbe 	bl	8002a8c <HAL_GetTick>
 8005110:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005112:	19dd      	adds	r5, r3, r7
 8005114:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8005116:	f7fd fcb9 	bl	8002a8c <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800511a:	4b27      	ldr	r3, [pc, #156]	; (80051b8 <SPI_WaitFlagStateUntilTimeout+0xb8>)
  tmp_tickstart = HAL_GetTick();
 800511c:	9000      	str	r0, [sp, #0]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	015b      	lsls	r3, r3, #5
 8005122:	0d1b      	lsrs	r3, r3, #20
 8005124:	436b      	muls	r3, r5

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005126:	6822      	ldr	r2, [r4, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 8005128:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800512a:	6893      	ldr	r3, [r2, #8]
 800512c:	4033      	ands	r3, r6
 800512e:	1b9b      	subs	r3, r3, r6
 8005130:	4259      	negs	r1, r3
 8005132:	414b      	adcs	r3, r1
 8005134:	9901      	ldr	r1, [sp, #4]
 8005136:	428b      	cmp	r3, r1
 8005138:	d101      	bne.n	800513e <SPI_WaitFlagStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800513a:	2000      	movs	r0, #0
 800513c:	e032      	b.n	80051a4 <SPI_WaitFlagStateUntilTimeout+0xa4>
    if (Timeout != HAL_MAX_DELAY)
 800513e:	1c7b      	adds	r3, r7, #1
 8005140:	d0f3      	beq.n	800512a <SPI_WaitFlagStateUntilTimeout+0x2a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005142:	f7fd fca3 	bl	8002a8c <HAL_GetTick>
 8005146:	9b00      	ldr	r3, [sp, #0]
 8005148:	1ac0      	subs	r0, r0, r3
 800514a:	42a8      	cmp	r0, r5
 800514c:	d32c      	bcc.n	80051a8 <SPI_WaitFlagStateUntilTimeout+0xa8>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800514e:	21e0      	movs	r1, #224	; 0xe0
 8005150:	6823      	ldr	r3, [r4, #0]
 8005152:	685a      	ldr	r2, [r3, #4]
 8005154:	438a      	bics	r2, r1
 8005156:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005158:	2282      	movs	r2, #130	; 0x82
 800515a:	6861      	ldr	r1, [r4, #4]
 800515c:	0052      	lsls	r2, r2, #1
 800515e:	4291      	cmp	r1, r2
 8005160:	d10c      	bne.n	800517c <SPI_WaitFlagStateUntilTimeout+0x7c>
 8005162:	2180      	movs	r1, #128	; 0x80
 8005164:	68a2      	ldr	r2, [r4, #8]
 8005166:	0209      	lsls	r1, r1, #8
 8005168:	428a      	cmp	r2, r1
 800516a:	d003      	beq.n	8005174 <SPI_WaitFlagStateUntilTimeout+0x74>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800516c:	2180      	movs	r1, #128	; 0x80
 800516e:	00c9      	lsls	r1, r1, #3
 8005170:	428a      	cmp	r2, r1
 8005172:	d103      	bne.n	800517c <SPI_WaitFlagStateUntilTimeout+0x7c>
          __HAL_SPI_DISABLE(hspi);
 8005174:	2140      	movs	r1, #64	; 0x40
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	438a      	bics	r2, r1
 800517a:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800517c:	2180      	movs	r1, #128	; 0x80
 800517e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005180:	0189      	lsls	r1, r1, #6
 8005182:	428a      	cmp	r2, r1
 8005184:	d106      	bne.n	8005194 <SPI_WaitFlagStateUntilTimeout+0x94>
          SPI_RESET_CRC(hspi);
 8005186:	6819      	ldr	r1, [r3, #0]
 8005188:	480c      	ldr	r0, [pc, #48]	; (80051bc <SPI_WaitFlagStateUntilTimeout+0xbc>)
 800518a:	4001      	ands	r1, r0
 800518c:	6019      	str	r1, [r3, #0]
 800518e:	6819      	ldr	r1, [r3, #0]
 8005190:	430a      	orrs	r2, r1
 8005192:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8005194:	0023      	movs	r3, r4
 8005196:	2201      	movs	r2, #1
 8005198:	3351      	adds	r3, #81	; 0x51
 800519a:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 800519c:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 800519e:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 80051a0:	3450      	adds	r4, #80	; 0x50
 80051a2:	7023      	strb	r3, [r4, #0]
}
 80051a4:	b005      	add	sp, #20
 80051a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(count == 0U)
 80051a8:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 80051aa:	1e5a      	subs	r2, r3, #1
 80051ac:	4193      	sbcs	r3, r2
 80051ae:	425b      	negs	r3, r3
 80051b0:	401d      	ands	r5, r3
      count--;
 80051b2:	9b03      	ldr	r3, [sp, #12]
 80051b4:	3b01      	subs	r3, #1
 80051b6:	e7b6      	b.n	8005126 <SPI_WaitFlagStateUntilTimeout+0x26>
 80051b8:	2000004c 	.word	0x2000004c
 80051bc:	ffffdfff 	.word	0xffffdfff

080051c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80051c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80051c2:	4b17      	ldr	r3, [pc, #92]	; (8005220 <SPI_EndRxTxTransaction+0x60>)
{
 80051c4:	0004      	movs	r4, r0
 80051c6:	000d      	movs	r5, r1
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80051c8:	6818      	ldr	r0, [r3, #0]
 80051ca:	4916      	ldr	r1, [pc, #88]	; (8005224 <SPI_EndRxTxTransaction+0x64>)
{
 80051cc:	0016      	movs	r6, r2
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80051ce:	f7fa ffcb 	bl	8000168 <__udivsi3>
 80051d2:	23fa      	movs	r3, #250	; 0xfa
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	4343      	muls	r3, r0
 80051d8:	9303      	str	r3, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051da:	2382      	movs	r3, #130	; 0x82
 80051dc:	6861      	ldr	r1, [r4, #4]
      if (count == 0U)
      {
        break;
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80051de:	2280      	movs	r2, #128	; 0x80
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051e0:	005b      	lsls	r3, r3, #1
 80051e2:	4299      	cmp	r1, r3
 80051e4:	d10f      	bne.n	8005206 <SPI_EndRxTxTransaction+0x46>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80051e6:	002b      	movs	r3, r5
 80051e8:	2200      	movs	r2, #0
 80051ea:	2180      	movs	r1, #128	; 0x80
 80051ec:	0020      	movs	r0, r4
 80051ee:	9600      	str	r6, [sp, #0]
 80051f0:	f7ff ff86 	bl	8005100 <SPI_WaitFlagStateUntilTimeout>
 80051f4:	2800      	cmp	r0, #0
 80051f6:	d010      	beq.n	800521a <SPI_EndRxTxTransaction+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051f8:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 80051fa:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051fc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80051fe:	4313      	orrs	r3, r2
 8005200:	6563      	str	r3, [r4, #84]	; 0x54
  }

  return HAL_OK;
}
 8005202:	b004      	add	sp, #16
 8005204:	bd70      	pop	{r4, r5, r6, pc}
      if (count == 0U)
 8005206:	9b03      	ldr	r3, [sp, #12]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d006      	beq.n	800521a <SPI_EndRxTxTransaction+0x5a>
      count--;
 800520c:	9b03      	ldr	r3, [sp, #12]
 800520e:	3b01      	subs	r3, #1
 8005210:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005212:	6823      	ldr	r3, [r4, #0]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	4213      	tst	r3, r2
 8005218:	d1f5      	bne.n	8005206 <SPI_EndRxTxTransaction+0x46>
  return HAL_OK;
 800521a:	2000      	movs	r0, #0
 800521c:	e7f1      	b.n	8005202 <SPI_EndRxTxTransaction+0x42>
 800521e:	46c0      	nop			; (mov r8, r8)
 8005220:	2000004c 	.word	0x2000004c
 8005224:	016e3600 	.word	0x016e3600

08005228 <HAL_SPI_MspInit>:
}
 8005228:	4770      	bx	lr
	...

0800522c <HAL_SPI_Init>:
{
 800522c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800522e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8005230:	2001      	movs	r0, #1
  if (hspi == NULL)
 8005232:	2c00      	cmp	r4, #0
 8005234:	d05b      	beq.n	80052ee <HAL_SPI_Init+0xc2>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005236:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005238:	2b00      	cmp	r3, #0
 800523a:	d159      	bne.n	80052f0 <HAL_SPI_Init+0xc4>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800523c:	2282      	movs	r2, #130	; 0x82
 800523e:	6861      	ldr	r1, [r4, #4]
 8005240:	0052      	lsls	r2, r2, #1
 8005242:	4291      	cmp	r1, r2
 8005244:	d000      	beq.n	8005248 <HAL_SPI_Init+0x1c>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005246:	61e3      	str	r3, [r4, #28]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005248:	0025      	movs	r5, r4
 800524a:	3551      	adds	r5, #81	; 0x51
 800524c:	782b      	ldrb	r3, [r5, #0]
 800524e:	b2da      	uxtb	r2, r3
 8005250:	2b00      	cmp	r3, #0
 8005252:	d105      	bne.n	8005260 <HAL_SPI_Init+0x34>
    hspi->Lock = HAL_UNLOCKED;
 8005254:	0023      	movs	r3, r4
 8005256:	3350      	adds	r3, #80	; 0x50
    HAL_SPI_MspInit(hspi);
 8005258:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800525a:	701a      	strb	r2, [r3, #0]
    HAL_SPI_MspInit(hspi);
 800525c:	f7ff ffe4 	bl	8005228 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8005260:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8005262:	2240      	movs	r2, #64	; 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 8005264:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8005266:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8005268:	469c      	mov	ip, r3
  __HAL_SPI_DISABLE(hspi);
 800526a:	680b      	ldr	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800526c:	6867      	ldr	r7, [r4, #4]
  __HAL_SPI_DISABLE(hspi);
 800526e:	4393      	bics	r3, r2
 8005270:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005272:	2382      	movs	r3, #130	; 0x82
 8005274:	005b      	lsls	r3, r3, #1
 8005276:	403b      	ands	r3, r7
 8005278:	2784      	movs	r7, #132	; 0x84
 800527a:	68a6      	ldr	r6, [r4, #8]
 800527c:	023f      	lsls	r7, r7, #8
 800527e:	4037      	ands	r7, r6
 8005280:	433b      	orrs	r3, r7
 8005282:	2780      	movs	r7, #128	; 0x80
 8005284:	68e6      	ldr	r6, [r4, #12]
 8005286:	013f      	lsls	r7, r7, #4
 8005288:	4037      	ands	r7, r6
 800528a:	433b      	orrs	r3, r7
 800528c:	4667      	mov	r7, ip
 800528e:	6926      	ldr	r6, [r4, #16]
 8005290:	69a2      	ldr	r2, [r4, #24]
 8005292:	4037      	ands	r7, r6
 8005294:	2601      	movs	r6, #1
 8005296:	433b      	orrs	r3, r7
 8005298:	6967      	ldr	r7, [r4, #20]
 800529a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800529c:	403e      	ands	r6, r7
 800529e:	4333      	orrs	r3, r6
 80052a0:	2680      	movs	r6, #128	; 0x80
 80052a2:	00b6      	lsls	r6, r6, #2
 80052a4:	4016      	ands	r6, r2
 80052a6:	4333      	orrs	r3, r6
 80052a8:	2638      	movs	r6, #56	; 0x38
 80052aa:	69e7      	ldr	r7, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80052ac:	0c12      	lsrs	r2, r2, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80052ae:	403e      	ands	r6, r7
 80052b0:	4333      	orrs	r3, r6
 80052b2:	2680      	movs	r6, #128	; 0x80
 80052b4:	6a27      	ldr	r7, [r4, #32]
 80052b6:	403e      	ands	r6, r7
 80052b8:	4333      	orrs	r3, r6
 80052ba:	2680      	movs	r6, #128	; 0x80
 80052bc:	0007      	movs	r7, r0
 80052be:	01b6      	lsls	r6, r6, #6
 80052c0:	4037      	ands	r7, r6
 80052c2:	433b      	orrs	r3, r7
 80052c4:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80052c6:	2304      	movs	r3, #4
 80052c8:	6a67      	ldr	r7, [r4, #36]	; 0x24
 80052ca:	401a      	ands	r2, r3
 80052cc:	330c      	adds	r3, #12
 80052ce:	403b      	ands	r3, r7
 80052d0:	431a      	orrs	r2, r3
 80052d2:	604a      	str	r2, [r1, #4]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052d4:	42b0      	cmp	r0, r6
 80052d6:	d102      	bne.n	80052de <HAL_SPI_Init+0xb2>
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 80052d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80052da:	b29b      	uxth	r3, r3
 80052dc:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052de:	69cb      	ldr	r3, [r1, #28]
 80052e0:	4a05      	ldr	r2, [pc, #20]	; (80052f8 <HAL_SPI_Init+0xcc>)
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052e2:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052e4:	4013      	ands	r3, r2
 80052e6:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 80052e8:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052ea:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80052ec:	702b      	strb	r3, [r5, #0]
}
 80052ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80052f0:	2300      	movs	r3, #0
 80052f2:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80052f4:	6163      	str	r3, [r4, #20]
 80052f6:	e7a7      	b.n	8005248 <HAL_SPI_Init+0x1c>
 80052f8:	fffff7ff 	.word	0xfffff7ff

080052fc <HAL_SPI_TransmitReceive>:
{
 80052fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052fe:	001f      	movs	r7, r3
  __HAL_LOCK(hspi);
 8005300:	0003      	movs	r3, r0
{
 8005302:	b087      	sub	sp, #28
 8005304:	9203      	str	r2, [sp, #12]
  __HAL_LOCK(hspi);
 8005306:	3350      	adds	r3, #80	; 0x50
 8005308:	781a      	ldrb	r2, [r3, #0]
{
 800530a:	0004      	movs	r4, r0
 800530c:	000e      	movs	r6, r1
  __HAL_LOCK(hspi);
 800530e:	2502      	movs	r5, #2
 8005310:	2a01      	cmp	r2, #1
 8005312:	d100      	bne.n	8005316 <HAL_SPI_TransmitReceive+0x1a>
 8005314:	e0a8      	b.n	8005468 <HAL_SPI_TransmitReceive+0x16c>
 8005316:	2201      	movs	r2, #1
 8005318:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800531a:	f7fd fbb7 	bl	8002a8c <HAL_GetTick>
  tmp_state           = hspi->State;
 800531e:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 8005320:	9002      	str	r0, [sp, #8]
  tmp_state           = hspi->State;
 8005322:	3351      	adds	r3, #81	; 0x51
 8005324:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8005326:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8005328:	b2da      	uxtb	r2, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800532a:	2b01      	cmp	r3, #1
 800532c:	d00b      	beq.n	8005346 <HAL_SPI_TransmitReceive+0x4a>
 800532e:	2382      	movs	r3, #130	; 0x82
 8005330:	005b      	lsls	r3, r3, #1
 8005332:	4299      	cmp	r1, r3
 8005334:	d000      	beq.n	8005338 <HAL_SPI_TransmitReceive+0x3c>
 8005336:	e090      	b.n	800545a <HAL_SPI_TransmitReceive+0x15e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005338:	68a3      	ldr	r3, [r4, #8]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d000      	beq.n	8005340 <HAL_SPI_TransmitReceive+0x44>
 800533e:	e08c      	b.n	800545a <HAL_SPI_TransmitReceive+0x15e>
 8005340:	2a04      	cmp	r2, #4
 8005342:	d000      	beq.n	8005346 <HAL_SPI_TransmitReceive+0x4a>
 8005344:	e089      	b.n	800545a <HAL_SPI_TransmitReceive+0x15e>
    errorcode = HAL_ERROR;
 8005346:	2501      	movs	r5, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005348:	2e00      	cmp	r6, #0
 800534a:	d100      	bne.n	800534e <HAL_SPI_TransmitReceive+0x52>
 800534c:	e085      	b.n	800545a <HAL_SPI_TransmitReceive+0x15e>
 800534e:	9b03      	ldr	r3, [sp, #12]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d100      	bne.n	8005356 <HAL_SPI_TransmitReceive+0x5a>
 8005354:	e081      	b.n	800545a <HAL_SPI_TransmitReceive+0x15e>
 8005356:	2f00      	cmp	r7, #0
 8005358:	d100      	bne.n	800535c <HAL_SPI_TransmitReceive+0x60>
 800535a:	e07e      	b.n	800545a <HAL_SPI_TransmitReceive+0x15e>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800535c:	0023      	movs	r3, r4
 800535e:	3351      	adds	r3, #81	; 0x51
 8005360:	781a      	ldrb	r2, [r3, #0]
 8005362:	2a04      	cmp	r2, #4
 8005364:	d001      	beq.n	800536a <HAL_SPI_TransmitReceive+0x6e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005366:	2205      	movs	r2, #5
 8005368:	701a      	strb	r2, [r3, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800536a:	2300      	movs	r3, #0
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800536c:	2080      	movs	r0, #128	; 0x80
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800536e:	9a03      	ldr	r2, [sp, #12]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005370:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005372:	63a2      	str	r2, [r4, #56]	; 0x38
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005374:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hspi->RxXferCount = Size;
 8005376:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005378:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 800537a:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxXferSize  = Size;
 800537c:	87a7      	strh	r7, [r4, #60]	; 0x3c
    SPI_RESET_CRC(hspi);
 800537e:	6823      	ldr	r3, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005380:	6326      	str	r6, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005382:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005384:	86a7      	strh	r7, [r4, #52]	; 0x34
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005386:	0180      	lsls	r0, r0, #6
 8005388:	4282      	cmp	r2, r0
 800538a:	d106      	bne.n	800539a <HAL_SPI_TransmitReceive+0x9e>
    SPI_RESET_CRC(hspi);
 800538c:	6818      	ldr	r0, [r3, #0]
 800538e:	4d84      	ldr	r5, [pc, #528]	; (80055a0 <HAL_SPI_TransmitReceive+0x2a4>)
 8005390:	4028      	ands	r0, r5
 8005392:	6018      	str	r0, [r3, #0]
 8005394:	6818      	ldr	r0, [r3, #0]
 8005396:	4302      	orrs	r2, r0
 8005398:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800539a:	2240      	movs	r2, #64	; 0x40
 800539c:	6818      	ldr	r0, [r3, #0]
 800539e:	4210      	tst	r0, r2
 80053a0:	d102      	bne.n	80053a8 <HAL_SPI_TransmitReceive+0xac>
    __HAL_SPI_ENABLE(hspi);
 80053a2:	6818      	ldr	r0, [r3, #0]
 80053a4:	4302      	orrs	r2, r0
 80053a6:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80053a8:	2280      	movs	r2, #128	; 0x80
 80053aa:	68e0      	ldr	r0, [r4, #12]
 80053ac:	0112      	lsls	r2, r2, #4
 80053ae:	4290      	cmp	r0, r2
 80053b0:	d000      	beq.n	80053b4 <HAL_SPI_TransmitReceive+0xb8>
 80053b2:	e072      	b.n	800549a <HAL_SPI_TransmitReceive+0x19e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053b4:	2900      	cmp	r1, #0
 80053b6:	d001      	beq.n	80053bc <HAL_SPI_TransmitReceive+0xc0>
 80053b8:	2f01      	cmp	r7, #1
 80053ba:	d107      	bne.n	80053cc <HAL_SPI_TransmitReceive+0xd0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053bc:	8832      	ldrh	r2, [r6, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80053be:	3602      	adds	r6, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053c0:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80053c2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80053c4:	6326      	str	r6, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80053c6:	3b01      	subs	r3, #1
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	86e3      	strh	r3, [r4, #54]	; 0x36
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80053cc:	2680      	movs	r6, #128	; 0x80
        txallowed = 1U;
 80053ce:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80053d0:	2702      	movs	r7, #2
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80053d2:	01b6      	lsls	r6, r6, #6
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053d4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d118      	bne.n	800540c <HAL_SPI_TransmitReceive+0x110>
 80053da:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d115      	bne.n	800540c <HAL_SPI_TransmitReceive+0x110>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80053e0:	2380      	movs	r3, #128	; 0x80
 80053e2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80053e4:	019b      	lsls	r3, r3, #6
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d000      	beq.n	80053ec <HAL_SPI_TransmitReceive+0xf0>
 80053ea:	e0b5      	b.n	8005558 <HAL_SPI_TransmitReceive+0x25c>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80053ec:	2201      	movs	r2, #1
 80053ee:	9b02      	ldr	r3, [sp, #8]
 80053f0:	0011      	movs	r1, r2
 80053f2:	9300      	str	r3, [sp, #0]
 80053f4:	0020      	movs	r0, r4
 80053f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80053f8:	f7ff fe82 	bl	8005100 <SPI_WaitFlagStateUntilTimeout>
 80053fc:	2800      	cmp	r0, #0
 80053fe:	d100      	bne.n	8005402 <HAL_SPI_TransmitReceive+0x106>
 8005400:	e0a8      	b.n	8005554 <HAL_SPI_TransmitReceive+0x258>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005402:	2302      	movs	r3, #2
 8005404:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005406:	4313      	orrs	r3, r2
 8005408:	6563      	str	r3, [r4, #84]	; 0x54
 800540a:	e025      	b.n	8005458 <HAL_SPI_TransmitReceive+0x15c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800540c:	6823      	ldr	r3, [r4, #0]
 800540e:	689a      	ldr	r2, [r3, #8]
 8005410:	423a      	tst	r2, r7
 8005412:	d005      	beq.n	8005420 <HAL_SPI_TransmitReceive+0x124>
 8005414:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8005416:	2a00      	cmp	r2, #0
 8005418:	d002      	beq.n	8005420 <HAL_SPI_TransmitReceive+0x124>
 800541a:	2d01      	cmp	r5, #1
 800541c:	d027      	beq.n	800546e <HAL_SPI_TransmitReceive+0x172>
{
 800541e:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005420:	6898      	ldr	r0, [r3, #8]
 8005422:	2101      	movs	r1, #1
 8005424:	0002      	movs	r2, r0
 8005426:	400a      	ands	r2, r1
 8005428:	4208      	tst	r0, r1
 800542a:	d00c      	beq.n	8005446 <HAL_SPI_TransmitReceive+0x14a>
 800542c:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 800542e:	2900      	cmp	r1, #0
 8005430:	d009      	beq.n	8005446 <HAL_SPI_TransmitReceive+0x14a>
        txallowed = 1U;
 8005432:	0015      	movs	r5, r2
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005434:	68d9      	ldr	r1, [r3, #12]
 8005436:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005438:	8019      	strh	r1, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800543a:	3302      	adds	r3, #2
 800543c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800543e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005440:	3b01      	subs	r3, #1
 8005442:	b29b      	uxth	r3, r3
 8005444:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005446:	f7fd fb21 	bl	8002a8c <HAL_GetTick>
 800544a:	9b02      	ldr	r3, [sp, #8]
 800544c:	1ac0      	subs	r0, r0, r3
 800544e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005450:	4298      	cmp	r0, r3
 8005452:	d3bf      	bcc.n	80053d4 <HAL_SPI_TransmitReceive+0xd8>
 8005454:	3301      	adds	r3, #1
 8005456:	d0bd      	beq.n	80053d4 <HAL_SPI_TransmitReceive+0xd8>
      errorcode = HAL_TIMEOUT;
 8005458:	2503      	movs	r5, #3
  hspi->State = HAL_SPI_STATE_READY;
 800545a:	0023      	movs	r3, r4
 800545c:	2201      	movs	r2, #1
 800545e:	3351      	adds	r3, #81	; 0x51
 8005460:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8005462:	2300      	movs	r3, #0
 8005464:	3450      	adds	r4, #80	; 0x50
 8005466:	7023      	strb	r3, [r4, #0]
}
 8005468:	0028      	movs	r0, r5
 800546a:	b007      	add	sp, #28
 800546c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800546e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005470:	8811      	ldrh	r1, [r2, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005472:	3202      	adds	r2, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005474:	60d9      	str	r1, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005476:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8005478:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800547a:	3a01      	subs	r2, #1
 800547c:	b292      	uxth	r2, r2
 800547e:	86e2      	strh	r2, [r4, #54]	; 0x36
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005480:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8005482:	b295      	uxth	r5, r2
 8005484:	2a00      	cmp	r2, #0
 8005486:	d1ca      	bne.n	800541e <HAL_SPI_TransmitReceive+0x122>
 8005488:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800548a:	42b2      	cmp	r2, r6
 800548c:	d1c7      	bne.n	800541e <HAL_SPI_TransmitReceive+0x122>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800548e:	2280      	movs	r2, #128	; 0x80
 8005490:	6819      	ldr	r1, [r3, #0]
 8005492:	0152      	lsls	r2, r2, #5
 8005494:	430a      	orrs	r2, r1
 8005496:	601a      	str	r2, [r3, #0]
 8005498:	e7c2      	b.n	8005420 <HAL_SPI_TransmitReceive+0x124>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800549a:	2900      	cmp	r1, #0
 800549c:	d001      	beq.n	80054a2 <HAL_SPI_TransmitReceive+0x1a6>
 800549e:	2f01      	cmp	r7, #1
 80054a0:	d108      	bne.n	80054b4 <HAL_SPI_TransmitReceive+0x1b8>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80054a2:	7832      	ldrb	r2, [r6, #0]
 80054a4:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80054a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80054a8:	3301      	adds	r3, #1
 80054aa:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80054ac:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80054ae:	3b01      	subs	r3, #1
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	86e3      	strh	r3, [r4, #54]	; 0x36
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80054b4:	2680      	movs	r6, #128	; 0x80
        txallowed = 1U;
 80054b6:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80054b8:	2702      	movs	r7, #2
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80054ba:	01b6      	lsls	r6, r6, #6
 80054bc:	e027      	b.n	800550e <HAL_SPI_TransmitReceive+0x212>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80054be:	6823      	ldr	r3, [r4, #0]
 80054c0:	689a      	ldr	r2, [r3, #8]
 80054c2:	423a      	tst	r2, r7
 80054c4:	d005      	beq.n	80054d2 <HAL_SPI_TransmitReceive+0x1d6>
 80054c6:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80054c8:	2a00      	cmp	r2, #0
 80054ca:	d002      	beq.n	80054d2 <HAL_SPI_TransmitReceive+0x1d6>
 80054cc:	2d01      	cmp	r5, #1
 80054ce:	d025      	beq.n	800551c <HAL_SPI_TransmitReceive+0x220>
        txallowed = 1U;
 80054d0:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80054d2:	6823      	ldr	r3, [r4, #0]
 80054d4:	2101      	movs	r1, #1
 80054d6:	6898      	ldr	r0, [r3, #8]
 80054d8:	0002      	movs	r2, r0
 80054da:	400a      	ands	r2, r1
 80054dc:	4208      	tst	r0, r1
 80054de:	d00d      	beq.n	80054fc <HAL_SPI_TransmitReceive+0x200>
 80054e0:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 80054e2:	2900      	cmp	r1, #0
 80054e4:	d00a      	beq.n	80054fc <HAL_SPI_TransmitReceive+0x200>
        txallowed = 1U;
 80054e6:	0015      	movs	r5, r2
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80054ec:	700b      	strb	r3, [r1, #0]
        hspi->pRxBuffPtr++;
 80054ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80054f0:	3301      	adds	r3, #1
 80054f2:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80054f4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80054f6:	3b01      	subs	r3, #1
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80054fc:	f7fd fac6 	bl	8002a8c <HAL_GetTick>
 8005500:	9b02      	ldr	r3, [sp, #8]
 8005502:	1ac0      	subs	r0, r0, r3
 8005504:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005506:	4298      	cmp	r0, r3
 8005508:	d320      	bcc.n	800554c <HAL_SPI_TransmitReceive+0x250>
 800550a:	3301      	adds	r3, #1
 800550c:	d1a4      	bne.n	8005458 <HAL_SPI_TransmitReceive+0x15c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800550e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005510:	2b00      	cmp	r3, #0
 8005512:	d1d4      	bne.n	80054be <HAL_SPI_TransmitReceive+0x1c2>
 8005514:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005516:	2b00      	cmp	r3, #0
 8005518:	d1d1      	bne.n	80054be <HAL_SPI_TransmitReceive+0x1c2>
 800551a:	e761      	b.n	80053e0 <HAL_SPI_TransmitReceive+0xe4>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800551c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800551e:	7812      	ldrb	r2, [r2, #0]
 8005520:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8005522:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005524:	3301      	adds	r3, #1
 8005526:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8005528:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800552a:	3b01      	subs	r3, #1
 800552c:	b29b      	uxth	r3, r3
 800552e:	86e3      	strh	r3, [r4, #54]	; 0x36
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005530:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005532:	b29d      	uxth	r5, r3
 8005534:	2b00      	cmp	r3, #0
 8005536:	d1cb      	bne.n	80054d0 <HAL_SPI_TransmitReceive+0x1d4>
 8005538:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800553a:	42b3      	cmp	r3, r6
 800553c:	d1c8      	bne.n	80054d0 <HAL_SPI_TransmitReceive+0x1d4>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800553e:	2380      	movs	r3, #128	; 0x80
 8005540:	6822      	ldr	r2, [r4, #0]
 8005542:	015b      	lsls	r3, r3, #5
 8005544:	6811      	ldr	r1, [r2, #0]
 8005546:	430b      	orrs	r3, r1
 8005548:	6013      	str	r3, [r2, #0]
 800554a:	e7c2      	b.n	80054d2 <HAL_SPI_TransmitReceive+0x1d6>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800554c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800554e:	2b00      	cmp	r3, #0
 8005550:	d1dd      	bne.n	800550e <HAL_SPI_TransmitReceive+0x212>
 8005552:	e781      	b.n	8005458 <HAL_SPI_TransmitReceive+0x15c>
    READ_REG(hspi->Instance->DR);
 8005554:	6823      	ldr	r3, [r4, #0]
 8005556:	68db      	ldr	r3, [r3, #12]
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8005558:	6822      	ldr	r2, [r4, #0]
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800555a:	2500      	movs	r5, #0
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 800555c:	6893      	ldr	r3, [r2, #8]
 800555e:	06db      	lsls	r3, r3, #27
 8005560:	d506      	bpl.n	8005570 <HAL_SPI_TransmitReceive+0x274>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005562:	2302      	movs	r3, #2
 8005564:	6d61      	ldr	r1, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8005566:	3501      	adds	r5, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005568:	430b      	orrs	r3, r1
 800556a:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800556c:	4b0d      	ldr	r3, [pc, #52]	; (80055a4 <HAL_SPI_TransmitReceive+0x2a8>)
 800556e:	6093      	str	r3, [r2, #8]
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005570:	0020      	movs	r0, r4
 8005572:	9a02      	ldr	r2, [sp, #8]
 8005574:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005576:	f7ff fe23 	bl	80051c0 <SPI_EndRxTxTransaction>
 800557a:	2800      	cmp	r0, #0
 800557c:	d003      	beq.n	8005586 <HAL_SPI_TransmitReceive+0x28a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800557e:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 8005580:	2501      	movs	r5, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005582:	6563      	str	r3, [r4, #84]	; 0x54
    goto error;
 8005584:	e769      	b.n	800545a <HAL_SPI_TransmitReceive+0x15e>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005586:	68a3      	ldr	r3, [r4, #8]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d000      	beq.n	800558e <HAL_SPI_TransmitReceive+0x292>
 800558c:	e765      	b.n	800545a <HAL_SPI_TransmitReceive+0x15e>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800558e:	9305      	str	r3, [sp, #20]
 8005590:	6823      	ldr	r3, [r4, #0]
 8005592:	68da      	ldr	r2, [r3, #12]
 8005594:	9205      	str	r2, [sp, #20]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	9305      	str	r3, [sp, #20]
 800559a:	9b05      	ldr	r3, [sp, #20]
 800559c:	e75d      	b.n	800545a <HAL_SPI_TransmitReceive+0x15e>
 800559e:	46c0      	nop			; (mov r8, r8)
 80055a0:	ffffdfff 	.word	0xffffdfff
 80055a4:	0000ffef 	.word	0x0000ffef

080055a8 <HAL_SPI_GetState>:
  return hspi->State;
 80055a8:	3051      	adds	r0, #81	; 0x51
 80055aa:	7800      	ldrb	r0, [r0, #0]
 80055ac:	b2c0      	uxtb	r0, r0
}
 80055ae:	4770      	bx	lr

080055b0 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055b0:	6803      	ldr	r3, [r0, #0]
 80055b2:	490b      	ldr	r1, [pc, #44]	; (80055e0 <UART_EndRxTransfer+0x30>)
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	400a      	ands	r2, r1
 80055b8:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ba:	689a      	ldr	r2, [r3, #8]
 80055bc:	3123      	adds	r1, #35	; 0x23
 80055be:	31ff      	adds	r1, #255	; 0xff
 80055c0:	438a      	bics	r2, r1
 80055c2:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055c4:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80055c6:	428a      	cmp	r2, r1
 80055c8:	d103      	bne.n	80055d2 <UART_EndRxTransfer+0x22>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	310f      	adds	r1, #15
 80055ce:	438a      	bics	r2, r1
 80055d0:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055d2:	2320      	movs	r3, #32
 80055d4:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055d6:	2300      	movs	r3, #0
 80055d8:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80055da:	6643      	str	r3, [r0, #100]	; 0x64
}
 80055dc:	4770      	bx	lr
 80055de:	46c0      	nop			; (mov r8, r8)
 80055e0:	fffffedf 	.word	0xfffffedf

080055e4 <HAL_UART_Transmit_DMA>:
{
 80055e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055e6:	0013      	movs	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80055e8:	6f82      	ldr	r2, [r0, #120]	; 0x78
{
 80055ea:	0004      	movs	r4, r0
    return HAL_BUSY;
 80055ec:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 80055ee:	2a20      	cmp	r2, #32
 80055f0:	d13a      	bne.n	8005668 <HAL_UART_Transmit_DMA+0x84>
      return HAL_ERROR;
 80055f2:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 80055f4:	2900      	cmp	r1, #0
 80055f6:	d037      	beq.n	8005668 <HAL_UART_Transmit_DMA+0x84>
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d035      	beq.n	8005668 <HAL_UART_Transmit_DMA+0x84>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055fc:	2280      	movs	r2, #128	; 0x80
 80055fe:	68a0      	ldr	r0, [r4, #8]
 8005600:	0152      	lsls	r2, r2, #5
 8005602:	4290      	cmp	r0, r2
 8005604:	d106      	bne.n	8005614 <HAL_UART_Transmit_DMA+0x30>
 8005606:	6922      	ldr	r2, [r4, #16]
 8005608:	2a00      	cmp	r2, #0
 800560a:	d103      	bne.n	8005614 <HAL_UART_Transmit_DMA+0x30>
      if ((((uint32_t)pData) & 1U) != 0U)
 800560c:	3201      	adds	r2, #1
      return HAL_ERROR;
 800560e:	0010      	movs	r0, r2
      if ((((uint32_t)pData) & 1U) != 0U)
 8005610:	4211      	tst	r1, r2
 8005612:	d129      	bne.n	8005668 <HAL_UART_Transmit_DMA+0x84>
    __HAL_LOCK(huart);
 8005614:	0025      	movs	r5, r4
 8005616:	3574      	adds	r5, #116	; 0x74
 8005618:	782a      	ldrb	r2, [r5, #0]
    return HAL_BUSY;
 800561a:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 800561c:	2a01      	cmp	r2, #1
 800561e:	d023      	beq.n	8005668 <HAL_UART_Transmit_DMA+0x84>
 8005620:	2201      	movs	r2, #1
 8005622:	702a      	strb	r2, [r5, #0]
    huart->TxXferSize  = Size;
 8005624:	0022      	movs	r2, r4
 8005626:	3250      	adds	r2, #80	; 0x50
    huart->pTxBuffPtr  = pData;
 8005628:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800562a:	2600      	movs	r6, #0
    huart->TxXferSize  = Size;
 800562c:	8013      	strh	r3, [r2, #0]
    huart->TxXferCount = Size;
 800562e:	8053      	strh	r3, [r2, #2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005630:	2221      	movs	r2, #33	; 0x21
    if (huart->hdmatx != NULL)
 8005632:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005634:	1d27      	adds	r7, r4, #4
 8005636:	67fe      	str	r6, [r7, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005638:	67a2      	str	r2, [r4, #120]	; 0x78
    if (huart->hdmatx != NULL)
 800563a:	42b0      	cmp	r0, r6
 800563c:	d015      	beq.n	800566a <HAL_UART_Transmit_DMA+0x86>
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800563e:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferAbortCallback = NULL;
 8005640:	6386      	str	r6, [r0, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005642:	9201      	str	r2, [sp, #4]
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005644:	4a0e      	ldr	r2, [pc, #56]	; (8005680 <HAL_UART_Transmit_DMA+0x9c>)
 8005646:	62c2      	str	r2, [r0, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005648:	4a0e      	ldr	r2, [pc, #56]	; (8005684 <HAL_UART_Transmit_DMA+0xa0>)
 800564a:	6302      	str	r2, [r0, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800564c:	4a0e      	ldr	r2, [pc, #56]	; (8005688 <HAL_UART_Transmit_DMA+0xa4>)
 800564e:	6342      	str	r2, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005650:	9a01      	ldr	r2, [sp, #4]
 8005652:	3228      	adds	r2, #40	; 0x28
 8005654:	f7fe fa58 	bl	8003b08 <HAL_DMA_Start_IT>
 8005658:	42b0      	cmp	r0, r6
 800565a:	d006      	beq.n	800566a <HAL_UART_Transmit_DMA+0x86>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800565c:	2310      	movs	r3, #16
        return HAL_ERROR;
 800565e:	2001      	movs	r0, #1
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005660:	67fb      	str	r3, [r7, #124]	; 0x7c
        huart->gState = HAL_UART_STATE_READY;
 8005662:	18db      	adds	r3, r3, r3
        __HAL_UNLOCK(huart);
 8005664:	702e      	strb	r6, [r5, #0]
        huart->gState = HAL_UART_STATE_READY;
 8005666:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8005668:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800566a:	2240      	movs	r2, #64	; 0x40
    __HAL_UNLOCK(huart);
 800566c:	2000      	movs	r0, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800566e:	6823      	ldr	r3, [r4, #0]
    __HAL_UNLOCK(huart);
 8005670:	3474      	adds	r4, #116	; 0x74
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005672:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 8005674:	7020      	strb	r0, [r4, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005676:	6899      	ldr	r1, [r3, #8]
 8005678:	1892      	adds	r2, r2, r2
 800567a:	430a      	orrs	r2, r1
 800567c:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 800567e:	e7f3      	b.n	8005668 <HAL_UART_Transmit_DMA+0x84>
 8005680:	0800568d 	.word	0x0800568d
 8005684:	080056c3 	.word	0x080056c3
 8005688:	080056cf 	.word	0x080056cf

0800568c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800568c:	0003      	movs	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800568e:	681b      	ldr	r3, [r3, #0]
{
 8005690:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	2320      	movs	r3, #32
 8005696:	0011      	movs	r1, r2
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005698:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800569a:	4019      	ands	r1, r3
 800569c:	421a      	tst	r2, r3
 800569e:	d10c      	bne.n	80056ba <UART_DMATransmitCplt+0x2e>
  {
    huart->TxXferCount = 0U;
 80056a0:	0003      	movs	r3, r0
 80056a2:	3352      	adds	r3, #82	; 0x52
 80056a4:	8019      	strh	r1, [r3, #0]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80056a6:	2180      	movs	r1, #128	; 0x80
 80056a8:	6803      	ldr	r3, [r0, #0]
 80056aa:	689a      	ldr	r2, [r3, #8]
 80056ac:	438a      	bics	r2, r1
 80056ae:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80056b0:	2240      	movs	r2, #64	; 0x40
 80056b2:	6819      	ldr	r1, [r3, #0]
 80056b4:	430a      	orrs	r2, r1
 80056b6:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80056b8:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 80056ba:	f7fd fb33 	bl	8002d24 <HAL_UART_TxCpltCallback>
}
 80056be:	e7fb      	b.n	80056b8 <UART_DMATransmitCplt+0x2c>

080056c0 <HAL_UART_TxHalfCpltCallback>:
 80056c0:	4770      	bx	lr

080056c2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80056c2:	b510      	push	{r4, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80056c4:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80056c6:	f7ff fffb 	bl	80056c0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056ca:	bd10      	pop	{r4, pc}

080056cc <HAL_UART_ErrorCallback>:
 80056cc:	4770      	bx	lr

080056ce <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80056ce:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80056d0:	6a84      	ldr	r4, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80056d2:	6823      	ldr	r3, [r4, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80056d4:	6fa2      	ldr	r2, [r4, #120]	; 0x78
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80056d6:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80056d8:	6898      	ldr	r0, [r3, #8]
 80056da:	0600      	lsls	r0, r0, #24
 80056dc:	d50b      	bpl.n	80056f6 <UART_DMAError+0x28>
 80056de:	2a21      	cmp	r2, #33	; 0x21
 80056e0:	d109      	bne.n	80056f6 <UART_DMAError+0x28>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80056e2:	0022      	movs	r2, r4
 80056e4:	2000      	movs	r0, #0
 80056e6:	3252      	adds	r2, #82	; 0x52
 80056e8:	8010      	strh	r0, [r2, #0]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	30c0      	adds	r0, #192	; 0xc0
 80056ee:	4382      	bics	r2, r0
 80056f0:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80056f2:	2220      	movs	r2, #32
 80056f4:	67a2      	str	r2, [r4, #120]	; 0x78
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	065b      	lsls	r3, r3, #25
 80056fa:	d508      	bpl.n	800570e <UART_DMAError+0x40>
 80056fc:	2922      	cmp	r1, #34	; 0x22
 80056fe:	d106      	bne.n	800570e <UART_DMAError+0x40>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005700:	0023      	movs	r3, r4
 8005702:	2200      	movs	r2, #0
 8005704:	335a      	adds	r3, #90	; 0x5a
    UART_EndRxTransfer(huart);
 8005706:	0020      	movs	r0, r4
    huart->RxXferCount = 0U;
 8005708:	801a      	strh	r2, [r3, #0]
    UART_EndRxTransfer(huart);
 800570a:	f7ff ff51 	bl	80055b0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800570e:	2310      	movs	r3, #16
 8005710:	1d22      	adds	r2, r4, #4
 8005712:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005714:	0020      	movs	r0, r4
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005716:	430b      	orrs	r3, r1
 8005718:	67d3      	str	r3, [r2, #124]	; 0x7c
  HAL_UART_ErrorCallback(huart);
 800571a:	f7ff ffd7 	bl	80056cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800571e:	bd10      	pop	{r4, pc}

08005720 <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005720:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8005722:	2300      	movs	r3, #0
 8005724:	0002      	movs	r2, r0
{
 8005726:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8005728:	325a      	adds	r2, #90	; 0x5a
 800572a:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 800572c:	3a08      	subs	r2, #8
 800572e:	8013      	strh	r3, [r2, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005730:	f7ff ffcc 	bl	80056cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005734:	bd10      	pop	{r4, pc}

08005736 <HAL_UARTEx_RxEventCallback>:
}
 8005736:	4770      	bx	lr

08005738 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005738:	6803      	ldr	r3, [r0, #0]
{
 800573a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800573c:	69d9      	ldr	r1, [r3, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800573e:	4a85      	ldr	r2, [pc, #532]	; (8005954 <HAL_UART_IRQHandler+0x21c>)
{
 8005740:	0004      	movs	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005742:	6818      	ldr	r0, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005744:	689e      	ldr	r6, [r3, #8]
  if (errorflags == 0U)
 8005746:	4211      	tst	r1, r2
 8005748:	d10b      	bne.n	8005762 <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800574a:	2220      	movs	r2, #32
 800574c:	4211      	tst	r1, r2
 800574e:	d100      	bne.n	8005752 <HAL_UART_IRQHandler+0x1a>
 8005750:	e076      	b.n	8005840 <HAL_UART_IRQHandler+0x108>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005752:	4210      	tst	r0, r2
 8005754:	d100      	bne.n	8005758 <HAL_UART_IRQHandler+0x20>
 8005756:	e073      	b.n	8005840 <HAL_UART_IRQHandler+0x108>
      if (huart->RxISR != NULL)
 8005758:	6e63      	ldr	r3, [r4, #100]	; 0x64
      huart->TxISR(huart);
 800575a:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 800575c:	2b00      	cmp	r3, #0
 800575e:	d165      	bne.n	800582c <HAL_UART_IRQHandler+0xf4>
 8005760:	e065      	b.n	800582e <HAL_UART_IRQHandler+0xf6>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005762:	2201      	movs	r2, #1
 8005764:	0037      	movs	r7, r6
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005766:	4d7c      	ldr	r5, [pc, #496]	; (8005958 <HAL_UART_IRQHandler+0x220>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005768:	4017      	ands	r7, r2
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800576a:	4005      	ands	r5, r0
 800576c:	433d      	orrs	r5, r7
 800576e:	d067      	beq.n	8005840 <HAL_UART_IRQHandler+0x108>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005770:	1d25      	adds	r5, r4, #4
 8005772:	4211      	tst	r1, r2
 8005774:	d005      	beq.n	8005782 <HAL_UART_IRQHandler+0x4a>
 8005776:	05c6      	lsls	r6, r0, #23
 8005778:	d503      	bpl.n	8005782 <HAL_UART_IRQHandler+0x4a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800577a:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800577c:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 800577e:	4332      	orrs	r2, r6
 8005780:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005782:	2202      	movs	r2, #2
 8005784:	4211      	tst	r1, r2
 8005786:	d006      	beq.n	8005796 <HAL_UART_IRQHandler+0x5e>
 8005788:	2f00      	cmp	r7, #0
 800578a:	d004      	beq.n	8005796 <HAL_UART_IRQHandler+0x5e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800578c:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800578e:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 8005790:	1892      	adds	r2, r2, r2
 8005792:	4332      	orrs	r2, r6
 8005794:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005796:	2204      	movs	r2, #4
 8005798:	4211      	tst	r1, r2
 800579a:	d006      	beq.n	80057aa <HAL_UART_IRQHandler+0x72>
 800579c:	2f00      	cmp	r7, #0
 800579e:	d004      	beq.n	80057aa <HAL_UART_IRQHandler+0x72>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80057a0:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80057a2:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 80057a4:	3a02      	subs	r2, #2
 80057a6:	4332      	orrs	r2, r6
 80057a8:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 80057aa:	2208      	movs	r2, #8
 80057ac:	4211      	tst	r1, r2
 80057ae:	d007      	beq.n	80057c0 <HAL_UART_IRQHandler+0x88>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80057b0:	2620      	movs	r6, #32
 80057b2:	4006      	ands	r6, r0
 80057b4:	433e      	orrs	r6, r7
 80057b6:	d003      	beq.n	80057c0 <HAL_UART_IRQHandler+0x88>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80057b8:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80057ba:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 80057bc:	4332      	orrs	r2, r6
 80057be:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80057c0:	2280      	movs	r2, #128	; 0x80
 80057c2:	0112      	lsls	r2, r2, #4
 80057c4:	4211      	tst	r1, r2
 80057c6:	d006      	beq.n	80057d6 <HAL_UART_IRQHandler+0x9e>
 80057c8:	0146      	lsls	r6, r0, #5
 80057ca:	d504      	bpl.n	80057d6 <HAL_UART_IRQHandler+0x9e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057cc:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80057ce:	2320      	movs	r3, #32
 80057d0:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 80057d2:	4313      	orrs	r3, r2
 80057d4:	67eb      	str	r3, [r5, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80057d6:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d028      	beq.n	800582e <HAL_UART_IRQHandler+0xf6>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80057dc:	2320      	movs	r3, #32
 80057de:	4219      	tst	r1, r3
 80057e0:	d006      	beq.n	80057f0 <HAL_UART_IRQHandler+0xb8>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80057e2:	4218      	tst	r0, r3
 80057e4:	d004      	beq.n	80057f0 <HAL_UART_IRQHandler+0xb8>
        if (huart->RxISR != NULL)
 80057e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d001      	beq.n	80057f0 <HAL_UART_IRQHandler+0xb8>
          huart->RxISR(huart);
 80057ec:	0020      	movs	r0, r4
 80057ee:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80057f0:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 80057f2:	6feb      	ldr	r3, [r5, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80057f4:	2740      	movs	r7, #64	; 0x40
 80057f6:	6896      	ldr	r6, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80057f8:	2228      	movs	r2, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80057fa:	403e      	ands	r6, r7
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80057fc:	4013      	ands	r3, r2
        UART_EndRxTransfer(huart);
 80057fe:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005800:	431e      	orrs	r6, r3
 8005802:	d019      	beq.n	8005838 <HAL_UART_IRQHandler+0x100>
        UART_EndRxTransfer(huart);
 8005804:	f7ff fed4 	bl	80055b0 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005808:	6823      	ldr	r3, [r4, #0]
 800580a:	689a      	ldr	r2, [r3, #8]
 800580c:	423a      	tst	r2, r7
 800580e:	d00f      	beq.n	8005830 <HAL_UART_IRQHandler+0xf8>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005810:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8005812:	6f20      	ldr	r0, [r4, #112]	; 0x70
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005814:	43ba      	bics	r2, r7
 8005816:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8005818:	2800      	cmp	r0, #0
 800581a:	d009      	beq.n	8005830 <HAL_UART_IRQHandler+0xf8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800581c:	4b4f      	ldr	r3, [pc, #316]	; (800595c <HAL_UART_IRQHandler+0x224>)
 800581e:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005820:	f7fe f9d2 	bl	8003bc8 <HAL_DMA_Abort_IT>
 8005824:	2800      	cmp	r0, #0
 8005826:	d002      	beq.n	800582e <HAL_UART_IRQHandler+0xf6>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005828:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800582a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800582c:	4798      	blx	r3
}
 800582e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 8005830:	0020      	movs	r0, r4
 8005832:	f7ff ff4b 	bl	80056cc <HAL_UART_ErrorCallback>
 8005836:	e7fa      	b.n	800582e <HAL_UART_IRQHandler+0xf6>
        HAL_UART_ErrorCallback(huart);
 8005838:	f7ff ff48 	bl	80056cc <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800583c:	67ee      	str	r6, [r5, #124]	; 0x7c
 800583e:	e7f6      	b.n	800582e <HAL_UART_IRQHandler+0xf6>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005840:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8005842:	2d01      	cmp	r5, #1
 8005844:	d161      	bne.n	800590a <HAL_UART_IRQHandler+0x1d2>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8005846:	2210      	movs	r2, #16
 8005848:	4211      	tst	r1, r2
 800584a:	d05e      	beq.n	800590a <HAL_UART_IRQHandler+0x1d2>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800584c:	4210      	tst	r0, r2
 800584e:	d05c      	beq.n	800590a <HAL_UART_IRQHandler+0x1d2>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005850:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005852:	6899      	ldr	r1, [r3, #8]
 8005854:	2640      	movs	r6, #64	; 0x40
 8005856:	000f      	movs	r7, r1
 8005858:	4037      	ands	r7, r6
 800585a:	4231      	tst	r1, r6
 800585c:	d038      	beq.n	80058d0 <HAL_UART_IRQHandler+0x198>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800585e:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8005860:	680f      	ldr	r7, [r1, #0]
 8005862:	9100      	str	r1, [sp, #0]
 8005864:	6879      	ldr	r1, [r7, #4]
 8005866:	b289      	uxth	r1, r1
      if (  (nb_remaining_rx_data > 0U)
 8005868:	2900      	cmp	r1, #0
 800586a:	d0e0      	beq.n	800582e <HAL_UART_IRQHandler+0xf6>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800586c:	2058      	movs	r0, #88	; 0x58
 800586e:	4684      	mov	ip, r0
 8005870:	44a4      	add	ip, r4
 8005872:	4660      	mov	r0, ip
 8005874:	8800      	ldrh	r0, [r0, #0]
 8005876:	4288      	cmp	r0, r1
 8005878:	d9d9      	bls.n	800582e <HAL_UART_IRQHandler+0xf6>
        huart->RxXferCount = nb_remaining_rx_data;
 800587a:	205a      	movs	r0, #90	; 0x5a
 800587c:	4684      	mov	ip, r0
 800587e:	44a4      	add	ip, r4
 8005880:	4660      	mov	r0, ip
 8005882:	8001      	strh	r1, [r0, #0]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005884:	683f      	ldr	r7, [r7, #0]
 8005886:	2120      	movs	r1, #32
 8005888:	0038      	movs	r0, r7
 800588a:	4008      	ands	r0, r1
 800588c:	9001      	str	r0, [sp, #4]
 800588e:	420f      	tst	r7, r1
 8005890:	d112      	bne.n	80058b8 <HAL_UART_IRQHandler+0x180>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005892:	681f      	ldr	r7, [r3, #0]
 8005894:	4832      	ldr	r0, [pc, #200]	; (8005960 <HAL_UART_IRQHandler+0x228>)
 8005896:	4007      	ands	r7, r0
 8005898:	601f      	str	r7, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800589a:	689f      	ldr	r7, [r3, #8]
          (void)HAL_DMA_Abort(huart->hdmarx);
 800589c:	9800      	ldr	r0, [sp, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800589e:	43af      	bics	r7, r5
 80058a0:	609f      	str	r7, [r3, #8]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058a2:	689d      	ldr	r5, [r3, #8]
 80058a4:	43b5      	bics	r5, r6
 80058a6:	609d      	str	r5, [r3, #8]
          huart->RxState = HAL_UART_STATE_READY;
 80058a8:	67e1      	str	r1, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058aa:	9901      	ldr	r1, [sp, #4]
 80058ac:	6621      	str	r1, [r4, #96]	; 0x60
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058ae:	6819      	ldr	r1, [r3, #0]
 80058b0:	4391      	bics	r1, r2
 80058b2:	6019      	str	r1, [r3, #0]
          (void)HAL_DMA_Abort(huart->hdmarx);
 80058b4:	f7fe f968 	bl	8003b88 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80058b8:	0023      	movs	r3, r4
 80058ba:	0022      	movs	r2, r4
 80058bc:	335a      	adds	r3, #90	; 0x5a
 80058be:	3258      	adds	r2, #88	; 0x58
 80058c0:	881b      	ldrh	r3, [r3, #0]
 80058c2:	8811      	ldrh	r1, [r2, #0]
 80058c4:	1ac9      	subs	r1, r1, r3
 80058c6:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80058c8:	0020      	movs	r0, r4
 80058ca:	f7ff ff34 	bl	8005736 <HAL_UARTEx_RxEventCallback>
 80058ce:	e7ae      	b.n	800582e <HAL_UART_IRQHandler+0xf6>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80058d0:	0026      	movs	r6, r4
 80058d2:	365a      	adds	r6, #90	; 0x5a
 80058d4:	8830      	ldrh	r0, [r6, #0]
      if (  (huart->RxXferCount > 0U)
 80058d6:	8831      	ldrh	r1, [r6, #0]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80058d8:	b280      	uxth	r0, r0
      if (  (huart->RxXferCount > 0U)
 80058da:	2900      	cmp	r1, #0
 80058dc:	d0a7      	beq.n	800582e <HAL_UART_IRQHandler+0xf6>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80058de:	0021      	movs	r1, r4
 80058e0:	3158      	adds	r1, #88	; 0x58
 80058e2:	8809      	ldrh	r1, [r1, #0]
 80058e4:	1a09      	subs	r1, r1, r0
 80058e6:	b289      	uxth	r1, r1
          &&(nb_rx_data > 0U) )
 80058e8:	2900      	cmp	r1, #0
 80058ea:	d0a0      	beq.n	800582e <HAL_UART_IRQHandler+0xf6>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058ec:	6818      	ldr	r0, [r3, #0]
 80058ee:	4e1d      	ldr	r6, [pc, #116]	; (8005964 <HAL_UART_IRQHandler+0x22c>)
 80058f0:	4030      	ands	r0, r6
 80058f2:	6018      	str	r0, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058f4:	6898      	ldr	r0, [r3, #8]
 80058f6:	43a8      	bics	r0, r5
 80058f8:	6098      	str	r0, [r3, #8]
        huart->RxState = HAL_UART_STATE_READY;
 80058fa:	2020      	movs	r0, #32
 80058fc:	67e0      	str	r0, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058fe:	6627      	str	r7, [r4, #96]	; 0x60
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005900:	6818      	ldr	r0, [r3, #0]
        huart->RxISR = NULL;
 8005902:	6667      	str	r7, [r4, #100]	; 0x64
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005904:	4390      	bics	r0, r2
 8005906:	6018      	str	r0, [r3, #0]
 8005908:	e7de      	b.n	80058c8 <HAL_UART_IRQHandler+0x190>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800590a:	2280      	movs	r2, #128	; 0x80
 800590c:	0352      	lsls	r2, r2, #13
 800590e:	4211      	tst	r1, r2
 8005910:	d006      	beq.n	8005920 <HAL_UART_IRQHandler+0x1e8>
 8005912:	0275      	lsls	r5, r6, #9
 8005914:	d504      	bpl.n	8005920 <HAL_UART_IRQHandler+0x1e8>
    HAL_UARTEx_WakeupCallback(huart);
 8005916:	0020      	movs	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005918:	621a      	str	r2, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800591a:	f000 fb55 	bl	8005fc8 <HAL_UARTEx_WakeupCallback>
    return;
 800591e:	e786      	b.n	800582e <HAL_UART_IRQHandler+0xf6>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005920:	2280      	movs	r2, #128	; 0x80
 8005922:	4211      	tst	r1, r2
 8005924:	d003      	beq.n	800592e <HAL_UART_IRQHandler+0x1f6>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005926:	4210      	tst	r0, r2
 8005928:	d001      	beq.n	800592e <HAL_UART_IRQHandler+0x1f6>
    if (huart->TxISR != NULL)
 800592a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800592c:	e715      	b.n	800575a <HAL_UART_IRQHandler+0x22>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800592e:	2540      	movs	r5, #64	; 0x40
 8005930:	4229      	tst	r1, r5
 8005932:	d100      	bne.n	8005936 <HAL_UART_IRQHandler+0x1fe>
 8005934:	e77b      	b.n	800582e <HAL_UART_IRQHandler+0xf6>
 8005936:	4228      	tst	r0, r5
 8005938:	d100      	bne.n	800593c <HAL_UART_IRQHandler+0x204>
 800593a:	e778      	b.n	800582e <HAL_UART_IRQHandler+0xf6>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800593c:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800593e:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005940:	43aa      	bics	r2, r5
 8005942:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8005944:	2320      	movs	r3, #32
 8005946:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->TxISR = NULL;
 8005948:	2300      	movs	r3, #0
 800594a:	66a3      	str	r3, [r4, #104]	; 0x68
  HAL_UART_TxCpltCallback(huart);
 800594c:	f7fd f9ea 	bl	8002d24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005950:	e76d      	b.n	800582e <HAL_UART_IRQHandler+0xf6>
 8005952:	46c0      	nop			; (mov r8, r8)
 8005954:	0000080f 	.word	0x0000080f
 8005958:	04000120 	.word	0x04000120
 800595c:	08005721 	.word	0x08005721
 8005960:	fffffeff 	.word	0xfffffeff
 8005964:	fffffedf 	.word	0xfffffedf

08005968 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005968:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
{
 800596a:	b510      	push	{r4, lr}
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800596c:	6803      	ldr	r3, [r0, #0]
{
 800596e:	0004      	movs	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005970:	2a22      	cmp	r2, #34	; 0x22
 8005972:	d134      	bne.n	80059de <UART_RxISR_8BIT+0x76>
  uint16_t uhMask = huart->Mask;
 8005974:	0002      	movs	r2, r0
 8005976:	325c      	adds	r2, #92	; 0x5c
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800597a:	8812      	ldrh	r2, [r2, #0]
 800597c:	4013      	ands	r3, r2
 800597e:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8005980:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
    huart->RxXferCount--;
 8005982:	0002      	movs	r2, r0
    huart->pRxBuffPtr++;
 8005984:	6d43      	ldr	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8005986:	325a      	adds	r2, #90	; 0x5a
    huart->pRxBuffPtr++;
 8005988:	3301      	adds	r3, #1
 800598a:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 800598c:	8813      	ldrh	r3, [r2, #0]
 800598e:	3b01      	subs	r3, #1
 8005990:	b29b      	uxth	r3, r3
 8005992:	8013      	strh	r3, [r2, #0]

    if (huart->RxXferCount == 0U)
 8005994:	8813      	ldrh	r3, [r2, #0]
 8005996:	b299      	uxth	r1, r3
 8005998:	2b00      	cmp	r3, #0
 800599a:	d11b      	bne.n	80059d4 <UART_RxISR_8BIT+0x6c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800599c:	6803      	ldr	r3, [r0, #0]
 800599e:	4812      	ldr	r0, [pc, #72]	; (80059e8 <UART_RxISR_8BIT+0x80>)
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	4002      	ands	r2, r0
 80059a4:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059a6:	689a      	ldr	r2, [r3, #8]
 80059a8:	3023      	adds	r0, #35	; 0x23
 80059aa:	30ff      	adds	r0, #255	; 0xff
 80059ac:	4382      	bics	r2, r0
 80059ae:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059b0:	2220      	movs	r2, #32
 80059b2:	67e2      	str	r2, [r4, #124]	; 0x7c
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059b4:	6e22      	ldr	r2, [r4, #96]	; 0x60
      huart->RxISR = NULL;
 80059b6:	6661      	str	r1, [r4, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059b8:	4282      	cmp	r2, r0
 80059ba:	d10c      	bne.n	80059d6 <UART_RxISR_8BIT+0x6e>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059bc:	2110      	movs	r1, #16
 80059be:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059c0:	0020      	movs	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059c2:	438a      	bics	r2, r1
 80059c4:	601a      	str	r2, [r3, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059c6:	0023      	movs	r3, r4
 80059c8:	3358      	adds	r3, #88	; 0x58
 80059ca:	8819      	ldrh	r1, [r3, #0]
 80059cc:	f7ff feb3 	bl	8005736 <HAL_UARTEx_RxEventCallback>
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059d0:	2300      	movs	r3, #0
 80059d2:	6623      	str	r3, [r4, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80059d4:	bd10      	pop	{r4, pc}
        HAL_UART_RxCpltCallback(huart);
 80059d6:	0020      	movs	r0, r4
 80059d8:	f7fd f9ac 	bl	8002d34 <HAL_UART_RxCpltCallback>
 80059dc:	e7f8      	b.n	80059d0 <UART_RxISR_8BIT+0x68>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80059de:	2208      	movs	r2, #8
 80059e0:	6999      	ldr	r1, [r3, #24]
 80059e2:	430a      	orrs	r2, r1
 80059e4:	619a      	str	r2, [r3, #24]
}
 80059e6:	e7f5      	b.n	80059d4 <UART_RxISR_8BIT+0x6c>
 80059e8:	fffffedf 	.word	0xfffffedf

080059ec <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059ec:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
{
 80059ee:	b510      	push	{r4, lr}
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80059f0:	6803      	ldr	r3, [r0, #0]
{
 80059f2:	0004      	movs	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059f4:	2a22      	cmp	r2, #34	; 0x22
 80059f6:	d131      	bne.n	8005a5c <UART_RxISR_16BIT+0x70>
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80059f8:	6d42      	ldr	r2, [r0, #84]	; 0x54
  uint16_t uhMask = huart->Mask;
 80059fa:	305c      	adds	r0, #92	; 0x5c
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80059fc:	6a59      	ldr	r1, [r3, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 80059fe:	8800      	ldrh	r0, [r0, #0]
 8005a00:	4001      	ands	r1, r0
 8005a02:	8011      	strh	r1, [r2, #0]
    huart->pRxBuffPtr += 2U;
    huart->RxXferCount--;
 8005a04:	0021      	movs	r1, r4
    huart->pRxBuffPtr += 2U;
 8005a06:	3202      	adds	r2, #2
    huart->RxXferCount--;
 8005a08:	315a      	adds	r1, #90	; 0x5a
    huart->pRxBuffPtr += 2U;
 8005a0a:	6562      	str	r2, [r4, #84]	; 0x54
    huart->RxXferCount--;
 8005a0c:	880a      	ldrh	r2, [r1, #0]
 8005a0e:	3a01      	subs	r2, #1
 8005a10:	b292      	uxth	r2, r2
 8005a12:	800a      	strh	r2, [r1, #0]

    if (huart->RxXferCount == 0U)
 8005a14:	880a      	ldrh	r2, [r1, #0]
 8005a16:	b291      	uxth	r1, r2
 8005a18:	2a00      	cmp	r2, #0
 8005a1a:	d11a      	bne.n	8005a52 <UART_RxISR_16BIT+0x66>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	4812      	ldr	r0, [pc, #72]	; (8005a68 <UART_RxISR_16BIT+0x7c>)
 8005a20:	4002      	ands	r2, r0
 8005a22:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a24:	689a      	ldr	r2, [r3, #8]
 8005a26:	3023      	adds	r0, #35	; 0x23
 8005a28:	30ff      	adds	r0, #255	; 0xff
 8005a2a:	4382      	bics	r2, r0
 8005a2c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a2e:	2220      	movs	r2, #32
 8005a30:	67e2      	str	r2, [r4, #124]	; 0x7c
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a32:	6e22      	ldr	r2, [r4, #96]	; 0x60
      huart->RxISR = NULL;
 8005a34:	6661      	str	r1, [r4, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a36:	4282      	cmp	r2, r0
 8005a38:	d10c      	bne.n	8005a54 <UART_RxISR_16BIT+0x68>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a3a:	2110      	movs	r1, #16
 8005a3c:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a3e:	0020      	movs	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a40:	438a      	bics	r2, r1
 8005a42:	601a      	str	r2, [r3, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a44:	0023      	movs	r3, r4
 8005a46:	3358      	adds	r3, #88	; 0x58
 8005a48:	8819      	ldrh	r1, [r3, #0]
 8005a4a:	f7ff fe74 	bl	8005736 <HAL_UARTEx_RxEventCallback>
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	6623      	str	r3, [r4, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005a52:	bd10      	pop	{r4, pc}
        HAL_UART_RxCpltCallback(huart);
 8005a54:	0020      	movs	r0, r4
 8005a56:	f7fd f96d 	bl	8002d34 <HAL_UART_RxCpltCallback>
 8005a5a:	e7f8      	b.n	8005a4e <UART_RxISR_16BIT+0x62>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a5c:	2208      	movs	r2, #8
 8005a5e:	6999      	ldr	r1, [r3, #24]
 8005a60:	430a      	orrs	r2, r1
 8005a62:	619a      	str	r2, [r3, #24]
}
 8005a64:	e7f5      	b.n	8005a52 <UART_RxISR_16BIT+0x66>
 8005a66:	46c0      	nop			; (mov r8, r8)
 8005a68:	fffffedf 	.word	0xfffffedf

08005a6c <UART_SetConfig>:
{
 8005a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a6e:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a70:	6925      	ldr	r5, [r4, #16]
 8005a72:	68a1      	ldr	r1, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a74:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a76:	4329      	orrs	r1, r5
 8005a78:	6965      	ldr	r5, [r4, #20]
 8005a7a:	69c3      	ldr	r3, [r0, #28]
 8005a7c:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a7e:	6810      	ldr	r0, [r2, #0]
 8005a80:	4d79      	ldr	r5, [pc, #484]	; (8005c68 <UART_SetConfig+0x1fc>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a82:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a84:	4028      	ands	r0, r5
 8005a86:	4301      	orrs	r1, r0
 8005a88:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a8a:	6851      	ldr	r1, [r2, #4]
 8005a8c:	4877      	ldr	r0, [pc, #476]	; (8005c6c <UART_SetConfig+0x200>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a8e:	4d78      	ldr	r5, [pc, #480]	; (8005c70 <UART_SetConfig+0x204>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a90:	4001      	ands	r1, r0
 8005a92:	68e0      	ldr	r0, [r4, #12]
 8005a94:	4301      	orrs	r1, r0
 8005a96:	6051      	str	r1, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a98:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a9a:	42aa      	cmp	r2, r5
 8005a9c:	d001      	beq.n	8005aa2 <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 8005a9e:	6a21      	ldr	r1, [r4, #32]
 8005aa0:	4308      	orrs	r0, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005aa2:	6891      	ldr	r1, [r2, #8]
 8005aa4:	4e73      	ldr	r6, [pc, #460]	; (8005c74 <UART_SetConfig+0x208>)
 8005aa6:	4031      	ands	r1, r6
 8005aa8:	4301      	orrs	r1, r0
 8005aaa:	6091      	str	r1, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005aac:	4972      	ldr	r1, [pc, #456]	; (8005c78 <UART_SetConfig+0x20c>)
 8005aae:	428a      	cmp	r2, r1
 8005ab0:	d10f      	bne.n	8005ad2 <UART_SetConfig+0x66>
 8005ab2:	2103      	movs	r1, #3
 8005ab4:	4a71      	ldr	r2, [pc, #452]	; (8005c7c <UART_SetConfig+0x210>)
 8005ab6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005ab8:	400a      	ands	r2, r1
 8005aba:	3a01      	subs	r2, #1
 8005abc:	4970      	ldr	r1, [pc, #448]	; (8005c80 <UART_SetConfig+0x214>)
 8005abe:	2a02      	cmp	r2, #2
 8005ac0:	d910      	bls.n	8005ae4 <UART_SetConfig+0x78>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ac2:	2280      	movs	r2, #128	; 0x80
 8005ac4:	0212      	lsls	r2, r2, #8
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d000      	beq.n	8005acc <UART_SetConfig+0x60>
 8005aca:	e0a3      	b.n	8005c14 <UART_SetConfig+0x1a8>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005acc:	f7fe feaa 	bl	8004824 <HAL_RCC_GetPCLK2Freq>
 8005ad0:	e0c5      	b.n	8005c5e <UART_SetConfig+0x1f2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ad2:	496c      	ldr	r1, [pc, #432]	; (8005c84 <UART_SetConfig+0x218>)
 8005ad4:	428a      	cmp	r2, r1
 8005ad6:	d118      	bne.n	8005b0a <UART_SetConfig+0x9e>
 8005ad8:	200c      	movs	r0, #12
 8005ada:	4a68      	ldr	r2, [pc, #416]	; (8005c7c <UART_SetConfig+0x210>)
 8005adc:	4968      	ldr	r1, [pc, #416]	; (8005c80 <UART_SetConfig+0x214>)
 8005ade:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005ae0:	3103      	adds	r1, #3
 8005ae2:	4002      	ands	r2, r0
 8005ae4:	5c88      	ldrb	r0, [r1, r2]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ae6:	2280      	movs	r2, #128	; 0x80
 8005ae8:	0212      	lsls	r2, r2, #8
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d000      	beq.n	8005af0 <UART_SetConfig+0x84>
 8005aee:	e083      	b.n	8005bf8 <UART_SetConfig+0x18c>
    switch (clocksource)
 8005af0:	2808      	cmp	r0, #8
 8005af2:	d824      	bhi.n	8005b3e <UART_SetConfig+0xd2>
 8005af4:	f7fa fb24 	bl	8000140 <__gnu_thumb1_case_shi>
 8005af8:	ffea00b1 	.word	0xffea00b1
 8005afc:	0023005c 	.word	0x0023005c
 8005b00:	0023007d 	.word	0x0023007d
 8005b04:	00230023 	.word	0x00230023
 8005b08:	0067      	.short	0x0067
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b0a:	495f      	ldr	r1, [pc, #380]	; (8005c88 <UART_SetConfig+0x21c>)
 8005b0c:	428a      	cmp	r2, r1
 8005b0e:	d100      	bne.n	8005b12 <UART_SetConfig+0xa6>
 8005b10:	e09f      	b.n	8005c52 <UART_SetConfig+0x1e6>
 8005b12:	495e      	ldr	r1, [pc, #376]	; (8005c8c <UART_SetConfig+0x220>)
 8005b14:	428a      	cmp	r2, r1
 8005b16:	d100      	bne.n	8005b1a <UART_SetConfig+0xae>
 8005b18:	e09b      	b.n	8005c52 <UART_SetConfig+0x1e6>
 8005b1a:	42aa      	cmp	r2, r5
 8005b1c:	d10f      	bne.n	8005b3e <UART_SetConfig+0xd2>
 8005b1e:	21c0      	movs	r1, #192	; 0xc0
 8005b20:	2080      	movs	r0, #128	; 0x80
 8005b22:	4a56      	ldr	r2, [pc, #344]	; (8005c7c <UART_SetConfig+0x210>)
 8005b24:	0109      	lsls	r1, r1, #4
 8005b26:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005b28:	0100      	lsls	r0, r0, #4
 8005b2a:	400b      	ands	r3, r1
 8005b2c:	4283      	cmp	r3, r0
 8005b2e:	d016      	beq.n	8005b5e <UART_SetConfig+0xf2>
 8005b30:	d807      	bhi.n	8005b42 <UART_SetConfig+0xd6>
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d00a      	beq.n	8005b4c <UART_SetConfig+0xe0>
 8005b36:	2280      	movs	r2, #128	; 0x80
 8005b38:	00d2      	lsls	r2, r2, #3
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d035      	beq.n	8005baa <UART_SetConfig+0x13e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b3e:	2001      	movs	r0, #1
 8005b40:	e009      	b.n	8005b56 <UART_SetConfig+0xea>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b42:	428b      	cmp	r3, r1
 8005b44:	d1fb      	bne.n	8005b3e <UART_SetConfig+0xd2>
 8005b46:	2080      	movs	r0, #128	; 0x80
 8005b48:	0200      	lsls	r0, r0, #8
 8005b4a:	e012      	b.n	8005b72 <UART_SetConfig+0x106>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b4c:	f7fe fe5a 	bl	8004804 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005b50:	2800      	cmp	r0, #0
 8005b52:	d10e      	bne.n	8005b72 <UART_SetConfig+0x106>
 8005b54:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8005b56:	2300      	movs	r3, #0
 8005b58:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 8005b5a:	66a3      	str	r3, [r4, #104]	; 0x68
}
 8005b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b5e:	2310      	movs	r3, #16
 8005b60:	6810      	ldr	r0, [r2, #0]
 8005b62:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005b64:	4243      	negs	r3, r0
 8005b66:	4158      	adcs	r0, r3
 8005b68:	4b49      	ldr	r3, [pc, #292]	; (8005c90 <UART_SetConfig+0x224>)
 8005b6a:	4240      	negs	r0, r0
 8005b6c:	4018      	ands	r0, r3
 8005b6e:	4b49      	ldr	r3, [pc, #292]	; (8005c94 <UART_SetConfig+0x228>)
 8005b70:	18c0      	adds	r0, r0, r3
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005b72:	2203      	movs	r2, #3
 8005b74:	6863      	ldr	r3, [r4, #4]
 8005b76:	435a      	muls	r2, r3
 8005b78:	4290      	cmp	r0, r2
 8005b7a:	d3e0      	bcc.n	8005b3e <UART_SetConfig+0xd2>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005b7c:	031a      	lsls	r2, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005b7e:	4290      	cmp	r0, r2
 8005b80:	d8dd      	bhi.n	8005b3e <UART_SetConfig+0xd2>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005b82:	2700      	movs	r7, #0
 8005b84:	0e02      	lsrs	r2, r0, #24
 8005b86:	0201      	lsls	r1, r0, #8
 8005b88:	085e      	lsrs	r6, r3, #1
 8005b8a:	1989      	adds	r1, r1, r6
 8005b8c:	417a      	adcs	r2, r7
 8005b8e:	0008      	movs	r0, r1
 8005b90:	0011      	movs	r1, r2
 8005b92:	001a      	movs	r2, r3
 8005b94:	003b      	movs	r3, r7
 8005b96:	f7fa fcd5 	bl	8000544 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005b9a:	4b3f      	ldr	r3, [pc, #252]	; (8005c98 <UART_SetConfig+0x22c>)
 8005b9c:	18c2      	adds	r2, r0, r3
 8005b9e:	4b3f      	ldr	r3, [pc, #252]	; (8005c9c <UART_SetConfig+0x230>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d8cc      	bhi.n	8005b3e <UART_SetConfig+0xd2>
        huart->Instance->BRR = usartdiv;
 8005ba4:	6823      	ldr	r3, [r4, #0]
 8005ba6:	60d8      	str	r0, [r3, #12]
 8005ba8:	e7d4      	b.n	8005b54 <UART_SetConfig+0xe8>
        pclk = HAL_RCC_GetSysClockFreq();
 8005baa:	f7fe fa8b 	bl	80040c4 <HAL_RCC_GetSysClockFreq>
        break;
 8005bae:	e7cf      	b.n	8005b50 <UART_SetConfig+0xe4>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005bb0:	4b32      	ldr	r3, [pc, #200]	; (8005c7c <UART_SetConfig+0x210>)
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005bb2:	4a38      	ldr	r2, [pc, #224]	; (8005c94 <UART_SetConfig+0x228>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005bb4:	6818      	ldr	r0, [r3, #0]
 8005bb6:	2310      	movs	r3, #16
 8005bb8:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005bba:	4243      	negs	r3, r0
 8005bbc:	4158      	adcs	r0, r3
 8005bbe:	4b34      	ldr	r3, [pc, #208]	; (8005c90 <UART_SetConfig+0x224>)
 8005bc0:	4240      	negs	r0, r0
 8005bc2:	4003      	ands	r3, r0
 8005bc4:	189b      	adds	r3, r3, r2
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005bc6:	0058      	lsls	r0, r3, #1
 8005bc8:	6863      	ldr	r3, [r4, #4]
 8005bca:	6861      	ldr	r1, [r4, #4]
 8005bcc:	085b      	lsrs	r3, r3, #1
 8005bce:	18c0      	adds	r0, r0, r3
 8005bd0:	f7fa faca 	bl	8000168 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bd4:	4932      	ldr	r1, [pc, #200]	; (8005ca0 <UART_SetConfig+0x234>)
 8005bd6:	b282      	uxth	r2, r0
 8005bd8:	3a10      	subs	r2, #16
 8005bda:	0403      	lsls	r3, r0, #16
 8005bdc:	428a      	cmp	r2, r1
 8005bde:	d8ae      	bhi.n	8005b3e <UART_SetConfig+0xd2>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005be0:	220f      	movs	r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005be2:	031b      	lsls	r3, r3, #12
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005be4:	4390      	bics	r0, r2
 8005be6:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 8005be8:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005bea:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 8005bec:	4318      	orrs	r0, r3
 8005bee:	60d0      	str	r0, [r2, #12]
 8005bf0:	e7b0      	b.n	8005b54 <UART_SetConfig+0xe8>
        pclk = HAL_RCC_GetSysClockFreq();
 8005bf2:	f7fe fa67 	bl	80040c4 <HAL_RCC_GetSysClockFreq>
 8005bf6:	e032      	b.n	8005c5e <UART_SetConfig+0x1f2>
    switch (clocksource)
 8005bf8:	2808      	cmp	r0, #8
 8005bfa:	d8a0      	bhi.n	8005b3e <UART_SetConfig+0xd2>
 8005bfc:	f7fa fa8c 	bl	8000118 <__gnu_thumb1_case_sqi>
 8005c00:	9f0d0a05 	.word	0x9f0d0a05
 8005c04:	9f9f9f23 	.word	0x9f9f9f23
 8005c08:	26          	.byte	0x26
 8005c09:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c0a:	f7fe fdfb 	bl	8004804 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005c0e:	2800      	cmp	r0, #0
 8005c10:	d0a0      	beq.n	8005b54 <UART_SetConfig+0xe8>
 8005c12:	e00d      	b.n	8005c30 <UART_SetConfig+0x1c4>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c14:	f7fe fe06 	bl	8004824 <HAL_RCC_GetPCLK2Freq>
        break;
 8005c18:	e7f9      	b.n	8005c0e <UART_SetConfig+0x1a2>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c1a:	4b18      	ldr	r3, [pc, #96]	; (8005c7c <UART_SetConfig+0x210>)
 8005c1c:	6818      	ldr	r0, [r3, #0]
 8005c1e:	2310      	movs	r3, #16
 8005c20:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005c22:	4243      	negs	r3, r0
 8005c24:	4158      	adcs	r0, r3
 8005c26:	4b1a      	ldr	r3, [pc, #104]	; (8005c90 <UART_SetConfig+0x224>)
 8005c28:	4240      	negs	r0, r0
 8005c2a:	4018      	ands	r0, r3
 8005c2c:	4b19      	ldr	r3, [pc, #100]	; (8005c94 <UART_SetConfig+0x228>)
 8005c2e:	18c0      	adds	r0, r0, r3
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c30:	6863      	ldr	r3, [r4, #4]
 8005c32:	6861      	ldr	r1, [r4, #4]
 8005c34:	085b      	lsrs	r3, r3, #1
 8005c36:	1818      	adds	r0, r3, r0
 8005c38:	f7fa fa96 	bl	8000168 <__udivsi3>
 8005c3c:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c3e:	0002      	movs	r2, r0
 8005c40:	4b17      	ldr	r3, [pc, #92]	; (8005ca0 <UART_SetConfig+0x234>)
 8005c42:	3a10      	subs	r2, #16
 8005c44:	e7ac      	b.n	8005ba0 <UART_SetConfig+0x134>
        pclk = HAL_RCC_GetSysClockFreq();
 8005c46:	f7fe fa3d 	bl	80040c4 <HAL_RCC_GetSysClockFreq>
        break;
 8005c4a:	e7e0      	b.n	8005c0e <UART_SetConfig+0x1a2>
    switch (clocksource)
 8005c4c:	2080      	movs	r0, #128	; 0x80
 8005c4e:	0200      	lsls	r0, r0, #8
 8005c50:	e7ee      	b.n	8005c30 <UART_SetConfig+0x1c4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c52:	2280      	movs	r2, #128	; 0x80
 8005c54:	0212      	lsls	r2, r2, #8
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d1d7      	bne.n	8005c0a <UART_SetConfig+0x19e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c5a:	f7fe fdd3 	bl	8004804 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 8005c5e:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 8005c60:	d100      	bne.n	8005c64 <UART_SetConfig+0x1f8>
 8005c62:	e777      	b.n	8005b54 <UART_SetConfig+0xe8>
 8005c64:	e7af      	b.n	8005bc6 <UART_SetConfig+0x15a>
 8005c66:	46c0      	nop			; (mov r8, r8)
 8005c68:	efff69f3 	.word	0xefff69f3
 8005c6c:	ffffcfff 	.word	0xffffcfff
 8005c70:	40004800 	.word	0x40004800
 8005c74:	fffff4ff 	.word	0xfffff4ff
 8005c78:	40013800 	.word	0x40013800
 8005c7c:	40021000 	.word	0x40021000
 8005c80:	0800e69d 	.word	0x0800e69d
 8005c84:	40004400 	.word	0x40004400
 8005c88:	40004c00 	.word	0x40004c00
 8005c8c:	40005000 	.word	0x40005000
 8005c90:	00b71b00 	.word	0x00b71b00
 8005c94:	003d0900 	.word	0x003d0900
 8005c98:	fffffd00 	.word	0xfffffd00
 8005c9c:	000ffcff 	.word	0x000ffcff
 8005ca0:	0000ffef 	.word	0x0000ffef

08005ca4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ca4:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8005ca6:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ca8:	07da      	lsls	r2, r3, #31
 8005caa:	d506      	bpl.n	8005cba <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005cac:	6801      	ldr	r1, [r0, #0]
 8005cae:	4c28      	ldr	r4, [pc, #160]	; (8005d50 <UART_AdvFeatureConfig+0xac>)
 8005cb0:	684a      	ldr	r2, [r1, #4]
 8005cb2:	4022      	ands	r2, r4
 8005cb4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8005cb6:	4322      	orrs	r2, r4
 8005cb8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005cba:	079a      	lsls	r2, r3, #30
 8005cbc:	d506      	bpl.n	8005ccc <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005cbe:	6801      	ldr	r1, [r0, #0]
 8005cc0:	4c24      	ldr	r4, [pc, #144]	; (8005d54 <UART_AdvFeatureConfig+0xb0>)
 8005cc2:	684a      	ldr	r2, [r1, #4]
 8005cc4:	4022      	ands	r2, r4
 8005cc6:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8005cc8:	4322      	orrs	r2, r4
 8005cca:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ccc:	075a      	lsls	r2, r3, #29
 8005cce:	d506      	bpl.n	8005cde <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005cd0:	6801      	ldr	r1, [r0, #0]
 8005cd2:	4c21      	ldr	r4, [pc, #132]	; (8005d58 <UART_AdvFeatureConfig+0xb4>)
 8005cd4:	684a      	ldr	r2, [r1, #4]
 8005cd6:	4022      	ands	r2, r4
 8005cd8:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8005cda:	4322      	orrs	r2, r4
 8005cdc:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005cde:	071a      	lsls	r2, r3, #28
 8005ce0:	d506      	bpl.n	8005cf0 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ce2:	6801      	ldr	r1, [r0, #0]
 8005ce4:	4c1d      	ldr	r4, [pc, #116]	; (8005d5c <UART_AdvFeatureConfig+0xb8>)
 8005ce6:	684a      	ldr	r2, [r1, #4]
 8005ce8:	4022      	ands	r2, r4
 8005cea:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005cec:	4322      	orrs	r2, r4
 8005cee:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005cf0:	06da      	lsls	r2, r3, #27
 8005cf2:	d506      	bpl.n	8005d02 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005cf4:	6801      	ldr	r1, [r0, #0]
 8005cf6:	4c1a      	ldr	r4, [pc, #104]	; (8005d60 <UART_AdvFeatureConfig+0xbc>)
 8005cf8:	688a      	ldr	r2, [r1, #8]
 8005cfa:	4022      	ands	r2, r4
 8005cfc:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8005cfe:	4322      	orrs	r2, r4
 8005d00:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d02:	069a      	lsls	r2, r3, #26
 8005d04:	d506      	bpl.n	8005d14 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d06:	6801      	ldr	r1, [r0, #0]
 8005d08:	4c16      	ldr	r4, [pc, #88]	; (8005d64 <UART_AdvFeatureConfig+0xc0>)
 8005d0a:	688a      	ldr	r2, [r1, #8]
 8005d0c:	4022      	ands	r2, r4
 8005d0e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8005d10:	4322      	orrs	r2, r4
 8005d12:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d14:	065a      	lsls	r2, r3, #25
 8005d16:	d510      	bpl.n	8005d3a <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d18:	6801      	ldr	r1, [r0, #0]
 8005d1a:	4d13      	ldr	r5, [pc, #76]	; (8005d68 <UART_AdvFeatureConfig+0xc4>)
 8005d1c:	684a      	ldr	r2, [r1, #4]
 8005d1e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8005d20:	402a      	ands	r2, r5
 8005d22:	4322      	orrs	r2, r4
 8005d24:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d26:	2280      	movs	r2, #128	; 0x80
 8005d28:	0352      	lsls	r2, r2, #13
 8005d2a:	4294      	cmp	r4, r2
 8005d2c:	d105      	bne.n	8005d3a <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d2e:	684a      	ldr	r2, [r1, #4]
 8005d30:	4c0e      	ldr	r4, [pc, #56]	; (8005d6c <UART_AdvFeatureConfig+0xc8>)
 8005d32:	4022      	ands	r2, r4
 8005d34:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8005d36:	4322      	orrs	r2, r4
 8005d38:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d3a:	061b      	lsls	r3, r3, #24
 8005d3c:	d506      	bpl.n	8005d4c <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d3e:	6802      	ldr	r2, [r0, #0]
 8005d40:	490b      	ldr	r1, [pc, #44]	; (8005d70 <UART_AdvFeatureConfig+0xcc>)
 8005d42:	6853      	ldr	r3, [r2, #4]
 8005d44:	400b      	ands	r3, r1
 8005d46:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005d48:	430b      	orrs	r3, r1
 8005d4a:	6053      	str	r3, [r2, #4]
}
 8005d4c:	bd30      	pop	{r4, r5, pc}
 8005d4e:	46c0      	nop			; (mov r8, r8)
 8005d50:	fffdffff 	.word	0xfffdffff
 8005d54:	fffeffff 	.word	0xfffeffff
 8005d58:	fffbffff 	.word	0xfffbffff
 8005d5c:	ffff7fff 	.word	0xffff7fff
 8005d60:	ffffefff 	.word	0xffffefff
 8005d64:	ffffdfff 	.word	0xffffdfff
 8005d68:	ffefffff 	.word	0xffefffff
 8005d6c:	ff9fffff 	.word	0xff9fffff
 8005d70:	fff7ffff 	.word	0xfff7ffff

08005d74 <UART_WaitOnFlagUntilTimeout>:
{
 8005d74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d76:	2780      	movs	r7, #128	; 0x80
{
 8005d78:	0004      	movs	r4, r0
 8005d7a:	000d      	movs	r5, r1
 8005d7c:	0016      	movs	r6, r2
 8005d7e:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d80:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d82:	6822      	ldr	r2, [r4, #0]
 8005d84:	69d3      	ldr	r3, [r2, #28]
 8005d86:	402b      	ands	r3, r5
 8005d88:	1b5b      	subs	r3, r3, r5
 8005d8a:	4259      	negs	r1, r3
 8005d8c:	414b      	adcs	r3, r1
 8005d8e:	42b3      	cmp	r3, r6
 8005d90:	d001      	beq.n	8005d96 <UART_WaitOnFlagUntilTimeout+0x22>
  return HAL_OK;
 8005d92:	2000      	movs	r0, #0
 8005d94:	e01c      	b.n	8005dd0 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8005d96:	9b08      	ldr	r3, [sp, #32]
 8005d98:	3301      	adds	r3, #1
 8005d9a:	d0f3      	beq.n	8005d84 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d9c:	f7fc fe76 	bl	8002a8c <HAL_GetTick>
 8005da0:	9b01      	ldr	r3, [sp, #4]
 8005da2:	9a08      	ldr	r2, [sp, #32]
 8005da4:	1ac0      	subs	r0, r0, r3
 8005da6:	6823      	ldr	r3, [r4, #0]
 8005da8:	4290      	cmp	r0, r2
 8005daa:	d801      	bhi.n	8005db0 <UART_WaitOnFlagUntilTimeout+0x3c>
 8005dac:	2a00      	cmp	r2, #0
 8005dae:	d110      	bne.n	8005dd2 <UART_WaitOnFlagUntilTimeout+0x5e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	4913      	ldr	r1, [pc, #76]	; (8005e00 <UART_WaitOnFlagUntilTimeout+0x8c>)
 8005db4:	400a      	ands	r2, r1
 8005db6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005db8:	689a      	ldr	r2, [r3, #8]
 8005dba:	31a3      	adds	r1, #163	; 0xa3
 8005dbc:	31ff      	adds	r1, #255	; 0xff
 8005dbe:	438a      	bics	r2, r1
 8005dc0:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8005dc2:	2320      	movs	r3, #32
 8005dc4:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005dc6:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8005dc8:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 8005dca:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8005dcc:	3474      	adds	r4, #116	; 0x74
 8005dce:	7023      	strb	r3, [r4, #0]
}
 8005dd0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005dd2:	2104      	movs	r1, #4
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	420a      	tst	r2, r1
 8005dd8:	d0d3      	beq.n	8005d82 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005dda:	69da      	ldr	r2, [r3, #28]
 8005ddc:	423a      	tst	r2, r7
 8005dde:	d0d0      	beq.n	8005d82 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005de0:	621f      	str	r7, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	4906      	ldr	r1, [pc, #24]	; (8005e00 <UART_WaitOnFlagUntilTimeout+0x8c>)
 8005de6:	400a      	ands	r2, r1
 8005de8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dea:	689a      	ldr	r2, [r3, #8]
 8005dec:	31a3      	adds	r1, #163	; 0xa3
 8005dee:	31ff      	adds	r1, #255	; 0xff
 8005df0:	438a      	bics	r2, r1
 8005df2:	609a      	str	r2, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8005df4:	2320      	movs	r3, #32
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005df6:	1d22      	adds	r2, r4, #4
          huart->gState = HAL_UART_STATE_READY;
 8005df8:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005dfa:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005dfc:	67d3      	str	r3, [r2, #124]	; 0x7c
 8005dfe:	e7e3      	b.n	8005dc8 <UART_WaitOnFlagUntilTimeout+0x54>
 8005e00:	fffffe5f 	.word	0xfffffe5f

08005e04 <UART_CheckIdleState>:
{
 8005e04:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e06:	2600      	movs	r6, #0
{
 8005e08:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e0a:	1d03      	adds	r3, r0, #4
 8005e0c:	67de      	str	r6, [r3, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8005e0e:	f7fc fe3d 	bl	8002a8c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e12:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8005e14:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	071b      	lsls	r3, r3, #28
 8005e1a:	d416      	bmi.n	8005e4a <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e1c:	6823      	ldr	r3, [r4, #0]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	075b      	lsls	r3, r3, #29
 8005e22:	d50a      	bpl.n	8005e3a <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e24:	2180      	movs	r1, #128	; 0x80
 8005e26:	4b0f      	ldr	r3, [pc, #60]	; (8005e64 <UART_CheckIdleState+0x60>)
 8005e28:	2200      	movs	r2, #0
 8005e2a:	9300      	str	r3, [sp, #0]
 8005e2c:	0020      	movs	r0, r4
 8005e2e:	002b      	movs	r3, r5
 8005e30:	03c9      	lsls	r1, r1, #15
 8005e32:	f7ff ff9f 	bl	8005d74 <UART_WaitOnFlagUntilTimeout>
 8005e36:	2800      	cmp	r0, #0
 8005e38:	d112      	bne.n	8005e60 <UART_CheckIdleState+0x5c>
  huart->gState = HAL_UART_STATE_READY;
 8005e3a:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e3c:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8005e3e:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005e40:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e42:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 8005e44:	3474      	adds	r4, #116	; 0x74
 8005e46:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8005e48:	e00b      	b.n	8005e62 <UART_CheckIdleState+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e4a:	2180      	movs	r1, #128	; 0x80
 8005e4c:	4b05      	ldr	r3, [pc, #20]	; (8005e64 <UART_CheckIdleState+0x60>)
 8005e4e:	0032      	movs	r2, r6
 8005e50:	9300      	str	r3, [sp, #0]
 8005e52:	0389      	lsls	r1, r1, #14
 8005e54:	0003      	movs	r3, r0
 8005e56:	0020      	movs	r0, r4
 8005e58:	f7ff ff8c 	bl	8005d74 <UART_WaitOnFlagUntilTimeout>
 8005e5c:	2800      	cmp	r0, #0
 8005e5e:	d0dd      	beq.n	8005e1c <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8005e60:	2003      	movs	r0, #3
}
 8005e62:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8005e64:	01ffffff 	.word	0x01ffffff

08005e68 <HAL_UART_Init>:
{
 8005e68:	b510      	push	{r4, lr}
 8005e6a:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8005e6c:	d101      	bne.n	8005e72 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8005e6e:	2001      	movs	r0, #1
}
 8005e70:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8005e72:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d104      	bne.n	8005e82 <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8005e78:	0002      	movs	r2, r0
 8005e7a:	3274      	adds	r2, #116	; 0x74
 8005e7c:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8005e7e:	f7fc fe57 	bl	8002b30 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8005e82:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8005e84:	2101      	movs	r1, #1
 8005e86:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005e88:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8005e8a:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e8c:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8005e8e:	438b      	bics	r3, r1
 8005e90:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e92:	f7ff fdeb 	bl	8005a6c <UART_SetConfig>
 8005e96:	2801      	cmp	r0, #1
 8005e98:	d0e9      	beq.n	8005e6e <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d002      	beq.n	8005ea6 <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 8005ea0:	0020      	movs	r0, r4
 8005ea2:	f7ff feff 	bl	8005ca4 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ea6:	6823      	ldr	r3, [r4, #0]
 8005ea8:	4907      	ldr	r1, [pc, #28]	; (8005ec8 <HAL_UART_Init+0x60>)
 8005eaa:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8005eac:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005eae:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005eb0:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005eb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005eb4:	689a      	ldr	r2, [r3, #8]
 8005eb6:	438a      	bics	r2, r1
 8005eb8:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8005eba:	2201      	movs	r2, #1
 8005ebc:	6819      	ldr	r1, [r3, #0]
 8005ebe:	430a      	orrs	r2, r1
 8005ec0:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8005ec2:	f7ff ff9f 	bl	8005e04 <UART_CheckIdleState>
 8005ec6:	e7d3      	b.n	8005e70 <HAL_UART_Init+0x8>
 8005ec8:	ffffb7ff 	.word	0xffffb7ff

08005ecc <UART_Start_Receive_IT>:
  huart->RxXferSize  = Size;
 8005ecc:	0003      	movs	r3, r0
 8005ece:	3358      	adds	r3, #88	; 0x58
{
 8005ed0:	b510      	push	{r4, lr}
  huart->pRxBuffPtr  = pData;
 8005ed2:	6541      	str	r1, [r0, #84]	; 0x54
  UART_MASK_COMPUTATION(huart);
 8005ed4:	2480      	movs	r4, #128	; 0x80
  huart->RxXferSize  = Size;
 8005ed6:	801a      	strh	r2, [r3, #0]
  huart->RxXferCount = Size;
 8005ed8:	805a      	strh	r2, [r3, #2]
  huart->RxISR       = NULL;
 8005eda:	2200      	movs	r2, #0
  UART_MASK_COMPUTATION(huart);
 8005edc:	6881      	ldr	r1, [r0, #8]
  huart->RxISR       = NULL;
 8005ede:	6642      	str	r2, [r0, #100]	; 0x64
  UART_MASK_COMPUTATION(huart);
 8005ee0:	0164      	lsls	r4, r4, #5
 8005ee2:	3304      	adds	r3, #4
 8005ee4:	42a1      	cmp	r1, r4
 8005ee6:	d124      	bne.n	8005f32 <UART_Start_Receive_IT+0x66>
 8005ee8:	6902      	ldr	r2, [r0, #16]
 8005eea:	2a00      	cmp	r2, #0
 8005eec:	d11f      	bne.n	8005f2e <UART_Start_Receive_IT+0x62>
 8005eee:	4a19      	ldr	r2, [pc, #100]	; (8005f54 <UART_Start_Receive_IT+0x88>)
 8005ef0:	801a      	strh	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	1d03      	adds	r3, r0, #4
 8005ef6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ef8:	2322      	movs	r3, #34	; 0x22
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005efa:	6802      	ldr	r2, [r0, #0]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005efc:	67c3      	str	r3, [r0, #124]	; 0x7c
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005efe:	6894      	ldr	r4, [r2, #8]
 8005f00:	3b21      	subs	r3, #33	; 0x21
 8005f02:	4323      	orrs	r3, r4
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f04:	2480      	movs	r4, #128	; 0x80
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f06:	6093      	str	r3, [r2, #8]
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f08:	0164      	lsls	r4, r4, #5
    huart->RxISR = UART_RxISR_8BIT;
 8005f0a:	4b13      	ldr	r3, [pc, #76]	; (8005f58 <UART_Start_Receive_IT+0x8c>)
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f0c:	42a1      	cmp	r1, r4
 8005f0e:	d103      	bne.n	8005f18 <UART_Start_Receive_IT+0x4c>
 8005f10:	6901      	ldr	r1, [r0, #16]
 8005f12:	2900      	cmp	r1, #0
 8005f14:	d100      	bne.n	8005f18 <UART_Start_Receive_IT+0x4c>
    huart->RxISR = UART_RxISR_16BIT;
 8005f16:	4b11      	ldr	r3, [pc, #68]	; (8005f5c <UART_Start_Receive_IT+0x90>)
 8005f18:	6643      	str	r3, [r0, #100]	; 0x64
  __HAL_UNLOCK(huart);
 8005f1a:	0003      	movs	r3, r0
 8005f1c:	2000      	movs	r0, #0
 8005f1e:	3374      	adds	r3, #116	; 0x74
 8005f20:	7018      	strb	r0, [r3, #0]
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005f22:	2390      	movs	r3, #144	; 0x90
 8005f24:	6811      	ldr	r1, [r2, #0]
 8005f26:	005b      	lsls	r3, r3, #1
 8005f28:	430b      	orrs	r3, r1
 8005f2a:	6013      	str	r3, [r2, #0]
}
 8005f2c:	bd10      	pop	{r4, pc}
  UART_MASK_COMPUTATION(huart);
 8005f2e:	22ff      	movs	r2, #255	; 0xff
 8005f30:	e7de      	b.n	8005ef0 <UART_Start_Receive_IT+0x24>
 8005f32:	2900      	cmp	r1, #0
 8005f34:	d104      	bne.n	8005f40 <UART_Start_Receive_IT+0x74>
 8005f36:	6902      	ldr	r2, [r0, #16]
 8005f38:	2a00      	cmp	r2, #0
 8005f3a:	d0f8      	beq.n	8005f2e <UART_Start_Receive_IT+0x62>
 8005f3c:	227f      	movs	r2, #127	; 0x7f
 8005f3e:	e7d7      	b.n	8005ef0 <UART_Start_Receive_IT+0x24>
 8005f40:	2480      	movs	r4, #128	; 0x80
 8005f42:	0564      	lsls	r4, r4, #21
 8005f44:	42a1      	cmp	r1, r4
 8005f46:	d1d3      	bne.n	8005ef0 <UART_Start_Receive_IT+0x24>
 8005f48:	6902      	ldr	r2, [r0, #16]
 8005f4a:	2a00      	cmp	r2, #0
 8005f4c:	d0f6      	beq.n	8005f3c <UART_Start_Receive_IT+0x70>
 8005f4e:	223f      	movs	r2, #63	; 0x3f
 8005f50:	e7ce      	b.n	8005ef0 <UART_Start_Receive_IT+0x24>
 8005f52:	46c0      	nop			; (mov r8, r8)
 8005f54:	000001ff 	.word	0x000001ff
 8005f58:	08005969 	.word	0x08005969
 8005f5c:	080059ed 	.word	0x080059ed

08005f60 <HAL_UART_Receive_IT>:
{
 8005f60:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f62:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
    return HAL_BUSY;
 8005f64:	2302      	movs	r3, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f66:	2c20      	cmp	r4, #32
 8005f68:	d129      	bne.n	8005fbe <HAL_UART_Receive_IT+0x5e>
      return HAL_ERROR;
 8005f6a:	3b01      	subs	r3, #1
    if ((pData == NULL) || (Size == 0U))
 8005f6c:	2900      	cmp	r1, #0
 8005f6e:	d026      	beq.n	8005fbe <HAL_UART_Receive_IT+0x5e>
 8005f70:	2a00      	cmp	r2, #0
 8005f72:	d024      	beq.n	8005fbe <HAL_UART_Receive_IT+0x5e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f74:	2380      	movs	r3, #128	; 0x80
 8005f76:	6884      	ldr	r4, [r0, #8]
 8005f78:	015b      	lsls	r3, r3, #5
 8005f7a:	429c      	cmp	r4, r3
 8005f7c:	d106      	bne.n	8005f8c <HAL_UART_Receive_IT+0x2c>
 8005f7e:	6903      	ldr	r3, [r0, #16]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d103      	bne.n	8005f8c <HAL_UART_Receive_IT+0x2c>
      if ((((uint32_t)pData) & 1U) != 0U)
 8005f84:	2401      	movs	r4, #1
      return HAL_ERROR;
 8005f86:	0023      	movs	r3, r4
      if ((((uint32_t)pData) & 1U) != 0U)
 8005f88:	4221      	tst	r1, r4
 8005f8a:	d118      	bne.n	8005fbe <HAL_UART_Receive_IT+0x5e>
    __HAL_LOCK(huart);
 8005f8c:	0004      	movs	r4, r0
 8005f8e:	3474      	adds	r4, #116	; 0x74
 8005f90:	7825      	ldrb	r5, [r4, #0]
    return HAL_BUSY;
 8005f92:	2302      	movs	r3, #2
    __HAL_LOCK(huart);
 8005f94:	2d01      	cmp	r5, #1
 8005f96:	d012      	beq.n	8005fbe <HAL_UART_Receive_IT+0x5e>
 8005f98:	3b01      	subs	r3, #1
 8005f9a:	7023      	strb	r3, [r4, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f9c:	2300      	movs	r3, #0
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005f9e:	4c09      	ldr	r4, [pc, #36]	; (8005fc4 <HAL_UART_Receive_IT+0x64>)
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fa0:	6603      	str	r3, [r0, #96]	; 0x60
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005fa2:	6803      	ldr	r3, [r0, #0]
 8005fa4:	42a3      	cmp	r3, r4
 8005fa6:	d007      	beq.n	8005fb8 <HAL_UART_Receive_IT+0x58>
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005fa8:	685c      	ldr	r4, [r3, #4]
 8005faa:	0224      	lsls	r4, r4, #8
 8005fac:	d504      	bpl.n	8005fb8 <HAL_UART_Receive_IT+0x58>
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005fae:	2480      	movs	r4, #128	; 0x80
 8005fb0:	681d      	ldr	r5, [r3, #0]
 8005fb2:	04e4      	lsls	r4, r4, #19
 8005fb4:	432c      	orrs	r4, r5
 8005fb6:	601c      	str	r4, [r3, #0]
    return(UART_Start_Receive_IT(huart, pData, Size));
 8005fb8:	f7ff ff88 	bl	8005ecc <UART_Start_Receive_IT>
 8005fbc:	0003      	movs	r3, r0
}
 8005fbe:	0018      	movs	r0, r3
 8005fc0:	bd70      	pop	{r4, r5, r6, pc}
 8005fc2:	46c0      	nop			; (mov r8, r8)
 8005fc4:	40004800 	.word	0x40004800

08005fc8 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005fc8:	4770      	bx	lr
	...

08005fcc <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8005fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005fce:	0005      	movs	r5, r0
{
 8005fd0:	b085      	sub	sp, #20
 8005fd2:	9203      	str	r2, [sp, #12]
 8005fd4:	9102      	str	r1, [sp, #8]
  __HAL_LOCK(huart);
 8005fd6:	3574      	adds	r5, #116	; 0x74
 8005fd8:	782b      	ldrb	r3, [r5, #0]
{
 8005fda:	0004      	movs	r4, r0
 8005fdc:	000f      	movs	r7, r1
 8005fde:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 8005fe0:	2002      	movs	r0, #2
{
 8005fe2:	ae02      	add	r6, sp, #8
  __HAL_LOCK(huart);
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d030      	beq.n	800604a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7e>

  huart->gState = HAL_UART_STATE_BUSY;
 8005fe8:	2324      	movs	r3, #36	; 0x24
  __HAL_LOCK(huart);
 8005fea:	3801      	subs	r0, #1
 8005fec:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005fee:	67a3      	str	r3, [r4, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005ff0:	6823      	ldr	r3, [r4, #0]
 8005ff2:	6819      	ldr	r1, [r3, #0]
 8005ff4:	4381      	bics	r1, r0
 8005ff6:	6019      	str	r1, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8005ff8:	6899      	ldr	r1, [r3, #8]
 8005ffa:	4816      	ldr	r0, [pc, #88]	; (8006054 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x88>)
 8005ffc:	4001      	ands	r1, r0
 8005ffe:	4339      	orrs	r1, r7
 8006000:	6099      	str	r1, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8006002:	2f00      	cmp	r7, #0
 8006004:	d10c      	bne.n	8006020 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x54>
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8006006:	6859      	ldr	r1, [r3, #4]
 8006008:	3210      	adds	r2, #16
 800600a:	4391      	bics	r1, r2
 800600c:	88b2      	ldrh	r2, [r6, #4]
 800600e:	79b0      	ldrb	r0, [r6, #6]
 8006010:	4311      	orrs	r1, r2
 8006012:	6059      	str	r1, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8006014:	685a      	ldr	r2, [r3, #4]
 8006016:	0600      	lsls	r0, r0, #24
 8006018:	0212      	lsls	r2, r2, #8
 800601a:	0a12      	lsrs	r2, r2, #8
 800601c:	4302      	orrs	r2, r0
 800601e:	605a      	str	r2, [r3, #4]
  __HAL_UART_ENABLE(huart);
 8006020:	2201      	movs	r2, #1
 8006022:	6819      	ldr	r1, [r3, #0]
 8006024:	430a      	orrs	r2, r1
 8006026:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8006028:	f7fc fd30 	bl	8002a8c <HAL_GetTick>
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800602c:	2180      	movs	r1, #128	; 0x80
 800602e:	4a0a      	ldr	r2, [pc, #40]	; (8006058 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x8c>)
  tickstart = HAL_GetTick();
 8006030:	0003      	movs	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006032:	9200      	str	r2, [sp, #0]
 8006034:	0020      	movs	r0, r4
 8006036:	2200      	movs	r2, #0
 8006038:	03c9      	lsls	r1, r1, #15
 800603a:	f7ff fe9b 	bl	8005d74 <UART_WaitOnFlagUntilTimeout>
 800603e:	2800      	cmp	r0, #0
 8006040:	d105      	bne.n	800604e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8006042:	2320      	movs	r3, #32
 8006044:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8006046:	2300      	movs	r3, #0
 8006048:	702b      	strb	r3, [r5, #0]
}
 800604a:	b005      	add	sp, #20
 800604c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_TIMEOUT;
 800604e:	2003      	movs	r0, #3
 8006050:	e7f9      	b.n	8006046 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7a>
 8006052:	46c0      	nop			; (mov r8, r8)
 8006054:	ffcfffff 	.word	0xffcfffff
 8006058:	01ffffff 	.word	0x01ffffff

0800605c <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 800605c:	0001      	movs	r1, r0
 800605e:	2302      	movs	r3, #2
{
 8006060:	b510      	push	{r4, lr}
  __HAL_LOCK(huart);
 8006062:	3174      	adds	r1, #116	; 0x74
 8006064:	780c      	ldrb	r4, [r1, #0]
{
 8006066:	0002      	movs	r2, r0
  __HAL_LOCK(huart);
 8006068:	0018      	movs	r0, r3
 800606a:	2c01      	cmp	r4, #1
 800606c:	d005      	beq.n	800607a <HAL_UARTEx_EnableStopMode+0x1e>
  SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800606e:	6812      	ldr	r2, [r2, #0]
 8006070:	6810      	ldr	r0, [r2, #0]
 8006072:	4303      	orrs	r3, r0
  __HAL_UNLOCK(huart);
 8006074:	2000      	movs	r0, #0
  SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8006076:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(huart);
 8006078:	7008      	strb	r0, [r1, #0]
}
 800607a:	bd10      	pop	{r4, pc}

0800607c <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800607c:	b510      	push	{r4, lr}
 800607e:	0004      	movs	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
 8006080:	2210      	movs	r2, #16
 8006082:	2100      	movs	r1, #0
 8006084:	30f1      	adds	r0, #241	; 0xf1
 8006086:	f006 f910 	bl	800c2aa <memset1>
    ctx->M_n = 0;
 800608a:	0023      	movs	r3, r4
 800608c:	2100      	movs	r1, #0
 800608e:	33fc      	adds	r3, #252	; 0xfc
    memset1( ctx->rijndael.ksch, '\0', 240 );
 8006090:	22f0      	movs	r2, #240	; 0xf0
 8006092:	0020      	movs	r0, r4
    ctx->M_n = 0;
 8006094:	6199      	str	r1, [r3, #24]
    memset1( ctx->rijndael.ksch, '\0', 240 );
 8006096:	f006 f908 	bl	800c2aa <memset1>
}
 800609a:	bd10      	pop	{r4, pc}

0800609c <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800609c:	b510      	push	{r4, lr}
 800609e:	0002      	movs	r2, r0
 80060a0:	0008      	movs	r0, r1
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 80060a2:	2110      	movs	r1, #16
 80060a4:	f000 f99e 	bl	80063e4 <lorawan_aes_set_key>
}
 80060a8:	bd10      	pop	{r4, pc}

080060aa <AES_CMAC_Update>:
void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 80060aa:	0003      	movs	r3, r0
{
 80060ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060ae:	0004      	movs	r4, r0
    if( ctx->M_n > 0 )
 80060b0:	33fc      	adds	r3, #252	; 0xfc
 80060b2:	6998      	ldr	r0, [r3, #24]
    {
        mlen = MIN( 16 - ctx->M_n, len );
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 80060b4:	1ca3      	adds	r3, r4, #2
{
 80060b6:	b087      	sub	sp, #28
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 80060b8:	33ff      	adds	r3, #255	; 0xff
{
 80060ba:	000e      	movs	r6, r1
 80060bc:	0015      	movs	r5, r2
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 80060be:	9301      	str	r3, [sp, #4]
    if( ctx->M_n > 0 )
 80060c0:	2800      	cmp	r0, #0
 80060c2:	d036      	beq.n	8006132 <AES_CMAC_Update+0x88>
        mlen = MIN( 16 - ctx->M_n, len );
 80060c4:	2710      	movs	r7, #16
 80060c6:	1a3f      	subs	r7, r7, r0
 80060c8:	9700      	str	r7, [sp, #0]
 80060ca:	4297      	cmp	r7, r2
 80060cc:	d900      	bls.n	80060d0 <AES_CMAC_Update+0x26>
 80060ce:	9200      	str	r2, [sp, #0]
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 80060d0:	466b      	mov	r3, sp
 80060d2:	881a      	ldrh	r2, [r3, #0]
 80060d4:	1ca3      	adds	r3, r4, #2
 80060d6:	33ff      	adds	r3, #255	; 0xff
 80060d8:	0031      	movs	r1, r6
 80060da:	1818      	adds	r0, r3, r0
 80060dc:	f006 f8d0 	bl	800c280 <memcpy1>
        ctx->M_n += mlen;
 80060e0:	0022      	movs	r2, r4
 80060e2:	32fc      	adds	r2, #252	; 0xfc
 80060e4:	6991      	ldr	r1, [r2, #24]
 80060e6:	9b00      	ldr	r3, [sp, #0]
 80060e8:	185b      	adds	r3, r3, r1
 80060ea:	6193      	str	r3, [r2, #24]
        if( ctx->M_n < 16 || len == mlen )
 80060ec:	2b0f      	cmp	r3, #15
 80060ee:	d929      	bls.n	8006144 <AES_CMAC_Update+0x9a>
 80060f0:	42af      	cmp	r7, r5
 80060f2:	d227      	bcs.n	8006144 <AES_CMAC_Update+0x9a>
 80060f4:	0023      	movs	r3, r4
 80060f6:	1ca1      	adds	r1, r4, #2
 80060f8:	33f1      	adds	r3, #241	; 0xf1
 80060fa:	31ff      	adds	r1, #255	; 0xff
            return;
        XOR( ctx->M_last, ctx->X );
 80060fc:	781a      	ldrb	r2, [r3, #0]
 80060fe:	7c18      	ldrb	r0, [r3, #16]
 8006100:	4042      	eors	r2, r0
 8006102:	701a      	strb	r2, [r3, #0]
 8006104:	3301      	adds	r3, #1
 8006106:	428b      	cmp	r3, r1
 8006108:	d1f8      	bne.n	80060fc <AES_CMAC_Update+0x52>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800610a:	0027      	movs	r7, r4
 800610c:	37f1      	adds	r7, #241	; 0xf1
 800610e:	2210      	movs	r2, #16
 8006110:	0039      	movs	r1, r7
 8006112:	a802      	add	r0, sp, #8
 8006114:	f006 f8b4 	bl	800c280 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 8006118:	a902      	add	r1, sp, #8
 800611a:	0022      	movs	r2, r4
 800611c:	0008      	movs	r0, r1
 800611e:	f000 f9e9 	bl	80064f4 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8006122:	2210      	movs	r2, #16
 8006124:	0038      	movs	r0, r7
 8006126:	a902      	add	r1, sp, #8
 8006128:	f006 f8aa 	bl	800c280 <memcpy1>

        data += mlen;
 800612c:	9b00      	ldr	r3, [sp, #0]
 800612e:	18f6      	adds	r6, r6, r3
        len -= mlen;
 8006130:	1aed      	subs	r5, r5, r3
    }
    while( len > 16 )
 8006132:	2d10      	cmp	r5, #16
 8006134:	d808      	bhi.n	8006148 <AES_CMAC_Update+0x9e>

        data += 16;
        len -= 16;
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 8006136:	0031      	movs	r1, r6
 8006138:	9801      	ldr	r0, [sp, #4]
 800613a:	b2aa      	uxth	r2, r5
    ctx->M_n = len;
 800613c:	34fc      	adds	r4, #252	; 0xfc
    memcpy1( ctx->M_last, data, len );
 800613e:	f006 f89f 	bl	800c280 <memcpy1>
    ctx->M_n = len;
 8006142:	61a5      	str	r5, [r4, #24]
}
 8006144:	b007      	add	sp, #28
 8006146:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006148:	0023      	movs	r3, r4
 800614a:	0032      	movs	r2, r6
 800614c:	1ca0      	adds	r0, r4, #2
 800614e:	33f1      	adds	r3, #241	; 0xf1
 8006150:	30ff      	adds	r0, #255	; 0xff
        XOR( data, ctx->X );
 8006152:	7819      	ldrb	r1, [r3, #0]
 8006154:	7817      	ldrb	r7, [r2, #0]
 8006156:	3201      	adds	r2, #1
 8006158:	4079      	eors	r1, r7
 800615a:	7019      	strb	r1, [r3, #0]
 800615c:	3301      	adds	r3, #1
 800615e:	4283      	cmp	r3, r0
 8006160:	d1f7      	bne.n	8006152 <AES_CMAC_Update+0xa8>
        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8006162:	0027      	movs	r7, r4
 8006164:	37f1      	adds	r7, #241	; 0xf1
 8006166:	2210      	movs	r2, #16
 8006168:	0039      	movs	r1, r7
 800616a:	a802      	add	r0, sp, #8
 800616c:	f006 f888 	bl	800c280 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 8006170:	a902      	add	r1, sp, #8
 8006172:	0022      	movs	r2, r4
 8006174:	0008      	movs	r0, r1
 8006176:	f000 f9bd 	bl	80064f4 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800617a:	2210      	movs	r2, #16
 800617c:	0038      	movs	r0, r7
 800617e:	a902      	add	r1, sp, #8
 8006180:	f006 f87e 	bl	800c280 <memcpy1>
        data += 16;
 8006184:	3610      	adds	r6, #16
        len -= 16;
 8006186:	3d10      	subs	r5, #16
 8006188:	e7d3      	b.n	8006132 <AES_CMAC_Update+0x88>

0800618a <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800618a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800618c:	000c      	movs	r4, r1
 800618e:	b08b      	sub	sp, #44	; 0x2c
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 8006190:	2210      	movs	r2, #16
 8006192:	2100      	movs	r1, #0
{
 8006194:	9001      	str	r0, [sp, #4]
    memset1( K, '\0', 16 );
 8006196:	a802      	add	r0, sp, #8
 8006198:	f006 f887 	bl	800c2aa <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800619c:	a902      	add	r1, sp, #8
 800619e:	0022      	movs	r2, r4
 80061a0:	0008      	movs	r0, r1
 80061a2:	f000 f9a7 	bl	80064f4 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 80061a6:	ab02      	add	r3, sp, #8
 80061a8:	781a      	ldrb	r2, [r3, #0]
    {
        LSHIFT( K, K );
        K[15] ^= 0x87;
    }
    else
        LSHIFT( K, K );
 80061aa:	2100      	movs	r1, #0
    if( K[0] & 0x80 )
 80061ac:	2a7f      	cmp	r2, #127	; 0x7f
 80061ae:	d940      	bls.n	8006232 <AES_CMAC_Final+0xa8>
        LSHIFT( K, K );
 80061b0:	781a      	ldrb	r2, [r3, #0]
 80061b2:	7858      	ldrb	r0, [r3, #1]
 80061b4:	0052      	lsls	r2, r2, #1
 80061b6:	09c0      	lsrs	r0, r0, #7
 80061b8:	4302      	orrs	r2, r0
 80061ba:	3101      	adds	r1, #1
 80061bc:	701a      	strb	r2, [r3, #0]
 80061be:	3301      	adds	r3, #1
 80061c0:	290f      	cmp	r1, #15
 80061c2:	d1f5      	bne.n	80061b0 <AES_CMAC_Final+0x26>
 80061c4:	ab02      	add	r3, sp, #8
 80061c6:	7bda      	ldrb	r2, [r3, #15]
        K[15] ^= 0x87;
 80061c8:	2379      	movs	r3, #121	; 0x79
        LSHIFT( K, K );
 80061ca:	0052      	lsls	r2, r2, #1
        K[15] ^= 0x87;
 80061cc:	425b      	negs	r3, r3
 80061ce:	4053      	eors	r3, r2

    if( ctx->M_n == 16 )
 80061d0:	0027      	movs	r7, r4
 80061d2:	37fc      	adds	r7, #252	; 0xfc
 80061d4:	69b8      	ldr	r0, [r7, #24]
        LSHIFT( K, K );
 80061d6:	aa02      	add	r2, sp, #8
 80061d8:	73d3      	strb	r3, [r2, #15]
    if( ctx->M_n == 16 )
 80061da:	2810      	cmp	r0, #16
 80061dc:	d137      	bne.n	800624e <AES_CMAC_Final+0xc4>
 80061de:	0020      	movs	r0, r4
 80061e0:	1ca3      	adds	r3, r4, #2
 80061e2:	3012      	adds	r0, #18
 80061e4:	33ff      	adds	r3, #255	; 0xff
 80061e6:	aa02      	add	r2, sp, #8
 80061e8:	30ff      	adds	r0, #255	; 0xff
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 80061ea:	7819      	ldrb	r1, [r3, #0]
 80061ec:	7815      	ldrb	r5, [r2, #0]
 80061ee:	3201      	adds	r2, #1
 80061f0:	4069      	eors	r1, r5
 80061f2:	7019      	strb	r1, [r3, #0]
 80061f4:	3301      	adds	r3, #1
 80061f6:	4298      	cmp	r0, r3
 80061f8:	d1f7      	bne.n	80061ea <AES_CMAC_Final+0x60>
 80061fa:	0023      	movs	r3, r4
 80061fc:	33f1      	adds	r3, #241	; 0xf1
 80061fe:	0019      	movs	r1, r3
 8006200:	1ca0      	adds	r0, r4, #2
 8006202:	30ff      	adds	r0, #255	; 0xff
        while( ++ctx->M_n < 16 )
            ctx->M_last[ctx->M_n] = 0;

        XOR( K, ctx->M_last );
    }
    XOR( ctx->M_last, ctx->X );
 8006204:	781a      	ldrb	r2, [r3, #0]
 8006206:	7c1d      	ldrb	r5, [r3, #16]
 8006208:	406a      	eors	r2, r5
 800620a:	701a      	strb	r2, [r3, #0]
 800620c:	3301      	adds	r3, #1
 800620e:	4283      	cmp	r3, r0
 8006210:	d1f8      	bne.n	8006204 <AES_CMAC_Final+0x7a>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8006212:	a806      	add	r0, sp, #24
 8006214:	2210      	movs	r2, #16
 8006216:	f006 f833 	bl	800c280 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800621a:	0022      	movs	r2, r4
 800621c:	9901      	ldr	r1, [sp, #4]
 800621e:	a806      	add	r0, sp, #24
 8006220:	f000 f968 	bl	80064f4 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 8006224:	2210      	movs	r2, #16
 8006226:	2100      	movs	r1, #0
 8006228:	a802      	add	r0, sp, #8
 800622a:	f006 f83e 	bl	800c2aa <memset1>
}
 800622e:	b00b      	add	sp, #44	; 0x2c
 8006230:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LSHIFT( K, K );
 8006232:	781a      	ldrb	r2, [r3, #0]
 8006234:	7858      	ldrb	r0, [r3, #1]
 8006236:	0052      	lsls	r2, r2, #1
 8006238:	09c0      	lsrs	r0, r0, #7
 800623a:	4302      	orrs	r2, r0
 800623c:	3101      	adds	r1, #1
 800623e:	701a      	strb	r2, [r3, #0]
 8006240:	3301      	adds	r3, #1
 8006242:	290f      	cmp	r1, #15
 8006244:	d1f5      	bne.n	8006232 <AES_CMAC_Final+0xa8>
 8006246:	ab02      	add	r3, sp, #8
 8006248:	7bdb      	ldrb	r3, [r3, #15]
 800624a:	005b      	lsls	r3, r3, #1
 800624c:	e7c0      	b.n	80061d0 <AES_CMAC_Final+0x46>
        if( K[0] & 0x80 )
 800624e:	ab02      	add	r3, sp, #8
 8006250:	781a      	ldrb	r2, [r3, #0]
            LSHIFT( K, K );
 8006252:	2100      	movs	r1, #0
        if( K[0] & 0x80 )
 8006254:	2a7f      	cmp	r2, #127	; 0x7f
 8006256:	d933      	bls.n	80062c0 <AES_CMAC_Final+0x136>
            LSHIFT( K, K );
 8006258:	781a      	ldrb	r2, [r3, #0]
 800625a:	785d      	ldrb	r5, [r3, #1]
 800625c:	0052      	lsls	r2, r2, #1
 800625e:	09ed      	lsrs	r5, r5, #7
 8006260:	432a      	orrs	r2, r5
 8006262:	3101      	adds	r1, #1
 8006264:	701a      	strb	r2, [r3, #0]
 8006266:	3301      	adds	r3, #1
 8006268:	290f      	cmp	r1, #15
 800626a:	d1f5      	bne.n	8006258 <AES_CMAC_Final+0xce>
 800626c:	ab02      	add	r3, sp, #8
 800626e:	7bda      	ldrb	r2, [r3, #15]
            K[15] ^= 0x87;
 8006270:	2379      	movs	r3, #121	; 0x79
            LSHIFT( K, K );
 8006272:	0052      	lsls	r2, r2, #1
            K[15] ^= 0x87;
 8006274:	425b      	negs	r3, r3
 8006276:	4053      	eors	r3, r2
            LSHIFT( K, K );
 8006278:	aa02      	add	r2, sp, #8
 800627a:	73d3      	strb	r3, [r2, #15]
        ctx->M_last[ctx->M_n] = 0x80;
 800627c:	2280      	movs	r2, #128	; 0x80
 800627e:	1823      	adds	r3, r4, r0
 8006280:	33ff      	adds	r3, #255	; 0xff
            ctx->M_last[ctx->M_n] = 0;
 8006282:	1c46      	adds	r6, r0, #1
 8006284:	2500      	movs	r5, #0
        ctx->M_last[ctx->M_n] = 0x80;
 8006286:	709a      	strb	r2, [r3, #2]
            ctx->M_last[ctx->M_n] = 0;
 8006288:	2e10      	cmp	r6, #16
 800628a:	d801      	bhi.n	8006290 <AES_CMAC_Final+0x106>
 800628c:	350f      	adds	r5, #15
 800628e:	1a2d      	subs	r5, r5, r0
 8006290:	3003      	adds	r0, #3
 8006292:	30ff      	adds	r0, #255	; 0xff
 8006294:	002a      	movs	r2, r5
 8006296:	2100      	movs	r1, #0
 8006298:	1820      	adds	r0, r4, r0
 800629a:	f008 f8e2 	bl	800e462 <memset>
 800629e:	0020      	movs	r0, r4
        while( ++ctx->M_n < 16 )
 80062a0:	19ad      	adds	r5, r5, r6
 80062a2:	1ca3      	adds	r3, r4, #2
 80062a4:	3012      	adds	r0, #18
 80062a6:	61bd      	str	r5, [r7, #24]
 80062a8:	33ff      	adds	r3, #255	; 0xff
 80062aa:	aa02      	add	r2, sp, #8
 80062ac:	30ff      	adds	r0, #255	; 0xff
        XOR( K, ctx->M_last );
 80062ae:	7819      	ldrb	r1, [r3, #0]
 80062b0:	7815      	ldrb	r5, [r2, #0]
 80062b2:	3201      	adds	r2, #1
 80062b4:	4069      	eors	r1, r5
 80062b6:	7019      	strb	r1, [r3, #0]
 80062b8:	3301      	adds	r3, #1
 80062ba:	4298      	cmp	r0, r3
 80062bc:	d1f7      	bne.n	80062ae <AES_CMAC_Final+0x124>
 80062be:	e79c      	b.n	80061fa <AES_CMAC_Final+0x70>
            LSHIFT( K, K );
 80062c0:	781a      	ldrb	r2, [r3, #0]
 80062c2:	785d      	ldrb	r5, [r3, #1]
 80062c4:	0052      	lsls	r2, r2, #1
 80062c6:	09ed      	lsrs	r5, r5, #7
 80062c8:	432a      	orrs	r2, r5
 80062ca:	3101      	adds	r1, #1
 80062cc:	701a      	strb	r2, [r3, #0]
 80062ce:	3301      	adds	r3, #1
 80062d0:	290f      	cmp	r1, #15
 80062d2:	d1f5      	bne.n	80062c0 <AES_CMAC_Final+0x136>
 80062d4:	ab02      	add	r3, sp, #8
 80062d6:	7bdb      	ldrb	r3, [r3, #15]
 80062d8:	005b      	lsls	r3, r3, #1
 80062da:	e7cd      	b.n	8006278 <AES_CMAC_Final+0xee>

080062dc <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 80062dc:	780a      	ldrb	r2, [r1, #0]
 80062de:	7803      	ldrb	r3, [r0, #0]
 80062e0:	4053      	eors	r3, r2
 80062e2:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 80062e4:	784a      	ldrb	r2, [r1, #1]
 80062e6:	7843      	ldrb	r3, [r0, #1]
 80062e8:	4053      	eors	r3, r2
 80062ea:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 80062ec:	788a      	ldrb	r2, [r1, #2]
 80062ee:	7883      	ldrb	r3, [r0, #2]
 80062f0:	4053      	eors	r3, r2
 80062f2:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 80062f4:	78ca      	ldrb	r2, [r1, #3]
 80062f6:	78c3      	ldrb	r3, [r0, #3]
 80062f8:	4053      	eors	r3, r2
 80062fa:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 80062fc:	790a      	ldrb	r2, [r1, #4]
 80062fe:	7903      	ldrb	r3, [r0, #4]
 8006300:	4053      	eors	r3, r2
 8006302:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 8006304:	794a      	ldrb	r2, [r1, #5]
 8006306:	7943      	ldrb	r3, [r0, #5]
 8006308:	4053      	eors	r3, r2
 800630a:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800630c:	798a      	ldrb	r2, [r1, #6]
 800630e:	7983      	ldrb	r3, [r0, #6]
 8006310:	4053      	eors	r3, r2
 8006312:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 8006314:	79ca      	ldrb	r2, [r1, #7]
 8006316:	79c3      	ldrb	r3, [r0, #7]
 8006318:	4053      	eors	r3, r2
 800631a:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800631c:	7a0a      	ldrb	r2, [r1, #8]
 800631e:	7a03      	ldrb	r3, [r0, #8]
 8006320:	4053      	eors	r3, r2
 8006322:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 8006324:	7a4a      	ldrb	r2, [r1, #9]
 8006326:	7a43      	ldrb	r3, [r0, #9]
 8006328:	4053      	eors	r3, r2
 800632a:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800632c:	7a8a      	ldrb	r2, [r1, #10]
 800632e:	7a83      	ldrb	r3, [r0, #10]
 8006330:	4053      	eors	r3, r2
 8006332:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 8006334:	7aca      	ldrb	r2, [r1, #11]
 8006336:	7ac3      	ldrb	r3, [r0, #11]
 8006338:	4053      	eors	r3, r2
 800633a:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800633c:	7b0a      	ldrb	r2, [r1, #12]
 800633e:	7b03      	ldrb	r3, [r0, #12]
 8006340:	4053      	eors	r3, r2
 8006342:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 8006344:	7b4a      	ldrb	r2, [r1, #13]
 8006346:	7b43      	ldrb	r3, [r0, #13]
 8006348:	4053      	eors	r3, r2
 800634a:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800634c:	7b8a      	ldrb	r2, [r1, #14]
 800634e:	7b83      	ldrb	r3, [r0, #14]
 8006350:	4053      	eors	r3, r2
 8006352:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 8006354:	7bca      	ldrb	r2, [r1, #15]
 8006356:	7bc3      	ldrb	r3, [r0, #15]
 8006358:	4053      	eors	r3, r2
 800635a:	73c3      	strb	r3, [r0, #15]
#endif
}
 800635c:	4770      	bx	lr

0800635e <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800635e:	b510      	push	{r4, lr}
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 8006360:	780b      	ldrb	r3, [r1, #0]
 8006362:	7814      	ldrb	r4, [r2, #0]
 8006364:	4063      	eors	r3, r4
 8006366:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 8006368:	7854      	ldrb	r4, [r2, #1]
 800636a:	784b      	ldrb	r3, [r1, #1]
 800636c:	4063      	eors	r3, r4
 800636e:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 8006370:	7894      	ldrb	r4, [r2, #2]
 8006372:	788b      	ldrb	r3, [r1, #2]
 8006374:	4063      	eors	r3, r4
 8006376:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 8006378:	78d4      	ldrb	r4, [r2, #3]
 800637a:	78cb      	ldrb	r3, [r1, #3]
 800637c:	4063      	eors	r3, r4
 800637e:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 8006380:	7914      	ldrb	r4, [r2, #4]
 8006382:	790b      	ldrb	r3, [r1, #4]
 8006384:	4063      	eors	r3, r4
 8006386:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 8006388:	7954      	ldrb	r4, [r2, #5]
 800638a:	794b      	ldrb	r3, [r1, #5]
 800638c:	4063      	eors	r3, r4
 800638e:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 8006390:	7994      	ldrb	r4, [r2, #6]
 8006392:	798b      	ldrb	r3, [r1, #6]
 8006394:	4063      	eors	r3, r4
 8006396:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 8006398:	79d4      	ldrb	r4, [r2, #7]
 800639a:	79cb      	ldrb	r3, [r1, #7]
 800639c:	4063      	eors	r3, r4
 800639e:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 80063a0:	7a14      	ldrb	r4, [r2, #8]
 80063a2:	7a0b      	ldrb	r3, [r1, #8]
 80063a4:	4063      	eors	r3, r4
 80063a6:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 80063a8:	7a4b      	ldrb	r3, [r1, #9]
 80063aa:	7a54      	ldrb	r4, [r2, #9]
 80063ac:	4063      	eors	r3, r4
 80063ae:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 80063b0:	7a8b      	ldrb	r3, [r1, #10]
 80063b2:	7a94      	ldrb	r4, [r2, #10]
 80063b4:	4063      	eors	r3, r4
 80063b6:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 80063b8:	7ad4      	ldrb	r4, [r2, #11]
 80063ba:	7acb      	ldrb	r3, [r1, #11]
 80063bc:	4063      	eors	r3, r4
 80063be:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 80063c0:	7b14      	ldrb	r4, [r2, #12]
 80063c2:	7b0b      	ldrb	r3, [r1, #12]
 80063c4:	4063      	eors	r3, r4
 80063c6:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 80063c8:	7b54      	ldrb	r4, [r2, #13]
 80063ca:	7b4b      	ldrb	r3, [r1, #13]
 80063cc:	4063      	eors	r3, r4
 80063ce:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 80063d0:	7b94      	ldrb	r4, [r2, #14]
 80063d2:	7b8b      	ldrb	r3, [r1, #14]
 80063d4:	4063      	eors	r3, r4
 80063d6:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 80063d8:	7bcb      	ldrb	r3, [r1, #15]
 80063da:	7bd2      	ldrb	r2, [r2, #15]
 80063dc:	4053      	eors	r3, r2
 80063de:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 80063e0:	bd10      	pop	{r4, pc}
	...

080063e4 <lorawan_aes_set_key>:

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
    uint8_t cc, rc, hi;

    switch( keylen )
 80063e4:	000b      	movs	r3, r1
{
 80063e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063e8:	3b10      	subs	r3, #16
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	000f      	movs	r7, r1
 80063ee:	0014      	movs	r4, r2
 80063f0:	b087      	sub	sp, #28
 80063f2:	2b10      	cmp	r3, #16
 80063f4:	d805      	bhi.n	8006402 <lorawan_aes_set_key+0x1e>
 80063f6:	2201      	movs	r2, #1
 80063f8:	409a      	lsls	r2, r3
 80063fa:	0013      	movs	r3, r2
 80063fc:	4a3b      	ldr	r2, [pc, #236]	; (80064ec <lorawan_aes_set_key+0x108>)
 80063fe:	4213      	tst	r3, r2
 8006400:	d105      	bne.n	800640e <lorawan_aes_set_key+0x2a>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 8006402:	2300      	movs	r3, #0
        return ( uint8_t )-1;
 8006404:	20ff      	movs	r0, #255	; 0xff
        ctx->rnd = 0;
 8006406:	34f0      	adds	r4, #240	; 0xf0
 8006408:	7023      	strb	r3, [r4, #0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 800640a:	b007      	add	sp, #28
 800640c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    while( nn-- )
 800640e:	2300      	movs	r3, #0
 8006410:	429f      	cmp	r7, r3
 8006412:	d155      	bne.n	80064c0 <lorawan_aes_set_key+0xdc>
    hi = (keylen + 28) << 2;
 8006414:	003b      	movs	r3, r7
    ctx->rnd = (hi >> 4) - 1;
 8006416:	0022      	movs	r2, r4
    hi = (keylen + 28) << 2;
 8006418:	331c      	adds	r3, #28
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	b2db      	uxtb	r3, r3
 800641e:	9305      	str	r3, [sp, #20]
    ctx->rnd = (hi >> 4) - 1;
 8006420:	091b      	lsrs	r3, r3, #4
 8006422:	3b01      	subs	r3, #1
 8006424:	32f0      	adds	r2, #240	; 0xf0
 8006426:	7013      	strb	r3, [r2, #0]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8006428:	2301      	movs	r3, #1
    ctx->rnd = (hi >> 4) - 1;
 800642a:	003d      	movs	r5, r7
            t0 = s_box(t0);
 800642c:	4e30      	ldr	r6, [pc, #192]	; (80064f0 <lorawan_aes_set_key+0x10c>)
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800642e:	9304      	str	r3, [sp, #16]
        t0 = ctx->ksch[cc - 4];
 8006430:	1963      	adds	r3, r4, r5
 8006432:	1f1a      	subs	r2, r3, #4
 8006434:	7812      	ldrb	r2, [r2, #0]
        if( cc % keylen == 0 )
 8006436:	0039      	movs	r1, r7
        t0 = ctx->ksch[cc - 4];
 8006438:	9200      	str	r2, [sp, #0]
        t1 = ctx->ksch[cc - 3];
 800643a:	1eda      	subs	r2, r3, #3
 800643c:	7812      	ldrb	r2, [r2, #0]
        if( cc % keylen == 0 )
 800643e:	0028      	movs	r0, r5
        t1 = ctx->ksch[cc - 3];
 8006440:	9201      	str	r2, [sp, #4]
        t2 = ctx->ksch[cc - 2];
 8006442:	1e9a      	subs	r2, r3, #2
        t3 = ctx->ksch[cc - 1];
 8006444:	3b01      	subs	r3, #1
        t2 = ctx->ksch[cc - 2];
 8006446:	7812      	ldrb	r2, [r2, #0]
        t3 = ctx->ksch[cc - 1];
 8006448:	781b      	ldrb	r3, [r3, #0]
        t2 = ctx->ksch[cc - 2];
 800644a:	9202      	str	r2, [sp, #8]
        t3 = ctx->ksch[cc - 1];
 800644c:	9303      	str	r3, [sp, #12]
        if( cc % keylen == 0 )
 800644e:	f7f9 ff11 	bl	8000274 <__aeabi_uidivmod>
 8006452:	b2c9      	uxtb	r1, r1
 8006454:	2900      	cmp	r1, #0
 8006456:	d137      	bne.n	80064c8 <lorawan_aes_set_key+0xe4>
            t0 = s_box(t1) ^ rc;
 8006458:	9b01      	ldr	r3, [sp, #4]
            rc = f2(rc);
 800645a:	311b      	adds	r1, #27
            t0 = s_box(t1) ^ rc;
 800645c:	5cf2      	ldrb	r2, [r6, r3]
 800645e:	9b04      	ldr	r3, [sp, #16]
 8006460:	405a      	eors	r2, r3
            t1 = s_box(t2);
 8006462:	9b02      	ldr	r3, [sp, #8]
 8006464:	5cf3      	ldrb	r3, [r6, r3]
 8006466:	9301      	str	r3, [sp, #4]
            t2 = s_box(t3);
 8006468:	9b03      	ldr	r3, [sp, #12]
 800646a:	5cf3      	ldrb	r3, [r6, r3]
 800646c:	9302      	str	r3, [sp, #8]
            t3 = s_box(tt);
 800646e:	9b00      	ldr	r3, [sp, #0]
            t0 = s_box(t1) ^ rc;
 8006470:	9200      	str	r2, [sp, #0]
            t3 = s_box(tt);
 8006472:	5cf3      	ldrb	r3, [r6, r3]
 8006474:	9303      	str	r3, [sp, #12]
            rc = f2(rc);
 8006476:	9b04      	ldr	r3, [sp, #16]
 8006478:	09db      	lsrs	r3, r3, #7
 800647a:	434b      	muls	r3, r1
 800647c:	9904      	ldr	r1, [sp, #16]
 800647e:	0049      	lsls	r1, r1, #1
 8006480:	404b      	eors	r3, r1
 8006482:	b2db      	uxtb	r3, r3
 8006484:	9304      	str	r3, [sp, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 8006486:	1beb      	subs	r3, r5, r7
 8006488:	b2db      	uxtb	r3, r3
 800648a:	5ce2      	ldrb	r2, [r4, r3]
 800648c:	9900      	ldr	r1, [sp, #0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800648e:	18e3      	adds	r3, r4, r3
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 8006490:	4051      	eors	r1, r2
 8006492:	5561      	strb	r1, [r4, r5]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 8006494:	785a      	ldrb	r2, [r3, #1]
 8006496:	9801      	ldr	r0, [sp, #4]
 8006498:	1c69      	adds	r1, r5, #1
 800649a:	4050      	eors	r0, r2
 800649c:	b2c9      	uxtb	r1, r1
 800649e:	5460      	strb	r0, [r4, r1]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 80064a0:	789a      	ldrb	r2, [r3, #2]
 80064a2:	9802      	ldr	r0, [sp, #8]
 80064a4:	1961      	adds	r1, r4, r5
 80064a6:	4050      	eors	r0, r2
 80064a8:	7088      	strb	r0, [r1, #2]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 80064aa:	78db      	ldrb	r3, [r3, #3]
 80064ac:	9a03      	ldr	r2, [sp, #12]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 80064ae:	3504      	adds	r5, #4
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 80064b0:	405a      	eors	r2, r3
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 80064b2:	9b05      	ldr	r3, [sp, #20]
 80064b4:	b2ed      	uxtb	r5, r5
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 80064b6:	70ca      	strb	r2, [r1, #3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 80064b8:	42ab      	cmp	r3, r5
 80064ba:	d8b9      	bhi.n	8006430 <lorawan_aes_set_key+0x4c>
    return 0;
 80064bc:	2000      	movs	r0, #0
 80064be:	e7a4      	b.n	800640a <lorawan_aes_set_key+0x26>
        *d++ = *s++;
 80064c0:	5cc2      	ldrb	r2, [r0, r3]
 80064c2:	54e2      	strb	r2, [r4, r3]
 80064c4:	3301      	adds	r3, #1
 80064c6:	e7a3      	b.n	8006410 <lorawan_aes_set_key+0x2c>
        else if( keylen > 24 && cc % keylen == 16 )
 80064c8:	2f18      	cmp	r7, #24
 80064ca:	d9dc      	bls.n	8006486 <lorawan_aes_set_key+0xa2>
 80064cc:	2910      	cmp	r1, #16
 80064ce:	d1da      	bne.n	8006486 <lorawan_aes_set_key+0xa2>
            t0 = s_box(t0);
 80064d0:	9b00      	ldr	r3, [sp, #0]
 80064d2:	5cf3      	ldrb	r3, [r6, r3]
 80064d4:	9300      	str	r3, [sp, #0]
            t1 = s_box(t1);
 80064d6:	9b01      	ldr	r3, [sp, #4]
 80064d8:	5cf3      	ldrb	r3, [r6, r3]
 80064da:	9301      	str	r3, [sp, #4]
            t2 = s_box(t2);
 80064dc:	9b02      	ldr	r3, [sp, #8]
 80064de:	5cf3      	ldrb	r3, [r6, r3]
 80064e0:	9302      	str	r3, [sp, #8]
            t3 = s_box(t3);
 80064e2:	9b03      	ldr	r3, [sp, #12]
 80064e4:	5cf3      	ldrb	r3, [r6, r3]
 80064e6:	9303      	str	r3, [sp, #12]
 80064e8:	e7cd      	b.n	8006486 <lorawan_aes_set_key+0xa2>
 80064ea:	46c0      	nop			; (mov r8, r8)
 80064ec:	00010101 	.word	0x00010101
 80064f0:	0800e8ad 	.word	0x0800e8ad

080064f4 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 80064f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064f6:	b099      	sub	sp, #100	; 0x64
 80064f8:	9210      	str	r2, [sp, #64]	; 0x40
 80064fa:	9113      	str	r1, [sp, #76]	; 0x4c
    if( ctx->rnd )
 80064fc:	32f0      	adds	r2, #240	; 0xf0
 80064fe:	7812      	ldrb	r2, [r2, #0]
{
 8006500:	0003      	movs	r3, r0
#endif
        shift_sub_rows( s1 );
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
    }
    else
        return ( uint8_t )-1;
 8006502:	20ff      	movs	r0, #255	; 0xff
    if( ctx->rnd )
 8006504:	2a00      	cmp	r2, #0
 8006506:	d072      	beq.n	80065ee <lorawan_aes_encrypt+0xfa>
        copy_and_key( s1, in, ctx->ksch );
 8006508:	0019      	movs	r1, r3
 800650a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800650c:	a814      	add	r0, sp, #80	; 0x50
 800650e:	f7ff ff26 	bl	800635e <copy_and_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 8006512:	2301      	movs	r3, #1
 8006514:	9301      	str	r3, [sp, #4]
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 8006516:	9b01      	ldr	r3, [sp, #4]
 8006518:	011a      	lsls	r2, r3, #4
 800651a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800651c:	189b      	adds	r3, r3, r2
 800651e:	9312      	str	r3, [sp, #72]	; 0x48
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 8006520:	ab14      	add	r3, sp, #80	; 0x50
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	9302      	str	r3, [sp, #8]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 8006526:	ab14      	add	r3, sp, #80	; 0x50
 8006528:	785b      	ldrb	r3, [r3, #1]
 800652a:	9303      	str	r3, [sp, #12]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800652c:	ab14      	add	r3, sp, #80	; 0x50
 800652e:	789b      	ldrb	r3, [r3, #2]
 8006530:	9304      	str	r3, [sp, #16]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 8006532:	ab14      	add	r3, sp, #80	; 0x50
 8006534:	78db      	ldrb	r3, [r3, #3]
 8006536:	9305      	str	r3, [sp, #20]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 8006538:	ab14      	add	r3, sp, #80	; 0x50
 800653a:	791b      	ldrb	r3, [r3, #4]
 800653c:	9306      	str	r3, [sp, #24]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800653e:	ab14      	add	r3, sp, #80	; 0x50
 8006540:	795c      	ldrb	r4, [r3, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 8006542:	799b      	ldrb	r3, [r3, #6]
 8006544:	9307      	str	r3, [sp, #28]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 8006546:	ab14      	add	r3, sp, #80	; 0x50
 8006548:	79db      	ldrb	r3, [r3, #7]
 800654a:	9308      	str	r3, [sp, #32]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800654c:	ab14      	add	r3, sp, #80	; 0x50
 800654e:	7a1b      	ldrb	r3, [r3, #8]
 8006550:	9309      	str	r3, [sp, #36]	; 0x24
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 8006552:	ab14      	add	r3, sp, #80	; 0x50
 8006554:	7a5b      	ldrb	r3, [r3, #9]
 8006556:	930a      	str	r3, [sp, #40]	; 0x28
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 8006558:	ab14      	add	r3, sp, #80	; 0x50
 800655a:	7a9f      	ldrb	r7, [r3, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800655c:	7adb      	ldrb	r3, [r3, #11]
 800655e:	930b      	str	r3, [sp, #44]	; 0x2c
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 8006560:	ab14      	add	r3, sp, #80	; 0x50
 8006562:	7b1b      	ldrb	r3, [r3, #12]
 8006564:	930c      	str	r3, [sp, #48]	; 0x30
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 8006566:	ab14      	add	r3, sp, #80	; 0x50
 8006568:	7b5b      	ldrb	r3, [r3, #13]
 800656a:	930d      	str	r3, [sp, #52]	; 0x34
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800656c:	ab14      	add	r3, sp, #80	; 0x50
 800656e:	7b9b      	ldrb	r3, [r3, #14]
 8006570:	930e      	str	r3, [sp, #56]	; 0x38
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 8006572:	ab14      	add	r3, sp, #80	; 0x50
 8006574:	7bdb      	ldrb	r3, [r3, #15]
        for( r = 1 ; r < ctx->rnd ; ++r )
 8006576:	9901      	ldr	r1, [sp, #4]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 8006578:	930f      	str	r3, [sp, #60]	; 0x3c
        for( r = 1 ; r < ctx->rnd ; ++r )
 800657a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800657c:	33f0      	adds	r3, #240	; 0xf0
 800657e:	781a      	ldrb	r2, [r3, #0]
 8006580:	4b74      	ldr	r3, [pc, #464]	; (8006754 <lorawan_aes_encrypt+0x260>)
 8006582:	428a      	cmp	r2, r1
 8006584:	d835      	bhi.n	80065f2 <lorawan_aes_encrypt+0xfe>
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 8006586:	9a02      	ldr	r2, [sp, #8]
 8006588:	a914      	add	r1, sp, #80	; 0x50
 800658a:	5c9a      	ldrb	r2, [r3, r2]
 800658c:	700a      	strb	r2, [r1, #0]
 800658e:	9a06      	ldr	r2, [sp, #24]
 8006590:	5c9a      	ldrb	r2, [r3, r2]
 8006592:	710a      	strb	r2, [r1, #4]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 8006594:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006596:	5c9a      	ldrb	r2, [r3, r2]
 8006598:	720a      	strb	r2, [r1, #8]
 800659a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800659c:	5c9a      	ldrb	r2, [r3, r2]
 800659e:	730a      	strb	r2, [r1, #12]
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 80065a0:	5d1a      	ldrb	r2, [r3, r4]
 80065a2:	704a      	strb	r2, [r1, #1]
 80065a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065a6:	5c9a      	ldrb	r2, [r3, r2]
 80065a8:	714a      	strb	r2, [r1, #5]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 80065aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80065ac:	5c9a      	ldrb	r2, [r3, r2]
 80065ae:	724a      	strb	r2, [r1, #9]
 80065b0:	9a03      	ldr	r2, [sp, #12]
 80065b2:	5c9a      	ldrb	r2, [r3, r2]
 80065b4:	734a      	strb	r2, [r1, #13]
    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 80065b6:	5dda      	ldrb	r2, [r3, r7]
 80065b8:	708a      	strb	r2, [r1, #2]
 80065ba:	9a04      	ldr	r2, [sp, #16]
 80065bc:	5c9a      	ldrb	r2, [r3, r2]
 80065be:	728a      	strb	r2, [r1, #10]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 80065c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80065c2:	5c9a      	ldrb	r2, [r3, r2]
 80065c4:	718a      	strb	r2, [r1, #6]
 80065c6:	9a07      	ldr	r2, [sp, #28]
 80065c8:	5c9a      	ldrb	r2, [r3, r2]
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 80065ca:	9813      	ldr	r0, [sp, #76]	; 0x4c
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 80065cc:	738a      	strb	r2, [r1, #14]
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 80065ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80065d0:	5c9a      	ldrb	r2, [r3, r2]
 80065d2:	73ca      	strb	r2, [r1, #15]
 80065d4:	9a08      	ldr	r2, [sp, #32]
 80065d6:	5c9a      	ldrb	r2, [r3, r2]
 80065d8:	72ca      	strb	r2, [r1, #11]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 80065da:	9a05      	ldr	r2, [sp, #20]
 80065dc:	5c9a      	ldrb	r2, [r3, r2]
 80065de:	71ca      	strb	r2, [r1, #7]
 80065e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80065e2:	5c9b      	ldrb	r3, [r3, r2]
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 80065e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 80065e6:	70cb      	strb	r3, [r1, #3]
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 80065e8:	f7ff feb9 	bl	800635e <copy_and_key>
    return 0;
 80065ec:	2000      	movs	r0, #0
}
 80065ee:	b019      	add	sp, #100	; 0x64
 80065f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 80065f2:	5dda      	ldrb	r2, [r3, r7]
 80065f4:	4958      	ldr	r1, [pc, #352]	; (8006758 <lorawan_aes_encrypt+0x264>)
 80065f6:	9211      	str	r2, [sp, #68]	; 0x44
 80065f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80065fa:	9d02      	ldr	r5, [sp, #8]
 80065fc:	5c98      	ldrb	r0, [r3, r2]
 80065fe:	4a57      	ldr	r2, [pc, #348]	; (800675c <lorawan_aes_encrypt+0x268>)
 8006600:	5d56      	ldrb	r6, [r2, r5]
 8006602:	5d0d      	ldrb	r5, [r1, r4]
 8006604:	406e      	eors	r6, r5
 8006606:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8006608:	406e      	eors	r6, r5
 800660a:	4046      	eors	r6, r0
 800660c:	ad14      	add	r5, sp, #80	; 0x50
 800660e:	702e      	strb	r6, [r5, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 8006610:	9d02      	ldr	r5, [sp, #8]
 8006612:	5d5e      	ldrb	r6, [r3, r5]
 8006614:	5d15      	ldrb	r5, [r2, r4]
 8006616:	4070      	eors	r0, r6
 8006618:	4068      	eors	r0, r5
 800661a:	5dcd      	ldrb	r5, [r1, r7]
 800661c:	4068      	eors	r0, r5
 800661e:	ad14      	add	r5, sp, #80	; 0x50
 8006620:	7068      	strb	r0, [r5, #1]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 8006622:	5d18      	ldrb	r0, [r3, r4]
 8006624:	5dd4      	ldrb	r4, [r2, r7]
 8006626:	4046      	eors	r6, r0
 8006628:	4066      	eors	r6, r4
 800662a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800662c:	5d0c      	ldrb	r4, [r1, r4]
 800662e:	4066      	eors	r6, r4
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 8006630:	9c11      	ldr	r4, [sp, #68]	; 0x44
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 8006632:	70ae      	strb	r6, [r5, #2]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 8006634:	4060      	eors	r0, r4
 8006636:	9c02      	ldr	r4, [sp, #8]
 8006638:	5d0f      	ldrb	r7, [r1, r4]
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800663a:	9c06      	ldr	r4, [sp, #24]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800663c:	4047      	eors	r7, r0
 800663e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8006640:	5c10      	ldrb	r0, [r2, r0]
 8006642:	4078      	eors	r0, r7
 8006644:	70e8      	strb	r0, [r5, #3]
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8006646:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006648:	5c1d      	ldrb	r5, [r3, r0]
 800664a:	9805      	ldr	r0, [sp, #20]
 800664c:	5c18      	ldrb	r0, [r3, r0]
 800664e:	5d14      	ldrb	r4, [r2, r4]
 8006650:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006652:	5d8e      	ldrb	r6, [r1, r6]
 8006654:	4074      	eors	r4, r6
 8006656:	406c      	eors	r4, r5
 8006658:	4044      	eors	r4, r0
 800665a:	ae14      	add	r6, sp, #80	; 0x50
 800665c:	7134      	strb	r4, [r6, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800665e:	9c06      	ldr	r4, [sp, #24]
 8006660:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006662:	5d1c      	ldrb	r4, [r3, r4]
 8006664:	5d96      	ldrb	r6, [r2, r6]
 8006666:	4060      	eors	r0, r4
 8006668:	4070      	eors	r0, r6
 800666a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800666c:	5d8e      	ldrb	r6, [r1, r6]
 800666e:	4070      	eors	r0, r6
 8006670:	ae14      	add	r6, sp, #80	; 0x50
 8006672:	7170      	strb	r0, [r6, #5]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8006674:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006676:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8006678:	5c18      	ldrb	r0, [r3, r0]
 800667a:	5d96      	ldrb	r6, [r2, r6]
 800667c:	4044      	eors	r4, r0
 800667e:	4074      	eors	r4, r6
 8006680:	9e05      	ldr	r6, [sp, #20]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 8006682:	4068      	eors	r0, r5
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8006684:	5d8e      	ldrb	r6, [r1, r6]
 8006686:	4074      	eors	r4, r6
 8006688:	ae14      	add	r6, sp, #80	; 0x50
 800668a:	71b4      	strb	r4, [r6, #6]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800668c:	9c06      	ldr	r4, [sp, #24]
 800668e:	5d0d      	ldrb	r5, [r1, r4]
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8006690:	9c09      	ldr	r4, [sp, #36]	; 0x24
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 8006692:	4045      	eors	r5, r0
 8006694:	9805      	ldr	r0, [sp, #20]
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8006696:	5d14      	ldrb	r4, [r2, r4]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 8006698:	5c10      	ldrb	r0, [r2, r0]
 800669a:	4068      	eors	r0, r5
 800669c:	71f0      	strb	r0, [r6, #7]
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800669e:	9804      	ldr	r0, [sp, #16]
 80066a0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80066a2:	5c1d      	ldrb	r5, [r3, r0]
 80066a4:	5d8e      	ldrb	r6, [r1, r6]
 80066a6:	9808      	ldr	r0, [sp, #32]
 80066a8:	4074      	eors	r4, r6
 80066aa:	5c18      	ldrb	r0, [r3, r0]
 80066ac:	406c      	eors	r4, r5
 80066ae:	4044      	eors	r4, r0
 80066b0:	ae14      	add	r6, sp, #80	; 0x50
 80066b2:	7234      	strb	r4, [r6, #8]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 80066b4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80066b6:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80066b8:	5d1c      	ldrb	r4, [r3, r4]
 80066ba:	5d96      	ldrb	r6, [r2, r6]
 80066bc:	4060      	eors	r0, r4
 80066be:	4070      	eors	r0, r6
 80066c0:	9e04      	ldr	r6, [sp, #16]
 80066c2:	5d8e      	ldrb	r6, [r1, r6]
 80066c4:	4070      	eors	r0, r6
 80066c6:	ae14      	add	r6, sp, #80	; 0x50
 80066c8:	7270      	strb	r0, [r6, #9]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 80066ca:	980d      	ldr	r0, [sp, #52]	; 0x34
 80066cc:	9e04      	ldr	r6, [sp, #16]
 80066ce:	5c18      	ldrb	r0, [r3, r0]
 80066d0:	5d96      	ldrb	r6, [r2, r6]
 80066d2:	4044      	eors	r4, r0
 80066d4:	4074      	eors	r4, r6
 80066d6:	9e08      	ldr	r6, [sp, #32]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 80066d8:	4068      	eors	r0, r5
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 80066da:	5d8e      	ldrb	r6, [r1, r6]
 80066dc:	4074      	eors	r4, r6
 80066de:	ae14      	add	r6, sp, #80	; 0x50
 80066e0:	72b4      	strb	r4, [r6, #10]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 80066e2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80066e4:	5d0d      	ldrb	r5, [r1, r4]
    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 80066e6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 80066e8:	4045      	eors	r5, r0
 80066ea:	9808      	ldr	r0, [sp, #32]
    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 80066ec:	5d14      	ldrb	r4, [r2, r4]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 80066ee:	5c10      	ldrb	r0, [r2, r0]
 80066f0:	4068      	eors	r0, r5
 80066f2:	72f0      	strb	r0, [r6, #11]
    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 80066f4:	9807      	ldr	r0, [sp, #28]
 80066f6:	9e03      	ldr	r6, [sp, #12]
 80066f8:	5c1d      	ldrb	r5, [r3, r0]
 80066fa:	5d8e      	ldrb	r6, [r1, r6]
 80066fc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80066fe:	4074      	eors	r4, r6
 8006700:	5c18      	ldrb	r0, [r3, r0]
 8006702:	406c      	eors	r4, r5
 8006704:	4044      	eors	r4, r0
 8006706:	ae14      	add	r6, sp, #80	; 0x50
 8006708:	7334      	strb	r4, [r6, #12]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800670a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800670c:	9e03      	ldr	r6, [sp, #12]
 800670e:	5d1c      	ldrb	r4, [r3, r4]
 8006710:	5d96      	ldrb	r6, [r2, r6]
 8006712:	4060      	eors	r0, r4
 8006714:	4070      	eors	r0, r6
 8006716:	9e07      	ldr	r6, [sp, #28]
 8006718:	5d8e      	ldrb	r6, [r1, r6]
 800671a:	4070      	eors	r0, r6
 800671c:	ae14      	add	r6, sp, #80	; 0x50
 800671e:	7370      	strb	r0, [r6, #13]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 8006720:	9803      	ldr	r0, [sp, #12]
 8006722:	5c1b      	ldrb	r3, [r3, r0]
 8006724:	9807      	ldr	r0, [sp, #28]
 8006726:	405c      	eors	r4, r3
 8006728:	5c10      	ldrb	r0, [r2, r0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800672a:	406b      	eors	r3, r5
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800672c:	4044      	eors	r4, r0
 800672e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006730:	5c08      	ldrb	r0, [r1, r0]
 8006732:	4044      	eors	r4, r0
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8006734:	980c      	ldr	r0, [sp, #48]	; 0x30
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 8006736:	73b4      	strb	r4, [r6, #14]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8006738:	5c0d      	ldrb	r5, [r1, r0]
 800673a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800673c:	406b      	eors	r3, r5
 800673e:	5c55      	ldrb	r5, [r2, r1]
    xor_block(d, k);
 8006740:	0030      	movs	r0, r6
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8006742:	406b      	eors	r3, r5
 8006744:	73f3      	strb	r3, [r6, #15]
    xor_block(d, k);
 8006746:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006748:	f7ff fdc8 	bl	80062dc <xor_block>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800674c:	9b01      	ldr	r3, [sp, #4]
 800674e:	3301      	adds	r3, #1
 8006750:	b2db      	uxtb	r3, r3
 8006752:	e6df      	b.n	8006514 <lorawan_aes_encrypt+0x20>
 8006754:	0800e8ad 	.word	0x0800e8ad
 8006758:	0800e6ad 	.word	0x0800e6ad
 800675c:	0800e7ad 	.word	0x0800e7ad

08006760 <SecureElementGetKeyByID>:
{
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 8006760:	4b0a      	ldr	r3, [pc, #40]	; (800678c <SecureElementGetKeyByID+0x2c>)
{
 8006762:	b5f0      	push	{r4, r5, r6, r7, lr}
        if (SeNvm->KeyList[i].KeyID == keyID)
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	2511      	movs	r5, #17
 8006768:	0016      	movs	r6, r2
 800676a:	2300      	movs	r3, #0
 800676c:	3610      	adds	r6, #16
 800676e:	002c      	movs	r4, r5
 8006770:	435c      	muls	r4, r3
 8006772:	5d37      	ldrb	r7, [r6, r4]
 8006774:	4287      	cmp	r7, r0
 8006776:	d104      	bne.n	8006782 <SecureElementGetKeyByID+0x22>
        {
            *keyItem = &(SeNvm->KeyList[i]);
            return SECURE_ELEMENT_SUCCESS;
 8006778:	2000      	movs	r0, #0
            *keyItem = &(SeNvm->KeyList[i]);
 800677a:	3410      	adds	r4, #16
 800677c:	1912      	adds	r2, r2, r4
 800677e:	600a      	str	r2, [r1, #0]
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 8006780:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 8006782:	3301      	adds	r3, #1
 8006784:	2b0a      	cmp	r3, #10
 8006786:	d1f2      	bne.n	800676e <SecureElementGetKeyByID+0xe>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8006788:	2003      	movs	r0, #3
 800678a:	e7f9      	b.n	8006780 <SecureElementGetKeyByID+0x20>
 800678c:	200004e0 	.word	0x200004e0

08006790 <ComputeCmac>:
{
 8006790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006792:	b0cf      	sub	sp, #316	; 0x13c
 8006794:	0006      	movs	r6, r0
 8006796:	000d      	movs	r5, r1
 8006798:	0017      	movs	r7, r2
        return SECURE_ELEMENT_ERROR_NPE;
 800679a:	2402      	movs	r4, #2
{
 800679c:	9301      	str	r3, [sp, #4]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800679e:	2900      	cmp	r1, #0
 80067a0:	d023      	beq.n	80067ea <ComputeCmac+0x5a>
 80067a2:	9b54      	ldr	r3, [sp, #336]	; 0x150
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d020      	beq.n	80067ea <ComputeCmac+0x5a>
    AES_CMAC_Init( aesCmacCtx );
 80067a8:	a808      	add	r0, sp, #32
 80067aa:	f7ff fc67 	bl	800607c <AES_CMAC_Init>
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 80067ae:	9801      	ldr	r0, [sp, #4]
 80067b0:	a903      	add	r1, sp, #12
 80067b2:	f7ff ffd5 	bl	8006760 <SecureElementGetKeyByID>
 80067b6:	1e04      	subs	r4, r0, #0
    if( retval == SECURE_ELEMENT_SUCCESS )
 80067b8:	d117      	bne.n	80067ea <ComputeCmac+0x5a>
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 80067ba:	9b03      	ldr	r3, [sp, #12]
 80067bc:	a808      	add	r0, sp, #32
 80067be:	1c59      	adds	r1, r3, #1
 80067c0:	f7ff fc6c 	bl	800609c <AES_CMAC_SetKey>
        if( micBxBuffer != NULL )
 80067c4:	2e00      	cmp	r6, #0
 80067c6:	d004      	beq.n	80067d2 <ComputeCmac+0x42>
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 80067c8:	2210      	movs	r2, #16
 80067ca:	0031      	movs	r1, r6
 80067cc:	a808      	add	r0, sp, #32
 80067ce:	f7ff fc6c 	bl	80060aa <AES_CMAC_Update>
        AES_CMAC_Update( aesCmacCtx, buffer, size );
 80067d2:	003a      	movs	r2, r7
 80067d4:	0029      	movs	r1, r5
 80067d6:	a808      	add	r0, sp, #32
 80067d8:	f7ff fc67 	bl	80060aa <AES_CMAC_Update>
        AES_CMAC_Final( Cmac, aesCmacCtx );
 80067dc:	a908      	add	r1, sp, #32
 80067de:	a804      	add	r0, sp, #16
 80067e0:	f7ff fcd3 	bl	800618a <AES_CMAC_Final>
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 80067e4:	9b54      	ldr	r3, [sp, #336]	; 0x150
 80067e6:	9a04      	ldr	r2, [sp, #16]
 80067e8:	601a      	str	r2, [r3, #0]
}
 80067ea:	0020      	movs	r0, r4
 80067ec:	b04f      	add	sp, #316	; 0x13c
 80067ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080067f0 <PrintKey>:
{
 80067f0:	b510      	push	{r4, lr}
 80067f2:	b092      	sub	sp, #72	; 0x48
    retval = SecureElementGetKeyByID(key, &keyItem);
 80067f4:	a911      	add	r1, sp, #68	; 0x44
{
 80067f6:	0004      	movs	r4, r0
    retval = SecureElementGetKeyByID(key, &keyItem);
 80067f8:	f7ff ffb2 	bl	8006760 <SecureElementGetKeyByID>
 80067fc:	1e01      	subs	r1, r0, #0
    if (retval == SECURE_ELEMENT_SUCCESS)
 80067fe:	d12e      	bne.n	800685e <PrintKey+0x6e>
        if (key == APP_KEY)
 8006800:	2c00      	cmp	r4, #0
 8006802:	d12e      	bne.n	8006862 <PrintKey+0x72>
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 8006804:	0022      	movs	r2, r4
 8006806:	0021      	movs	r1, r4
 8006808:	4b1a      	ldr	r3, [pc, #104]	; (8006874 <PrintKey+0x84>)
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 800680a:	2002      	movs	r0, #2
 800680c:	f007 f8ba 	bl	800d984 <UTIL_ADV_TRACE_COND_FSend>
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8006810:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006812:	2002      	movs	r0, #2
 8006814:	7c1a      	ldrb	r2, [r3, #16]
 8006816:	920f      	str	r2, [sp, #60]	; 0x3c
 8006818:	7bda      	ldrb	r2, [r3, #15]
 800681a:	920e      	str	r2, [sp, #56]	; 0x38
 800681c:	7b9a      	ldrb	r2, [r3, #14]
 800681e:	920d      	str	r2, [sp, #52]	; 0x34
 8006820:	7b5a      	ldrb	r2, [r3, #13]
 8006822:	920c      	str	r2, [sp, #48]	; 0x30
 8006824:	7b1a      	ldrb	r2, [r3, #12]
 8006826:	920b      	str	r2, [sp, #44]	; 0x2c
 8006828:	7ada      	ldrb	r2, [r3, #11]
 800682a:	920a      	str	r2, [sp, #40]	; 0x28
 800682c:	7a9a      	ldrb	r2, [r3, #10]
 800682e:	9209      	str	r2, [sp, #36]	; 0x24
 8006830:	7a5a      	ldrb	r2, [r3, #9]
 8006832:	9208      	str	r2, [sp, #32]
 8006834:	7a1a      	ldrb	r2, [r3, #8]
 8006836:	9207      	str	r2, [sp, #28]
 8006838:	79da      	ldrb	r2, [r3, #7]
 800683a:	9206      	str	r2, [sp, #24]
 800683c:	799a      	ldrb	r2, [r3, #6]
 800683e:	9205      	str	r2, [sp, #20]
 8006840:	795a      	ldrb	r2, [r3, #5]
 8006842:	9204      	str	r2, [sp, #16]
 8006844:	791a      	ldrb	r2, [r3, #4]
 8006846:	9203      	str	r2, [sp, #12]
 8006848:	78da      	ldrb	r2, [r3, #3]
 800684a:	9202      	str	r2, [sp, #8]
 800684c:	789a      	ldrb	r2, [r3, #2]
 800684e:	9201      	str	r2, [sp, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	785b      	ldrb	r3, [r3, #1]
 8006854:	0011      	movs	r1, r2
 8006856:	9300      	str	r3, [sp, #0]
 8006858:	4b07      	ldr	r3, [pc, #28]	; (8006878 <PrintKey+0x88>)
 800685a:	f007 f893 	bl	800d984 <UTIL_ADV_TRACE_COND_FSend>
}
 800685e:	b012      	add	sp, #72	; 0x48
 8006860:	bd10      	pop	{r4, pc}
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 8006862:	4b06      	ldr	r3, [pc, #24]	; (800687c <PrintKey+0x8c>)
        else if (key == NWK_KEY)
 8006864:	2c01      	cmp	r4, #1
 8006866:	d003      	beq.n	8006870 <PrintKey+0x80>
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 8006868:	4b05      	ldr	r3, [pc, #20]	; (8006880 <PrintKey+0x90>)
        else if (key == APP_S_KEY)
 800686a:	2c03      	cmp	r4, #3
 800686c:	d000      	beq.n	8006870 <PrintKey+0x80>
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 800686e:	4b05      	ldr	r3, [pc, #20]	; (8006884 <PrintKey+0x94>)
 8006870:	000a      	movs	r2, r1
 8006872:	e7ca      	b.n	800680a <PrintKey+0x1a>
 8006874:	0800eef4 	.word	0x0800eef4
 8006878:	0800ef48 	.word	0x0800ef48
 800687c:	0800ef09 	.word	0x0800ef09
 8006880:	0800ef1e 	.word	0x0800ef1e
 8006884:	0800ef33 	.word	0x0800ef33

08006888 <SecureElementInit>:
{
 8006888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800688a:	b0b1      	sub	sp, #196	; 0xc4
    SecureElementNvmData_t seNvmInit =
 800688c:	22b0      	movs	r2, #176	; 0xb0
{
 800688e:	0005      	movs	r5, r0
 8006890:	000f      	movs	r7, r1
    SecureElementNvmData_t seNvmInit =
 8006892:	a804      	add	r0, sp, #16
 8006894:	2100      	movs	r1, #0
 8006896:	f007 fde4 	bl	800e462 <memset>
 800689a:	2208      	movs	r2, #8
 800689c:	4935      	ldr	r1, [pc, #212]	; (8006974 <SecureElementInit+0xec>)
 800689e:	4668      	mov	r0, sp
 80068a0:	f007 fdd6 	bl	800e450 <memcpy>
 80068a4:	2208      	movs	r2, #8
 80068a6:	4934      	ldr	r1, [pc, #208]	; (8006978 <SecureElementInit+0xf0>)
 80068a8:	a802      	add	r0, sp, #8
 80068aa:	f007 fdd1 	bl	800e450 <memcpy>
 80068ae:	2011      	movs	r0, #17
 80068b0:	4e32      	ldr	r6, [pc, #200]	; (800697c <SecureElementInit+0xf4>)
 80068b2:	2210      	movs	r2, #16
 80068b4:	0031      	movs	r1, r6
 80068b6:	4468      	add	r0, sp
 80068b8:	f007 fdca 	bl	800e450 <memcpy>
 80068bc:	466b      	mov	r3, sp
 80068be:	2201      	movs	r2, #1
 80068c0:	2022      	movs	r0, #34	; 0x22
 80068c2:	3302      	adds	r3, #2
 80068c4:	77da      	strb	r2, [r3, #31]
 80068c6:	0031      	movs	r1, r6
 80068c8:	320f      	adds	r2, #15
 80068ca:	4468      	add	r0, sp
 80068cc:	f007 fdc0 	bl	800e450 <memcpy>
 80068d0:	2332      	movs	r3, #50	; 0x32
 80068d2:	2402      	movs	r4, #2
 80068d4:	2033      	movs	r0, #51	; 0x33
 80068d6:	446b      	add	r3, sp
 80068d8:	2210      	movs	r2, #16
 80068da:	0031      	movs	r1, r6
 80068dc:	701c      	strb	r4, [r3, #0]
 80068de:	4468      	add	r0, sp
 80068e0:	f007 fdb6 	bl	800e450 <memcpy>
 80068e4:	2343      	movs	r3, #67	; 0x43
 80068e6:	2203      	movs	r2, #3
 80068e8:	446b      	add	r3, sp
 80068ea:	701a      	strb	r2, [r3, #0]
 80068ec:	0031      	movs	r1, r6
 80068ee:	320d      	adds	r2, #13
 80068f0:	a811      	add	r0, sp, #68	; 0x44
 80068f2:	f007 fdad 	bl	800e450 <memcpy>
 80068f6:	2204      	movs	r2, #4
 80068f8:	ab15      	add	r3, sp, #84	; 0x54
 80068fa:	701a      	strb	r2, [r3, #0]
 80068fc:	2365      	movs	r3, #101	; 0x65
 80068fe:	327b      	adds	r2, #123	; 0x7b
 8006900:	446b      	add	r3, sp
 8006902:	701a      	strb	r2, [r3, #0]
 8006904:	2376      	movs	r3, #118	; 0x76
 8006906:	3201      	adds	r2, #1
 8006908:	446b      	add	r3, sp
 800690a:	701a      	strb	r2, [r3, #0]
 800690c:	2387      	movs	r3, #135	; 0x87
 800690e:	3201      	adds	r2, #1
 8006910:	446b      	add	r3, sp
 8006912:	701a      	strb	r2, [r3, #0]
 8006914:	ab26      	add	r3, sp, #152	; 0x98
 8006916:	3201      	adds	r2, #1
 8006918:	701a      	strb	r2, [r3, #0]
 800691a:	23a9      	movs	r3, #169	; 0xa9
 800691c:	3201      	adds	r2, #1
 800691e:	446b      	add	r3, sp
        return SECURE_ELEMENT_ERROR_NPE;
 8006920:	0020      	movs	r0, r4
    SecureElementNvmData_t seNvmInit =
 8006922:	701a      	strb	r2, [r3, #0]
    if( nvm == NULL )
 8006924:	2d00      	cmp	r5, #0
 8006926:	d023      	beq.n	8006970 <SecureElementInit+0xe8>
    SeNvm = nvm;
 8006928:	4e15      	ldr	r6, [pc, #84]	; (8006980 <SecureElementInit+0xf8>)
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800692a:	4669      	mov	r1, sp
 800692c:	0028      	movs	r0, r5
 800692e:	323d      	adds	r2, #61	; 0x3d
    SeNvm = nvm;
 8006930:	6035      	str	r5, [r6, #0]
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 8006932:	f005 fca5 	bl	800c280 <memcpy1>
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 8006936:	2200      	movs	r2, #0
 8006938:	4b12      	ldr	r3, [pc, #72]	; (8006984 <SecureElementInit+0xfc>)
 800693a:	0011      	movs	r1, r2
 800693c:	0020      	movs	r0, r4
 800693e:	f007 f821 	bl	800d984 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 8006942:	2000      	movs	r0, #0
 8006944:	f7ff ff54 	bl	80067f0 <PrintKey>
    PrintKey(NWK_KEY);
 8006948:	2001      	movs	r0, #1
 800694a:	f7ff ff51 	bl	80067f0 <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800694e:	2200      	movs	r2, #0
 8006950:	4b0d      	ldr	r3, [pc, #52]	; (8006988 <SecureElementInit+0x100>)
 8006952:	0011      	movs	r1, r2
 8006954:	0020      	movs	r0, r4
 8006956:	f007 f815 	bl	800d984 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 800695a:	2003      	movs	r0, #3
 800695c:	f7ff ff48 	bl	80067f0 <PrintKey>
    PrintKey(NWK_S_KEY);
 8006960:	0020      	movs	r0, r4
 8006962:	f7ff ff45 	bl	80067f0 <PrintKey>
    return SECURE_ELEMENT_SUCCESS;
 8006966:	1e38      	subs	r0, r7, #0
    if (seGetUniqueId != NULL)
 8006968:	d002      	beq.n	8006970 <SecureElementInit+0xe8>
        seGetUniqueId(SeNvm->DevEui);
 800696a:	6830      	ldr	r0, [r6, #0]
 800696c:	47b8      	blx	r7
    return SECURE_ELEMENT_SUCCESS;
 800696e:	2000      	movs	r0, #0
}
 8006970:	b031      	add	sp, #196	; 0xc4
 8006972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006974:	0800e9ad 	.word	0x0800e9ad
 8006978:	0800efc4 	.word	0x0800efc4
 800697c:	0800efcd 	.word	0x0800efcd
 8006980:	200004e0 	.word	0x200004e0
 8006984:	0800ef9a 	.word	0x0800ef9a
 8006988:	0800efaf 	.word	0x0800efaf

0800698c <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
 800698c:	b513      	push	{r0, r1, r4, lr}
 800698e:	0004      	movs	r4, r0
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8006990:	2003      	movs	r0, #3
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 8006992:	2b7e      	cmp	r3, #126	; 0x7e
 8006994:	d804      	bhi.n	80069a0 <SecureElementComputeAesCmac+0x14>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 8006996:	9804      	ldr	r0, [sp, #16]
 8006998:	9000      	str	r0, [sp, #0]
 800699a:	0020      	movs	r0, r4
 800699c:	f7ff fef8 	bl	8006790 <ComputeCmac>
}
 80069a0:	bd16      	pop	{r1, r2, r4, pc}

080069a2 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 80069a2:	b530      	push	{r4, r5, lr}
 80069a4:	0004      	movs	r4, r0
 80069a6:	0015      	movs	r5, r2
    if( buffer == NULL )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 80069a8:	2002      	movs	r0, #2
{
 80069aa:	b085      	sub	sp, #20
    if( buffer == NULL )
 80069ac:	2c00      	cmp	r4, #0
 80069ae:	d00e      	beq.n	80069ce <SecureElementVerifyAesCmac+0x2c>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 80069b0:	2000      	movs	r0, #0
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 80069b2:	aa03      	add	r2, sp, #12
 80069b4:	9200      	str	r2, [sp, #0]
 80069b6:	000a      	movs	r2, r1
 80069b8:	0021      	movs	r1, r4
    uint32_t              compCmac = 0;
 80069ba:	9003      	str	r0, [sp, #12]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 80069bc:	f7ff fee8 	bl	8006790 <ComputeCmac>
    if( retval != SECURE_ELEMENT_SUCCESS )
 80069c0:	2800      	cmp	r0, #0
 80069c2:	d104      	bne.n	80069ce <SecureElementVerifyAesCmac+0x2c>
    {
        return retval;
    }

    if( expectedCmac != compCmac )
 80069c4:	9b03      	ldr	r3, [sp, #12]
 80069c6:	1b58      	subs	r0, r3, r5
 80069c8:	1e43      	subs	r3, r0, #1
 80069ca:	4198      	sbcs	r0, r3
        return SECURE_ELEMENT_ERROR_NPE;
 80069cc:	b2c0      	uxtb	r0, r0
    }

#endif /* LORAWAN_KMS */

    return retval;
}
 80069ce:	b005      	add	sp, #20
 80069d0:	bd30      	pop	{r4, r5, pc}

080069d2 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 80069d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069d4:	b0c1      	sub	sp, #260	; 0x104
 80069d6:	000e      	movs	r6, r1
 80069d8:	0015      	movs	r5, r2
 80069da:	001f      	movs	r7, r3
    if( buffer == NULL || encBuffer == NULL )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 80069dc:	2402      	movs	r4, #2
{
 80069de:	9001      	str	r0, [sp, #4]
    if( buffer == NULL || encBuffer == NULL )
 80069e0:	2800      	cmp	r0, #0
 80069e2:	d01b      	beq.n	8006a1c <SecureElementAesEncrypt+0x4a>
 80069e4:	2f00      	cmp	r7, #0
 80069e6:	d019      	beq.n	8006a1c <SecureElementAesEncrypt+0x4a>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 80069e8:	230f      	movs	r3, #15
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 80069ea:	3403      	adds	r4, #3
    if( ( size % 16 ) != 0 )
 80069ec:	4019      	ands	r1, r3
 80069ee:	421e      	tst	r6, r3
 80069f0:	d114      	bne.n	8006a1c <SecureElementAesEncrypt+0x4a>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 80069f2:	22f0      	movs	r2, #240	; 0xf0
 80069f4:	a803      	add	r0, sp, #12
 80069f6:	f005 fc58 	bl	800c2aa <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 80069fa:	0028      	movs	r0, r5
 80069fc:	a902      	add	r1, sp, #8
 80069fe:	f7ff feaf 	bl	8006760 <SecureElementGetKeyByID>
 8006a02:	1e04      	subs	r4, r0, #0

    if( retval == SECURE_ELEMENT_SUCCESS )
 8006a04:	d10a      	bne.n	8006a1c <SecureElementAesEncrypt+0x4a>
    {
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 8006a06:	9b02      	ldr	r3, [sp, #8]
 8006a08:	2110      	movs	r1, #16
 8006a0a:	1c58      	adds	r0, r3, #1
 8006a0c:	aa03      	add	r2, sp, #12
 8006a0e:	f7ff fce9 	bl	80063e4 <lorawan_aes_set_key>

        uint8_t block = 0;

        while( size != 0 )
 8006a12:	0035      	movs	r5, r6
 8006a14:	1b70      	subs	r0, r6, r5
 8006a16:	b2c0      	uxtb	r0, r0
 8006a18:	2d00      	cmp	r5, #0
 8006a1a:	d102      	bne.n	8006a22 <SecureElementAesEncrypt+0x50>
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
}
 8006a1c:	0020      	movs	r0, r4
 8006a1e:	b041      	add	sp, #260	; 0x104
 8006a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 8006a22:	9b01      	ldr	r3, [sp, #4]
 8006a24:	1839      	adds	r1, r7, r0
 8006a26:	aa03      	add	r2, sp, #12
 8006a28:	1818      	adds	r0, r3, r0
            size  = size - 16;
 8006a2a:	3d10      	subs	r5, #16
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 8006a2c:	f7ff fd62 	bl	80064f4 <lorawan_aes_encrypt>
            size  = size - 16;
 8006a30:	b2ad      	uxth	r5, r5
 8006a32:	e7ef      	b.n	8006a14 <SecureElementAesEncrypt+0x42>

08006a34 <SecureElementSetKey.part.0>:
SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
 8006a34:	b5f0      	push	{r4, r5, r6, r7, lr}
        if( SeNvm->KeyList[i].KeyID == keyID )
 8006a36:	4e19      	ldr	r6, [pc, #100]	; (8006a9c <SecureElementSetKey.part.0+0x68>)
SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
 8006a38:	000d      	movs	r5, r1
        if( SeNvm->KeyList[i].KeyID == keyID )
 8006a3a:	6832      	ldr	r2, [r6, #0]
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	0011      	movs	r1, r2
 8006a40:	2411      	movs	r4, #17
SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
 8006a42:	b085      	sub	sp, #20
        if( SeNvm->KeyList[i].KeyID == keyID )
 8006a44:	3110      	adds	r1, #16
 8006a46:	0027      	movs	r7, r4
 8006a48:	435f      	muls	r7, r3
 8006a4a:	5dcf      	ldrb	r7, [r1, r7]
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	4287      	cmp	r7, r0
 8006a50:	d11f      	bne.n	8006a92 <SecureElementSetKey.part.0+0x5e>
            if ( keyID == MC_KEY_0 )
 8006a52:	435c      	muls	r4, r3
 8006a54:	2880      	cmp	r0, #128	; 0x80
 8006a56:	d115      	bne.n	8006a84 <SecureElementSetKey.part.0+0x50>
                uint8_t               decryptedKey[16] = { 0 };
 8006a58:	2100      	movs	r1, #0
 8006a5a:	220c      	movs	r2, #12
 8006a5c:	a801      	add	r0, sp, #4
 8006a5e:	9100      	str	r1, [sp, #0]
 8006a60:	f007 fcff 	bl	800e462 <memset>
                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 8006a64:	227f      	movs	r2, #127	; 0x7f
 8006a66:	2110      	movs	r1, #16
 8006a68:	0028      	movs	r0, r5
 8006a6a:	466b      	mov	r3, sp
 8006a6c:	f7ff ffb1 	bl	80069d2 <SecureElementAesEncrypt>
 8006a70:	0005      	movs	r5, r0
                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 8006a72:	6830      	ldr	r0, [r6, #0]
 8006a74:	2210      	movs	r2, #16
 8006a76:	4669      	mov	r1, sp
 8006a78:	1900      	adds	r0, r0, r4
 8006a7a:	f005 fc01 	bl	800c280 <memcpy1>
}
 8006a7e:	0028      	movs	r0, r5
 8006a80:	b005      	add	sp, #20
 8006a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 8006a84:	0029      	movs	r1, r5
 8006a86:	1910      	adds	r0, r2, r4
 8006a88:	2210      	movs	r2, #16
 8006a8a:	f005 fbf9 	bl	800c280 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 8006a8e:	2500      	movs	r5, #0
 8006a90:	e7f5      	b.n	8006a7e <SecureElementSetKey.part.0+0x4a>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8006a92:	2b0a      	cmp	r3, #10
 8006a94:	d1d7      	bne.n	8006a46 <SecureElementSetKey.part.0+0x12>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8006a96:	2503      	movs	r5, #3
 8006a98:	e7f1      	b.n	8006a7e <SecureElementSetKey.part.0+0x4a>
 8006a9a:	46c0      	nop			; (mov r8, r8)
 8006a9c:	200004e0 	.word	0x200004e0

08006aa0 <SecureElementSetKey>:
{
 8006aa0:	0003      	movs	r3, r0
 8006aa2:	b510      	push	{r4, lr}
        return SECURE_ELEMENT_ERROR_NPE;
 8006aa4:	2002      	movs	r0, #2
    if( key == NULL )
 8006aa6:	2900      	cmp	r1, #0
 8006aa8:	d002      	beq.n	8006ab0 <SecureElementSetKey+0x10>
 8006aaa:	0018      	movs	r0, r3
 8006aac:	f7ff ffc2 	bl	8006a34 <SecureElementSetKey.part.0>
}
 8006ab0:	bd10      	pop	{r4, pc}

08006ab2 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 8006ab2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8006ab4:	0005      	movs	r5, r0
 8006ab6:	000e      	movs	r6, r1
 8006ab8:	0014      	movs	r4, r2
    if( input == NULL )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8006aba:	2002      	movs	r0, #2
    if( input == NULL )
 8006abc:	2d00      	cmp	r5, #0
 8006abe:	d016      	beq.n	8006aee <SecureElementDeriveAndStoreKey+0x3c>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 8006ac0:	2a7f      	cmp	r2, #127	; 0x7f
 8006ac2:	d102      	bne.n	8006aca <SecureElementDeriveAndStoreKey+0x18>
    {
        if( rootKeyID != MC_ROOT_KEY )
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8006ac4:	3001      	adds	r0, #1
        if( rootKeyID != MC_ROOT_KEY )
 8006ac6:	2904      	cmp	r1, #4
 8006ac8:	d111      	bne.n	8006aee <SecureElementDeriveAndStoreKey+0x3c>
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 8006aca:	2100      	movs	r1, #0
 8006acc:	220c      	movs	r2, #12
 8006ace:	a801      	add	r0, sp, #4
 8006ad0:	9100      	str	r1, [sp, #0]
 8006ad2:	f007 fcc6 	bl	800e462 <memset>
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 8006ad6:	466b      	mov	r3, sp
 8006ad8:	0032      	movs	r2, r6
 8006ada:	2110      	movs	r1, #16
 8006adc:	0028      	movs	r0, r5
 8006ade:	f7ff ff78 	bl	80069d2 <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8006ae2:	2800      	cmp	r0, #0
 8006ae4:	d103      	bne.n	8006aee <SecureElementDeriveAndStoreKey+0x3c>
    if( key == NULL )
 8006ae6:	4669      	mov	r1, sp
 8006ae8:	0020      	movs	r0, r4
 8006aea:	f7ff ffa3 	bl	8006a34 <SecureElementSetKey.part.0>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 8006aee:	b004      	add	sp, #16
 8006af0:	bd70      	pop	{r4, r5, r6, pc}

08006af2 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 8006af2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006af4:	001d      	movs	r5, r3
 8006af6:	ab06      	add	r3, sp, #24
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8006af8:	2002      	movs	r0, #2
{
 8006afa:	781f      	ldrb	r7, [r3, #0]
 8006afc:	9e07      	ldr	r6, [sp, #28]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 8006afe:	2d00      	cmp	r5, #0
 8006b00:	d037      	beq.n	8006b72 <SecureElementProcessJoinAccept+0x80>
 8006b02:	2e00      	cmp	r6, #0
 8006b04:	d035      	beq.n	8006b72 <SecureElementProcessJoinAccept+0x80>
 8006b06:	9b08      	ldr	r3, [sp, #32]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d032      	beq.n	8006b72 <SecureElementProcessJoinAccept+0x80>
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8006b0c:	3003      	adds	r0, #3
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 8006b0e:	2f21      	cmp	r7, #33	; 0x21
 8006b10:	d82f      	bhi.n	8006b72 <SecureElementProcessJoinAccept+0x80>
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 8006b12:	b2bc      	uxth	r4, r7
 8006b14:	0022      	movs	r2, r4
 8006b16:	0029      	movs	r1, r5
 8006b18:	0030      	movs	r0, r6
 8006b1a:	f005 fbb1 	bl	800c280 <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 8006b1e:	1e61      	subs	r1, r4, #1
 8006b20:	1c73      	adds	r3, r6, #1
 8006b22:	2201      	movs	r2, #1
 8006b24:	b289      	uxth	r1, r1
 8006b26:	1c68      	adds	r0, r5, #1
 8006b28:	f7ff ff53 	bl	80069d2 <SecureElementAesEncrypt>
 8006b2c:	0003      	movs	r3, r0
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 8006b2e:	2007      	movs	r0, #7
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d11e      	bne.n	8006b72 <SecureElementProcessJoinAccept+0x80>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 8006b34:	7af3      	ldrb	r3, [r6, #11]
 8006b36:	9a08      	ldr	r2, [sp, #32]
 8006b38:	40c3      	lsrs	r3, r0
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 8006b3a:	3803      	subs	r0, #3
    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 8006b3c:	7013      	strb	r3, [r2, #0]
    if( *versionMinor == 0 )
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d117      	bne.n	8006b72 <SecureElementProcessJoinAccept+0x80>
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 8006b42:	19f3      	adds	r3, r6, r7
 8006b44:	1e9a      	subs	r2, r3, #2
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 8006b46:	1e59      	subs	r1, r3, #1
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 8006b48:	7812      	ldrb	r2, [r2, #0]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 8006b4a:	7809      	ldrb	r1, [r1, #0]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 8006b4c:	0412      	lsls	r2, r2, #16
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 8006b4e:	0609      	lsls	r1, r1, #24
 8006b50:	430a      	orrs	r2, r1
    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 8006b52:	1f19      	subs	r1, r3, #4
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 8006b54:	3b03      	subs	r3, #3
    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 8006b56:	7809      	ldrb	r1, [r1, #0]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	430a      	orrs	r2, r1
 8006b5c:	021b      	lsls	r3, r3, #8
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 8006b5e:	1f21      	subs	r1, r4, #4
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 8006b60:	431a      	orrs	r2, r3
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 8006b62:	0030      	movs	r0, r6
 8006b64:	2301      	movs	r3, #1
 8006b66:	b289      	uxth	r1, r1
 8006b68:	f7ff ff1b 	bl	80069a2 <SecureElementVerifyAesCmac>
 8006b6c:	1e43      	subs	r3, r0, #1
 8006b6e:	4198      	sbcs	r0, r3
        return SECURE_ELEMENT_ERROR_NPE;
 8006b70:	b2c0      	uxtb	r0, r0
    }

    return SECURE_ELEMENT_SUCCESS;
}
 8006b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006b74 <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
 8006b74:	b513      	push	{r0, r1, r4, lr}
 8006b76:	0004      	movs	r4, r0
    if( randomNum == NULL )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8006b78:	2002      	movs	r0, #2
    if( randomNum == NULL )
 8006b7a:	2c00      	cmp	r4, #0
 8006b7c:	d005      	beq.n	8006b8a <SecureElementRandomNumber+0x16>
    }
    *randomNum = Radio.Random();
 8006b7e:	4b03      	ldr	r3, [pc, #12]	; (8006b8c <SecureElementRandomNumber+0x18>)
 8006b80:	695b      	ldr	r3, [r3, #20]
 8006b82:	9301      	str	r3, [sp, #4]
 8006b84:	4798      	blx	r3
 8006b86:	6020      	str	r0, [r4, #0]
    return SECURE_ELEMENT_SUCCESS;
 8006b88:	2000      	movs	r0, #0
}
 8006b8a:	bd16      	pop	{r1, r2, r4, pc}
 8006b8c:	0800eb54 	.word	0x0800eb54

08006b90 <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 8006b90:	0001      	movs	r1, r0
 8006b92:	b510      	push	{r4, lr}
    if( devEui == NULL )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8006b94:	2002      	movs	r0, #2
    if( devEui == NULL )
 8006b96:	2900      	cmp	r1, #0
 8006b98:	d005      	beq.n	8006ba6 <SecureElementSetDevEui+0x16>
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 8006b9a:	4b03      	ldr	r3, [pc, #12]	; (8006ba8 <SecureElementSetDevEui+0x18>)
 8006b9c:	2208      	movs	r2, #8
 8006b9e:	6818      	ldr	r0, [r3, #0]
 8006ba0:	f005 fb6e 	bl	800c280 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8006ba4:	2000      	movs	r0, #0
}
 8006ba6:	bd10      	pop	{r4, pc}
 8006ba8:	200004e0 	.word	0x200004e0

08006bac <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
    return SeNvm->DevEui;
 8006bac:	4b01      	ldr	r3, [pc, #4]	; (8006bb4 <SecureElementGetDevEui+0x8>)
 8006bae:	6818      	ldr	r0, [r3, #0]
}
 8006bb0:	4770      	bx	lr
 8006bb2:	46c0      	nop			; (mov r8, r8)
 8006bb4:	200004e0 	.word	0x200004e0

08006bb8 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 8006bb8:	0001      	movs	r1, r0
 8006bba:	b510      	push	{r4, lr}
    if( joinEui == NULL )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8006bbc:	2002      	movs	r0, #2
    if( joinEui == NULL )
 8006bbe:	2900      	cmp	r1, #0
 8006bc0:	d006      	beq.n	8006bd0 <SecureElementSetJoinEui+0x18>
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 8006bc2:	4b04      	ldr	r3, [pc, #16]	; (8006bd4 <SecureElementSetJoinEui+0x1c>)
 8006bc4:	2208      	movs	r2, #8
 8006bc6:	6818      	ldr	r0, [r3, #0]
 8006bc8:	3008      	adds	r0, #8
 8006bca:	f005 fb59 	bl	800c280 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8006bce:	2000      	movs	r0, #0
}
 8006bd0:	bd10      	pop	{r4, pc}
 8006bd2:	46c0      	nop			; (mov r8, r8)
 8006bd4:	200004e0 	.word	0x200004e0

08006bd8 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
    return SeNvm->JoinEui;
 8006bd8:	4b01      	ldr	r3, [pc, #4]	; (8006be0 <SecureElementGetJoinEui+0x8>)
 8006bda:	6818      	ldr	r0, [r3, #0]
 8006bdc:	3008      	adds	r0, #8
}
 8006bde:	4770      	bx	lr
 8006be0:	200004e0 	.word	0x200004e0

08006be4 <LmHandlerDeviceTimeReq>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 8006be4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 8006be6:	230a      	movs	r3, #10
 8006be8:	a801      	add	r0, sp, #4
 8006bea:	7003      	strb	r3, [r0, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 8006bec:	f002 ffd8 	bl	8009ba0 <LoRaMacMlmeRequest>

    if( status == LORAMAC_STATUS_OK )
 8006bf0:	1e43      	subs	r3, r0, #1
 8006bf2:	4198      	sbcs	r0, r3
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
    }
}
 8006bf4:	4240      	negs	r0, r0
 8006bf6:	b007      	add	sp, #28
 8006bf8:	bd00      	pop	{pc}
	...

08006bfc <McpsConfirm>:
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
    TxParams.IsMcpsConfirm = 1;
 8006bfc:	2301      	movs	r3, #1
{
 8006bfe:	b570      	push	{r4, r5, r6, lr}
    TxParams.IsMcpsConfirm = 1;
 8006c00:	4c10      	ldr	r4, [pc, #64]	; (8006c44 <McpsConfirm+0x48>)
{
 8006c02:	0005      	movs	r5, r0
    TxParams.IsMcpsConfirm = 1;
 8006c04:	7023      	strb	r3, [r4, #0]
    TxParams.Status = mcpsConfirm->Status;
 8006c06:	7843      	ldrb	r3, [r0, #1]
 8006c08:	0026      	movs	r6, r4
 8006c0a:	7063      	strb	r3, [r4, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 8006c0c:	7883      	ldrb	r3, [r0, #2]
 8006c0e:	361c      	adds	r6, #28
 8006c10:	7123      	strb	r3, [r4, #4]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 8006c12:	68c3      	ldr	r3, [r0, #12]
 8006c14:	60a3      	str	r3, [r4, #8]
    TxParams.TxPower = mcpsConfirm->TxPower;
 8006c16:	78c3      	ldrb	r3, [r0, #3]
 8006c18:	7523      	strb	r3, [r4, #20]
    TxParams.Channel = mcpsConfirm->Channel;
 8006c1a:	6903      	ldr	r3, [r0, #16]
 8006c1c:	7563      	strb	r3, [r4, #21]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 8006c1e:	7903      	ldrb	r3, [r0, #4]

    LmHandlerCallbacks->OnTxData( &TxParams );
 8006c20:	0020      	movs	r0, r4
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 8006c22:	70e3      	strb	r3, [r4, #3]
    LmHandlerCallbacks->OnTxData( &TxParams );
 8006c24:	69a3      	ldr	r3, [r4, #24]
 8006c26:	3430      	adds	r4, #48	; 0x30
 8006c28:	6a1b      	ldr	r3, [r3, #32]
 8006c2a:	4798      	blx	r3

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
    {
        if( LmHandlerPackages[i] != NULL )
 8006c2c:	6833      	ldr	r3, [r6, #0]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d004      	beq.n	8006c3c <McpsConfirm+0x40>
        {
            switch( notifyType )
            {
                case PACKAGE_MCPS_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 8006c32:	699b      	ldr	r3, [r3, #24]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d001      	beq.n	8006c3c <McpsConfirm+0x40>
                    {
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 8006c38:	0028      	movs	r0, r5
 8006c3a:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8006c3c:	3604      	adds	r6, #4
 8006c3e:	42a6      	cmp	r6, r4
 8006c40:	d1f4      	bne.n	8006c2c <McpsConfirm+0x30>
}
 8006c42:	bd70      	pop	{r4, r5, r6, pc}
 8006c44:	200004e4 	.word	0x200004e4

08006c48 <LmHandlerConfigure>:
{
 8006c48:	b5f0      	push	{r4, r5, r6, r7, lr}
    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 8006c4a:	4f5a      	ldr	r7, [pc, #360]	; (8006db4 <LmHandlerConfigure+0x16c>)
{
 8006c4c:	0001      	movs	r1, r0
    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 8006c4e:	3730      	adds	r7, #48	; 0x30
 8006c50:	2210      	movs	r2, #16
 8006c52:	0038      	movs	r0, r7
{
 8006c54:	b09f      	sub	sp, #124	; 0x7c
    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 8006c56:	f006 ffaf 	bl	800dbb8 <UTIL_MEM_cpy_8>
    loraInfo = LoraInfo_GetPtr();
 8006c5a:	f7fb f9b9 	bl	8001fd0 <LoraInfo_GetPtr>
    if (0U != ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 8006c5e:	2301      	movs	r3, #1
 8006c60:	783a      	ldrb	r2, [r7, #0]
 8006c62:	6841      	ldr	r1, [r0, #4]
 8006c64:	4093      	lsls	r3, r2
 8006c66:	0008      	movs	r0, r1
 8006c68:	4018      	ands	r0, r3
 8006c6a:	4219      	tst	r1, r3
 8006c6c:	d00a      	beq.n	8006c84 <LmHandlerConfigure+0x3c>
        if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 8006c6e:	4951      	ldr	r1, [pc, #324]	; (8006db4 <LmHandlerConfigure+0x16c>)
 8006c70:	4850      	ldr	r0, [pc, #320]	; (8006db4 <LmHandlerConfigure+0x16c>)
 8006c72:	3140      	adds	r1, #64	; 0x40
 8006c74:	3054      	adds	r0, #84	; 0x54
 8006c76:	f002 fa83 	bl	8009180 <LoRaMacInitialization>
 8006c7a:	1e06      	subs	r6, r0, #0
 8006c7c:	d008      	beq.n	8006c90 <LmHandlerConfigure+0x48>
            return LORAMAC_HANDLER_ERROR;
 8006c7e:	2001      	movs	r0, #1
 8006c80:	4240      	negs	r0, r0
 8006c82:	e095      	b.n	8006db0 <LmHandlerConfigure+0x168>
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 8006c84:	2201      	movs	r2, #1
 8006c86:	0001      	movs	r1, r0
 8006c88:	4b4b      	ldr	r3, [pc, #300]	; (8006db8 <LmHandlerConfigure+0x170>)
 8006c8a:	f006 fe7b 	bl	800d984 <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 8006c8e:	e7fe      	b.n	8006c8e <LmHandlerConfigure+0x46>
    nbNvmData = NvmDataMgmtRestore( );
 8006c90:	f000 fcc5 	bl	800761e <NvmDataMgmtRestore>
    if( nbNvmData > 0 )
 8006c94:	1e42      	subs	r2, r0, #1
 8006c96:	4190      	sbcs	r0, r2
 8006c98:	4b46      	ldr	r3, [pc, #280]	; (8006db4 <LmHandlerConfigure+0x16c>)
    mibReq.Type = MIB_DEV_EUI;
 8006c9a:	ad0c      	add	r5, sp, #48	; 0x30
 8006c9c:	3364      	adds	r3, #100	; 0x64
    if( nbNvmData > 0 )
 8006c9e:	7018      	strb	r0, [r3, #0]
    mibReq.Type = MIB_DEV_EUI;
 8006ca0:	2302      	movs	r3, #2
    LoRaMacMibGetRequestConfirm( &mibReq );
 8006ca2:	0028      	movs	r0, r5
    mibReq.Type = MIB_DEV_EUI;
 8006ca4:	702b      	strb	r3, [r5, #0]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8006ca6:	f002 fca3 	bl	80095f0 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 8006caa:	4c44      	ldr	r4, [pc, #272]	; (8006dbc <LmHandlerConfigure+0x174>)
 8006cac:	2208      	movs	r2, #8
 8006cae:	0020      	movs	r0, r4
 8006cb0:	6869      	ldr	r1, [r5, #4]
 8006cb2:	f005 fae5 	bl	800c280 <memcpy1>
    mibReq.Type = MIB_JOIN_EUI;
 8006cb6:	2303      	movs	r3, #3
    LoRaMacMibGetRequestConfirm( &mibReq );
 8006cb8:	0028      	movs	r0, r5
    mibReq.Type = MIB_JOIN_EUI;
 8006cba:	702b      	strb	r3, [r5, #0]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8006cbc:	f002 fc98 	bl	80095f0 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 8006cc0:	0020      	movs	r0, r4
 8006cc2:	2208      	movs	r2, #8
 8006cc4:	6869      	ldr	r1, [r5, #4]
 8006cc6:	3008      	adds	r0, #8
 8006cc8:	f005 fada 	bl	800c280 <memcpy1>
    CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 8006ccc:	4b39      	ldr	r3, [pc, #228]	; (8006db4 <LmHandlerConfigure+0x16c>)
 8006cce:	699b      	ldr	r3, [r3, #24]
 8006cd0:	68db      	ldr	r3, [r3, #12]
 8006cd2:	4798      	blx	r3
    mibReq.Type = MIB_DEV_ADDR;
 8006cd4:	2306      	movs	r3, #6
    CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 8006cd6:	6160      	str	r0, [r4, #20]
    mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 8006cd8:	6068      	str	r0, [r5, #4]
    LoRaMacMibSetRequestConfirm(&mibReq);
 8006cda:	0028      	movs	r0, r5
    mibReq.Type = MIB_DEV_ADDR;
 8006cdc:	702b      	strb	r3, [r5, #0]
    LoRaMacMibSetRequestConfirm(&mibReq);
 8006cde:	f002 fd29 	bl	8009734 <LoRaMacMibSetRequestConfirm>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8006ce2:	79e3      	ldrb	r3, [r4, #7]
 8006ce4:	0032      	movs	r2, r6
 8006ce6:	9307      	str	r3, [sp, #28]
 8006ce8:	79a3      	ldrb	r3, [r4, #6]
 8006cea:	0031      	movs	r1, r6
 8006cec:	9306      	str	r3, [sp, #24]
 8006cee:	7963      	ldrb	r3, [r4, #5]
 8006cf0:	2002      	movs	r0, #2
 8006cf2:	9305      	str	r3, [sp, #20]
 8006cf4:	7923      	ldrb	r3, [r4, #4]
 8006cf6:	9304      	str	r3, [sp, #16]
 8006cf8:	78e3      	ldrb	r3, [r4, #3]
 8006cfa:	9303      	str	r3, [sp, #12]
 8006cfc:	78a3      	ldrb	r3, [r4, #2]
 8006cfe:	9302      	str	r3, [sp, #8]
 8006d00:	7863      	ldrb	r3, [r4, #1]
 8006d02:	9301      	str	r3, [sp, #4]
 8006d04:	7823      	ldrb	r3, [r4, #0]
 8006d06:	9300      	str	r3, [sp, #0]
 8006d08:	4b2d      	ldr	r3, [pc, #180]	; (8006dc0 <LmHandlerConfigure+0x178>)
 8006d0a:	f006 fe3b 	bl	800d984 <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8006d0e:	7be3      	ldrb	r3, [r4, #15]
 8006d10:	0032      	movs	r2, r6
 8006d12:	9307      	str	r3, [sp, #28]
 8006d14:	7ba3      	ldrb	r3, [r4, #14]
 8006d16:	0031      	movs	r1, r6
 8006d18:	9306      	str	r3, [sp, #24]
 8006d1a:	7b63      	ldrb	r3, [r4, #13]
 8006d1c:	2002      	movs	r0, #2
 8006d1e:	9305      	str	r3, [sp, #20]
 8006d20:	7b23      	ldrb	r3, [r4, #12]
 8006d22:	9304      	str	r3, [sp, #16]
 8006d24:	7ae3      	ldrb	r3, [r4, #11]
 8006d26:	9303      	str	r3, [sp, #12]
 8006d28:	7aa3      	ldrb	r3, [r4, #10]
 8006d2a:	9302      	str	r3, [sp, #8]
 8006d2c:	7a63      	ldrb	r3, [r4, #9]
 8006d2e:	9301      	str	r3, [sp, #4]
 8006d30:	7a23      	ldrb	r3, [r4, #8]
 8006d32:	9300      	str	r3, [sp, #0]
 8006d34:	4b23      	ldr	r3, [pc, #140]	; (8006dc4 <LmHandlerConfigure+0x17c>)
 8006d36:	f006 fe25 	bl	800d984 <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr: %02X:%02X:%02X:%02X\r\n",
 8006d3a:	7d23      	ldrb	r3, [r4, #20]
 8006d3c:	0032      	movs	r2, r6
 8006d3e:	9303      	str	r3, [sp, #12]
 8006d40:	7d63      	ldrb	r3, [r4, #21]
 8006d42:	0031      	movs	r1, r6
 8006d44:	9302      	str	r3, [sp, #8]
 8006d46:	7da3      	ldrb	r3, [r4, #22]
 8006d48:	2002      	movs	r0, #2
 8006d4a:	9301      	str	r3, [sp, #4]
 8006d4c:	7de3      	ldrb	r3, [r4, #23]
    mibReq.Type = MIB_PUBLIC_NETWORK;
 8006d4e:	240f      	movs	r4, #15
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr: %02X:%02X:%02X:%02X\r\n",
 8006d50:	9300      	str	r3, [sp, #0]
 8006d52:	4b1d      	ldr	r3, [pc, #116]	; (8006dc8 <LmHandlerConfigure+0x180>)
 8006d54:	f006 fe16 	bl	800d984 <UTIL_ADV_TRACE_COND_FSend>
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 8006d58:	2301      	movs	r3, #1
    LoRaMacMibSetRequestConfirm(&mibReq);
 8006d5a:	0028      	movs	r0, r5
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 8006d5c:	712b      	strb	r3, [r5, #4]
    mibReq.Type = MIB_PUBLIC_NETWORK;
 8006d5e:	702c      	strb	r4, [r5, #0]
    LoRaMacMibSetRequestConfirm(&mibReq);
 8006d60:	f002 fce8 	bl	8009734 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_NET_ID;
 8006d64:	2305      	movs	r3, #5
    LoRaMacMibSetRequestConfirm(&mibReq);
 8006d66:	0028      	movs	r0, r5
    mibReq.Type = MIB_NET_ID;
 8006d68:	702b      	strb	r3, [r5, #0]
    mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 8006d6a:	606e      	str	r6, [r5, #4]
    LoRaMacMibSetRequestConfirm(&mibReq);
 8006d6c:	f002 fce2 	bl	8009734 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_REPEATER_SUPPORT;
 8006d70:	2310      	movs	r3, #16
    LoRaMacMibSetRequestConfirm( &mibReq );
 8006d72:	0028      	movs	r0, r5
    mibReq.Type = MIB_REPEATER_SUPPORT;
 8006d74:	702b      	strb	r3, [r5, #0]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 8006d76:	712e      	strb	r6, [r5, #4]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8006d78:	f002 fcdc 	bl	8009734 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_ADR;
 8006d7c:	2304      	movs	r3, #4
 8006d7e:	702b      	strb	r3, [r5, #0]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 8006d80:	78bb      	ldrb	r3, [r7, #2]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8006d82:	0028      	movs	r0, r5
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 8006d84:	712b      	strb	r3, [r5, #4]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8006d86:	f002 fcd5 	bl	8009734 <LoRaMacMibSetRequestConfirm>
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8006d8a:	a90a      	add	r1, sp, #40	; 0x28
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 8006d8c:	7838      	ldrb	r0, [r7, #0]
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8006d8e:	700c      	strb	r4, [r1, #0]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 8006d90:	f004 f8ba 	bl	800af08 <RegionGetPhyParam>
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 8006d94:	1e43      	subs	r3, r0, #1
 8006d96:	4198      	sbcs	r0, r3
    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 8006d98:	2322      	movs	r3, #34	; 0x22
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 8006d9a:	7178      	strb	r0, [r7, #5]
    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 8006d9c:	a815      	add	r0, sp, #84	; 0x54
 8006d9e:	7003      	strb	r3, [r0, #0]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 8006da0:	3b0e      	subs	r3, #14
 8006da2:	6043      	str	r3, [r0, #4]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8006da4:	f002 fcc6 	bl	8009734 <LoRaMacMibSetRequestConfirm>
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 8006da8:	7978      	ldrb	r0, [r7, #5]
 8006daa:	f003 f9af 	bl	800a10c <LoRaMacTestSetDutyCycleOn>
    return LORAMAC_HANDLER_SUCCESS;
 8006dae:	0030      	movs	r0, r6
}
 8006db0:	b01f      	add	sp, #124	; 0x7c
 8006db2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006db4:	200004e4 	.word	0x200004e4
 8006db8:	0800efde 	.word	0x0800efde
 8006dbc:	20000058 	.word	0x20000058
 8006dc0:	0800f027 	.word	0x0800f027
 8006dc4:	0800f061 	.word	0x0800f061
 8006dc8:	0800f09b 	.word	0x0800f09b

08006dcc <LmHandlerProcess>:
{
 8006dcc:	b570      	push	{r4, r5, r6, lr}
    LoRaMacProcess( );
 8006dce:	f001 fc67 	bl	80086a0 <LoRaMacProcess>
    }
}

static void LmHandlerPackagesProcess( void )
{
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8006dd2:	4d0c      	ldr	r5, [pc, #48]	; (8006e04 <LmHandlerProcess+0x38>)
 8006dd4:	002c      	movs	r4, r5
 8006dd6:	3530      	adds	r5, #48	; 0x30
 8006dd8:	341c      	adds	r4, #28
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 8006dda:	6823      	ldr	r3, [r4, #0]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d00b      	beq.n	8006df8 <LmHandlerProcess+0x2c>
 8006de0:	691a      	ldr	r2, [r3, #16]
 8006de2:	2a00      	cmp	r2, #0
 8006de4:	d008      	beq.n	8006df8 <LmHandlerProcess+0x2c>
    if (( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ))
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d005      	beq.n	8006df8 <LmHandlerProcess+0x2c>
        return LmHandlerPackages[id]->IsInitialized( );
 8006dec:	4798      	blx	r3
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8006dee:	2800      	cmp	r0, #0
 8006df0:	d002      	beq.n	8006df8 <LmHandlerProcess+0x2c>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
        {
            LmHandlerPackages[i]->Process( );
 8006df2:	6823      	ldr	r3, [r4, #0]
 8006df4:	691b      	ldr	r3, [r3, #16]
 8006df6:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8006df8:	3404      	adds	r4, #4
 8006dfa:	42a5      	cmp	r5, r4
 8006dfc:	d1ed      	bne.n	8006dda <LmHandlerProcess+0xe>
    NvmDataMgmtStore( );
 8006dfe:	f000 fc0c 	bl	800761a <NvmDataMgmtStore>
}
 8006e02:	bd70      	pop	{r4, r5, r6, pc}
 8006e04:	200004e4 	.word	0x200004e4

08006e08 <LmHandlerJoinStatus>:
{
 8006e08:	b500      	push	{lr}
 8006e0a:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	466a      	mov	r2, sp
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 8006e10:	a801      	add	r0, sp, #4
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 8006e12:	7113      	strb	r3, [r2, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 8006e14:	f002 fbec 	bl	80095f0 <LoRaMacMibGetRequestConfirm>
        return LORAMAC_HANDLER_RESET;
 8006e18:	2300      	movs	r3, #0
    if( status == LORAMAC_STATUS_OK )
 8006e1a:	4298      	cmp	r0, r3
 8006e1c:	d104      	bne.n	8006e28 <LmHandlerJoinStatus+0x20>
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 8006e1e:	466b      	mov	r3, sp
 8006e20:	7a1b      	ldrb	r3, [r3, #8]
 8006e22:	1e5a      	subs	r2, r3, #1
 8006e24:	4193      	sbcs	r3, r2
            return LORAMAC_HANDLER_RESET;
 8006e26:	b2db      	uxtb	r3, r3
}
 8006e28:	0018      	movs	r0, r3
 8006e2a:	b00b      	add	sp, #44	; 0x2c
 8006e2c:	bd00      	pop	{pc}
	...

08006e30 <LmHandlerRequestClass>:
{
 8006e30:	b570      	push	{r4, r5, r6, lr}
 8006e32:	b08c      	sub	sp, #48	; 0x30
 8006e34:	0005      	movs	r5, r0
    if (LoRaMacIsBusy() == true)
 8006e36:	f001 fc21 	bl	800867c <LoRaMacIsBusy>
 8006e3a:	1e06      	subs	r6, r0, #0
 8006e3c:	d146      	bne.n	8006ecc <LmHandlerRequestClass+0x9c>
    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 8006e3e:	f7ff ffe3 	bl	8006e08 <LmHandlerJoinStatus>
 8006e42:	2801      	cmp	r0, #1
 8006e44:	d145      	bne.n	8006ed2 <LmHandlerRequestClass+0xa2>
    mibReq.Type = MIB_DEVICE_CLASS;
 8006e46:	ac03      	add	r4, sp, #12
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8006e48:	0020      	movs	r0, r4
    mibReq.Type = MIB_DEVICE_CLASS;
 8006e4a:	7026      	strb	r6, [r4, #0]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8006e4c:	f002 fbd0 	bl	80095f0 <LoRaMacMibGetRequestConfirm>
 8006e50:	2800      	cmp	r0, #0
 8006e52:	d001      	beq.n	8006e58 <LmHandlerRequestClass+0x28>
        switch( newClass )
 8006e54:	2001      	movs	r0, #1
 8006e56:	e03a      	b.n	8006ece <LmHandlerRequestClass+0x9e>
    currentClass = mibReq.Param.Class;
 8006e58:	7923      	ldrb	r3, [r4, #4]
    if( currentClass != newClass )
 8006e5a:	42ab      	cmp	r3, r5
 8006e5c:	d102      	bne.n	8006e64 <LmHandlerRequestClass+0x34>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8006e5e:	2000      	movs	r0, #0
}
 8006e60:	b00c      	add	sp, #48	; 0x30
 8006e62:	bd70      	pop	{r4, r5, r6, pc}
        switch( newClass )
 8006e64:	2d01      	cmp	r5, #1
 8006e66:	d0f5      	beq.n	8006e54 <LmHandlerRequestClass+0x24>
 8006e68:	2d02      	cmp	r5, #2
 8006e6a:	d018      	beq.n	8006e9e <LmHandlerRequestClass+0x6e>
 8006e6c:	2d00      	cmp	r5, #0
 8006e6e:	d1f7      	bne.n	8006e60 <LmHandlerRequestClass+0x30>
                if( currentClass != CLASS_A )
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d0f4      	beq.n	8006e5e <LmHandlerRequestClass+0x2e>
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8006e74:	0020      	movs	r0, r4
                    mibReq.Param.Class = newClass;
 8006e76:	7125      	strb	r5, [r4, #4]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8006e78:	f002 fc5c 	bl	8009734 <LoRaMacMibSetRequestConfirm>
 8006e7c:	1e01      	subs	r1, r0, #0
 8006e7e:	d1e9      	bne.n	8006e54 <LmHandlerRequestClass+0x24>
    }
}

static void DisplayClassUpdate(DeviceClass_t deviceClass)
{
    MW_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 8006e80:	2341      	movs	r3, #65	; 0x41
 8006e82:	0002      	movs	r2, r0
 8006e84:	9300      	str	r3, [sp, #0]
 8006e86:	2002      	movs	r0, #2
 8006e88:	4b13      	ldr	r3, [pc, #76]	; (8006ed8 <LmHandlerRequestClass+0xa8>)
 8006e8a:	f006 fd7b 	bl	800d984 <UTIL_ADV_TRACE_COND_FSend>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 8006e8e:	4b13      	ldr	r3, [pc, #76]	; (8006edc <LmHandlerRequestClass+0xac>)
 8006e90:	699b      	ldr	r3, [r3, #24]
 8006e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d0e2      	beq.n	8006e5e <LmHandlerRequestClass+0x2e>
                            LmHandlerCallbacks->OnClassChange( newClass );
 8006e98:	2000      	movs	r0, #0
 8006e9a:	4798      	blx	r3
 8006e9c:	e7df      	b.n	8006e5e <LmHandlerRequestClass+0x2e>
                if( currentClass != CLASS_A )
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d1d8      	bne.n	8006e54 <LmHandlerRequestClass+0x24>
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 8006ea2:	0020      	movs	r0, r4
                    mibReq.Param.Class = newClass;
 8006ea4:	7125      	strb	r5, [r4, #4]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 8006ea6:	f002 fc45 	bl	8009734 <LoRaMacMibSetRequestConfirm>
 8006eaa:	2800      	cmp	r0, #0
 8006eac:	d1d2      	bne.n	8006e54 <LmHandlerRequestClass+0x24>
    MW_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 8006eae:	2343      	movs	r3, #67	; 0x43
 8006eb0:	0002      	movs	r2, r0
 8006eb2:	0001      	movs	r1, r0
 8006eb4:	9300      	str	r3, [sp, #0]
 8006eb6:	0028      	movs	r0, r5
 8006eb8:	4b07      	ldr	r3, [pc, #28]	; (8006ed8 <LmHandlerRequestClass+0xa8>)
 8006eba:	f006 fd63 	bl	800d984 <UTIL_ADV_TRACE_COND_FSend>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 8006ebe:	4b07      	ldr	r3, [pc, #28]	; (8006edc <LmHandlerRequestClass+0xac>)
                            LmHandlerCallbacks->OnClassChange( newClass );
 8006ec0:	0028      	movs	r0, r5
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 8006ec2:	699b      	ldr	r3, [r3, #24]
 8006ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d1e7      	bne.n	8006e9a <LmHandlerRequestClass+0x6a>
 8006eca:	e7c8      	b.n	8006e5e <LmHandlerRequestClass+0x2e>
        return LORAMAC_HANDLER_BUSY_ERROR;
 8006ecc:	2002      	movs	r0, #2
        switch( newClass )
 8006ece:	4240      	negs	r0, r0
 8006ed0:	e7c6      	b.n	8006e60 <LmHandlerRequestClass+0x30>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8006ed2:	2003      	movs	r0, #3
 8006ed4:	e7fb      	b.n	8006ece <LmHandlerRequestClass+0x9e>
 8006ed6:	46c0      	nop			; (mov r8, r8)
 8006ed8:	0800f0c1 	.word	0x0800f0c1
 8006edc:	200004e4 	.word	0x200004e4

08006ee0 <LmHandlerJoin>:
{
 8006ee0:	b570      	push	{r4, r5, r6, lr}
 8006ee2:	b08a      	sub	sp, #40	; 0x28
 8006ee4:	4e1b      	ldr	r6, [pc, #108]	; (8006f54 <LmHandlerJoin+0x74>)
 8006ee6:	4c1c      	ldr	r4, [pc, #112]	; (8006f58 <LmHandlerJoin+0x78>)
 8006ee8:	ad01      	add	r5, sp, #4
    if ( mode == ACTIVATION_TYPE_OTAA )
 8006eea:	2802      	cmp	r0, #2
 8006eec:	d10c      	bne.n	8006f08 <LmHandlerJoin+0x28>
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 8006eee:	76b0      	strb	r0, [r6, #26]
        LoRaMacStart();
 8006ef0:	f002 fb1c 	bl	800952c <LoRaMacStart>
        mlmeReq.Type = MLME_JOIN;
 8006ef4:	2301      	movs	r3, #1
        mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 8006ef6:	3430      	adds	r4, #48	; 0x30
        mlmeReq.Type = MLME_JOIN;
 8006ef8:	702b      	strb	r3, [r5, #0]
        mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 8006efa:	78e3      	ldrb	r3, [r4, #3]
        LoRaMacMlmeRequest( &mlmeReq );
 8006efc:	0028      	movs	r0, r5
        mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 8006efe:	712b      	strb	r3, [r5, #4]
        LoRaMacMlmeRequest( &mlmeReq );
 8006f00:	f002 fe4e 	bl	8009ba0 <LoRaMacMlmeRequest>
}
 8006f04:	b00a      	add	sp, #40	; 0x28
 8006f06:	bd70      	pop	{r4, r5, r6, pc}
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	76b3      	strb	r3, [r6, #26]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 8006f0c:	0023      	movs	r3, r4
 8006f0e:	3330      	adds	r3, #48	; 0x30
 8006f10:	78db      	ldrb	r3, [r3, #3]
 8006f12:	7633      	strb	r3, [r6, #24]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8006f14:	2300      	movs	r3, #0
 8006f16:	7673      	strb	r3, [r6, #25]
        if (CtxRestoreDone == false)
 8006f18:	0023      	movs	r3, r4
 8006f1a:	3364      	adds	r3, #100	; 0x64
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d106      	bne.n	8006f30 <LmHandlerJoin+0x50>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 8006f22:	3327      	adds	r3, #39	; 0x27
 8006f24:	702b      	strb	r3, [r5, #0]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 8006f26:	4b0d      	ldr	r3, [pc, #52]	; (8006f5c <LmHandlerJoin+0x7c>)
            LoRaMacMibSetRequestConfirm(&mibReq);
 8006f28:	0028      	movs	r0, r5
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 8006f2a:	606b      	str	r3, [r5, #4]
            LoRaMacMibSetRequestConfirm(&mibReq);
 8006f2c:	f002 fc02 	bl	8009734 <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 8006f30:	f002 fafc 	bl	800952c <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 8006f34:	2301      	movs	r3, #1
        LoRaMacMibSetRequestConfirm( &mibReq );
 8006f36:	0028      	movs	r0, r5
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 8006f38:	702b      	strb	r3, [r5, #0]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 8006f3a:	712b      	strb	r3, [r5, #4]
        LoRaMacMibSetRequestConfirm( &mibReq );
 8006f3c:	f002 fbfa 	bl	8009734 <LoRaMacMibSetRequestConfirm>
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 8006f40:	0030      	movs	r0, r6
 8006f42:	69a3      	ldr	r3, [r4, #24]
 8006f44:	3018      	adds	r0, #24
 8006f46:	69db      	ldr	r3, [r3, #28]
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 8006f48:	3430      	adds	r4, #48	; 0x30
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 8006f4a:	4798      	blx	r3
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 8006f4c:	7860      	ldrb	r0, [r4, #1]
 8006f4e:	f7ff ff6f 	bl	8006e30 <LmHandlerRequestClass>
}
 8006f52:	e7d7      	b.n	8006f04 <LmHandlerJoin+0x24>
 8006f54:	20000058 	.word	0x20000058
 8006f58:	200004e4 	.word	0x200004e4
 8006f5c:	01000300 	.word	0x01000300

08006f60 <LmHandlerSend>:
{
 8006f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f62:	b089      	sub	sp, #36	; 0x24
 8006f64:	0005      	movs	r5, r0
 8006f66:	000f      	movs	r7, r1
 8006f68:	9200      	str	r2, [sp, #0]
 8006f6a:	9301      	str	r3, [sp, #4]
    if (LoRaMacIsBusy() == true)
 8006f6c:	f001 fb86 	bl	800867c <LoRaMacIsBusy>
 8006f70:	2800      	cmp	r0, #0
 8006f72:	d151      	bne.n	8007018 <LmHandlerSend+0xb8>
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 8006f74:	f7ff ff48 	bl	8006e08 <LmHandlerJoinStatus>
 8006f78:	2801      	cmp	r0, #1
 8006f7a:	d006      	beq.n	8006f8a <LmHandlerSend+0x2a>
        LmHandlerJoin(JoinParams.Mode);
 8006f7c:	4b29      	ldr	r3, [pc, #164]	; (8007024 <LmHandlerSend+0xc4>)
 8006f7e:	7e98      	ldrb	r0, [r3, #26]
 8006f80:	f7ff ffae 	bl	8006ee0 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8006f84:	2003      	movs	r0, #3
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 8006f86:	4240      	negs	r0, r0
 8006f88:	e034      	b.n	8006ff4 <LmHandlerSend+0x94>
    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true ) && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 8006f8a:	4e27      	ldr	r6, [pc, #156]	; (8007028 <LmHandlerSend+0xc8>)
 8006f8c:	69f3      	ldr	r3, [r6, #28]
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	4798      	blx	r3
 8006f92:	2800      	cmp	r0, #0
 8006f94:	d006      	beq.n	8006fa4 <LmHandlerSend+0x44>
 8006f96:	69f2      	ldr	r2, [r6, #28]
 8006f98:	782b      	ldrb	r3, [r5, #0]
 8006f9a:	7812      	ldrb	r2, [r2, #0]
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d001      	beq.n	8006fa4 <LmHandlerSend+0x44>
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d13b      	bne.n	800701c <LmHandlerSend+0xbc>
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 8006fa4:	0033      	movs	r3, r6
 8006fa6:	3330      	adds	r3, #48	; 0x30
 8006fa8:	78db      	ldrb	r3, [r3, #3]
 8006faa:	ac03      	add	r4, sp, #12
 8006fac:	73a3      	strb	r3, [r4, #14]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 8006fae:	7868      	ldrb	r0, [r5, #1]
 8006fb0:	a902      	add	r1, sp, #8
 8006fb2:	f002 fac3 	bl	800953c <LoRaMacQueryTxPossible>
 8006fb6:	2800      	cmp	r0, #0
 8006fb8:	d01e      	beq.n	8006ff8 <LmHandlerSend+0x98>
        TxParams.MsgType = LORAMAC_HANDLER_UNCONFIRMED_MSG;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	70b3      	strb	r3, [r6, #2]
        mcpsReq.Type = MCPS_UNCONFIRMED;
 8006fbe:	7023      	strb	r3, [r4, #0]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 8006fc0:	60a3      	str	r3, [r4, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 8006fc2:	81a3      	strh	r3, [r4, #12]
    TxParams.AppData = *appData;
 8006fc4:	0033      	movs	r3, r6
 8006fc6:	330c      	adds	r3, #12
 8006fc8:	cd06      	ldmia	r5!, {r1, r2}
 8006fca:	c306      	stmia	r3!, {r1, r2}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 8006fcc:	0033      	movs	r3, r6
 8006fce:	3330      	adds	r3, #48	; 0x30
 8006fd0:	78db      	ldrb	r3, [r3, #3]
    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 8006fd2:	0020      	movs	r0, r4
 8006fd4:	9901      	ldr	r1, [sp, #4]
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 8006fd6:	7133      	strb	r3, [r6, #4]
    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 8006fd8:	f002 fee4 	bl	8009da4 <LoRaMacMcpsRequest>
    if (nextTxIn != NULL)
 8006fdc:	9b00      	ldr	r3, [sp, #0]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d004      	beq.n	8006fec <LmHandlerSend+0x8c>
        *nextTxIn = mcpsReq.ReqReturn.DutyCycleWaitTime;
 8006fe2:	6923      	ldr	r3, [r4, #16]
 8006fe4:	9301      	str	r3, [sp, #4]
 8006fe6:	9a01      	ldr	r2, [sp, #4]
 8006fe8:	9b00      	ldr	r3, [sp, #0]
 8006fea:	601a      	str	r2, [r3, #0]
    switch (status)
 8006fec:	2811      	cmp	r0, #17
 8006fee:	d817      	bhi.n	8007020 <LmHandlerSend+0xc0>
 8006ff0:	4b0e      	ldr	r3, [pc, #56]	; (800702c <LmHandlerSend+0xcc>)
 8006ff2:	5618      	ldrsb	r0, [r3, r0]
}
 8006ff4:	b009      	add	sp, #36	; 0x24
 8006ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        TxParams.MsgType = isTxConfirmed;
 8006ff8:	70b7      	strb	r7, [r6, #2]
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 8006ffa:	782b      	ldrb	r3, [r5, #0]
 8006ffc:	7123      	strb	r3, [r4, #4]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 8006ffe:	786b      	ldrb	r3, [r5, #1]
 8007000:	81a3      	strh	r3, [r4, #12]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 8007002:	686b      	ldr	r3, [r5, #4]
 8007004:	60a3      	str	r3, [r4, #8]
        if( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG )
 8007006:	2f00      	cmp	r7, #0
 8007008:	d101      	bne.n	800700e <LmHandlerSend+0xae>
            mcpsReq.Type = MCPS_UNCONFIRMED;
 800700a:	7027      	strb	r7, [r4, #0]
 800700c:	e7da      	b.n	8006fc4 <LmHandlerSend+0x64>
            mcpsReq.Type = MCPS_CONFIRMED;
 800700e:	2301      	movs	r3, #1
 8007010:	7023      	strb	r3, [r4, #0]
            mcpsReq.Req.Confirmed.NbTrials = 8;
 8007012:	3307      	adds	r3, #7
 8007014:	73e3      	strb	r3, [r4, #15]
 8007016:	e7d5      	b.n	8006fc4 <LmHandlerSend+0x64>
        return LORAMAC_HANDLER_BUSY_ERROR;
 8007018:	2002      	movs	r0, #2
 800701a:	e7b4      	b.n	8006f86 <LmHandlerSend+0x26>
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800701c:	2004      	movs	r0, #4
 800701e:	e7b2      	b.n	8006f86 <LmHandlerSend+0x26>
 8007020:	2001      	movs	r0, #1
 8007022:	e7b0      	b.n	8006f86 <LmHandlerSend+0x26>
 8007024:	20000058 	.word	0x20000058
 8007028:	200004e4 	.word	0x200004e4
 800702c:	0800e9b5 	.word	0x0800e9b5

08007030 <MlmeIndication>:
{
 8007030:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007032:	0004      	movs	r4, r0
    RxParams.IsMcpsIndication = 0;
 8007034:	2000      	movs	r0, #0
 8007036:	4b14      	ldr	r3, [pc, #80]	; (8007088 <MlmeIndication+0x58>)
 8007038:	7718      	strb	r0, [r3, #28]
    RxParams.Status = mlmeIndication->Status;
 800703a:	7862      	ldrb	r2, [r4, #1]
 800703c:	775a      	strb	r2, [r3, #29]
    RxParams.Rssi = RxStatus->Rssi;
 800703e:	880d      	ldrh	r5, [r1, #0]
 8007040:	77dd      	strb	r5, [r3, #31]
    RxParams.Snr = RxStatus->Snr;
 8007042:	788e      	ldrb	r6, [r1, #2]
 8007044:	1c5d      	adds	r5, r3, #1
 8007046:	77ee      	strb	r6, [r5, #31]
    RxParams.RxSlot = RxStatus->RxSlot;
 8007048:	001d      	movs	r5, r3
 800704a:	78c9      	ldrb	r1, [r1, #3]
 800704c:	3528      	adds	r5, #40	; 0x28
 800704e:	7029      	strb	r1, [r5, #0]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED )
 8007050:	2a0e      	cmp	r2, #14
 8007052:	d005      	beq.n	8007060 <MlmeIndication+0x30>
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 8007054:	331c      	adds	r3, #28
 8007056:	0019      	movs	r1, r3
 8007058:	4b0c      	ldr	r3, [pc, #48]	; (800708c <MlmeIndication+0x5c>)
 800705a:	699b      	ldr	r3, [r3, #24]
 800705c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705e:	4798      	blx	r3
    switch( mlmeIndication->MlmeIndication )
 8007060:	7823      	ldrb	r3, [r4, #0]
 8007062:	2b07      	cmp	r3, #7
 8007064:	d10e      	bne.n	8007084 <MlmeIndication+0x54>
            LmHandlerAppData_t appData =
 8007066:	2300      	movs	r3, #0
 8007068:	466a      	mov	r2, sp
 800706a:	9301      	str	r3, [sp, #4]
 800706c:	8013      	strh	r3, [r2, #0]
            if( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == false )
 800706e:	4b07      	ldr	r3, [pc, #28]	; (800708c <MlmeIndication+0x5c>)
 8007070:	69db      	ldr	r3, [r3, #28]
 8007072:	68db      	ldr	r3, [r3, #12]
 8007074:	4798      	blx	r3
 8007076:	1e01      	subs	r1, r0, #0
 8007078:	d104      	bne.n	8007084 <MlmeIndication+0x54>
                LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true );
 800707a:	0002      	movs	r2, r0
 800707c:	2301      	movs	r3, #1
 800707e:	4668      	mov	r0, sp
 8007080:	f7ff ff6e 	bl	8006f60 <LmHandlerSend>
}
 8007084:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 8007086:	46c0      	nop			; (mov r8, r8)
 8007088:	20000058 	.word	0x20000058
 800708c:	200004e4 	.word	0x200004e4

08007090 <LmHandlerGetCurrentClass>:
{
 8007090:	b510      	push	{r4, lr}
 8007092:	0004      	movs	r4, r0
 8007094:	b08a      	sub	sp, #40	; 0x28
    if (deviceClass == NULL)
 8007096:	2800      	cmp	r0, #0
 8007098:	d103      	bne.n	80070a2 <LmHandlerGetCurrentClass+0x12>
        return LORAMAC_HANDLER_ERROR;
 800709a:	2001      	movs	r0, #1
 800709c:	4240      	negs	r0, r0
}
 800709e:	b00a      	add	sp, #40	; 0x28
 80070a0:	bd10      	pop	{r4, pc}
    mibReq.Type = MIB_DEVICE_CLASS;
 80070a2:	2300      	movs	r3, #0
 80070a4:	466a      	mov	r2, sp
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 80070a6:	a801      	add	r0, sp, #4
    mibReq.Type = MIB_DEVICE_CLASS;
 80070a8:	7113      	strb	r3, [r2, #4]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 80070aa:	f002 faa1 	bl	80095f0 <LoRaMacMibGetRequestConfirm>
 80070ae:	2800      	cmp	r0, #0
 80070b0:	d1f3      	bne.n	800709a <LmHandlerGetCurrentClass+0xa>
    *deviceClass = mibReq.Param.Class;
 80070b2:	466b      	mov	r3, sp
 80070b4:	7a1b      	ldrb	r3, [r3, #8]
 80070b6:	7023      	strb	r3, [r4, #0]
    return LORAMAC_HANDLER_SUCCESS;
 80070b8:	e7f1      	b.n	800709e <LmHandlerGetCurrentClass+0xe>
	...

080070bc <McpsIndication>:
{
 80070bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070be:	b087      	sub	sp, #28
    DeviceClass_t deviceClass = CLASS_A;
 80070c0:	2300      	movs	r3, #0
 80070c2:	466a      	mov	r2, sp
 80070c4:	71d3      	strb	r3, [r2, #7]
    RxParams.IsMcpsIndication = 1;
 80070c6:	2201      	movs	r2, #1
 80070c8:	4b2d      	ldr	r3, [pc, #180]	; (8007180 <McpsIndication+0xc4>)
{
 80070ca:	0004      	movs	r4, r0
    RxParams.IsMcpsIndication = 1;
 80070cc:	771a      	strb	r2, [r3, #28]
    RxParams.Status = mcpsIndication->Status;
 80070ce:	7842      	ldrb	r2, [r0, #1]
 80070d0:	775a      	strb	r2, [r3, #29]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 80070d2:	2a00      	cmp	r2, #0
 80070d4:	d14a      	bne.n	800716c <McpsIndication+0xb0>
    RxParams.Datarate = mcpsIndication->RxDatarate;
 80070d6:	7902      	ldrb	r2, [r0, #4]
    LmHandlerCallbacks->OnRxData(&appData, &RxParams);
 80070d8:	4e2a      	ldr	r6, [pc, #168]	; (8007184 <McpsIndication+0xc8>)
    RxParams.Datarate = mcpsIndication->RxDatarate;
 80070da:	779a      	strb	r2, [r3, #30]
    RxParams.Rssi = RxStatus->Rssi;
 80070dc:	880a      	ldrh	r2, [r1, #0]
 80070de:	77da      	strb	r2, [r3, #31]
    RxParams.Snr = RxStatus->Snr;
 80070e0:	7888      	ldrb	r0, [r1, #2]
 80070e2:	1c5a      	adds	r2, r3, #1
 80070e4:	77d0      	strb	r0, [r2, #31]
    RxParams.RxSlot = RxStatus->RxSlot;
 80070e6:	001a      	movs	r2, r3
 80070e8:	78c9      	ldrb	r1, [r1, #3]
 80070ea:	3228      	adds	r2, #40	; 0x28
 80070ec:	7011      	strb	r1, [r2, #0]
    appData.Port = mcpsIndication->Port;
 80070ee:	4669      	mov	r1, sp
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 80070f0:	6922      	ldr	r2, [r4, #16]
    LmHandlerCallbacks->OnRxData(&appData, &RxParams);
 80070f2:	331c      	adds	r3, #28
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 80070f4:	609a      	str	r2, [r3, #8]
    appData.Port = mcpsIndication->Port;
 80070f6:	78e2      	ldrb	r2, [r4, #3]
    LmHandlerCallbacks->OnRxData(&appData, &RxParams);
 80070f8:	a802      	add	r0, sp, #8
    appData.Port = mcpsIndication->Port;
 80070fa:	720a      	strb	r2, [r1, #8]
    appData.BufferSize = mcpsIndication->BufferSize;
 80070fc:	7b22      	ldrb	r2, [r4, #12]
 80070fe:	724a      	strb	r2, [r1, #9]
    LmHandlerCallbacks->OnRxData(&appData, &RxParams);
 8007100:	0019      	movs	r1, r3
    appData.Buffer = mcpsIndication->Buffer;
 8007102:	68a2      	ldr	r2, [r4, #8]
    LmHandlerCallbacks->OnRxData(&appData, &RxParams);
 8007104:	69b3      	ldr	r3, [r6, #24]
    appData.Buffer = mcpsIndication->Buffer;
 8007106:	9203      	str	r2, [sp, #12]
    LmHandlerCallbacks->OnRxData(&appData, &RxParams);
 8007108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710a:	4798      	blx	r3
    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 800710c:	69b3      	ldr	r3, [r6, #24]
 800710e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007110:	2b00      	cmp	r3, #0
 8007112:	d003      	beq.n	800711c <McpsIndication+0x60>
 8007114:	7e22      	ldrb	r2, [r4, #24]
 8007116:	2a00      	cmp	r2, #0
 8007118:	d000      	beq.n	800711c <McpsIndication+0x60>
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800711a:	4798      	blx	r3
 800711c:	0037      	movs	r7, r6
{
 800711e:	2500      	movs	r5, #0
 8007120:	371c      	adds	r7, #28
        if( LmHandlerPackages[i] != NULL )
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d00a      	beq.n	800713e <McpsIndication+0x82>
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 8007128:	69da      	ldr	r2, [r3, #28]
 800712a:	2a00      	cmp	r2, #0
 800712c:	d007      	beq.n	800713e <McpsIndication+0x82>
 800712e:	781a      	ldrb	r2, [r3, #0]
 8007130:	78e3      	ldrb	r3, [r4, #3]
 8007132:	429a      	cmp	r2, r3
 8007134:	d11c      	bne.n	8007170 <McpsIndication+0xb4>
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	0020      	movs	r0, r4
 800713a:	69db      	ldr	r3, [r3, #28]
 800713c:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800713e:	3501      	adds	r5, #1
 8007140:	b2eb      	uxtb	r3, r5
 8007142:	3704      	adds	r7, #4
 8007144:	b26d      	sxtb	r5, r5
 8007146:	2b05      	cmp	r3, #5
 8007148:	d1eb      	bne.n	8007122 <McpsIndication+0x66>
    LmHandlerGetCurrentClass(&deviceClass);
 800714a:	466b      	mov	r3, sp
 800714c:	1dd8      	adds	r0, r3, #7
 800714e:	f7ff ff9f 	bl	8007090 <LmHandlerGetCurrentClass>
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 8007152:	7963      	ldrb	r3, [r4, #5]
 8007154:	2b01      	cmp	r3, #1
 8007156:	d109      	bne.n	800716c <McpsIndication+0xb0>
 8007158:	466a      	mov	r2, sp
 800715a:	79d1      	ldrb	r1, [r2, #7]
 800715c:	2900      	cmp	r1, #0
 800715e:	d105      	bne.n	800716c <McpsIndication+0xb0>
        LmHandlerAppData_t appData =
 8007160:	a804      	add	r0, sp, #16
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 8007162:	000a      	movs	r2, r1
        LmHandlerAppData_t appData =
 8007164:	8001      	strh	r1, [r0, #0]
 8007166:	6041      	str	r1, [r0, #4]
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 8007168:	f7ff fefa 	bl	8006f60 <LmHandlerSend>
}
 800716c:	b007      	add	sp, #28
 800716e:	bdf0      	pop	{r4, r5, r6, r7, pc}
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 8007170:	2d00      	cmp	r5, #0
 8007172:	d1e4      	bne.n	800713e <McpsIndication+0x82>
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
 8007174:	69f3      	ldr	r3, [r6, #28]
 8007176:	68db      	ldr	r3, [r3, #12]
 8007178:	4798      	blx	r3
 800717a:	2800      	cmp	r0, #0
 800717c:	d1db      	bne.n	8007136 <McpsIndication+0x7a>
 800717e:	e7de      	b.n	800713e <McpsIndication+0x82>
 8007180:	20000058 	.word	0x20000058
 8007184:	200004e4 	.word	0x200004e4

08007188 <LmHandlerGetTxDatarate>:
{
 8007188:	b510      	push	{r4, lr}
 800718a:	0004      	movs	r4, r0
 800718c:	b08a      	sub	sp, #40	; 0x28
    if (txDatarate == NULL)
 800718e:	2800      	cmp	r0, #0
 8007190:	d103      	bne.n	800719a <LmHandlerGetTxDatarate+0x12>
        return LORAMAC_HANDLER_ERROR;
 8007192:	2001      	movs	r0, #1
 8007194:	4240      	negs	r0, r0
}
 8007196:	b00a      	add	sp, #40	; 0x28
 8007198:	bd10      	pop	{r4, pc}
    mibGet.Type = MIB_CHANNELS_DATARATE;
 800719a:	231f      	movs	r3, #31
 800719c:	466a      	mov	r2, sp
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 800719e:	a801      	add	r0, sp, #4
    mibGet.Type = MIB_CHANNELS_DATARATE;
 80071a0:	7113      	strb	r3, [r2, #4]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 80071a2:	f002 fa25 	bl	80095f0 <LoRaMacMibGetRequestConfirm>
 80071a6:	2800      	cmp	r0, #0
 80071a8:	d1f3      	bne.n	8007192 <LmHandlerGetTxDatarate+0xa>
    *txDatarate = mibGet.Param.ChannelsDatarate;
 80071aa:	466b      	mov	r3, sp
 80071ac:	2208      	movs	r2, #8
 80071ae:	569a      	ldrsb	r2, [r3, r2]
    LmHandlerParams.TxDatarate = *txDatarate;
 80071b0:	4b02      	ldr	r3, [pc, #8]	; (80071bc <LmHandlerGetTxDatarate+0x34>)
    *txDatarate = mibGet.Param.ChannelsDatarate;
 80071b2:	7022      	strb	r2, [r4, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 80071b4:	3330      	adds	r3, #48	; 0x30
 80071b6:	70da      	strb	r2, [r3, #3]
    return LORAMAC_HANDLER_SUCCESS;
 80071b8:	e7ed      	b.n	8007196 <LmHandlerGetTxDatarate+0xe>
 80071ba:	46c0      	nop			; (mov r8, r8)
 80071bc:	200004e4 	.word	0x200004e4

080071c0 <MlmeConfirm>:
    TxParams.IsMcpsConfirm = 0;
 80071c0:	2300      	movs	r3, #0
{
 80071c2:	b5f0      	push	{r4, r5, r6, r7, lr}
    TxParams.IsMcpsConfirm = 0;
 80071c4:	4d25      	ldr	r5, [pc, #148]	; (800725c <MlmeConfirm+0x9c>)
{
 80071c6:	0004      	movs	r4, r0
    TxParams.IsMcpsConfirm = 0;
 80071c8:	702b      	strb	r3, [r5, #0]
    TxParams.Status = mlmeConfirm->Status;
 80071ca:	7843      	ldrb	r3, [r0, #1]
 80071cc:	002e      	movs	r6, r5
 80071ce:	706b      	strb	r3, [r5, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 80071d0:	69ab      	ldr	r3, [r5, #24]
 80071d2:	0028      	movs	r0, r5
 80071d4:	002f      	movs	r7, r5
 80071d6:	6a1b      	ldr	r3, [r3, #32]
{
 80071d8:	b08b      	sub	sp, #44	; 0x2c
    LmHandlerCallbacks->OnTxData( &TxParams );
 80071da:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 80071dc:	361c      	adds	r6, #28
 80071de:	3730      	adds	r7, #48	; 0x30
        if( LmHandlerPackages[i] != NULL )
 80071e0:	6833      	ldr	r3, [r6, #0]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d004      	beq.n	80071f0 <MlmeConfirm+0x30>
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 80071e6:	6a1b      	ldr	r3, [r3, #32]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d001      	beq.n	80071f0 <MlmeConfirm+0x30>
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 80071ec:	0020      	movs	r0, r4
 80071ee:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 80071f0:	3604      	adds	r6, #4
 80071f2:	42be      	cmp	r6, r7
 80071f4:	d1f4      	bne.n	80071e0 <MlmeConfirm+0x20>
    switch( mlmeConfirm->MlmeRequest )
 80071f6:	7823      	ldrb	r3, [r4, #0]
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d003      	beq.n	8007204 <MlmeConfirm+0x44>
 80071fc:	2b04      	cmp	r3, #4
 80071fe:	d020      	beq.n	8007242 <MlmeConfirm+0x82>
}
 8007200:	b00b      	add	sp, #44	; 0x2c
 8007202:	bdf0      	pop	{r4, r5, r6, r7, pc}
            mibReq.Type = MIB_DEV_ADDR;
 8007204:	2306      	movs	r3, #6
 8007206:	af01      	add	r7, sp, #4
            LoRaMacMibGetRequestConfirm( &mibReq );
 8007208:	0038      	movs	r0, r7
            mibReq.Type = MIB_DEV_ADDR;
 800720a:	703b      	strb	r3, [r7, #0]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800720c:	f002 f9f0 	bl	80095f0 <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 8007210:	4e13      	ldr	r6, [pc, #76]	; (8007260 <MlmeConfirm+0xa0>)
 8007212:	9b02      	ldr	r3, [sp, #8]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 8007214:	0030      	movs	r0, r6
 8007216:	3018      	adds	r0, #24
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 8007218:	6173      	str	r3, [r6, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800721a:	f7ff ffb5 	bl	8007188 <LmHandlerGetTxDatarate>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800721e:	7863      	ldrb	r3, [r4, #1]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d10b      	bne.n	800723c <MlmeConfirm+0x7c>
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8007224:	7673      	strb	r3, [r6, #25]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 8007226:	002b      	movs	r3, r5
 8007228:	3330      	adds	r3, #48	; 0x30
 800722a:	7858      	ldrb	r0, [r3, #1]
 800722c:	f7ff fe00 	bl	8006e30 <LmHandlerRequestClass>
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 8007230:	0030      	movs	r0, r6
 8007232:	69ab      	ldr	r3, [r5, #24]
 8007234:	3018      	adds	r0, #24
 8007236:	69db      	ldr	r3, [r3, #28]
 8007238:	4798      	blx	r3
        break;
 800723a:	e7e1      	b.n	8007200 <MlmeConfirm+0x40>
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800723c:	23ff      	movs	r3, #255	; 0xff
 800723e:	7673      	strb	r3, [r6, #25]
 8007240:	e7f6      	b.n	8007230 <MlmeConfirm+0x70>
            RxParams.LinkCheck = true;
 8007242:	4b07      	ldr	r3, [pc, #28]	; (8007260 <MlmeConfirm+0xa0>)
 8007244:	2101      	movs	r1, #1
 8007246:	001a      	movs	r2, r3
 8007248:	3229      	adds	r2, #41	; 0x29
 800724a:	7011      	strb	r1, [r2, #0]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800724c:	001a      	movs	r2, r3
 800724e:	7a21      	ldrb	r1, [r4, #8]
 8007250:	322a      	adds	r2, #42	; 0x2a
 8007252:	7011      	strb	r1, [r2, #0]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 8007254:	7a62      	ldrb	r2, [r4, #9]
 8007256:	332b      	adds	r3, #43	; 0x2b
 8007258:	701a      	strb	r2, [r3, #0]
}
 800725a:	e7d1      	b.n	8007200 <MlmeConfirm+0x40>
 800725c:	200004e4 	.word	0x200004e4
 8007260:	20000058 	.word	0x20000058

08007264 <LmHandlerPackageRegister>:
{
 8007264:	b570      	push	{r4, r5, r6, lr}
 8007266:	0004      	movs	r4, r0
 8007268:	000d      	movs	r5, r1
    switch( id )
 800726a:	2800      	cmp	r0, #0
 800726c:	d002      	beq.n	8007274 <LmHandlerPackageRegister+0x10>
        return LORAMAC_HANDLER_ERROR;
 800726e:	2001      	movs	r0, #1
 8007270:	4240      	negs	r0, r0
}
 8007272:	bd70      	pop	{r4, r5, r6, pc}
            package = LmhpCompliancePackageFactory( );
 8007274:	f000 f9cc 	bl	8007610 <LmhpCompliancePackageFactory>
    if( package != NULL )
 8007278:	2800      	cmp	r0, #0
 800727a:	d0f8      	beq.n	800726e <LmHandlerPackageRegister+0xa>
        LmHandlerPackages[id] = package;
 800727c:	4b08      	ldr	r3, [pc, #32]	; (80072a0 <LmHandlerPackageRegister+0x3c>)
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800727e:	4a09      	ldr	r2, [pc, #36]	; (80072a4 <LmHandlerPackageRegister+0x40>)
        LmHandlerPackages[id] = package;
 8007280:	61d8      	str	r0, [r3, #28]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 8007282:	6242      	str	r2, [r0, #36]	; 0x24
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 8007284:	699b      	ldr	r3, [r3, #24]
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 8007286:	4a08      	ldr	r2, [pc, #32]	; (80072a8 <LmHandlerPackageRegister+0x44>)
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 8007288:	691b      	ldr	r3, [r3, #16]
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 800728a:	6282      	str	r2, [r0, #40]	; 0x28
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800728c:	4a07      	ldr	r2, [pc, #28]	; (80072ac <LmHandlerPackageRegister+0x48>)
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800728e:	6143      	str	r3, [r0, #20]
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 8007290:	62c2      	str	r2, [r0, #44]	; 0x2c
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 8007292:	6843      	ldr	r3, [r0, #4]
 8007294:	22f2      	movs	r2, #242	; 0xf2
 8007296:	0028      	movs	r0, r5
 8007298:	4905      	ldr	r1, [pc, #20]	; (80072b0 <LmHandlerPackageRegister+0x4c>)
 800729a:	4798      	blx	r3
        return LORAMAC_HANDLER_SUCCESS;
 800729c:	0020      	movs	r0, r4
 800729e:	e7e8      	b.n	8007272 <LmHandlerPackageRegister+0xe>
 80072a0:	200004e4 	.word	0x200004e4
 80072a4:	08006ee1 	.word	0x08006ee1
 80072a8:	08006f61 	.word	0x08006f61
 80072ac:	08006be5 	.word	0x08006be5
 80072b0:	20000549 	.word	0x20000549

080072b4 <LmHandlerInit>:
    LmHandlerCallbacks = handlerCallbacks;
 80072b4:	4b0e      	ldr	r3, [pc, #56]	; (80072f0 <LmHandlerInit+0x3c>)
    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 80072b6:	4a0f      	ldr	r2, [pc, #60]	; (80072f4 <LmHandlerInit+0x40>)
{
 80072b8:	b510      	push	{r4, lr}
    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 80072ba:	655a      	str	r2, [r3, #84]	; 0x54
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 80072bc:	4a0e      	ldr	r2, [pc, #56]	; (80072f8 <LmHandlerInit+0x44>)
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 80072be:	490f      	ldr	r1, [pc, #60]	; (80072fc <LmHandlerInit+0x48>)
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 80072c0:	659a      	str	r2, [r3, #88]	; 0x58
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 80072c2:	4a0f      	ldr	r2, [pc, #60]	; (8007300 <LmHandlerInit+0x4c>)
    LmHandlerCallbacks = handlerCallbacks;
 80072c4:	6198      	str	r0, [r3, #24]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 80072c6:	65da      	str	r2, [r3, #92]	; 0x5c
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 80072c8:	4a0e      	ldr	r2, [pc, #56]	; (8007304 <LmHandlerInit+0x50>)
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 80072ca:	312c      	adds	r1, #44	; 0x2c
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 80072cc:	661a      	str	r2, [r3, #96]	; 0x60
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 80072ce:	6802      	ldr	r2, [r0, #0]
 80072d0:	641a      	str	r2, [r3, #64]	; 0x40
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 80072d2:	6842      	ldr	r2, [r0, #4]
 80072d4:	645a      	str	r2, [r3, #68]	; 0x44
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 80072d6:	6882      	ldr	r2, [r0, #8]
 80072d8:	649a      	str	r2, [r3, #72]	; 0x48
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 80072da:	4a0b      	ldr	r2, [pc, #44]	; (8007308 <LmHandlerInit+0x54>)
 80072dc:	64da      	str	r2, [r3, #76]	; 0x4c
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 80072de:	6902      	ldr	r2, [r0, #16]
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 80072e0:	2000      	movs	r0, #0
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 80072e2:	651a      	str	r2, [r3, #80]	; 0x50
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 80072e4:	f7ff ffbe 	bl	8007264 <LmHandlerPackageRegister>
 80072e8:	1e43      	subs	r3, r0, #1
 80072ea:	4198      	sbcs	r0, r3
}
 80072ec:	4240      	negs	r0, r0
 80072ee:	bd10      	pop	{r4, pc}
 80072f0:	200004e4 	.word	0x200004e4
 80072f4:	08006bfd 	.word	0x08006bfd
 80072f8:	080070bd 	.word	0x080070bd
 80072fc:	20000058 	.word	0x20000058
 8007300:	080071c1 	.word	0x080071c1
 8007304:	08007031 	.word	0x08007031
 8007308:	08007619 	.word	0x08007619

0800730c <LmhpComplianceInit>:
    return &LmhpCompliancePackage;
}

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800730c:	4b06      	ldr	r3, [pc, #24]	; (8007328 <LmhpComplianceInit+0x1c>)
 800730e:	2800      	cmp	r0, #0
 8007310:	d007      	beq.n	8007322 <LmhpComplianceInit+0x16>
 8007312:	2900      	cmp	r1, #0
 8007314:	d005      	beq.n	8007322 <LmhpComplianceInit+0x16>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t* )params;
        ComplianceTestState.DataBuffer = dataBuffer;
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 8007316:	725a      	strb	r2, [r3, #9]
        ComplianceTestState.Initialized = true;
 8007318:	2201      	movs	r2, #1
        LmhpComplianceParams = ( LmhpComplianceParams_t* )params;
 800731a:	6018      	str	r0, [r3, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 800731c:	60d9      	str	r1, [r3, #12]
    }
    else
    {
        LmhpComplianceParams = NULL;
        ComplianceTestState.Initialized = false;
 800731e:	711a      	strb	r2, [r3, #4]
    }
}
 8007320:	4770      	bx	lr
        LmhpComplianceParams = NULL;
 8007322:	2200      	movs	r2, #0
 8007324:	601a      	str	r2, [r3, #0]
 8007326:	e7fa      	b.n	800731e <LmhpComplianceInit+0x12>
 8007328:	2000063c 	.word	0x2000063c

0800732c <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
    return ComplianceTestState.Initialized;
 800732c:	4b01      	ldr	r3, [pc, #4]	; (8007334 <LmhpComplianceIsInitialized+0x8>)
 800732e:	7918      	ldrb	r0, [r3, #4]
}
 8007330:	4770      	bx	lr
 8007332:	46c0      	nop			; (mov r8, r8)
 8007334:	2000063c 	.word	0x2000063c

08007338 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
    if( ComplianceTestState.Initialized == false )
 8007338:	4b02      	ldr	r3, [pc, #8]	; (8007344 <LmhpComplianceIsRunning+0xc>)
 800733a:	7918      	ldrb	r0, [r3, #4]
 800733c:	2800      	cmp	r0, #0
 800733e:	d000      	beq.n	8007342 <LmhpComplianceIsRunning+0xa>
    {
        return false;
    }

    return ComplianceTestState.IsRunning;
 8007340:	7958      	ldrb	r0, [r3, #5]
}
 8007342:	4770      	bx	lr
 8007344:	2000063c 	.word	0x2000063c

08007348 <LmhpComplianceProcess>:
}

static void LmhpComplianceProcess( void )
{
    /* Nothing to process */
}
 8007348:	4770      	bx	lr
	...

0800734c <LmhpComplianceOnMcpsConfirm>:
    if (ComplianceTestState.Initialized == false)
 800734c:	4b08      	ldr	r3, [pc, #32]	; (8007370 <LmhpComplianceOnMcpsConfirm+0x24>)
 800734e:	791a      	ldrb	r2, [r3, #4]
 8007350:	2a00      	cmp	r2, #0
 8007352:	d00b      	beq.n	800736c <LmhpComplianceOnMcpsConfirm+0x20>
    if ((ComplianceTestState.IsRunning == true) &&
 8007354:	795a      	ldrb	r2, [r3, #5]
 8007356:	2a00      	cmp	r2, #0
 8007358:	d008      	beq.n	800736c <LmhpComplianceOnMcpsConfirm+0x20>
 800735a:	7802      	ldrb	r2, [r0, #0]
 800735c:	2a01      	cmp	r2, #1
 800735e:	d105      	bne.n	800736c <LmhpComplianceOnMcpsConfirm+0x20>
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 8007360:	7902      	ldrb	r2, [r0, #4]
 8007362:	2a00      	cmp	r2, #0
 8007364:	d002      	beq.n	800736c <LmhpComplianceOnMcpsConfirm+0x20>
        ComplianceTestState.DownLinkCounter++;
 8007366:	8a1a      	ldrh	r2, [r3, #16]
 8007368:	3201      	adds	r2, #1
 800736a:	821a      	strh	r2, [r3, #16]
}
 800736c:	4770      	bx	lr
 800736e:	46c0      	nop			; (mov r8, r8)
 8007370:	2000063c 	.word	0x2000063c

08007374 <LmhpComplianceOnMlmeConfirm>:
    if( ComplianceTestState.Initialized == false )
 8007374:	4b08      	ldr	r3, [pc, #32]	; (8007398 <LmhpComplianceOnMlmeConfirm+0x24>)
 8007376:	791a      	ldrb	r2, [r3, #4]
 8007378:	2a00      	cmp	r2, #0
 800737a:	d00b      	beq.n	8007394 <LmhpComplianceOnMlmeConfirm+0x20>
    if( ComplianceTestState.IsRunning == false )
 800737c:	795a      	ldrb	r2, [r3, #5]
 800737e:	2a00      	cmp	r2, #0
 8007380:	d008      	beq.n	8007394 <LmhpComplianceOnMlmeConfirm+0x20>
    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 8007382:	7802      	ldrb	r2, [r0, #0]
 8007384:	2a04      	cmp	r2, #4
 8007386:	d105      	bne.n	8007394 <LmhpComplianceOnMlmeConfirm+0x20>
 8007388:	7a01      	ldrb	r1, [r0, #8]
 800738a:	7a42      	ldrb	r2, [r0, #9]
        ComplianceTestState.LinkCheck = true;
 800738c:	2001      	movs	r0, #1
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 800738e:	74d9      	strb	r1, [r3, #19]
        ComplianceTestState.LinkCheck = true;
 8007390:	7498      	strb	r0, [r3, #18]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 8007392:	751a      	strb	r2, [r3, #20]
}
 8007394:	4770      	bx	lr
 8007396:	46c0      	nop			; (mov r8, r8)
 8007398:	2000063c 	.word	0x2000063c

0800739c <LmhpComplianceTxProcess.isra.0>:
static LmHandlerErrorStatus_t LmhpComplianceTxProcess( void )
 800739c:	b513      	push	{r0, r1, r4, lr}
    if( ComplianceTestState.Initialized == false )
 800739e:	4c1b      	ldr	r4, [pc, #108]	; (800740c <LmhpComplianceTxProcess.isra.0+0x70>)
 80073a0:	7923      	ldrb	r3, [r4, #4]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d023      	beq.n	80073ee <LmhpComplianceTxProcess.isra.0+0x52>
    if( ComplianceTestState.IsRunning == false )
 80073a6:	7963      	ldrb	r3, [r4, #5]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d020      	beq.n	80073ee <LmhpComplianceTxProcess.isra.0+0x52>
    if( ComplianceTestState.LinkCheck == true )
 80073ac:	7ca2      	ldrb	r2, [r4, #18]
        ComplianceTestState.DataBuffer[0] = 5;
 80073ae:	68e3      	ldr	r3, [r4, #12]
    if( ComplianceTestState.LinkCheck == true )
 80073b0:	2a00      	cmp	r2, #0
 80073b2:	d01d      	beq.n	80073f0 <LmhpComplianceTxProcess.isra.0+0x54>
        ComplianceTestState.LinkCheck = false;
 80073b4:	2200      	movs	r2, #0
 80073b6:	74a2      	strb	r2, [r4, #18]
        ComplianceTestState.DataBufferSize = 3;
 80073b8:	3203      	adds	r2, #3
 80073ba:	72a2      	strb	r2, [r4, #10]
        ComplianceTestState.DataBuffer[0] = 5;
 80073bc:	3202      	adds	r2, #2
 80073be:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 80073c0:	7ce2      	ldrb	r2, [r4, #19]
 80073c2:	705a      	strb	r2, [r3, #1]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 80073c4:	7d22      	ldrb	r2, [r4, #20]
 80073c6:	709a      	strb	r2, [r3, #2]
        ComplianceTestState.State = 1;
 80073c8:	2201      	movs	r2, #1
 80073ca:	71a2      	strb	r2, [r4, #6]
    LmHandlerAppData_t appData =
 80073cc:	4669      	mov	r1, sp
 80073ce:	22e0      	movs	r2, #224	; 0xe0
    TimerStart( &ComplianceTxNextPacketTimer );
 80073d0:	0020      	movs	r0, r4
    LmHandlerAppData_t appData =
 80073d2:	700a      	strb	r2, [r1, #0]
 80073d4:	7aa2      	ldrb	r2, [r4, #10]
    TimerStart( &ComplianceTxNextPacketTimer );
 80073d6:	3018      	adds	r0, #24
    LmHandlerAppData_t appData =
 80073d8:	704a      	strb	r2, [r1, #1]
 80073da:	9301      	str	r3, [sp, #4]
    TimerStart( &ComplianceTxNextPacketTimer );
 80073dc:	f006 fe46 	bl	800e06c <UTIL_TIMER_Start>
    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, NULL, true );
 80073e0:	4b0b      	ldr	r3, [pc, #44]	; (8007410 <LmhpComplianceTxProcess.isra.0+0x74>)
 80073e2:	79e1      	ldrb	r1, [r4, #7]
 80073e4:	2200      	movs	r2, #0
 80073e6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80073e8:	4668      	mov	r0, sp
 80073ea:	2301      	movs	r3, #1
 80073ec:	47a0      	blx	r4
}
 80073ee:	bd13      	pop	{r0, r1, r4, pc}
        switch( ComplianceTestState.State )
 80073f0:	79a2      	ldrb	r2, [r4, #6]
 80073f2:	2a01      	cmp	r2, #1
 80073f4:	d002      	beq.n	80073fc <LmhpComplianceTxProcess.isra.0+0x60>
 80073f6:	2a04      	cmp	r2, #4
 80073f8:	d1e8      	bne.n	80073cc <LmhpComplianceTxProcess.isra.0+0x30>
 80073fa:	e7e5      	b.n	80073c8 <LmhpComplianceTxProcess.isra.0+0x2c>
            ComplianceTestState.DataBufferSize = 2;
 80073fc:	2202      	movs	r2, #2
 80073fe:	72a2      	strb	r2, [r4, #10]
            ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 8007400:	8a22      	ldrh	r2, [r4, #16]
 8007402:	0a11      	lsrs	r1, r2, #8
 8007404:	7019      	strb	r1, [r3, #0]
            ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 8007406:	705a      	strb	r2, [r3, #1]
            break;
 8007408:	e7e0      	b.n	80073cc <LmhpComplianceTxProcess.isra.0+0x30>
 800740a:	46c0      	nop			; (mov r8, r8)
 800740c:	2000063c 	.word	0x2000063c
 8007410:	20000090 	.word	0x20000090

08007414 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void* context )
{
 8007414:	b510      	push	{r4, lr}
    LmhpComplianceTxProcess( );
 8007416:	f7ff ffc1 	bl	800739c <LmhpComplianceTxProcess.isra.0>
}
 800741a:	bd10      	pop	{r4, pc}

0800741c <LmhpComplianceOnMcpsIndication>:
{
 800741c:	b530      	push	{r4, r5, lr}
    if( ComplianceTestState.Initialized == false )
 800741e:	4c78      	ldr	r4, [pc, #480]	; (8007600 <LmhpComplianceOnMcpsIndication+0x1e4>)
{
 8007420:	0002      	movs	r2, r0
    if( ComplianceTestState.Initialized == false )
 8007422:	7923      	ldrb	r3, [r4, #4]
{
 8007424:	b08d      	sub	sp, #52	; 0x34
    if( ComplianceTestState.Initialized == false )
 8007426:	2b00      	cmp	r3, #0
 8007428:	d044      	beq.n	80074b4 <LmhpComplianceOnMcpsIndication+0x98>
    if( mcpsIndication->RxData == false )
 800742a:	7b43      	ldrb	r3, [r0, #13]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d041      	beq.n	80074b4 <LmhpComplianceOnMcpsIndication+0x98>
    if ((ComplianceTestState.IsRunning == true) &&
 8007430:	7965      	ldrb	r5, [r4, #5]
 8007432:	2d00      	cmp	r5, #0
 8007434:	d005      	beq.n	8007442 <LmhpComplianceOnMcpsIndication+0x26>
 8007436:	7b83      	ldrb	r3, [r0, #14]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d102      	bne.n	8007442 <LmhpComplianceOnMcpsIndication+0x26>
        ComplianceTestState.DownLinkCounter++;
 800743c:	8a23      	ldrh	r3, [r4, #16]
 800743e:	3301      	adds	r3, #1
 8007440:	8223      	strh	r3, [r4, #16]
    if( mcpsIndication->Port != COMPLIANCE_PORT )
 8007442:	78d0      	ldrb	r0, [r2, #3]
 8007444:	28e0      	cmp	r0, #224	; 0xe0
 8007446:	d135      	bne.n	80074b4 <LmhpComplianceOnMcpsIndication+0x98>
    if( ComplianceTestState.IsRunning == false )
 8007448:	2d00      	cmp	r5, #0
 800744a:	d135      	bne.n	80074b8 <LmhpComplianceOnMcpsIndication+0x9c>
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800744c:	7b11      	ldrb	r1, [r2, #12]
 800744e:	2904      	cmp	r1, #4
 8007450:	d130      	bne.n	80074b4 <LmhpComplianceOnMcpsIndication+0x98>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8007452:	6893      	ldr	r3, [r2, #8]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 8007454:	781a      	ldrb	r2, [r3, #0]
 8007456:	2a01      	cmp	r2, #1
 8007458:	d12c      	bne.n	80074b4 <LmhpComplianceOnMcpsIndication+0x98>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800745a:	785a      	ldrb	r2, [r3, #1]
 800745c:	2a01      	cmp	r2, #1
 800745e:	d129      	bne.n	80074b4 <LmhpComplianceOnMcpsIndication+0x98>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 8007460:	789a      	ldrb	r2, [r3, #2]
 8007462:	2a01      	cmp	r2, #1
 8007464:	d126      	bne.n	80074b4 <LmhpComplianceOnMcpsIndication+0x98>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 8007466:	78db      	ldrb	r3, [r3, #3]
 8007468:	2b01      	cmp	r3, #1
 800746a:	d123      	bne.n	80074b4 <LmhpComplianceOnMcpsIndication+0x98>
            ComplianceTestState.DataBufferSize = 2;
 800746c:	3201      	adds	r2, #1
 800746e:	72a2      	strb	r2, [r4, #10]
            mibReq.Type = MIB_ADR;
 8007470:	466a      	mov	r2, sp
            ComplianceTestState.State = 1;
 8007472:	80e3      	strh	r3, [r4, #6]
            mibReq.Param.AdrEnable = true;
 8007474:	7413      	strb	r3, [r2, #16]
            ComplianceTestState.Port = 224;
 8007476:	7220      	strb	r0, [r4, #8]
            mibReq.Type = MIB_ADR;
 8007478:	7311      	strb	r1, [r2, #12]
            ComplianceTestState.DownLinkCounter = 0;
 800747a:	6125      	str	r5, [r4, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800747c:	a803      	add	r0, sp, #12
            ComplianceTestState.IsRunning = true;
 800747e:	7163      	strb	r3, [r4, #5]
            ComplianceTestState.NbGateways = 0;
 8007480:	7525      	strb	r5, [r4, #20]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8007482:	f002 f957 	bl	8009734 <LoRaMacMibSetRequestConfirm>
            LoRaMacTestSetDutyCycleOn( false );
 8007486:	0028      	movs	r0, r5
 8007488:	f002 fe40 	bl	800a10c <LoRaMacTestSetDutyCycleOn>
            if( LmhpComplianceParams->StopPeripherals != NULL )
 800748c:	6823      	ldr	r3, [r4, #0]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d000      	beq.n	8007496 <LmhpComplianceOnMcpsIndication+0x7a>
                LmhpComplianceParams->StopPeripherals( );
 8007494:	4798      	blx	r3
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 8007496:	2200      	movs	r2, #0
 8007498:	2101      	movs	r1, #1
 800749a:	3418      	adds	r4, #24
 800749c:	4b59      	ldr	r3, [pc, #356]	; (8007604 <LmhpComplianceOnMcpsIndication+0x1e8>)
 800749e:	9200      	str	r2, [sp, #0]
 80074a0:	4249      	negs	r1, r1
 80074a2:	0020      	movs	r0, r4
 80074a4:	f006 fd2e 	bl	800df04 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 80074a8:	4957      	ldr	r1, [pc, #348]	; (8007608 <LmhpComplianceOnMcpsIndication+0x1ec>)
 80074aa:	0020      	movs	r0, r4
 80074ac:	f006 fe20 	bl	800e0f0 <UTIL_TIMER_SetPeriod>
            LmhpComplianceTxProcess( );
 80074b0:	f7ff ff74 	bl	800739c <LmhpComplianceTxProcess.isra.0>
}
 80074b4:	b00d      	add	sp, #52	; 0x34
 80074b6:	bd30      	pop	{r4, r5, pc}
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 80074b8:	6893      	ldr	r3, [r2, #8]
 80074ba:	7818      	ldrb	r0, [r3, #0]
 80074bc:	71a0      	strb	r0, [r4, #6]
        switch( ComplianceTestState.State )
 80074be:	280a      	cmp	r0, #10
 80074c0:	d8f8      	bhi.n	80074b4 <LmhpComplianceOnMcpsIndication+0x98>
 80074c2:	f7f8 fe33 	bl	800012c <__gnu_thumb1_case_uqi>
 80074c6:	2006      	.short	0x2006
 80074c8:	3e292723 	.word	0x3e292723
 80074cc:	8d8a6244 	.word	0x8d8a6244
 80074d0:	96          	.byte	0x96
 80074d1:	00          	.byte	0x00
                TimerStop( &ComplianceTxNextPacketTimer );
 80074d2:	0020      	movs	r0, r4
 80074d4:	3018      	adds	r0, #24
 80074d6:	f006 fd75 	bl	800dfc4 <UTIL_TIMER_Stop>
                ComplianceTestState.DownLinkCounter = 0;
 80074da:	2300      	movs	r3, #0
                mibReq.Type = MIB_ADR;
 80074dc:	466a      	mov	r2, sp
                ComplianceTestState.DownLinkCounter = 0;
 80074de:	8223      	strh	r3, [r4, #16]
                ComplianceTestState.IsRunning = false;
 80074e0:	7163      	strb	r3, [r4, #5]
                mibReq.Type = MIB_ADR;
 80074e2:	3304      	adds	r3, #4
 80074e4:	7313      	strb	r3, [r2, #12]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 80074e6:	6823      	ldr	r3, [r4, #0]
                LoRaMacMibSetRequestConfirm( &mibReq );
 80074e8:	a803      	add	r0, sp, #12
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	7413      	strb	r3, [r2, #16]
                LoRaMacMibSetRequestConfirm( &mibReq );
 80074ee:	f002 f921 	bl	8009734 <LoRaMacMibSetRequestConfirm>
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 80074f2:	6823      	ldr	r3, [r4, #0]
 80074f4:	7858      	ldrb	r0, [r3, #1]
 80074f6:	f002 fe09 	bl	800a10c <LoRaMacTestSetDutyCycleOn>
                if( LmhpComplianceParams->StartPeripherals != NULL )
 80074fa:	6823      	ldr	r3, [r4, #0]
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d0d8      	beq.n	80074b4 <LmhpComplianceOnMcpsIndication+0x98>
                    LmhpComplianceParams->StartPeripherals( );
 8007502:	4798      	blx	r3
            break;
 8007504:	e7d6      	b.n	80074b4 <LmhpComplianceOnMcpsIndication+0x98>
            ComplianceTestState.DataBufferSize = 2;
 8007506:	2302      	movs	r3, #2
 8007508:	72a3      	strb	r3, [r4, #10]
            break;
 800750a:	e7d3      	b.n	80074b4 <LmhpComplianceOnMcpsIndication+0x98>
            ComplianceTestState.State = 1;
 800750c:	2302      	movs	r3, #2
 800750e:	33ff      	adds	r3, #255	; 0xff
            ComplianceTestState.State = 1;
 8007510:	80e3      	strh	r3, [r4, #6]
            break;
 8007512:	e7cf      	b.n	80074b4 <LmhpComplianceOnMcpsIndication+0x98>
            ComplianceTestState.State = 1;
 8007514:	2301      	movs	r3, #1
 8007516:	e7fb      	b.n	8007510 <LmhpComplianceOnMcpsIndication+0xf4>
            ComplianceTestState.DataBuffer[0] = 4;
 8007518:	2304      	movs	r3, #4
 800751a:	68e5      	ldr	r5, [r4, #12]
            ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 800751c:	7b11      	ldrb	r1, [r2, #12]
            ComplianceTestState.DataBuffer[0] = 4;
 800751e:	702b      	strb	r3, [r5, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 8007520:	7a60      	ldrb	r0, [r4, #9]
            ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 8007522:	72a1      	strb	r1, [r4, #10]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 8007524:	1c03      	adds	r3, r0, #0
 8007526:	4288      	cmp	r0, r1
 8007528:	d900      	bls.n	800752c <LmhpComplianceOnMcpsIndication+0x110>
 800752a:	1c0b      	adds	r3, r1, #0
 800752c:	b2d9      	uxtb	r1, r3
 800752e:	2300      	movs	r3, #0
 8007530:	3301      	adds	r3, #1
 8007532:	b2d8      	uxtb	r0, r3
 8007534:	4281      	cmp	r1, r0
 8007536:	d9bd      	bls.n	80074b4 <LmhpComplianceOnMcpsIndication+0x98>
                ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 8007538:	6890      	ldr	r0, [r2, #8]
 800753a:	5cc0      	ldrb	r0, [r0, r3]
 800753c:	3001      	adds	r0, #1
 800753e:	54e8      	strb	r0, [r5, r3]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 8007540:	e7f6      	b.n	8007530 <LmhpComplianceOnMcpsIndication+0x114>
                mlmeReq.Type = MLME_LINK_CHECK;
 8007542:	2304      	movs	r3, #4
 8007544:	a803      	add	r0, sp, #12
                mlmeReq.Type = MLME_DEVICE_TIME;
 8007546:	7003      	strb	r3, [r0, #0]
                LoRaMacMlmeRequest( &mlmeReq );
 8007548:	f002 fb2a 	bl	8009ba0 <LoRaMacMlmeRequest>
            break;
 800754c:	e7b2      	b.n	80074b4 <LmhpComplianceOnMcpsIndication+0x98>
                TimerStop(&ComplianceTxNextPacketTimer);
 800754e:	0020      	movs	r0, r4
 8007550:	3018      	adds	r0, #24
 8007552:	f006 fd37 	bl	800dfc4 <UTIL_TIMER_Stop>
                ComplianceTestState.DownLinkCounter = 0;
 8007556:	2300      	movs	r3, #0
                mibReq.Type = MIB_ADR;
 8007558:	466a      	mov	r2, sp
                ComplianceTestState.DownLinkCounter = 0;
 800755a:	8223      	strh	r3, [r4, #16]
                ComplianceTestState.IsRunning = false;
 800755c:	7163      	strb	r3, [r4, #5]
                mibReq.Type = MIB_ADR;
 800755e:	3304      	adds	r3, #4
 8007560:	7313      	strb	r3, [r2, #12]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8007562:	6823      	ldr	r3, [r4, #0]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8007564:	a803      	add	r0, sp, #12
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	7413      	strb	r3, [r2, #16]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800756a:	f002 f8e3 	bl	8009734 <LoRaMacMibSetRequestConfirm>
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800756e:	6823      	ldr	r3, [r4, #0]
 8007570:	7858      	ldrb	r0, [r3, #1]
 8007572:	f002 fdcb 	bl	800a10c <LoRaMacTestSetDutyCycleOn>
                if( LmhpComplianceParams->StartPeripherals != NULL )
 8007576:	6823      	ldr	r3, [r4, #0]
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d000      	beq.n	8007580 <LmhpComplianceOnMcpsIndication+0x164>
                    LmhpComplianceParams->StartPeripherals( );
 800757e:	4798      	blx	r3
                LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA );
 8007580:	4b22      	ldr	r3, [pc, #136]	; (800760c <LmhpComplianceOnMcpsIndication+0x1f0>)
 8007582:	2002      	movs	r0, #2
 8007584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007586:	4798      	blx	r3
            break;
 8007588:	e794      	b.n	80074b4 <LmhpComplianceOnMcpsIndication+0x98>
                if( mcpsIndication->BufferSize == 3 )
 800758a:	7b12      	ldrb	r2, [r2, #12]
 800758c:	a803      	add	r0, sp, #12
 800758e:	2a03      	cmp	r2, #3
 8007590:	d10c      	bne.n	80075ac <LmhpComplianceOnMcpsIndication+0x190>
                    mlmeReq.Type = MLME_TXCW;
 8007592:	3202      	adds	r2, #2
 8007594:	7002      	strb	r2, [r0, #0]
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8007596:	7859      	ldrb	r1, [r3, #1]
 8007598:	789b      	ldrb	r3, [r3, #2]
 800759a:	021b      	lsls	r3, r3, #8
 800759c:	430b      	orrs	r3, r1
 800759e:	ba5b      	rev16	r3, r3
 80075a0:	8083      	strh	r3, [r0, #4]
                LoRaMacMlmeRequest( &mlmeReq );
 80075a2:	f002 fafd 	bl	8009ba0 <LoRaMacMlmeRequest>
                ComplianceTestState.State = 1;
 80075a6:	2301      	movs	r3, #1
 80075a8:	71a3      	strb	r3, [r4, #6]
            break;
 80075aa:	e783      	b.n	80074b4 <LmhpComplianceOnMcpsIndication+0x98>
                else if( mcpsIndication->BufferSize == 7 )
 80075ac:	2a07      	cmp	r2, #7
 80075ae:	d1f8      	bne.n	80075a2 <LmhpComplianceOnMcpsIndication+0x186>
                    mlmeReq.Type = MLME_TXCW_1;
 80075b0:	3a01      	subs	r2, #1
 80075b2:	7002      	strb	r2, [r0, #0]
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 80075b4:	789a      	ldrb	r2, [r3, #2]
 80075b6:	785d      	ldrb	r5, [r3, #1]
 80075b8:	0212      	lsls	r2, r2, #8
 80075ba:	432a      	orrs	r2, r5
 80075bc:	ba52      	rev16	r2, r2
 80075be:	8082      	strh	r2, [r0, #4]
                    mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 80075c0:	78da      	ldrb	r2, [r3, #3]
 80075c2:	7919      	ldrb	r1, [r3, #4]
 80075c4:	0412      	lsls	r2, r2, #16
 80075c6:	0209      	lsls	r1, r1, #8
 80075c8:	430a      	orrs	r2, r1
 80075ca:	7959      	ldrb	r1, [r3, #5]
 80075cc:	430a      	orrs	r2, r1
 80075ce:	2164      	movs	r1, #100	; 0x64
 80075d0:	434a      	muls	r2, r1
 80075d2:	6082      	str	r2, [r0, #8]
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 80075d4:	799b      	ldrb	r3, [r3, #6]
 80075d6:	7303      	strb	r3, [r0, #12]
 80075d8:	e7e3      	b.n	80075a2 <LmhpComplianceOnMcpsIndication+0x186>
                mlmeReq.Type = MLME_DEVICE_TIME;
 80075da:	230a      	movs	r3, #10
 80075dc:	a803      	add	r0, sp, #12
 80075de:	e7b2      	b.n	8007546 <LmhpComplianceOnMcpsIndication+0x12a>
                mibReq.Type = MIB_DEVICE_CLASS;
 80075e0:	4669      	mov	r1, sp
 80075e2:	2200      	movs	r2, #0
 80075e4:	730a      	strb	r2, [r1, #12]
                mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 80075e6:	785b      	ldrb	r3, [r3, #1]
                LoRaMacMibSetRequestConfirm( &mibReq );
 80075e8:	a803      	add	r0, sp, #12
                mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 80075ea:	740b      	strb	r3, [r1, #16]
                LoRaMacMibSetRequestConfirm( &mibReq );
 80075ec:	f002 f8a2 	bl	8009734 <LoRaMacMibSetRequestConfirm>
            break;
 80075f0:	e760      	b.n	80074b4 <LmhpComplianceOnMcpsIndication+0x98>
                mlmeReq.Type = MLME_PING_SLOT_INFO;
 80075f2:	4669      	mov	r1, sp
 80075f4:	220d      	movs	r2, #13
 80075f6:	730a      	strb	r2, [r1, #12]
                mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 80075f8:	785b      	ldrb	r3, [r3, #1]
                LoRaMacMlmeRequest( &mlmeReq );
 80075fa:	a803      	add	r0, sp, #12
                mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 80075fc:	740b      	strb	r3, [r1, #16]
                LoRaMacMlmeRequest( &mlmeReq );
 80075fe:	e7a3      	b.n	8007548 <LmhpComplianceOnMcpsIndication+0x12c>
 8007600:	2000063c 	.word	0x2000063c
 8007604:	08007415 	.word	0x08007415
 8007608:	00001388 	.word	0x00001388
 800760c:	20000090 	.word	0x20000090

08007610 <LmhpCompliancePackageFactory>:
}
 8007610:	4800      	ldr	r0, [pc, #0]	; (8007614 <LmhpCompliancePackageFactory+0x4>)
 8007612:	4770      	bx	lr
 8007614:	20000090 	.word	0x20000090

08007618 <NvmDataMgmtEvent>:
void NvmDataMgmtEvent( uint16_t notifyFlags )
{
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags = notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 8007618:	4770      	bx	lr

0800761a <NvmDataMgmtStore>:
    LoRaMacStart( );
    return dataSize;
#else
    return 0;
#endif
}
 800761a:	2000      	movs	r0, #0
 800761c:	4770      	bx	lr

0800761e <NvmDataMgmtRestore>:
 800761e:	2000      	movs	r0, #0
 8007620:	4770      	bx	lr
	...

08007624 <OnRadioRxError>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
}

static void OnRadioRxError( void )
{
    LoRaMacRadioEvents.Events.RxError = 1;
 8007624:	2302      	movs	r3, #2
 8007626:	4a08      	ldr	r2, [pc, #32]	; (8007648 <OnRadioRxError+0x24>)
{
 8007628:	b510      	push	{r4, lr}
    LoRaMacRadioEvents.Events.RxError = 1;
 800762a:	7811      	ldrb	r1, [r2, #0]
 800762c:	430b      	orrs	r3, r1
 800762e:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8007630:	23d2      	movs	r3, #210	; 0xd2
 8007632:	4a06      	ldr	r2, [pc, #24]	; (800764c <OnRadioRxError+0x28>)
 8007634:	009b      	lsls	r3, r3, #2
 8007636:	58d3      	ldr	r3, [r2, r3]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d003      	beq.n	8007644 <OnRadioRxError+0x20>
 800763c:	691b      	ldr	r3, [r3, #16]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d000      	beq.n	8007644 <OnRadioRxError+0x20>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8007642:	4798      	blx	r3
    }
}
 8007644:	bd10      	pop	{r4, pc}
 8007646:	46c0      	nop			; (mov r8, r8)
 8007648:	2000066c 	.word	0x2000066c
 800764c:	200009d0 	.word	0x200009d0

08007650 <UpdateRxSlotIdleState>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}

static void UpdateRxSlotIdleState( void )
{
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8007650:	4b05      	ldr	r3, [pc, #20]	; (8007668 <UpdateRxSlotIdleState+0x18>)
 8007652:	33fc      	adds	r3, #252	; 0xfc
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	2b02      	cmp	r3, #2
 8007658:	d000      	beq.n	800765c <UpdateRxSlotIdleState+0xc>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800765a:	2306      	movs	r3, #6
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800765c:	2290      	movs	r2, #144	; 0x90
 800765e:	4903      	ldr	r1, [pc, #12]	; (800766c <UpdateRxSlotIdleState+0x1c>)
 8007660:	00d2      	lsls	r2, r2, #3
 8007662:	548b      	strb	r3, [r1, r2]
 8007664:	4770      	bx	lr
 8007666:	46c0      	nop			; (mov r8, r8)
 8007668:	20000684 	.word	0x20000684
 800766c:	200009d0 	.word	0x200009d0

08007670 <GetMaxAppPayloadWithoutFOptsLength>:

    return status;
}

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 8007670:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8007672:	4b0b      	ldr	r3, [pc, #44]	; (80076a0 <GetMaxAppPayloadWithoutFOptsLength+0x30>)
 8007674:	a902      	add	r1, sp, #8
 8007676:	001a      	movs	r2, r3
 8007678:	3274      	adds	r2, #116	; 0x74
 800767a:	7812      	ldrb	r2, [r2, #0]
    getPhy.Datarate = datarate;
 800767c:	7048      	strb	r0, [r1, #1]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800767e:	708a      	strb	r2, [r1, #2]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8007680:	220d      	movs	r2, #13
 8007682:	700a      	strb	r2, [r1, #0]
    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8007684:	001a      	movs	r2, r3
 8007686:	3280      	adds	r2, #128	; 0x80
 8007688:	7812      	ldrb	r2, [r2, #0]
 800768a:	2a00      	cmp	r2, #0
 800768c:	d001      	beq.n	8007692 <GetMaxAppPayloadWithoutFOptsLength+0x22>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800768e:	220e      	movs	r2, #14
 8007690:	700a      	strb	r2, [r1, #0]
    }
    /* ST_WORKAROUND_END */
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007692:	3340      	adds	r3, #64	; 0x40
 8007694:	7818      	ldrb	r0, [r3, #0]
 8007696:	f003 fc37 	bl	800af08 <RegionGetPhyParam>

    return phyParam.Value;
 800769a:	b2c0      	uxtb	r0, r0
}
 800769c:	b005      	add	sp, #20
 800769e:	bd00      	pop	{pc}
 80076a0:	20000684 	.word	0x20000684

080076a4 <OnAckTimeoutTimerEvent>:
{
 80076a4:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.AckTimeoutTimer );
 80076a6:	480f      	ldr	r0, [pc, #60]	; (80076e4 <OnAckTimeoutTimerEvent+0x40>)
 80076a8:	f006 fc8c 	bl	800dfc4 <UTIL_TIMER_Stop>
    if( MacCtx.NodeAckRequested == true )
 80076ac:	4b0e      	ldr	r3, [pc, #56]	; (80076e8 <OnAckTimeoutTimerEvent+0x44>)
 80076ae:	4a0f      	ldr	r2, [pc, #60]	; (80076ec <OnAckTimeoutTimerEvent+0x48>)
 80076b0:	5c9a      	ldrb	r2, [r3, r2]
 80076b2:	2a00      	cmp	r2, #0
 80076b4:	d002      	beq.n	80076bc <OnAckTimeoutTimerEvent+0x18>
        MacCtx.AckTimeoutRetry = true;
 80076b6:	2101      	movs	r1, #1
 80076b8:	4a0d      	ldr	r2, [pc, #52]	; (80076f0 <OnAckTimeoutTimerEvent+0x4c>)
 80076ba:	5499      	strb	r1, [r3, r2]
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 80076bc:	4a0d      	ldr	r2, [pc, #52]	; (80076f4 <OnAckTimeoutTimerEvent+0x50>)
 80076be:	32fc      	adds	r2, #252	; 0xfc
 80076c0:	7812      	ldrb	r2, [r2, #0]
 80076c2:	2a02      	cmp	r2, #2
 80076c4:	d104      	bne.n	80076d0 <OnAckTimeoutTimerEvent+0x2c>
        MacCtx.MacFlags.Bits.MacDone = 1;
 80076c6:	490c      	ldr	r1, [pc, #48]	; (80076f8 <OnAckTimeoutTimerEvent+0x54>)
 80076c8:	321e      	adds	r2, #30
 80076ca:	5c58      	ldrb	r0, [r3, r1]
 80076cc:	4302      	orrs	r2, r0
 80076ce:	545a      	strb	r2, [r3, r1]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80076d0:	22d2      	movs	r2, #210	; 0xd2
 80076d2:	0092      	lsls	r2, r2, #2
 80076d4:	589b      	ldr	r3, [r3, r2]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d003      	beq.n	80076e2 <OnAckTimeoutTimerEvent+0x3e>
 80076da:	691b      	ldr	r3, [r3, #16]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d000      	beq.n	80076e2 <OnAckTimeoutTimerEvent+0x3e>
        MacCtx.MacCallbacks->MacProcessNotify( );
 80076e0:	4798      	blx	r3
}
 80076e2:	bd10      	pop	{r4, pc}
 80076e4:	20000dc8 	.word	0x20000dc8
 80076e8:	200009d0 	.word	0x200009d0
 80076ec:	00000414 	.word	0x00000414
 80076f0:	00000413 	.word	0x00000413
 80076f4:	20000684 	.word	0x20000684
 80076f8:	00000481 	.word	0x00000481

080076fc <PrepareRxDoneAbort>:
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 80076fc:	22d0      	movs	r2, #208	; 0xd0
 80076fe:	2380      	movs	r3, #128	; 0x80
{
 8007700:	b510      	push	{r4, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 8007702:	4c0a      	ldr	r4, [pc, #40]	; (800772c <PrepareRxDoneAbort+0x30>)
 8007704:	0092      	lsls	r2, r2, #2
 8007706:	58a1      	ldr	r1, [r4, r2]
 8007708:	430b      	orrs	r3, r1
 800770a:	50a3      	str	r3, [r4, r2]
    if( MacCtx.NodeAckRequested == true )
 800770c:	4b08      	ldr	r3, [pc, #32]	; (8007730 <PrepareRxDoneAbort+0x34>)
 800770e:	5ce3      	ldrb	r3, [r4, r3]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d002      	beq.n	800771a <PrepareRxDoneAbort+0x1e>
        OnAckTimeoutTimerEvent( NULL );
 8007714:	2000      	movs	r0, #0
 8007716:	f7ff ffc5 	bl	80076a4 <OnAckTimeoutTimerEvent>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 800771a:	2322      	movs	r3, #34	; 0x22
 800771c:	4905      	ldr	r1, [pc, #20]	; (8007734 <PrepareRxDoneAbort+0x38>)
 800771e:	5c62      	ldrb	r2, [r4, r1]
 8007720:	439a      	bics	r2, r3
 8007722:	4313      	orrs	r3, r2
 8007724:	5463      	strb	r3, [r4, r1]
    UpdateRxSlotIdleState( );
 8007726:	f7ff ff93 	bl	8007650 <UpdateRxSlotIdleState>
}
 800772a:	bd10      	pop	{r4, pc}
 800772c:	200009d0 	.word	0x200009d0
 8007730:	00000414 	.word	0x00000414
 8007734:	00000481 	.word	0x00000481

08007738 <HandleRadioRxErrorTimeout>:
{
 8007738:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800773a:	4c31      	ldr	r4, [pc, #196]	; (8007800 <HandleRadioRxErrorTimeout+0xc8>)
{
 800773c:	0006      	movs	r6, r0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800773e:	0023      	movs	r3, r4
 8007740:	33fc      	adds	r3, #252	; 0xfc
 8007742:	781b      	ldrb	r3, [r3, #0]
{
 8007744:	000d      	movs	r5, r1
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8007746:	2b02      	cmp	r3, #2
 8007748:	d003      	beq.n	8007752 <HandleRadioRxErrorTimeout+0x1a>
        Radio.Sleep( );
 800774a:	4b2e      	ldr	r3, [pc, #184]	; (8007804 <HandleRadioRxErrorTimeout+0xcc>)
 800774c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800774e:	9301      	str	r3, [sp, #4]
 8007750:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8007752:	f002 fd61 	bl	800a218 <LoRaMacClassBIsBeaconExpected>
 8007756:	1e07      	subs	r7, r0, #0
 8007758:	d005      	beq.n	8007766 <HandleRadioRxErrorTimeout+0x2e>
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800775a:	2002      	movs	r0, #2
 800775c:	f002 fd52 	bl	800a204 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 8007760:	2000      	movs	r0, #0
 8007762:	f002 fd54 	bl	800a20e <LoRaMacClassBBeaconTimerEvent>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8007766:	0023      	movs	r3, r4
 8007768:	33fc      	adds	r3, #252	; 0xfc
 800776a:	781b      	ldrb	r3, [r3, #0]
 800776c:	2b01      	cmp	r3, #1
 800776e:	d118      	bne.n	80077a2 <HandleRadioRxErrorTimeout+0x6a>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8007770:	f002 fd54 	bl	800a21c <LoRaMacClassBIsPingExpected>
 8007774:	9001      	str	r0, [sp, #4]
 8007776:	2800      	cmp	r0, #0
 8007778:	d006      	beq.n	8007788 <HandleRadioRxErrorTimeout+0x50>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800777a:	2000      	movs	r0, #0
 800777c:	f002 fd43 	bl	800a206 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8007780:	2000      	movs	r0, #0
 8007782:	f002 fd45 	bl	800a210 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 8007786:	9f01      	ldr	r7, [sp, #4]
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 8007788:	f002 fd4a 	bl	800a220 <LoRaMacClassBIsMulticastExpected>
 800778c:	2800      	cmp	r0, #0
 800778e:	d008      	beq.n	80077a2 <HandleRadioRxErrorTimeout+0x6a>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8007790:	2000      	movs	r0, #0
 8007792:	f002 fd39 	bl	800a208 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8007796:	2000      	movs	r0, #0
 8007798:	f002 fd3b 	bl	800a212 <LoRaMacClassBMulticastSlotTimerEvent>
    UpdateRxSlotIdleState( );
 800779c:	f7ff ff58 	bl	8007650 <UpdateRxSlotIdleState>
}
 80077a0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    if( classBRx == false )
 80077a2:	2f00      	cmp	r7, #0
 80077a4:	d1fa      	bne.n	800779c <HandleRadioRxErrorTimeout+0x64>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 80077a6:	2290      	movs	r2, #144	; 0x90
            if( MacCtx.NodeAckRequested == true )
 80077a8:	4f17      	ldr	r7, [pc, #92]	; (8007808 <HandleRadioRxErrorTimeout+0xd0>)
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 80077aa:	00d2      	lsls	r2, r2, #3
            if( MacCtx.NodeAckRequested == true )
 80077ac:	4b17      	ldr	r3, [pc, #92]	; (800780c <HandleRadioRxErrorTimeout+0xd4>)
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 80077ae:	5cba      	ldrb	r2, [r7, r2]
            if( MacCtx.NodeAckRequested == true )
 80077b0:	5cfb      	ldrb	r3, [r7, r3]
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 80077b2:	2a00      	cmp	r2, #0
 80077b4:	d117      	bne.n	80077e6 <HandleRadioRxErrorTimeout+0xae>
            if( MacCtx.NodeAckRequested == true )
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d001      	beq.n	80077be <HandleRadioRxErrorTimeout+0x86>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 80077ba:	4b15      	ldr	r3, [pc, #84]	; (8007810 <HandleRadioRxErrorTimeout+0xd8>)
 80077bc:	54fe      	strb	r6, [r7, r3]
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 80077be:	0030      	movs	r0, r6
 80077c0:	f002 fed8 	bl	800a574 <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 80077c4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80077c6:	f006 fbc3 	bl	800df50 <UTIL_TIMER_GetElapsedTime>
 80077ca:	23ed      	movs	r3, #237	; 0xed
 80077cc:	009b      	lsls	r3, r3, #2
 80077ce:	58fb      	ldr	r3, [r7, r3]
 80077d0:	4298      	cmp	r0, r3
 80077d2:	d3e3      	bcc.n	800779c <HandleRadioRxErrorTimeout+0x64>
                TimerStop( &MacCtx.RxWindowTimer2 );
 80077d4:	480f      	ldr	r0, [pc, #60]	; (8007814 <HandleRadioRxErrorTimeout+0xdc>)
 80077d6:	f006 fbf5 	bl	800dfc4 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 80077da:	2320      	movs	r3, #32
 80077dc:	4a0e      	ldr	r2, [pc, #56]	; (8007818 <HandleRadioRxErrorTimeout+0xe0>)
 80077de:	5cb9      	ldrb	r1, [r7, r2]
 80077e0:	430b      	orrs	r3, r1
 80077e2:	54bb      	strb	r3, [r7, r2]
 80077e4:	e7da      	b.n	800779c <HandleRadioRxErrorTimeout+0x64>
            if( MacCtx.NodeAckRequested == true )
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d001      	beq.n	80077ee <HandleRadioRxErrorTimeout+0xb6>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 80077ea:	4b09      	ldr	r3, [pc, #36]	; (8007810 <HandleRadioRxErrorTimeout+0xd8>)
 80077ec:	54fd      	strb	r5, [r7, r3]
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 80077ee:	0028      	movs	r0, r5
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80077f0:	34fc      	adds	r4, #252	; 0xfc
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 80077f2:	f002 febf 	bl	800a574 <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80077f6:	7823      	ldrb	r3, [r4, #0]
 80077f8:	2b02      	cmp	r3, #2
 80077fa:	d1ee      	bne.n	80077da <HandleRadioRxErrorTimeout+0xa2>
 80077fc:	e7ce      	b.n	800779c <HandleRadioRxErrorTimeout+0x64>
 80077fe:	46c0      	nop			; (mov r8, r8)
 8007800:	20000684 	.word	0x20000684
 8007804:	0800eb54 	.word	0x0800eb54
 8007808:	200009d0 	.word	0x200009d0
 800780c:	00000414 	.word	0x00000414
 8007810:	00000439 	.word	0x00000439
 8007814:	20000d68 	.word	0x20000d68
 8007818:	00000481 	.word	0x00000481

0800781c <OnRadioRxTimeout>:
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800781c:	2301      	movs	r3, #1
 800781e:	4a0b      	ldr	r2, [pc, #44]	; (800784c <OnRadioRxTimeout+0x30>)
{
 8007820:	b510      	push	{r4, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 8007822:	7811      	ldrb	r1, [r2, #0]
 8007824:	430b      	orrs	r3, r1
 8007826:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8007828:	23d2      	movs	r3, #210	; 0xd2
 800782a:	4a09      	ldr	r2, [pc, #36]	; (8007850 <OnRadioRxTimeout+0x34>)
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	58d3      	ldr	r3, [r2, r3]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d003      	beq.n	800783c <OnRadioRxTimeout+0x20>
 8007834:	691b      	ldr	r3, [r3, #16]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d000      	beq.n	800783c <OnRadioRxTimeout+0x20>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800783a:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800783c:	2201      	movs	r2, #1
 800783e:	2100      	movs	r1, #0
 8007840:	2002      	movs	r0, #2
 8007842:	4b04      	ldr	r3, [pc, #16]	; (8007854 <OnRadioRxTimeout+0x38>)
 8007844:	f006 f89e 	bl	800d984 <UTIL_ADV_TRACE_COND_FSend>
}
 8007848:	bd10      	pop	{r4, pc}
 800784a:	46c0      	nop			; (mov r8, r8)
 800784c:	2000066c 	.word	0x2000066c
 8007850:	200009d0 	.word	0x200009d0
 8007854:	0800f0db 	.word	0x0800f0db

08007858 <OnRadioTxTimeout>:
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8007858:	2304      	movs	r3, #4
 800785a:	4a0b      	ldr	r2, [pc, #44]	; (8007888 <OnRadioTxTimeout+0x30>)
{
 800785c:	b510      	push	{r4, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800785e:	7811      	ldrb	r1, [r2, #0]
 8007860:	430b      	orrs	r3, r1
 8007862:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8007864:	23d2      	movs	r3, #210	; 0xd2
 8007866:	4a09      	ldr	r2, [pc, #36]	; (800788c <OnRadioTxTimeout+0x34>)
 8007868:	009b      	lsls	r3, r3, #2
 800786a:	58d3      	ldr	r3, [r2, r3]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d003      	beq.n	8007878 <OnRadioTxTimeout+0x20>
 8007870:	691b      	ldr	r3, [r3, #16]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d000      	beq.n	8007878 <OnRadioTxTimeout+0x20>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8007876:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 8007878:	2201      	movs	r2, #1
 800787a:	2100      	movs	r1, #0
 800787c:	2002      	movs	r0, #2
 800787e:	4b04      	ldr	r3, [pc, #16]	; (8007890 <OnRadioTxTimeout+0x38>)
 8007880:	f006 f880 	bl	800d984 <UTIL_ADV_TRACE_COND_FSend>
}
 8007884:	bd10      	pop	{r4, pc}
 8007886:	46c0      	nop			; (mov r8, r8)
 8007888:	2000066c 	.word	0x2000066c
 800788c:	200009d0 	.word	0x200009d0
 8007890:	0800f0eb 	.word	0x0800f0eb

08007894 <OnRadioRxDone>:
{
 8007894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007896:	000e      	movs	r6, r1
 8007898:	0015      	movs	r5, r2
 800789a:	001c      	movs	r4, r3
 800789c:	0007      	movs	r7, r0
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800789e:	f006 fb4d 	bl	800df3c <UTIL_TIMER_GetCurrentTime>
    LoRaMacRadioEvents.Events.RxDone = 1;
 80078a2:	2208      	movs	r2, #8
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 80078a4:	4b0c      	ldr	r3, [pc, #48]	; (80078d8 <OnRadioRxDone+0x44>)
    LoRaMacRadioEvents.Events.RxDone = 1;
 80078a6:	7819      	ldrb	r1, [r3, #0]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 80078a8:	6058      	str	r0, [r3, #4]
    LoRaMacRadioEvents.Events.RxDone = 1;
 80078aa:	430a      	orrs	r2, r1
 80078ac:	701a      	strb	r2, [r3, #0]
    RxDoneParams.Payload = payload;
 80078ae:	609f      	str	r7, [r3, #8]
    RxDoneParams.Size = size;
 80078b0:	819e      	strh	r6, [r3, #12]
    RxDoneParams.Rssi = rssi;
 80078b2:	81dd      	strh	r5, [r3, #14]
    RxDoneParams.Snr = snr;
 80078b4:	741c      	strb	r4, [r3, #16]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80078b6:	23d2      	movs	r3, #210	; 0xd2
 80078b8:	4a08      	ldr	r2, [pc, #32]	; (80078dc <OnRadioRxDone+0x48>)
 80078ba:	009b      	lsls	r3, r3, #2
 80078bc:	58d3      	ldr	r3, [r2, r3]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d003      	beq.n	80078ca <OnRadioRxDone+0x36>
 80078c2:	691b      	ldr	r3, [r3, #16]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d000      	beq.n	80078ca <OnRadioRxDone+0x36>
        MacCtx.MacCallbacks->MacProcessNotify( );
 80078c8:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 80078ca:	2201      	movs	r2, #1
 80078cc:	2100      	movs	r1, #0
 80078ce:	4b04      	ldr	r3, [pc, #16]	; (80078e0 <OnRadioRxDone+0x4c>)
 80078d0:	2002      	movs	r0, #2
 80078d2:	f006 f857 	bl	800d984 <UTIL_ADV_TRACE_COND_FSend>
}
 80078d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078d8:	2000066c 	.word	0x2000066c
 80078dc:	200009d0 	.word	0x200009d0
 80078e0:	0800f0fb 	.word	0x0800f0fb

080078e4 <OnRadioTxDone>:
{
 80078e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 80078e6:	f006 fb29 	bl	800df3c <UTIL_TIMER_GetCurrentTime>
    MacCtx.LastTxSysTime = SysTimeGet( );
 80078ea:	466c      	mov	r4, sp
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 80078ec:	4d0f      	ldr	r5, [pc, #60]	; (800792c <OnRadioTxDone+0x48>)
    MacCtx.LastTxSysTime = SysTimeGet( );
 80078ee:	4e10      	ldr	r6, [pc, #64]	; (8007930 <OnRadioTxDone+0x4c>)
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 80078f0:	6168      	str	r0, [r5, #20]
    MacCtx.LastTxSysTime = SysTimeGet( );
 80078f2:	0020      	movs	r0, r4
 80078f4:	f006 fa6a 	bl	800ddcc <SysTimeGet>
 80078f8:	23ce      	movs	r3, #206	; 0xce
 80078fa:	009b      	lsls	r3, r3, #2
 80078fc:	18f3      	adds	r3, r6, r3
 80078fe:	cc06      	ldmia	r4!, {r1, r2}
 8007900:	c306      	stmia	r3!, {r1, r2}
    LoRaMacRadioEvents.Events.TxDone = 1;
 8007902:	2310      	movs	r3, #16
 8007904:	782a      	ldrb	r2, [r5, #0]
 8007906:	4313      	orrs	r3, r2
 8007908:	702b      	strb	r3, [r5, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800790a:	23d2      	movs	r3, #210	; 0xd2
 800790c:	009b      	lsls	r3, r3, #2
 800790e:	58f3      	ldr	r3, [r6, r3]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d003      	beq.n	800791c <OnRadioTxDone+0x38>
 8007914:	691b      	ldr	r3, [r3, #16]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d000      	beq.n	800791c <OnRadioTxDone+0x38>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800791a:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800791c:	2201      	movs	r2, #1
 800791e:	2100      	movs	r1, #0
 8007920:	4b04      	ldr	r3, [pc, #16]	; (8007934 <OnRadioTxDone+0x50>)
 8007922:	2002      	movs	r0, #2
 8007924:	f006 f82e 	bl	800d984 <UTIL_ADV_TRACE_COND_FSend>
}
 8007928:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 800792a:	46c0      	nop			; (mov r8, r8)
 800792c:	2000066c 	.word	0x2000066c
 8007930:	200009d0 	.word	0x200009d0
 8007934:	0800f108 	.word	0x0800f108

08007938 <ResetMacParameters>:
    }
}


static void ResetMacParameters( void )
{
 8007938:	b570      	push	{r4, r5, r6, lr}
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 800793a:	4c44      	ldr	r4, [pc, #272]	; (8007a4c <ResetMacParameters+0x114>)
 800793c:	2600      	movs	r6, #0
 800793e:	0023      	movs	r3, r4
 8007940:	33ff      	adds	r3, #255	; 0xff
    MacCtx.ChannelsNbTransCounter = 0;
    MacCtx.AckTimeoutRetries = 1;
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetry = false;

    Nvm.MacGroup2.MaxDCycle = 0;
 8007942:	701e      	strb	r6, [r3, #0]
    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8007944:	745e      	strb	r6, [r3, #17]
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8007946:	0023      	movs	r3, r4
 8007948:	2001      	movs	r0, #1
 800794a:	33fe      	adds	r3, #254	; 0xfe
 800794c:	8098      	strh	r0, [r3, #4]

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800794e:	0023      	movs	r3, r4
 8007950:	33c4      	adds	r3, #196	; 0xc4
 8007952:	881b      	ldrh	r3, [r3, #0]
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8007954:	0022      	movs	r2, r4
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8007956:	8723      	strh	r3, [r4, #56]	; 0x38
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8007958:	0023      	movs	r3, r4
    Nvm.MacGroup1.AdrAckCounter = 0;
 800795a:	62a6      	str	r6, [r4, #40]	; 0x28
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 800795c:	32a1      	adds	r2, #161	; 0xa1
 800795e:	7812      	ldrb	r2, [r2, #0]
 8007960:	3361      	adds	r3, #97	; 0x61
 8007962:	701a      	strb	r2, [r3, #0]
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8007964:	0022      	movs	r2, r4
 8007966:	0023      	movs	r3, r4
 8007968:	32a4      	adds	r2, #164	; 0xa4
 800796a:	3364      	adds	r3, #100	; 0x64
 800796c:	ca22      	ldmia	r2!, {r1, r5}
 800796e:	c322      	stmia	r3!, {r1, r5}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8007970:	0022      	movs	r2, r4
 8007972:	0023      	movs	r3, r4
 8007974:	32ac      	adds	r2, #172	; 0xac
 8007976:	336c      	adds	r3, #108	; 0x6c
 8007978:	ca22      	ldmia	r2!, {r1, r5}
 800797a:	c322      	stmia	r3!, {r1, r5}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 800797c:	0022      	movs	r2, r4
 800797e:	0023      	movs	r3, r4
 8007980:	32b4      	adds	r2, #180	; 0xb4
 8007982:	8812      	ldrh	r2, [r2, #0]
 8007984:	3374      	adds	r3, #116	; 0x74
 8007986:	801a      	strh	r2, [r3, #0]
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8007988:	0023      	movs	r3, r4
 800798a:	33b8      	adds	r3, #184	; 0xb8
 800798c:	681b      	ldr	r3, [r3, #0]
    MacCtx.ChannelsNbTransCounter = 0;
 800798e:	4d30      	ldr	r5, [pc, #192]	; (8007a50 <ResetMacParameters+0x118>)
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8007990:	67a3      	str	r3, [r4, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8007992:	0023      	movs	r3, r4
 8007994:	33bc      	adds	r3, #188	; 0xbc
 8007996:	681b      	ldr	r3, [r3, #0]
    MacCtx.ChannelsNbTransCounter = 0;
 8007998:	4a2e      	ldr	r2, [pc, #184]	; (8007a54 <ResetMacParameters+0x11c>)
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800799a:	67e3      	str	r3, [r4, #124]	; 0x7c
    MacCtx.ChannelsNbTransCounter = 0;
 800799c:	2382      	movs	r3, #130	; 0x82
 800799e:	00db      	lsls	r3, r3, #3
 80079a0:	50ea      	str	r2, [r5, r3]

    MacCtx.NodeAckRequested = false;
 80079a2:	4b2d      	ldr	r3, [pc, #180]	; (8007a58 <ResetMacParameters+0x120>)
{
 80079a4:	b090      	sub	sp, #64	; 0x40
    MacCtx.NodeAckRequested = false;
 80079a6:	54ee      	strb	r6, [r5, r3]
    Nvm.MacGroup1.SrvAckRequested = false;
 80079a8:	0023      	movs	r3, r4
 80079aa:	333a      	adds	r3, #58	; 0x3a
 80079ac:	701e      	strb	r6, [r3, #0]

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
    params.NvmGroup1 = &Nvm.RegionGroup1;
 80079ae:	4b2b      	ldr	r3, [pc, #172]	; (8007a5c <ResetMacParameters+0x124>)
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 80079b0:	a905      	add	r1, sp, #20
    params.NvmGroup1 = &Nvm.RegionGroup1;
 80079b2:	9305      	str	r3, [sp, #20]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 80079b4:	4b2a      	ldr	r3, [pc, #168]	; (8007a60 <ResetMacParameters+0x128>)
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 80079b6:	7208      	strb	r0, [r1, #8]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 80079b8:	604b      	str	r3, [r1, #4]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80079ba:	0023      	movs	r3, r4
 80079bc:	3340      	adds	r3, #64	; 0x40
 80079be:	7818      	ldrb	r0, [r3, #0]
 80079c0:	f003 fab5 	bl	800af2e <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 80079c4:	4b27      	ldr	r3, [pc, #156]	; (8007a64 <ResetMacParameters+0x12c>)

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 80079c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
    MacCtx.Channel = 0;
 80079c8:	54ee      	strb	r6, [r5, r3]
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 80079ca:	3b49      	subs	r3, #73	; 0x49
 80079cc:	54ee      	strb	r6, [r5, r3]
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 80079ce:	3304      	adds	r3, #4
 80079d0:	50ea      	str	r2, [r5, r3]
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80079d2:	0023      	movs	r3, r4
 80079d4:	3375      	adds	r3, #117	; 0x75
 80079d6:	781a      	ldrb	r2, [r3, #0]
 80079d8:	23f7      	movs	r3, #247	; 0xf7
 80079da:	009b      	lsls	r3, r3, #2
 80079dc:	54ea      	strb	r2, [r5, r3]
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 80079de:	3480      	adds	r4, #128	; 0x80
 80079e0:	7822      	ldrb	r2, [r4, #0]
 80079e2:	4b21      	ldr	r3, [pc, #132]	; (8007a68 <ResetMacParameters+0x130>)
 80079e4:	54ea      	strb	r2, [r5, r3]
    MacCtx.RxWindow2Config.RxContinuous = false;
 80079e6:	2280      	movs	r2, #128	; 0x80
 80079e8:	4b20      	ldr	r3, [pc, #128]	; (8007a6c <ResetMacParameters+0x134>)
 80079ea:	0052      	lsls	r2, r2, #1
 80079ec:	52ea      	strh	r2, [r5, r3]
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 80079ee:	22f3      	movs	r2, #243	; 0xf3
 80079f0:	3302      	adds	r3, #2
 80079f2:	0092      	lsls	r2, r2, #2
 80079f4:	18eb      	adds	r3, r5, r3
 80079f6:	18aa      	adds	r2, r5, r2
 80079f8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80079fa:	c313      	stmia	r3!, {r0, r1, r4}
 80079fc:	ca03      	ldmia	r2!, {r0, r1}
 80079fe:	c303      	stmia	r3!, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8007a00:	4b1b      	ldr	r3, [pc, #108]	; (8007a70 <ResetMacParameters+0x138>)
 8007a02:	4a1c      	ldr	r2, [pc, #112]	; (8007a74 <ResetMacParameters+0x13c>)
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 8007a04:	9603      	str	r6, [sp, #12]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8007a06:	52ea      	strh	r2, [r5, r3]
    classBCallbacks.MacProcessNotify = NULL;

    if( MacCtx.MacCallbacks != NULL )
 8007a08:	3baa      	subs	r3, #170	; 0xaa
 8007a0a:	58eb      	ldr	r3, [r5, r3]
    classBCallbacks.MacProcessNotify = NULL;
 8007a0c:	9604      	str	r6, [sp, #16]
    if( MacCtx.MacCallbacks != NULL )
 8007a0e:	42b3      	cmp	r3, r6
 8007a10:	d004      	beq.n	8007a1c <ResetMacParameters+0xe4>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8007a12:	685a      	ldr	r2, [r3, #4]
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8007a14:	691b      	ldr	r3, [r3, #16]
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8007a16:	9203      	str	r2, [sp, #12]
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8007a18:	9301      	str	r3, [sp, #4]
 8007a1a:	9304      	str	r3, [sp, #16]
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8007a1c:	4b16      	ldr	r3, [pc, #88]	; (8007a78 <ResetMacParameters+0x140>)
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8007a1e:	4a17      	ldr	r2, [pc, #92]	; (8007a7c <ResetMacParameters+0x144>)
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8007a20:	9308      	str	r3, [sp, #32]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8007a22:	4b17      	ldr	r3, [pc, #92]	; (8007a80 <ResetMacParameters+0x148>)
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8007a24:	a903      	add	r1, sp, #12
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8007a26:	9309      	str	r3, [sp, #36]	; 0x24
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8007a28:	4b16      	ldr	r3, [pc, #88]	; (8007a84 <ResetMacParameters+0x14c>)
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8007a2a:	a808      	add	r0, sp, #32
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8007a2c:	930a      	str	r3, [sp, #40]	; 0x28
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8007a2e:	4b16      	ldr	r3, [pc, #88]	; (8007a88 <ResetMacParameters+0x150>)
 8007a30:	930b      	str	r3, [sp, #44]	; 0x2c
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8007a32:	4b16      	ldr	r3, [pc, #88]	; (8007a8c <ResetMacParameters+0x154>)
 8007a34:	930c      	str	r3, [sp, #48]	; 0x30
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8007a36:	4b16      	ldr	r3, [pc, #88]	; (8007a90 <ResetMacParameters+0x158>)
 8007a38:	930d      	str	r3, [sp, #52]	; 0x34
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8007a3a:	4b16      	ldr	r3, [pc, #88]	; (8007a94 <ResetMacParameters+0x15c>)
 8007a3c:	930e      	str	r3, [sp, #56]	; 0x38
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8007a3e:	4b16      	ldr	r3, [pc, #88]	; (8007a98 <ResetMacParameters+0x160>)
 8007a40:	930f      	str	r3, [sp, #60]	; 0x3c
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8007a42:	f002 fbde 	bl	800a202 <LoRaMacClassBInit>
}
 8007a46:	b010      	add	sp, #64	; 0x40
 8007a48:	bd70      	pop	{r4, r5, r6, pc}
 8007a4a:	46c0      	nop			; (mov r8, r8)
 8007a4c:	20000684 	.word	0x20000684
 8007a50:	200009d0 	.word	0x200009d0
 8007a54:	00010100 	.word	0x00010100
 8007a58:	00000414 	.word	0x00000414
 8007a5c:	2000085c 	.word	0x2000085c
 8007a60:	200008f0 	.word	0x200008f0
 8007a64:	00000415 	.word	0x00000415
 8007a68:	000003dd 	.word	0x000003dd
 8007a6c:	000003de 	.word	0x000003de
 8007a70:	000003f2 	.word	0x000003f2
 8007a74:	00000201 	.word	0x00000201
 8007a78:	20000e30 	.word	0x20000e30
 8007a7c:	200009b8 	.word	0x200009b8
 8007a80:	20000dec 	.word	0x20000dec
 8007a84:	20000e1c 	.word	0x20000e1c
 8007a88:	20000e51 	.word	0x20000e51
 8007a8c:	20000750 	.word	0x20000750
 8007a90:	200006c4 	.word	0x200006c4
 8007a94:	200006c8 	.word	0x200006c8
 8007a98:	20000754 	.word	0x20000754

08007a9c <ScheduleTx>:
{
 8007a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a9e:	b095      	sub	sp, #84	; 0x54
 8007aa0:	9003      	str	r0, [sp, #12]
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8007aa2:	f002 fbb9 	bl	800a218 <LoRaMacClassBIsBeaconExpected>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8007aa6:	270e      	movs	r7, #14
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8007aa8:	2800      	cmp	r0, #0
 8007aaa:	d118      	bne.n	8007ade <ScheduleTx+0x42>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8007aac:	4cbd      	ldr	r4, [pc, #756]	; (8007da4 <ScheduleTx+0x308>)
 8007aae:	0023      	movs	r3, r4
 8007ab0:	33fc      	adds	r3, #252	; 0xfc
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d00d      	beq.n	8007ad4 <ScheduleTx+0x38>
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8007ab8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007aba:	4dbb      	ldr	r5, [pc, #748]	; (8007da8 <ScheduleTx+0x30c>)
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d016      	beq.n	8007aee <ScheduleTx+0x52>
    switch( MacCtx.TxMsg.Type )
 8007ac0:	002e      	movs	r6, r5
 8007ac2:	36ff      	adds	r6, #255	; 0xff
 8007ac4:	7973      	ldrb	r3, [r6, #5]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d01b      	beq.n	8007b02 <ScheduleTx+0x66>
 8007aca:	2b04      	cmp	r3, #4
 8007acc:	d100      	bne.n	8007ad0 <ScheduleTx+0x34>
 8007ace:	e071      	b.n	8007bb4 <ScheduleTx+0x118>
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8007ad0:	2703      	movs	r7, #3
 8007ad2:	e004      	b.n	8007ade <ScheduleTx+0x42>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8007ad4:	f002 fba2 	bl	800a21c <LoRaMacClassBIsPingExpected>
 8007ad8:	2800      	cmp	r0, #0
 8007ada:	d003      	beq.n	8007ae4 <ScheduleTx+0x48>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8007adc:	270f      	movs	r7, #15
}
 8007ade:	0038      	movs	r0, r7
 8007ae0:	b015      	add	sp, #84	; 0x54
 8007ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8007ae4:	f002 fb9c 	bl	800a220 <LoRaMacClassBIsMulticastExpected>
 8007ae8:	2800      	cmp	r0, #0
 8007aea:	d0e5      	beq.n	8007ab8 <ScheduleTx+0x1c>
 8007aec:	e7f6      	b.n	8007adc <ScheduleTx+0x40>
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8007aee:	0023      	movs	r3, r4
 8007af0:	33fe      	adds	r3, #254	; 0xfe
 8007af2:	889a      	ldrh	r2, [r3, #4]
 8007af4:	2383      	movs	r3, #131	; 0x83
 8007af6:	00db      	lsls	r3, r3, #3
 8007af8:	58eb      	ldr	r3, [r5, r3]
 8007afa:	3a01      	subs	r2, #1
 8007afc:	4353      	muls	r3, r2
 8007afe:	6323      	str	r3, [r4, #48]	; 0x30
 8007b00:	e7de      	b.n	8007ac0 <ScheduleTx+0x24>
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8007b02:	48aa      	ldr	r0, [pc, #680]	; (8007dac <ScheduleTx+0x310>)
 8007b04:	f003 f957 	bl	800adb6 <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8007b08:	2800      	cmp	r0, #0
 8007b0a:	d000      	beq.n	8007b0e <ScheduleTx+0x72>
 8007b0c:	e146      	b.n	8007d9c <ScheduleTx+0x300>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8007b0e:	7b73      	ldrb	r3, [r6, #13]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8007b10:	0027      	movs	r7, r4
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8007b12:	802b      	strh	r3, [r5, #0]
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8007b14:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007b16:	ae0e      	add	r6, sp, #56	; 0x38
 8007b18:	930e      	str	r3, [sp, #56]	; 0x38
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8007b1a:	0023      	movs	r3, r4
 8007b1c:	3339      	adds	r3, #57	; 0x39
 8007b1e:	781b      	ldrb	r3, [r3, #0]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8007b20:	37ff      	adds	r7, #255	; 0xff
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8007b22:	7233      	strb	r3, [r6, #8]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8007b24:	787b      	ldrb	r3, [r7, #1]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8007b26:	a808      	add	r0, sp, #32
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8007b28:	72b3      	strb	r3, [r6, #10]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8007b2a:	f006 f97b 	bl	800de24 <SysTimeGetMcuTime>
 8007b2e:	0023      	movs	r3, r4
 8007b30:	3309      	adds	r3, #9
 8007b32:	33ff      	adds	r3, #255	; 0xff
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	ad04      	add	r5, sp, #16
 8007b38:	9300      	str	r3, [sp, #0]
 8007b3a:	2382      	movs	r3, #130	; 0x82
 8007b3c:	005b      	lsls	r3, r3, #1
 8007b3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b40:	0028      	movs	r0, r5
 8007b42:	58e3      	ldr	r3, [r4, r3]
 8007b44:	9908      	ldr	r1, [sp, #32]
 8007b46:	f006 f903 	bl	800dd50 <SysTimeSub>
 8007b4a:	ab11      	add	r3, sp, #68	; 0x44
 8007b4c:	cd06      	ldmia	r5!, {r1, r2}
 8007b4e:	c306      	stmia	r3!, {r1, r2}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 8007b50:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    nextChan.Joined = true;
 8007b52:	2201      	movs	r2, #1
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 8007b54:	6073      	str	r3, [r6, #4]
    nextChan.LastTxIsJoinRequest = false;
 8007b56:	2300      	movs	r3, #0
    nextChan.PktLen = MacCtx.PktBufferLen;
 8007b58:	4d93      	ldr	r5, [pc, #588]	; (8007da8 <ScheduleTx+0x30c>)
    nextChan.LastTxIsJoinRequest = false;
 8007b5a:	7533      	strb	r3, [r6, #20]
    nextChan.PktLen = MacCtx.PktBufferLen;
 8007b5c:	882b      	ldrh	r3, [r5, #0]
    nextChan.Joined = true;
 8007b5e:	7272      	strb	r2, [r6, #9]
    nextChan.PktLen = MacCtx.PktBufferLen;
 8007b60:	82f3      	strh	r3, [r6, #22]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8007b62:	7c7b      	ldrb	r3, [r7, #17]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d101      	bne.n	8007b6c <ScheduleTx+0xd0>
        nextChan.LastTxIsJoinRequest = true;
 8007b68:	7532      	strb	r2, [r6, #20]
        nextChan.Joined = false;
 8007b6a:	7273      	strb	r3, [r6, #9]
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 8007b6c:	4b90      	ldr	r3, [pc, #576]	; (8007db0 <ScheduleTx+0x314>)
 8007b6e:	0031      	movs	r1, r6
 8007b70:	7818      	ldrb	r0, [r3, #0]
 8007b72:	4b90      	ldr	r3, [pc, #576]	; (8007db4 <ScheduleTx+0x318>)
 8007b74:	4a90      	ldr	r2, [pc, #576]	; (8007db8 <ScheduleTx+0x31c>)
 8007b76:	9300      	str	r3, [sp, #0]
 8007b78:	4b90      	ldr	r3, [pc, #576]	; (8007dbc <ScheduleTx+0x320>)
 8007b7a:	4c8a      	ldr	r4, [pc, #552]	; (8007da4 <ScheduleTx+0x308>)
 8007b7c:	f003 fa63 	bl	800b046 <RegionNextChannel>
 8007b80:	1e07      	subs	r7, r0, #0
    if( status != LORAMAC_STATUS_OK )
 8007b82:	d01b      	beq.n	8007bbc <ScheduleTx+0x120>
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 8007b84:	280b      	cmp	r0, #11
 8007b86:	d1aa      	bne.n	8007ade <ScheduleTx+0x42>
 8007b88:	9b03      	ldr	r3, [sp, #12]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d0a7      	beq.n	8007ade <ScheduleTx+0x42>
            return LORAMAC_STATUS_OK;
 8007b8e:	2700      	movs	r7, #0
            if( MacCtx.DutyCycleWaitTime != 0 )
 8007b90:	4b8b      	ldr	r3, [pc, #556]	; (8007dc0 <ScheduleTx+0x324>)
 8007b92:	58e9      	ldr	r1, [r5, r3]
 8007b94:	42b9      	cmp	r1, r7
 8007b96:	d0a2      	beq.n	8007ade <ScheduleTx+0x42>
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8007b98:	22d0      	movs	r2, #208	; 0xd0
 8007b9a:	2320      	movs	r3, #32
 8007b9c:	0092      	lsls	r2, r2, #2
 8007b9e:	58a8      	ldr	r0, [r5, r2]
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8007ba0:	4c88      	ldr	r4, [pc, #544]	; (8007dc4 <ScheduleTx+0x328>)
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8007ba2:	4303      	orrs	r3, r0
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8007ba4:	0020      	movs	r0, r4
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8007ba6:	50ab      	str	r3, [r5, r2]
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8007ba8:	f006 faa2 	bl	800e0f0 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 8007bac:	0020      	movs	r0, r4
 8007bae:	f006 fa5d 	bl	800e06c <UTIL_TIMER_Start>
 8007bb2:	e794      	b.n	8007ade <ScheduleTx+0x42>
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8007bb4:	487d      	ldr	r0, [pc, #500]	; (8007dac <ScheduleTx+0x310>)
 8007bb6:	f003 f933 	bl	800ae20 <LoRaMacSerializerData>
 8007bba:	e7a5      	b.n	8007b08 <ScheduleTx+0x6c>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8007bbc:	4b7c      	ldr	r3, [pc, #496]	; (8007db0 <ScheduleTx+0x314>)
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8007bbe:	0022      	movs	r2, r4
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8007bc0:	781e      	ldrb	r6, [r3, #0]
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 8007bc2:	0023      	movs	r3, r4
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8007bc4:	0021      	movs	r1, r4
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 8007bc6:	3361      	adds	r3, #97	; 0x61
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8007bc8:	3239      	adds	r2, #57	; 0x39
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	7812      	ldrb	r2, [r2, #0]
 8007bce:	3175      	adds	r1, #117	; 0x75
 8007bd0:	0030      	movs	r0, r6
 8007bd2:	7809      	ldrb	r1, [r1, #0]
 8007bd4:	b25b      	sxtb	r3, r3
 8007bd6:	b252      	sxtb	r2, r2
 8007bd8:	f003 fa4a 	bl	800b070 <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8007bdc:	4b7a      	ldr	r3, [pc, #488]	; (8007dc8 <ScheduleTx+0x32c>)
 8007bde:	b241      	sxtb	r1, r0
 8007be0:	781a      	ldrb	r2, [r3, #0]
 8007be2:	4b7a      	ldr	r3, [pc, #488]	; (8007dcc <ScheduleTx+0x330>)
 8007be4:	0030      	movs	r0, r6
 8007be6:	9300      	str	r3, [sp, #0]
 8007be8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007bea:	f003 f9c4 	bl	800af76 <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8007bee:	2168      	movs	r1, #104	; 0x68
 8007bf0:	4b75      	ldr	r3, [pc, #468]	; (8007dc8 <ScheduleTx+0x32c>)
 8007bf2:	5661      	ldrsb	r1, [r4, r1]
 8007bf4:	781a      	ldrb	r2, [r3, #0]
 8007bf6:	4b6e      	ldr	r3, [pc, #440]	; (8007db0 <ScheduleTx+0x314>)
 8007bf8:	7818      	ldrb	r0, [r3, #0]
 8007bfa:	4b75      	ldr	r3, [pc, #468]	; (8007dd0 <ScheduleTx+0x334>)
 8007bfc:	9300      	str	r3, [sp, #0]
 8007bfe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007c00:	f003 f9b9 	bl	800af76 <RegionComputeRxWindowParameters>
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8007c04:	23f1      	movs	r3, #241	; 0xf1
 8007c06:	009b      	lsls	r3, r3, #2
 8007c08:	58ea      	ldr	r2, [r5, r3]
 8007c0a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8007c0c:	3b14      	subs	r3, #20
 8007c0e:	1889      	adds	r1, r1, r2
 8007c10:	50e9      	str	r1, [r5, r3]
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8007c12:	21f6      	movs	r1, #246	; 0xf6
 8007c14:	20ed      	movs	r0, #237	; 0xed
 8007c16:	0089      	lsls	r1, r1, #2
 8007c18:	586e      	ldr	r6, [r5, r1]
 8007c1a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8007c1c:	0080      	lsls	r0, r0, #2
 8007c1e:	1989      	adds	r1, r1, r6
 8007c20:	5029      	str	r1, [r5, r0]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8007c22:	0021      	movs	r1, r4
 8007c24:	31ff      	adds	r1, #255	; 0xff
 8007c26:	7c49      	ldrb	r1, [r1, #17]
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8007c28:	469c      	mov	ip, r3
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8007c2a:	2900      	cmp	r1, #0
 8007c2c:	d106      	bne.n	8007c3c <ScheduleTx+0x1a0>
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8007c2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007c30:	189a      	adds	r2, r3, r2
 8007c32:	4663      	mov	r3, ip
 8007c34:	50ea      	str	r2, [r5, r3]
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8007c36:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8007c38:	199b      	adds	r3, r3, r6
 8007c3a:	502b      	str	r3, [r5, r0]
    size_t macCmdsSize = 0;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	930a      	str	r3, [sp, #40]	; 0x28
    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8007c40:	4299      	cmp	r1, r3
 8007c42:	d011      	beq.n	8007c68 <ScheduleTx+0x1cc>
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8007c44:	a80a      	add	r0, sp, #40	; 0x28
 8007c46:	f002 fbab 	bl	800a3a0 <LoRaMacCommandsGetSizeSerializedCmds>
 8007c4a:	2800      	cmp	r0, #0
 8007c4c:	d152      	bne.n	8007cf4 <ScheduleTx+0x258>
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8007c4e:	2039      	movs	r0, #57	; 0x39
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8007c50:	4b60      	ldr	r3, [pc, #384]	; (8007dd4 <ScheduleTx+0x338>)
 8007c52:	5cec      	ldrb	r4, [r5, r3]
 8007c54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c56:	b2dd      	uxtb	r5, r3
 8007c58:	4b52      	ldr	r3, [pc, #328]	; (8007da4 <ScheduleTx+0x308>)
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8007c5a:	1964      	adds	r4, r4, r5
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8007c5c:	5618      	ldrsb	r0, [r3, r0]
 8007c5e:	f7ff fd07 	bl	8007670 <GetMaxAppPayloadWithoutFOptsLength>
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8007c62:	b280      	uxth	r0, r0
 8007c64:	42a0      	cmp	r0, r4
 8007c66:	d343      	bcc.n	8007cf0 <ScheduleTx+0x254>
    return SendFrameOnChannel( MacCtx.Channel );
 8007c68:	4c4f      	ldr	r4, [pc, #316]	; (8007da8 <ScheduleTx+0x30c>)
 8007c6a:	4b5b      	ldr	r3, [pc, #364]	; (8007dd8 <ScheduleTx+0x33c>)
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
    TxConfigParams_t txConfig;
    int8_t txPower = 0;

    txConfig.Channel = channel;
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8007c6c:	4d4d      	ldr	r5, [pc, #308]	; (8007da4 <ScheduleTx+0x308>)
    return SendFrameOnChannel( MacCtx.Channel );
 8007c6e:	5ce3      	ldrb	r3, [r4, r3]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8007c70:	002e      	movs	r6, r5
    return SendFrameOnChannel( MacCtx.Channel );
 8007c72:	9303      	str	r3, [sp, #12]
    int8_t txPower = 0;
 8007c74:	2300      	movs	r3, #0
 8007c76:	aa02      	add	r2, sp, #8
 8007c78:	74d3      	strb	r3, [r2, #19]
    txConfig.Channel = channel;
 8007c7a:	9b03      	ldr	r3, [sp, #12]
 8007c7c:	a90a      	add	r1, sp, #40	; 0x28
 8007c7e:	700b      	strb	r3, [r1, #0]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8007c80:	3639      	adds	r6, #57	; 0x39
 8007c82:	7833      	ldrb	r3, [r6, #0]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
    txConfig.PktLen = MacCtx.PktBufferLen;

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8007c84:	2213      	movs	r2, #19
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8007c86:	704b      	strb	r3, [r1, #1]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8007c88:	002b      	movs	r3, r5
 8007c8a:	3338      	adds	r3, #56	; 0x38
 8007c8c:	781b      	ldrb	r3, [r3, #0]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8007c8e:	a802      	add	r0, sp, #8
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8007c90:	708b      	strb	r3, [r1, #2]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8007c92:	6fab      	ldr	r3, [r5, #120]	; 0x78
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8007c94:	1812      	adds	r2, r2, r0
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8007c96:	604b      	str	r3, [r1, #4]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8007c98:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8007c9a:	608b      	str	r3, [r1, #8]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8007c9c:	8823      	ldrh	r3, [r4, #0]
 8007c9e:	818b      	strh	r3, [r1, #12]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8007ca0:	002b      	movs	r3, r5
 8007ca2:	3340      	adds	r3, #64	; 0x40
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	469c      	mov	ip, r3
 8007ca8:	4b4c      	ldr	r3, [pc, #304]	; (8007ddc <ScheduleTx+0x340>)
 8007caa:	4660      	mov	r0, ip
 8007cac:	f003 f97a 	bl	800afa4 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	4b4b      	ldr	r3, [pc, #300]	; (8007de0 <ScheduleTx+0x344>)
 8007cb4:	54e2      	strb	r2, [r4, r3]
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8007cb6:	7832      	ldrb	r2, [r6, #0]
 8007cb8:	4b4a      	ldr	r3, [pc, #296]	; (8007de4 <ScheduleTx+0x348>)
    MacCtx.McpsConfirm.TxPower = txPower;
    MacCtx.McpsConfirm.Channel = channel;

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8007cba:	2683      	movs	r6, #131	; 0x83
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8007cbc:	54e2      	strb	r2, [r4, r3]
    MacCtx.McpsConfirm.TxPower = txPower;
 8007cbe:	ab02      	add	r3, sp, #8
 8007cc0:	7cda      	ldrb	r2, [r3, #19]
 8007cc2:	4b49      	ldr	r3, [pc, #292]	; (8007de8 <ScheduleTx+0x34c>)
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8007cc4:	00f6      	lsls	r6, r6, #3
    MacCtx.McpsConfirm.TxPower = txPower;
 8007cc6:	54e2      	strb	r2, [r4, r3]
    MacCtx.McpsConfirm.Channel = channel;
 8007cc8:	9a03      	ldr	r2, [sp, #12]
 8007cca:	330d      	adds	r3, #13
 8007ccc:	50e2      	str	r2, [r4, r3]
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8007cce:	2288      	movs	r2, #136	; 0x88
 8007cd0:	59a3      	ldr	r3, [r4, r6]
 8007cd2:	00d2      	lsls	r2, r2, #3
 8007cd4:	50a3      	str	r3, [r4, r2]
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8007cd6:	3210      	adds	r2, #16
 8007cd8:	50a3      	str	r3, [r4, r2]

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8007cda:	f002 faa3 	bl	800a224 <LoRaMacClassBIsBeaconModeActive>
 8007cde:	2800      	cmp	r0, #0
 8007ce0:	d00a      	beq.n	8007cf8 <ScheduleTx+0x25c>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8007ce2:	59a0      	ldr	r0, [r4, r6]
 8007ce4:	f002 fab0 	bl	800a248 <LoRaMacClassBIsUplinkCollision>

        if( collisionTime > 0 )
 8007ce8:	2800      	cmp	r0, #0
 8007cea:	d005      	beq.n	8007cf8 <ScheduleTx+0x25c>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8007cec:	2710      	movs	r7, #16
    return SendFrameOnChannel( MacCtx.Channel );
 8007cee:	e6f6      	b.n	8007ade <ScheduleTx+0x42>
            return LORAMAC_STATUS_LENGTH_ERROR;
 8007cf0:	2708      	movs	r7, #8
 8007cf2:	e6f4      	b.n	8007ade <ScheduleTx+0x42>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8007cf4:	2713      	movs	r7, #19
 8007cf6:	e6f2      	b.n	8007ade <ScheduleTx+0x42>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8007cf8:	002b      	movs	r3, r5
 8007cfa:	33fc      	adds	r3, #252	; 0xfc
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	d101      	bne.n	8007d06 <ScheduleTx+0x26a>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 8007d02:	f002 faa3 	bl	800a24c <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 8007d06:	f002 fa90 	bl	800a22a <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8007d0a:	2339      	movs	r3, #57	; 0x39
 8007d0c:	56eb      	ldrsb	r3, [r5, r3]
    switch( MacCtx.TxMsg.Type )
 8007d0e:	0026      	movs	r6, r4
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8007d10:	9303      	str	r3, [sp, #12]
 8007d12:	4b31      	ldr	r3, [pc, #196]	; (8007dd8 <ScheduleTx+0x33c>)
    switch( MacCtx.TxMsg.Type )
 8007d14:	36ff      	adds	r6, #255	; 0xff
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8007d16:	5ce5      	ldrb	r5, [r4, r3]
    uint32_t fCntUp = 0;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	9307      	str	r3, [sp, #28]
    switch( MacCtx.TxMsg.Type )
 8007d1c:	7973      	ldrb	r3, [r6, #5]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d020      	beq.n	8007d64 <ScheduleTx+0x2c8>
 8007d22:	2b04      	cmp	r3, #4
 8007d24:	d000      	beq.n	8007d28 <ScheduleTx+0x28c>
 8007d26:	e6d3      	b.n	8007ad0 <ScheduleTx+0x34>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8007d28:	a807      	add	r0, sp, #28
 8007d2a:	f002 fda9 	bl	800a880 <LoRaMacCryptoGetFCntUp>
 8007d2e:	2800      	cmp	r0, #0
 8007d30:	d136      	bne.n	8007da0 <ScheduleTx+0x304>
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 8007d32:	2382      	movs	r3, #130	; 0x82
 8007d34:	00db      	lsls	r3, r3, #3
 8007d36:	5ce3      	ldrb	r3, [r4, r3]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d103      	bne.n	8007d44 <ScheduleTx+0x2a8>
 8007d3c:	4b2b      	ldr	r3, [pc, #172]	; (8007dec <ScheduleTx+0x350>)
 8007d3e:	5ce3      	ldrb	r3, [r4, r3]
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d902      	bls.n	8007d4a <ScheduleTx+0x2ae>
                fCntUp -= 1;
 8007d44:	9b07      	ldr	r3, [sp, #28]
 8007d46:	3b01      	subs	r3, #1
 8007d48:	9307      	str	r3, [sp, #28]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8007d4a:	466b      	mov	r3, sp
 8007d4c:	002a      	movs	r2, r5
 8007d4e:	7b19      	ldrb	r1, [r3, #12]
 8007d50:	9807      	ldr	r0, [sp, #28]
 8007d52:	4b16      	ldr	r3, [pc, #88]	; (8007dac <ScheduleTx+0x310>)
 8007d54:	f002 fe18 	bl	800a988 <LoRaMacCryptoSecureMessage>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8007d58:	2800      	cmp	r0, #0
 8007d5a:	d11f      	bne.n	8007d9c <ScheduleTx+0x300>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8007d5c:	0023      	movs	r3, r4
 8007d5e:	33ff      	adds	r3, #255	; 0xff
 8007d60:	7b5b      	ldrb	r3, [r3, #13]
 8007d62:	e005      	b.n	8007d70 <ScheduleTx+0x2d4>
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8007d64:	4811      	ldr	r0, [pc, #68]	; (8007dac <ScheduleTx+0x310>)
 8007d66:	f002 fde3 	bl	800a930 <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8007d6a:	2800      	cmp	r0, #0
 8007d6c:	d116      	bne.n	8007d9c <ScheduleTx+0x300>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8007d6e:	7b73      	ldrb	r3, [r6, #13]
    if( status != LORAMAC_STATUS_OK )
    {
        return status;
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8007d70:	22d0      	movs	r2, #208	; 0xd0
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8007d72:	8023      	strh	r3, [r4, #0]
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8007d74:	2302      	movs	r3, #2
 8007d76:	0092      	lsls	r2, r2, #2
 8007d78:	58a1      	ldr	r1, [r4, r2]
 8007d7a:	430b      	orrs	r3, r1
 8007d7c:	50a3      	str	r3, [r4, r2]
    if( MacCtx.NodeAckRequested == false )
 8007d7e:	4b1c      	ldr	r3, [pc, #112]	; (8007df0 <ScheduleTx+0x354>)
 8007d80:	5ce3      	ldrb	r3, [r4, r3]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d103      	bne.n	8007d8e <ScheduleTx+0x2f2>
    {
        MacCtx.ChannelsNbTransCounter++;
 8007d86:	32d0      	adds	r2, #208	; 0xd0
 8007d88:	5ca3      	ldrb	r3, [r4, r2]
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	54a3      	strb	r3, [r4, r2]
    }

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8007d8e:	4b19      	ldr	r3, [pc, #100]	; (8007df4 <ScheduleTx+0x358>)
 8007d90:	7821      	ldrb	r1, [r4, #0]
 8007d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d94:	4818      	ldr	r0, [pc, #96]	; (8007df8 <ScheduleTx+0x35c>)
 8007d96:	9303      	str	r3, [sp, #12]
 8007d98:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8007d9a:	e6a0      	b.n	8007ade <ScheduleTx+0x42>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8007d9c:	2711      	movs	r7, #17
 8007d9e:	e69e      	b.n	8007ade <ScheduleTx+0x42>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8007da0:	2712      	movs	r7, #18
 8007da2:	e69c      	b.n	8007ade <ScheduleTx+0x42>
 8007da4:	20000684 	.word	0x20000684
 8007da8:	200009d0 	.word	0x200009d0
 8007dac:	20000ad8 	.word	0x20000ad8
 8007db0:	200006c4 	.word	0x200006c4
 8007db4:	200006b4 	.word	0x200006b4
 8007db8:	20000de5 	.word	0x20000de5
 8007dbc:	20000e54 	.word	0x20000e54
 8007dc0:	00000484 	.word	0x00000484
 8007dc4:	20000d38 	.word	0x20000d38
 8007dc8:	200006cc 	.word	0x200006cc
 8007dcc:	20000d88 	.word	0x20000d88
 8007dd0:	20000d9c 	.word	0x20000d9c
 8007dd4:	00000237 	.word	0x00000237
 8007dd8:	00000415 	.word	0x00000415
 8007ddc:	20000de8 	.word	0x20000de8
 8007de0:	00000439 	.word	0x00000439
 8007de4:	0000043a 	.word	0x0000043a
 8007de8:	0000043b 	.word	0x0000043b
 8007dec:	00000412 	.word	0x00000412
 8007df0:	00000414 	.word	0x00000414
 8007df4:	0800eb54 	.word	0x0800eb54
 8007df8:	200009d2 	.word	0x200009d2

08007dfc <OpenContinuousRxCWindow>:
{
 8007dfc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8007dfe:	4b12      	ldr	r3, [pc, #72]	; (8007e48 <OpenContinuousRxCWindow+0x4c>)
 8007e00:	4d12      	ldr	r5, [pc, #72]	; (8007e4c <OpenContinuousRxCWindow+0x50>)
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8007e02:	0019      	movs	r1, r3
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8007e04:	001a      	movs	r2, r3
 8007e06:	001e      	movs	r6, r3
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8007e08:	3170      	adds	r1, #112	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8007e0a:	7809      	ldrb	r1, [r1, #0]
 8007e0c:	3640      	adds	r6, #64	; 0x40
 8007e0e:	3248      	adds	r2, #72	; 0x48
 8007e10:	7812      	ldrb	r2, [r2, #0]
 8007e12:	7830      	ldrb	r0, [r6, #0]
 8007e14:	9500      	str	r5, [sp, #0]
 8007e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e18:	b249      	sxtb	r1, r1
 8007e1a:	f003 f8ac 	bl	800af76 <RegionComputeRxWindowParameters>
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8007e1e:	4a0c      	ldr	r2, [pc, #48]	; (8007e50 <OpenContinuousRxCWindow+0x54>)
 8007e20:	4c0c      	ldr	r4, [pc, #48]	; (8007e54 <OpenContinuousRxCWindow+0x58>)
 8007e22:	4b0d      	ldr	r3, [pc, #52]	; (8007e58 <OpenContinuousRxCWindow+0x5c>)
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8007e24:	0029      	movs	r1, r5
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8007e26:	52e2      	strh	r2, [r4, r3]
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8007e28:	7830      	ldrb	r0, [r6, #0]
 8007e2a:	4a0c      	ldr	r2, [pc, #48]	; (8007e5c <OpenContinuousRxCWindow+0x60>)
 8007e2c:	f003 f8ae 	bl	800af8c <RegionRxConfig>
 8007e30:	2800      	cmp	r0, #0
 8007e32:	d008      	beq.n	8007e46 <OpenContinuousRxCWindow+0x4a>
        Radio.Rx( 0 ); // Continuous mode
 8007e34:	4b0a      	ldr	r3, [pc, #40]	; (8007e60 <OpenContinuousRxCWindow+0x64>)
 8007e36:	2000      	movs	r0, #0
 8007e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e3a:	9303      	str	r3, [sp, #12]
 8007e3c:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8007e3e:	4b09      	ldr	r3, [pc, #36]	; (8007e64 <OpenContinuousRxCWindow+0x68>)
 8007e40:	5ce2      	ldrb	r2, [r4, r3]
 8007e42:	338d      	adds	r3, #141	; 0x8d
 8007e44:	54e2      	strb	r2, [r4, r3]
}
 8007e46:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 8007e48:	20000684 	.word	0x20000684
 8007e4c:	20000db0 	.word	0x20000db0
 8007e50:	00000201 	.word	0x00000201
 8007e54:	200009d0 	.word	0x200009d0
 8007e58:	000003f2 	.word	0x000003f2
 8007e5c:	20000df0 	.word	0x20000df0
 8007e60:	0800eb54 	.word	0x0800eb54
 8007e64:	000003f3 	.word	0x000003f3

08007e68 <SwitchClass>:
    switch( Nvm.MacGroup2.DeviceClass )
 8007e68:	4b34      	ldr	r3, [pc, #208]	; (8007f3c <SwitchClass+0xd4>)
{
 8007e6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch( Nvm.MacGroup2.DeviceClass )
 8007e6c:	001e      	movs	r6, r3
 8007e6e:	36fc      	adds	r6, #252	; 0xfc
 8007e70:	7834      	ldrb	r4, [r6, #0]
{
 8007e72:	0005      	movs	r5, r0
    switch( Nvm.MacGroup2.DeviceClass )
 8007e74:	469c      	mov	ip, r3
 8007e76:	2c01      	cmp	r4, #1
 8007e78:	d04e      	beq.n	8007f18 <SwitchClass+0xb0>
 8007e7a:	2c02      	cmp	r4, #2
 8007e7c:	d053      	beq.n	8007f26 <SwitchClass+0xbe>
 8007e7e:	2c00      	cmp	r4, #0
 8007e80:	d10d      	bne.n	8007e9e <SwitchClass+0x36>
            if( deviceClass == CLASS_A )
 8007e82:	2800      	cmp	r0, #0
 8007e84:	d107      	bne.n	8007e96 <SwitchClass+0x2e>
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8007e86:	001a      	movs	r2, r3
 8007e88:	3364      	adds	r3, #100	; 0x64
 8007e8a:	326c      	adds	r2, #108	; 0x6c
 8007e8c:	cb03      	ldmia	r3!, {r0, r1}
 8007e8e:	c203      	stmia	r2!, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8007e90:	3403      	adds	r4, #3
}
 8007e92:	0020      	movs	r0, r4
 8007e94:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
            if( deviceClass == CLASS_B )
 8007e96:	2801      	cmp	r0, #1
 8007e98:	d03e      	beq.n	8007f18 <SwitchClass+0xb0>
            if( deviceClass == CLASS_C )
 8007e9a:	2802      	cmp	r0, #2
 8007e9c:	d001      	beq.n	8007ea2 <SwitchClass+0x3a>
    switch( Nvm.MacGroup2.DeviceClass )
 8007e9e:	2403      	movs	r4, #3
 8007ea0:	e7f7      	b.n	8007e92 <SwitchClass+0x2a>
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8007ea2:	22f8      	movs	r2, #248	; 0xf8
 8007ea4:	21f3      	movs	r1, #243	; 0xf3
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8007ea6:	7030      	strb	r0, [r6, #0]
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8007ea8:	4825      	ldr	r0, [pc, #148]	; (8007f40 <SwitchClass+0xd8>)
 8007eaa:	0092      	lsls	r2, r2, #2
 8007eac:	0089      	lsls	r1, r1, #2
 8007eae:	1882      	adds	r2, r0, r2
 8007eb0:	1841      	adds	r1, r0, r1
 8007eb2:	c9c8      	ldmia	r1!, {r3, r6, r7}
 8007eb4:	c2c8      	stmia	r2!, {r3, r6, r7}
 8007eb6:	c948      	ldmia	r1!, {r3, r6}
 8007eb8:	c248      	stmia	r2!, {r3, r6}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8007eba:	4a22      	ldr	r2, [pc, #136]	; (8007f44 <SwitchClass+0xdc>)
 8007ebc:	5485      	strb	r5, [r0, r2]
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 8007ebe:	4662      	mov	r2, ip
 8007ec0:	32d2      	adds	r2, #210	; 0xd2
 8007ec2:	7812      	ldrb	r2, [r2, #0]
 8007ec4:	2a00      	cmp	r2, #0
 8007ec6:	d01d      	beq.n	8007f04 <SwitchClass+0x9c>
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 8007ec8:	4662      	mov	r2, ip
 8007eca:	4663      	mov	r3, ip
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8007ecc:	4665      	mov	r5, ip
 8007ece:	4661      	mov	r1, ip
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 8007ed0:	32e8      	adds	r2, #232	; 0xe8
 8007ed2:	6812      	ldr	r2, [r2, #0]
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8007ed4:	35ec      	adds	r5, #236	; 0xec
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 8007ed6:	66da      	str	r2, [r3, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8007ed8:	782d      	ldrb	r5, [r5, #0]
 8007eda:	3170      	adds	r1, #112	; 0x70
 8007edc:	700d      	strb	r5, [r1, #0]
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8007ede:	491a      	ldr	r1, [pc, #104]	; (8007f48 <SwitchClass+0xe0>)
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8007ee0:	3380      	adds	r3, #128	; 0x80
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8007ee2:	5c45      	ldrb	r5, [r0, r1]
 8007ee4:	3935      	subs	r1, #53	; 0x35
 8007ee6:	5445      	strb	r5, [r0, r1]
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8007ee8:	3104      	adds	r1, #4
 8007eea:	5042      	str	r2, [r0, r1]
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8007eec:	4662      	mov	r2, ip
 8007eee:	3275      	adds	r2, #117	; 0x75
 8007ef0:	7811      	ldrb	r1, [r2, #0]
 8007ef2:	22fc      	movs	r2, #252	; 0xfc
 8007ef4:	0092      	lsls	r2, r2, #2
 8007ef6:	5481      	strb	r1, [r0, r2]
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8007ef8:	781a      	ldrb	r2, [r3, #0]
 8007efa:	4b14      	ldr	r3, [pc, #80]	; (8007f4c <SwitchClass+0xe4>)
 8007efc:	54c2      	strb	r2, [r0, r3]
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8007efe:	4b14      	ldr	r3, [pc, #80]	; (8007f50 <SwitchClass+0xe8>)
 8007f00:	4a14      	ldr	r2, [pc, #80]	; (8007f54 <SwitchClass+0xec>)
 8007f02:	52c2      	strh	r2, [r0, r3]
                MacCtx.NodeAckRequested = false;
 8007f04:	2200      	movs	r2, #0
 8007f06:	4b14      	ldr	r3, [pc, #80]	; (8007f58 <SwitchClass+0xf0>)
 8007f08:	54c2      	strb	r2, [r0, r3]
                Radio.Sleep( );
 8007f0a:	4b14      	ldr	r3, [pc, #80]	; (8007f5c <SwitchClass+0xf4>)
 8007f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f0e:	9301      	str	r3, [sp, #4]
 8007f10:	4798      	blx	r3
                OpenContinuousRxCWindow( );
 8007f12:	f7ff ff73 	bl	8007dfc <OpenContinuousRxCWindow>
                status = LORAMAC_STATUS_OK;
 8007f16:	e7bc      	b.n	8007e92 <SwitchClass+0x2a>
            status = LoRaMacClassBSwitchClass( deviceClass );
 8007f18:	0028      	movs	r0, r5
 8007f1a:	f002 f988 	bl	800a22e <LoRaMacClassBSwitchClass>
 8007f1e:	1e04      	subs	r4, r0, #0
            if( status == LORAMAC_STATUS_OK )
 8007f20:	d1b7      	bne.n	8007e92 <SwitchClass+0x2a>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8007f22:	7035      	strb	r5, [r6, #0]
 8007f24:	e7b5      	b.n	8007e92 <SwitchClass+0x2a>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8007f26:	2403      	movs	r4, #3
            if( deviceClass == CLASS_A )
 8007f28:	2800      	cmp	r0, #0
 8007f2a:	d1b2      	bne.n	8007e92 <SwitchClass+0x2a>
                Radio.Sleep( );
 8007f2c:	4b0b      	ldr	r3, [pc, #44]	; (8007f5c <SwitchClass+0xf4>)
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8007f2e:	7030      	strb	r0, [r6, #0]
                Radio.Sleep( );
 8007f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                status = LORAMAC_STATUS_OK;
 8007f32:	002c      	movs	r4, r5
                Radio.Sleep( );
 8007f34:	9301      	str	r3, [sp, #4]
 8007f36:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 8007f38:	e7ab      	b.n	8007e92 <SwitchClass+0x2a>
 8007f3a:	46c0      	nop			; (mov r8, r8)
 8007f3c:	20000684 	.word	0x20000684
 8007f40:	200009d0 	.word	0x200009d0
 8007f44:	000003f3 	.word	0x000003f3
 8007f48:	00000415 	.word	0x00000415
 8007f4c:	000003f1 	.word	0x000003f1
 8007f50:	000003f2 	.word	0x000003f2
 8007f54:	00000301 	.word	0x00000301
 8007f58:	00000414 	.word	0x00000414
 8007f5c:	0800eb54 	.word	0x0800eb54

08007f60 <RxWindowSetup.constprop.0>:
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
 8007f60:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007f62:	000c      	movs	r4, r1
    TimerStop( rxTimer );
 8007f64:	f006 f82e 	bl	800dfc4 <UTIL_TIMER_Stop>
    Radio.Standby( );
 8007f68:	4e0b      	ldr	r6, [pc, #44]	; (8007f98 <RxWindowSetup.constprop.0+0x38>)
 8007f6a:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8007f6c:	9301      	str	r3, [sp, #4]
 8007f6e:	4798      	blx	r3
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8007f70:	4d0a      	ldr	r5, [pc, #40]	; (8007f9c <RxWindowSetup.constprop.0+0x3c>)
 8007f72:	0021      	movs	r1, r4
 8007f74:	002b      	movs	r3, r5
 8007f76:	3340      	adds	r3, #64	; 0x40
 8007f78:	7818      	ldrb	r0, [r3, #0]
 8007f7a:	4a09      	ldr	r2, [pc, #36]	; (8007fa0 <RxWindowSetup.constprop.0+0x40>)
 8007f7c:	f003 f806 	bl	800af8c <RegionRxConfig>
 8007f80:	2800      	cmp	r0, #0
 8007f82:	d008      	beq.n	8007f96 <RxWindowSetup.constprop.0+0x36>
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8007f84:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8007f86:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8007f88:	9301      	str	r3, [sp, #4]
 8007f8a:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8007f8c:	2390      	movs	r3, #144	; 0x90
 8007f8e:	7ce1      	ldrb	r1, [r4, #19]
 8007f90:	4a04      	ldr	r2, [pc, #16]	; (8007fa4 <RxWindowSetup.constprop.0+0x44>)
 8007f92:	00db      	lsls	r3, r3, #3
 8007f94:	54d1      	strb	r1, [r2, r3]
}
 8007f96:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 8007f98:	0800eb54 	.word	0x0800eb54
 8007f9c:	20000684 	.word	0x20000684
 8007fa0:	20000df0 	.word	0x20000df0
 8007fa4:	200009d0 	.word	0x200009d0

08007fa8 <OnRxWindow1TimerEvent>:
{
 8007fa8:	b510      	push	{r4, lr}
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 8007faa:	4b0e      	ldr	r3, [pc, #56]	; (8007fe4 <OnRxWindow1TimerEvent+0x3c>)
 8007fac:	4a0e      	ldr	r2, [pc, #56]	; (8007fe8 <OnRxWindow1TimerEvent+0x40>)
 8007fae:	5c99      	ldrb	r1, [r3, r2]
 8007fb0:	3a5d      	subs	r2, #93	; 0x5d
 8007fb2:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 8007fb4:	4a0d      	ldr	r2, [pc, #52]	; (8007fec <OnRxWindow1TimerEvent+0x44>)
 8007fb6:	0011      	movs	r1, r2
 8007fb8:	3161      	adds	r1, #97	; 0x61
 8007fba:	7808      	ldrb	r0, [r1, #0]
 8007fbc:	490c      	ldr	r1, [pc, #48]	; (8007ff0 <OnRxWindow1TimerEvent+0x48>)
 8007fbe:	5458      	strb	r0, [r3, r1]
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8007fc0:	0011      	movs	r1, r2
 8007fc2:	3175      	adds	r1, #117	; 0x75
 8007fc4:	7808      	ldrb	r0, [r1, #0]
 8007fc6:	21f2      	movs	r1, #242	; 0xf2
 8007fc8:	0089      	lsls	r1, r1, #2
 8007fca:	5458      	strb	r0, [r3, r1]
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8007fcc:	3280      	adds	r2, #128	; 0x80
 8007fce:	7811      	ldrb	r1, [r2, #0]
 8007fd0:	4a08      	ldr	r2, [pc, #32]	; (8007ff4 <OnRxWindow1TimerEvent+0x4c>)
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8007fd2:	4809      	ldr	r0, [pc, #36]	; (8007ff8 <OnRxWindow1TimerEvent+0x50>)
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8007fd4:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.RxContinuous = false;
 8007fd6:	2100      	movs	r1, #0
 8007fd8:	4a08      	ldr	r2, [pc, #32]	; (8007ffc <OnRxWindow1TimerEvent+0x54>)
 8007fda:	5299      	strh	r1, [r3, r2]
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8007fdc:	4908      	ldr	r1, [pc, #32]	; (8008000 <OnRxWindow1TimerEvent+0x58>)
 8007fde:	f7ff ffbf 	bl	8007f60 <RxWindowSetup.constprop.0>
}
 8007fe2:	bd10      	pop	{r4, pc}
 8007fe4:	200009d0 	.word	0x200009d0
 8007fe8:	00000415 	.word	0x00000415
 8007fec:	20000684 	.word	0x20000684
 8007ff0:	000003bb 	.word	0x000003bb
 8007ff4:	000003c9 	.word	0x000003c9
 8007ff8:	20000d50 	.word	0x20000d50
 8007ffc:	000003ca 	.word	0x000003ca
 8008000:	20000d88 	.word	0x20000d88

08008004 <OnRxWindow2TimerEvent>:
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8008004:	2290      	movs	r2, #144	; 0x90
{
 8008006:	b510      	push	{r4, lr}
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8008008:	4b10      	ldr	r3, [pc, #64]	; (800804c <OnRxWindow2TimerEvent+0x48>)
 800800a:	00d2      	lsls	r2, r2, #3
 800800c:	5c9a      	ldrb	r2, [r3, r2]
 800800e:	2a00      	cmp	r2, #0
 8008010:	d01a      	beq.n	8008048 <OnRxWindow2TimerEvent+0x44>
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8008012:	4a0f      	ldr	r2, [pc, #60]	; (8008050 <OnRxWindow2TimerEvent+0x4c>)
 8008014:	5c99      	ldrb	r1, [r3, r2]
 8008016:	3a49      	subs	r2, #73	; 0x49
 8008018:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800801a:	21f4      	movs	r1, #244	; 0xf4
 800801c:	4a0d      	ldr	r2, [pc, #52]	; (8008054 <OnRxWindow2TimerEvent+0x50>)
 800801e:	0089      	lsls	r1, r1, #2
 8008020:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8008022:	5058      	str	r0, [r3, r1]
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8008024:	0011      	movs	r1, r2
 8008026:	3175      	adds	r1, #117	; 0x75
 8008028:	7808      	ldrb	r0, [r1, #0]
 800802a:	21f7      	movs	r1, #247	; 0xf7
 800802c:	0089      	lsls	r1, r1, #2
 800802e:	5458      	strb	r0, [r3, r1]
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8008030:	3280      	adds	r2, #128	; 0x80
 8008032:	7811      	ldrb	r1, [r2, #0]
 8008034:	4a08      	ldr	r2, [pc, #32]	; (8008058 <OnRxWindow2TimerEvent+0x54>)
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8008036:	4809      	ldr	r0, [pc, #36]	; (800805c <OnRxWindow2TimerEvent+0x58>)
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8008038:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxContinuous = false;
 800803a:	2180      	movs	r1, #128	; 0x80
 800803c:	4a08      	ldr	r2, [pc, #32]	; (8008060 <OnRxWindow2TimerEvent+0x5c>)
 800803e:	0049      	lsls	r1, r1, #1
 8008040:	5299      	strh	r1, [r3, r2]
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8008042:	4908      	ldr	r1, [pc, #32]	; (8008064 <OnRxWindow2TimerEvent+0x60>)
 8008044:	f7ff ff8c 	bl	8007f60 <RxWindowSetup.constprop.0>
}
 8008048:	bd10      	pop	{r4, pc}
 800804a:	46c0      	nop			; (mov r8, r8)
 800804c:	200009d0 	.word	0x200009d0
 8008050:	00000415 	.word	0x00000415
 8008054:	20000684 	.word	0x20000684
 8008058:	000003dd 	.word	0x000003dd
 800805c:	20000d68 	.word	0x20000d68
 8008060:	000003de 	.word	0x000003de
 8008064:	20000d9c 	.word	0x20000d9c

08008068 <ProcessMacCommands.constprop.0>:
    uint8_t status = 0;
 8008068:	2300      	movs	r3, #0
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 800806a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800806c:	b093      	sub	sp, #76	; 0x4c
 800806e:	9205      	str	r2, [sp, #20]
    uint8_t status = 0;
 8008070:	220d      	movs	r2, #13
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 8008072:	0007      	movs	r7, r0
    while( macIndex < commandsSize )
 8008074:	001c      	movs	r4, r3
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 8008076:	9103      	str	r1, [sp, #12]
    uint8_t status = 0;
 8008078:	a904      	add	r1, sp, #16
 800807a:	1852      	adds	r2, r2, r1
 800807c:	7013      	strb	r3, [r2, #0]
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800807e:	aa08      	add	r2, sp, #32
 8008080:	8013      	strh	r3, [r2, #0]
    bool adrBlockFound = false;
 8008082:	9302      	str	r3, [sp, #8]
    while( macIndex < commandsSize )
 8008084:	9b03      	ldr	r3, [sp, #12]
 8008086:	429c      	cmp	r4, r3
 8008088:	d301      	bcc.n	800808e <ProcessMacCommands.constprop.0+0x26>
}
 800808a:	b013      	add	sp, #76	; 0x4c
 800808c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800808e:	5d38      	ldrb	r0, [r7, r4]
 8008090:	f002 f9da 	bl	800a448 <LoRaMacCommandsGetCmdSize>
 8008094:	9b03      	ldr	r3, [sp, #12]
 8008096:	1900      	adds	r0, r0, r4
 8008098:	193e      	adds	r6, r7, r4
 800809a:	4298      	cmp	r0, r3
 800809c:	dcf5      	bgt.n	800808a <ProcessMacCommands.constprop.0+0x22>
        switch( payload[macIndex++] )
 800809e:	7830      	ldrb	r0, [r6, #0]
 80080a0:	1c65      	adds	r5, r4, #1
 80080a2:	3802      	subs	r0, #2
 80080a4:	b2ed      	uxtb	r5, r5
 80080a6:	2811      	cmp	r0, #17
 80080a8:	d8ef      	bhi.n	800808a <ProcessMacCommands.constprop.0+0x22>
 80080aa:	f7f8 f849 	bl	8000140 <__gnu_thumb1_case_shi>
 80080ae:	0012      	.short	0x0012
 80080b0:	00880028 	.word	0x00880028
 80080b4:	00e0009c 	.word	0x00e0009c
 80080b8:	012900f8 	.word	0x012900f8
 80080bc:	01950148 	.word	0x01950148
 80080c0:	ffeeffee 	.word	0xffeeffee
 80080c4:	ffee01d1 	.word	0xffee01d1
 80080c8:	0220ffee 	.word	0x0220ffee
 80080cc:	02500235 	.word	0x02500235
 80080d0:	026a      	.short	0x026a
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 80080d2:	2004      	movs	r0, #4
 80080d4:	f002 fa6c 	bl	800a5b0 <LoRaMacConfirmQueueIsCmdActive>
 80080d8:	2800      	cmp	r0, #0
 80080da:	d00e      	beq.n	80080fa <ProcessMacCommands.constprop.0+0x92>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 80080dc:	2104      	movs	r1, #4
 80080de:	2000      	movs	r0, #0
 80080e0:	f002 fa22 	bl	800a528 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 80080e4:	5d79      	ldrb	r1, [r7, r5]
 80080e6:	4bd1      	ldr	r3, [pc, #836]	; (800842c <ProcessMacCommands.constprop.0+0x3c4>)
 80080e8:	4ad1      	ldr	r2, [pc, #836]	; (8008430 <ProcessMacCommands.constprop.0+0x3c8>)
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 80080ea:	1ce5      	adds	r5, r4, #3
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 80080ec:	3402      	adds	r4, #2
 80080ee:	5499      	strb	r1, [r3, r2]
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 80080f0:	b2e4      	uxtb	r4, r4
 80080f2:	5d39      	ldrb	r1, [r7, r4]
 80080f4:	4acf      	ldr	r2, [pc, #828]	; (8008434 <ProcessMacCommands.constprop.0+0x3cc>)
 80080f6:	b2ed      	uxtb	r5, r5
 80080f8:	5499      	strb	r1, [r3, r2]
                uint8_t eirpDwellTime = payload[macIndex++];
 80080fa:	002c      	movs	r4, r5
 80080fc:	e7c2      	b.n	8008084 <ProcessMacCommands.constprop.0+0x1c>
                int8_t linkAdrDatarate = DR_0;
 80080fe:	2300      	movs	r3, #0
 8008100:	aa04      	add	r2, sp, #16
 8008102:	7393      	strb	r3, [r2, #14]
                int8_t linkAdrTxPower = TX_POWER_0;
 8008104:	73d3      	strb	r3, [r2, #15]
                uint8_t linkAdrNbRep = 0;
 8008106:	ae09      	add	r6, sp, #36	; 0x24
                uint8_t linkAdrNbBytesParsed = 0;
 8008108:	aa0a      	add	r2, sp, #40	; 0x28
                uint8_t linkAdrNbRep = 0;
 800810a:	7033      	strb	r3, [r6, #0]
                uint8_t linkAdrNbBytesParsed = 0;
 800810c:	7013      	strb	r3, [r2, #0]
                if( adrBlockFound == false )
 800810e:	9b02      	ldr	r3, [sp, #8]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d151      	bne.n	80081b8 <ProcessMacCommands.constprop.0+0x150>
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8008114:	9b03      	ldr	r3, [sp, #12]
                    linkAdrReq.Payload = &payload[macIndex - 1];
 8008116:	a90e      	add	r1, sp, #56	; 0x38
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8008118:	1b1b      	subs	r3, r3, r4
 800811a:	720b      	strb	r3, [r1, #8]
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800811c:	4bc6      	ldr	r3, [pc, #792]	; (8008438 <ProcessMacCommands.constprop.0+0x3d0>)
                    linkAdrReq.Payload = &payload[macIndex - 1];
 800811e:	3d01      	subs	r5, #1
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8008120:	0018      	movs	r0, r3
                    linkAdrReq.Payload = &payload[macIndex - 1];
 8008122:	197d      	adds	r5, r7, r5
 8008124:	604d      	str	r5, [r1, #4]
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8008126:	30fe      	adds	r0, #254	; 0xfe
 8008128:	7800      	ldrb	r0, [r0, #0]
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800812a:	001d      	movs	r5, r3
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800812c:	7288      	strb	r0, [r1, #10]
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800812e:	0018      	movs	r0, r3
 8008130:	3074      	adds	r0, #116	; 0x74
 8008132:	7800      	ldrb	r0, [r0, #0]
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8008134:	3560      	adds	r5, #96	; 0x60
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8008136:	7248      	strb	r0, [r1, #9]
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8008138:	48c0      	ldr	r0, [pc, #768]	; (800843c <ProcessMacCommands.constprop.0+0x3d4>)
 800813a:	7800      	ldrb	r0, [r0, #0]
 800813c:	72c8      	strb	r0, [r1, #11]
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800813e:	48c0      	ldr	r0, [pc, #768]	; (8008440 <ProcessMacCommands.constprop.0+0x3d8>)
 8008140:	7800      	ldrb	r0, [r0, #0]
 8008142:	7308      	strb	r0, [r1, #12]
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8008144:	7828      	ldrb	r0, [r5, #0]
 8008146:	7348      	strb	r0, [r1, #13]
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 8008148:	0018      	movs	r0, r3
 800814a:	30fc      	adds	r0, #252	; 0xfc
 800814c:	6900      	ldr	r0, [r0, #16]
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800814e:	3340      	adds	r3, #64	; 0x40
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 8008150:	900e      	str	r0, [sp, #56]	; 0x38
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	9201      	str	r2, [sp, #4]
 8008156:	469c      	mov	ip, r3
 8008158:	230f      	movs	r3, #15
 800815a:	aa04      	add	r2, sp, #16
 800815c:	189b      	adds	r3, r3, r2
 800815e:	220e      	movs	r2, #14
 8008160:	a804      	add	r0, sp, #16
 8008162:	1812      	adds	r2, r2, r0
 8008164:	9600      	str	r6, [sp, #0]
 8008166:	4660      	mov	r0, ip
 8008168:	f002 ff29 	bl	800afbe <RegionLinkAdrReq>
 800816c:	ab04      	add	r3, sp, #16
 800816e:	7358      	strb	r0, [r3, #13]
                    if( ( status & 0x07 ) == 0x07 )
 8008170:	43c0      	mvns	r0, r0
 8008172:	0743      	lsls	r3, r0, #29
 8008174:	d109      	bne.n	800818a <ProcessMacCommands.constprop.0+0x122>
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 8008176:	ab04      	add	r3, sp, #16
 8008178:	7b9b      	ldrb	r3, [r3, #14]
 800817a:	4ab0      	ldr	r2, [pc, #704]	; (800843c <ProcessMacCommands.constprop.0+0x3d4>)
 800817c:	7013      	strb	r3, [r2, #0]
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800817e:	ab04      	add	r3, sp, #16
 8008180:	7bdb      	ldrb	r3, [r3, #15]
 8008182:	4aaf      	ldr	r2, [pc, #700]	; (8008440 <ProcessMacCommands.constprop.0+0x3d8>)
 8008184:	7013      	strb	r3, [r2, #0]
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 8008186:	7833      	ldrb	r3, [r6, #0]
 8008188:	702b      	strb	r3, [r5, #0]
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 800818a:	2600      	movs	r6, #0
 800818c:	e009      	b.n	80081a2 <ProcessMacCommands.constprop.0+0x13a>
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800818e:	230d      	movs	r3, #13
 8008190:	a904      	add	r1, sp, #16
 8008192:	185b      	adds	r3, r3, r1
 8008194:	2201      	movs	r2, #1
 8008196:	0019      	movs	r1, r3
 8008198:	2003      	movs	r0, #3
 800819a:	f002 f867 	bl	800a26c <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800819e:	3601      	adds	r6, #1
 80081a0:	b2f6      	uxtb	r6, r6
 80081a2:	ab0a      	add	r3, sp, #40	; 0x28
 80081a4:	781d      	ldrb	r5, [r3, #0]
 80081a6:	2105      	movs	r1, #5
 80081a8:	0028      	movs	r0, r5
 80081aa:	f7f7 ffdd 	bl	8000168 <__udivsi3>
 80081ae:	b2c0      	uxtb	r0, r0
 80081b0:	4286      	cmp	r6, r0
 80081b2:	d3ec      	bcc.n	800818e <ProcessMacCommands.constprop.0+0x126>
                    macIndex += linkAdrNbBytesParsed - 1;
 80081b4:	1965      	adds	r5, r4, r5
 80081b6:	b2ed      	uxtb	r5, r5
                break;
 80081b8:	2301      	movs	r3, #1
 80081ba:	9302      	str	r3, [sp, #8]
 80081bc:	e79d      	b.n	80080fa <ProcessMacCommands.constprop.0+0x92>
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 80081be:	230f      	movs	r3, #15
 80081c0:	5d7a      	ldrb	r2, [r7, r5]
 80081c2:	3402      	adds	r4, #2
 80081c4:	401a      	ands	r2, r3
 80081c6:	4b9c      	ldr	r3, [pc, #624]	; (8008438 <ProcessMacCommands.constprop.0+0x3d0>)
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 80081c8:	2004      	movs	r0, #4
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 80081ca:	0019      	movs	r1, r3
 80081cc:	31ff      	adds	r1, #255	; 0xff
 80081ce:	700a      	strb	r2, [r1, #0]
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 80081d0:	2101      	movs	r1, #1
 80081d2:	4091      	lsls	r1, r2
 80081d4:	33fe      	adds	r3, #254	; 0xfe
 80081d6:	8099      	strh	r1, [r3, #4]
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 80081d8:	2200      	movs	r2, #0
 80081da:	a908      	add	r1, sp, #32
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 80081dc:	b2e4      	uxtb	r4, r4
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 80081de:	f002 f845 	bl	800a26c <LoRaMacCommandsAddCmd>
                uint8_t delay = payload[macIndex++] & 0x0F;
 80081e2:	0025      	movs	r5, r4
}
 80081e4:	e789      	b.n	80080fa <ProcessMacCommands.constprop.0+0x92>
                status = 0x07;
 80081e6:	2107      	movs	r1, #7
 80081e8:	ab04      	add	r3, sp, #16
 80081ea:	7359      	strb	r1, [r3, #13]
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 80081ec:	5d7b      	ldrb	r3, [r7, r5]
 80081ee:	ae0e      	add	r6, sp, #56	; 0x38
 80081f0:	091a      	lsrs	r2, r3, #4
 80081f2:	400a      	ands	r2, r1
 80081f4:	7072      	strb	r2, [r6, #1]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 80081f6:	220f      	movs	r2, #15
 80081f8:	4013      	ands	r3, r2
 80081fa:	7033      	strb	r3, [r6, #0]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80081fc:	1d22      	adds	r2, r4, #4
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 80081fe:	1ce3      	adds	r3, r4, #3
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8008200:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008202:	b2d2      	uxtb	r2, r2
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8008204:	5cfb      	ldrb	r3, [r7, r3]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008206:	5cba      	ldrb	r2, [r7, r2]
 8008208:	1d65      	adds	r5, r4, #5
                macIndex++;
 800820a:	3402      	adds	r4, #2
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800820c:	0412      	lsls	r2, r2, #16
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800820e:	b2e4      	uxtb	r4, r4
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8008210:	021b      	lsls	r3, r3, #8
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008212:	4313      	orrs	r3, r2
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8008214:	5d3a      	ldrb	r2, [r7, r4]
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 8008216:	4c88      	ldr	r4, [pc, #544]	; (8008438 <ProcessMacCommands.constprop.0+0x3d0>)
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008218:	4313      	orrs	r3, r2
                rxParamSetupReq.Frequency *= 100;
 800821a:	2264      	movs	r2, #100	; 0x64
 800821c:	4353      	muls	r3, r2
 800821e:	930f      	str	r3, [sp, #60]	; 0x3c
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 8008220:	0023      	movs	r3, r4
 8008222:	3340      	adds	r3, #64	; 0x40
 8008224:	7818      	ldrb	r0, [r3, #0]
 8008226:	0031      	movs	r1, r6
 8008228:	f002 fed9 	bl	800afde <RegionRxParamSetupReq>
 800822c:	ab04      	add	r3, sp, #16
 800822e:	7358      	strb	r0, [r3, #13]
                if( ( status & 0x07 ) == 0x07 )
 8008230:	2307      	movs	r3, #7
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008232:	b2ed      	uxtb	r5, r5
                if( ( status & 0x07 ) == 0x07 )
 8008234:	4003      	ands	r3, r0
 8008236:	2b07      	cmp	r3, #7
 8008238:	d10c      	bne.n	8008254 <ProcessMacCommands.constprop.0+0x1ec>
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800823a:	0022      	movs	r2, r4
 800823c:	7833      	ldrb	r3, [r6, #0]
 800823e:	3268      	adds	r2, #104	; 0x68
 8008240:	7013      	strb	r3, [r2, #0]
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8008242:	0022      	movs	r2, r4
 8008244:	3270      	adds	r2, #112	; 0x70
 8008246:	7013      	strb	r3, [r2, #0]
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8008248:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800824a:	6663      	str	r3, [r4, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800824c:	66e3      	str	r3, [r4, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800824e:	7873      	ldrb	r3, [r6, #1]
 8008250:	3461      	adds	r4, #97	; 0x61
 8008252:	7023      	strb	r3, [r4, #0]
                macCmdPayload[0] = status;
 8008254:	a908      	add	r1, sp, #32
 8008256:	7008      	strb	r0, [r1, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8008258:	2201      	movs	r2, #1
 800825a:	2005      	movs	r0, #5
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800825c:	f002 f806 	bl	800a26c <LoRaMacCommandsAddCmd>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8008260:	2310      	movs	r3, #16
 8008262:	4972      	ldr	r1, [pc, #456]	; (800842c <ProcessMacCommands.constprop.0+0x3c4>)
 8008264:	4a77      	ldr	r2, [pc, #476]	; (8008444 <ProcessMacCommands.constprop.0+0x3dc>)
 8008266:	5c88      	ldrb	r0, [r1, r2]
 8008268:	4303      	orrs	r3, r0
 800826a:	548b      	strb	r3, [r1, r2]
}
 800826c:	e745      	b.n	80080fa <ProcessMacCommands.constprop.0+0x92>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800826e:	23d2      	movs	r3, #210	; 0xd2
 8008270:	4a6e      	ldr	r2, [pc, #440]	; (800842c <ProcessMacCommands.constprop.0+0x3c4>)
 8008272:	009b      	lsls	r3, r3, #2
 8008274:	58d3      	ldr	r3, [r2, r3]
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8008276:	20ff      	movs	r0, #255	; 0xff
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8008278:	2b00      	cmp	r3, #0
 800827a:	d003      	beq.n	8008284 <ProcessMacCommands.constprop.0+0x21c>
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d000      	beq.n	8008284 <ProcessMacCommands.constprop.0+0x21c>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8008282:	4798      	blx	r3
                macCmdPayload[0] = batteryLevel;
 8008284:	ab04      	add	r3, sp, #16
 8008286:	7418      	strb	r0, [r3, #16]
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8008288:	233f      	movs	r3, #63	; 0x3f
 800828a:	9a05      	ldr	r2, [sp, #20]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800828c:	2006      	movs	r0, #6
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800828e:	4013      	ands	r3, r2
 8008290:	aa04      	add	r2, sp, #16
 8008292:	7453      	strb	r3, [r2, #17]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8008294:	2202      	movs	r2, #2
 8008296:	a908      	add	r1, sp, #32
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8008298:	f001 ffe8 	bl	800a26c <LoRaMacCommandsAddCmd>
                break;
 800829c:	e72d      	b.n	80080fa <ProcessMacCommands.constprop.0+0x92>
                status = 0x03;
 800829e:	260d      	movs	r6, #13
 80082a0:	ab04      	add	r3, sp, #16
 80082a2:	18f6      	adds	r6, r6, r3
 80082a4:	2303      	movs	r3, #3
 80082a6:	7033      	strb	r3, [r6, #0]
                newChannelReq.ChannelId = payload[macIndex++];
 80082a8:	5d7b      	ldrb	r3, [r7, r5]
 80082aa:	a90a      	add	r1, sp, #40	; 0x28
 80082ac:	710b      	strb	r3, [r1, #4]
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 80082ae:	1ce3      	adds	r3, r4, #3
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80082b0:	b2db      	uxtb	r3, r3
 80082b2:	5cfd      	ldrb	r5, [r7, r3]
 80082b4:	1d23      	adds	r3, r4, #4
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80082b6:	b2db      	uxtb	r3, r3
 80082b8:	5cfb      	ldrb	r3, [r7, r3]
                newChannelReq.ChannelId = payload[macIndex++];
 80082ba:	1ca0      	adds	r0, r4, #2
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 80082bc:	b2c0      	uxtb	r0, r0
 80082be:	5c38      	ldrb	r0, [r7, r0]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80082c0:	022d      	lsls	r5, r5, #8
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80082c2:	041b      	lsls	r3, r3, #16
 80082c4:	432b      	orrs	r3, r5
 80082c6:	4303      	orrs	r3, r0
                chParam.Frequency *= 100;
 80082c8:	2064      	movs	r0, #100	; 0x64
 80082ca:	4343      	muls	r3, r0
 80082cc:	930e      	str	r3, [sp, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 80082ce:	2300      	movs	r3, #0
                chParam.DrRange.Value = payload[macIndex++];
 80082d0:	1da5      	adds	r5, r4, #6
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80082d2:	3405      	adds	r4, #5
                chParam.DrRange.Value = payload[macIndex++];
 80082d4:	b2e4      	uxtb	r4, r4
                chParam.Rx1Frequency = 0;
 80082d6:	930f      	str	r3, [sp, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 80082d8:	5d3b      	ldrb	r3, [r7, r4]
                newChannelReq.NewChannel = &chParam;
 80082da:	aa0e      	add	r2, sp, #56	; 0x38
                chParam.DrRange.Value = payload[macIndex++];
 80082dc:	7213      	strb	r3, [r2, #8]
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 80082de:	4b56      	ldr	r3, [pc, #344]	; (8008438 <ProcessMacCommands.constprop.0+0x3d0>)
                newChannelReq.NewChannel = &chParam;
 80082e0:	920a      	str	r2, [sp, #40]	; 0x28
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 80082e2:	3340      	adds	r3, #64	; 0x40
 80082e4:	7818      	ldrb	r0, [r3, #0]
 80082e6:	f002 fe84 	bl	800aff2 <RegionNewChannelReq>
 80082ea:	b2c3      	uxtb	r3, r0
                chParam.DrRange.Value = payload[macIndex++];
 80082ec:	b2ed      	uxtb	r5, r5
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 80082ee:	7033      	strb	r3, [r6, #0]
                if( ( int8_t )status >= 0 )
 80082f0:	2800      	cmp	r0, #0
 80082f2:	da00      	bge.n	80082f6 <ProcessMacCommands.constprop.0+0x28e>
 80082f4:	e701      	b.n	80080fa <ProcessMacCommands.constprop.0+0x92>
                    macCmdPayload[0] = status;
 80082f6:	a908      	add	r1, sp, #32
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 80082f8:	2201      	movs	r2, #1
 80082fa:	2007      	movs	r0, #7
                    macCmdPayload[0] = status;
 80082fc:	700b      	strb	r3, [r1, #0]
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 80082fe:	e7cb      	b.n	8008298 <ProcessMacCommands.constprop.0+0x230>
                uint8_t delay = payload[macIndex++] & 0x0F;
 8008300:	230f      	movs	r3, #15
 8008302:	5d7a      	ldrb	r2, [r7, r5]
 8008304:	3402      	adds	r4, #2
 8008306:	401a      	ands	r2, r3
 8008308:	b2e4      	uxtb	r4, r4
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800830a:	1c13      	adds	r3, r2, #0
 800830c:	2a00      	cmp	r2, #0
 800830e:	d100      	bne.n	8008312 <ProcessMacCommands.constprop.0+0x2aa>
 8008310:	2301      	movs	r3, #1
 8008312:	b2da      	uxtb	r2, r3
 8008314:	23fa      	movs	r3, #250	; 0xfa
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8008316:	21fa      	movs	r1, #250	; 0xfa
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 8008318:	009b      	lsls	r3, r3, #2
 800831a:	4353      	muls	r3, r2
 800831c:	4a46      	ldr	r2, [pc, #280]	; (8008438 <ProcessMacCommands.constprop.0+0x3d0>)
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800831e:	0089      	lsls	r1, r1, #2
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 8008320:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8008322:	185b      	adds	r3, r3, r1
 8008324:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8008326:	a908      	add	r1, sp, #32
 8008328:	2200      	movs	r2, #0
 800832a:	2008      	movs	r0, #8
 800832c:	f001 ff9e 	bl	800a26c <LoRaMacCommandsAddCmd>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8008330:	2310      	movs	r3, #16
 8008332:	493e      	ldr	r1, [pc, #248]	; (800842c <ProcessMacCommands.constprop.0+0x3c4>)
 8008334:	4a43      	ldr	r2, [pc, #268]	; (8008444 <ProcessMacCommands.constprop.0+0x3dc>)
 8008336:	5c88      	ldrb	r0, [r1, r2]
 8008338:	4303      	orrs	r3, r0
 800833a:	548b      	strb	r3, [r1, r2]
 800833c:	e751      	b.n	80081e2 <ProcessMacCommands.constprop.0+0x17a>
                uint8_t eirpDwellTime = payload[macIndex++];
 800833e:	3402      	adds	r4, #2
 8008340:	b2e3      	uxtb	r3, r4
 8008342:	9304      	str	r3, [sp, #16]
 8008344:	5d7b      	ldrb	r3, [r7, r5]
                txParamSetupReq.UplinkDwellTime = 0;
 8008346:	2200      	movs	r2, #0
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8008348:	0019      	movs	r1, r3
                txParamSetupReq.UplinkDwellTime = 0;
 800834a:	ad09      	add	r5, sp, #36	; 0x24
 800834c:	702a      	strb	r2, [r5, #0]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800834e:	3220      	adds	r2, #32
 8008350:	4011      	ands	r1, r2
 8008352:	4213      	tst	r3, r2
 8008354:	d13d      	bne.n	80083d2 <ProcessMacCommands.constprop.0+0x36a>
                txParamSetupReq.DownlinkDwellTime = 0;
 8008356:	7069      	strb	r1, [r5, #1]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8008358:	06da      	lsls	r2, r3, #27
 800835a:	d501      	bpl.n	8008360 <ProcessMacCommands.constprop.0+0x2f8>
                    txParamSetupReq.UplinkDwellTime = 1;
 800835c:	2201      	movs	r2, #1
 800835e:	702a      	strb	r2, [r5, #0]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8008360:	220f      	movs	r2, #15
 8008362:	4013      	ands	r3, r2
 8008364:	70ab      	strb	r3, [r5, #2]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8008366:	4b38      	ldr	r3, [pc, #224]	; (8008448 <ProcessMacCommands.constprop.0+0x3e0>)
 8008368:	0029      	movs	r1, r5
 800836a:	7818      	ldrb	r0, [r3, #0]
 800836c:	4c32      	ldr	r4, [pc, #200]	; (8008438 <ProcessMacCommands.constprop.0+0x3d0>)
 800836e:	f002 fe4a 	bl	800b006 <RegionTxParamSetupReq>
 8008372:	1c43      	adds	r3, r0, #1
 8008374:	d02b      	beq.n	80083ce <ProcessMacCommands.constprop.0+0x366>
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8008376:	0023      	movs	r3, r4
 8008378:	782e      	ldrb	r6, [r5, #0]
 800837a:	3374      	adds	r3, #116	; 0x74
 800837c:	701e      	strb	r6, [r3, #0]
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800837e:	0023      	movs	r3, r4
 8008380:	786a      	ldrb	r2, [r5, #1]
 8008382:	3375      	adds	r3, #117	; 0x75
 8008384:	701a      	strb	r2, [r3, #0]
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8008386:	78ab      	ldrb	r3, [r5, #2]
 8008388:	4a30      	ldr	r2, [pc, #192]	; (800844c <ProcessMacCommands.constprop.0+0x3e4>)
 800838a:	5cd0      	ldrb	r0, [r2, r3]
 800838c:	f7f8 fec8 	bl	8001120 <__aeabi_ui2f>
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8008390:	2128      	movs	r1, #40	; 0x28
 8008392:	2302      	movs	r3, #2
 8008394:	aa04      	add	r2, sp, #16
 8008396:	1852      	adds	r2, r2, r1
 8008398:	7013      	strb	r3, [r2, #0]
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800839a:	222a      	movs	r2, #42	; 0x2a
 800839c:	ab04      	add	r3, sp, #16
 800839e:	189b      	adds	r3, r3, r2
 80083a0:	701e      	strb	r6, [r3, #0]
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80083a2:	4b29      	ldr	r3, [pc, #164]	; (8008448 <ProcessMacCommands.constprop.0+0x3e0>)
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 80083a4:	67a0      	str	r0, [r4, #120]	; 0x78
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80083a6:	7818      	ldrb	r0, [r3, #0]
 80083a8:	a90e      	add	r1, sp, #56	; 0x38
 80083aa:	f002 fdad 	bl	800af08 <RegionGetPhyParam>
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 80083ae:	2100      	movs	r1, #0
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80083b0:	900a      	str	r0, [sp, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 80083b2:	3439      	adds	r4, #57	; 0x39
 80083b4:	5661      	ldrsb	r1, [r4, r1]
 80083b6:	1c03      	adds	r3, r0, #0
 80083b8:	b240      	sxtb	r0, r0
 80083ba:	7822      	ldrb	r2, [r4, #0]
 80083bc:	4288      	cmp	r0, r1
 80083be:	da00      	bge.n	80083c2 <ProcessMacCommands.constprop.0+0x35a>
 80083c0:	1c13      	adds	r3, r2, #0
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 80083c2:	2200      	movs	r2, #0
 80083c4:	2009      	movs	r0, #9
 80083c6:	a908      	add	r1, sp, #32
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 80083c8:	7023      	strb	r3, [r4, #0]
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 80083ca:	f001 ff4f 	bl	800a26c <LoRaMacCommandsAddCmd>
                uint8_t eirpDwellTime = payload[macIndex++];
 80083ce:	9d04      	ldr	r5, [sp, #16]
 80083d0:	e693      	b.n	80080fa <ProcessMacCommands.constprop.0+0x92>
                    txParamSetupReq.DownlinkDwellTime = 1;
 80083d2:	2201      	movs	r2, #1
 80083d4:	706a      	strb	r2, [r5, #1]
 80083d6:	e7bf      	b.n	8008358 <ProcessMacCommands.constprop.0+0x2f0>
                status = 0x03;
 80083d8:	260d      	movs	r6, #13
 80083da:	ab04      	add	r3, sp, #16
 80083dc:	18f6      	adds	r6, r6, r3
 80083de:	2303      	movs	r3, #3
 80083e0:	7033      	strb	r3, [r6, #0]
                dlChannelReq.ChannelId = payload[macIndex++];
 80083e2:	5d7b      	ldrb	r3, [r7, r5]
 80083e4:	a90e      	add	r1, sp, #56	; 0x38
 80083e6:	700b      	strb	r3, [r1, #0]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80083e8:	1d22      	adds	r2, r4, #4
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 80083ea:	1ce3      	adds	r3, r4, #3
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80083ec:	b2db      	uxtb	r3, r3
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80083ee:	b2d2      	uxtb	r2, r2
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80083f0:	5cfb      	ldrb	r3, [r7, r3]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80083f2:	5cba      	ldrb	r2, [r7, r2]
 80083f4:	1d65      	adds	r5, r4, #5
                dlChannelReq.ChannelId = payload[macIndex++];
 80083f6:	3402      	adds	r4, #2
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80083f8:	0412      	lsls	r2, r2, #16
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80083fa:	021b      	lsls	r3, r3, #8
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 80083fc:	b2e4      	uxtb	r4, r4
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80083fe:	4313      	orrs	r3, r2
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8008400:	5d3a      	ldrb	r2, [r7, r4]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008402:	b2ed      	uxtb	r5, r5
 8008404:	4313      	orrs	r3, r2
                dlChannelReq.Rx1Frequency *= 100;
 8008406:	2264      	movs	r2, #100	; 0x64
 8008408:	4353      	muls	r3, r2
 800840a:	604b      	str	r3, [r1, #4]
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800840c:	4b0a      	ldr	r3, [pc, #40]	; (8008438 <ProcessMacCommands.constprop.0+0x3d0>)
 800840e:	3340      	adds	r3, #64	; 0x40
 8008410:	7818      	ldrb	r0, [r3, #0]
 8008412:	f002 fe02 	bl	800b01a <RegionDlChannelReq>
 8008416:	b2c3      	uxtb	r3, r0
 8008418:	7033      	strb	r3, [r6, #0]
                if( ( int8_t )status >= 0 )
 800841a:	2800      	cmp	r0, #0
 800841c:	da00      	bge.n	8008420 <ProcessMacCommands.constprop.0+0x3b8>
 800841e:	e66c      	b.n	80080fa <ProcessMacCommands.constprop.0+0x92>
                    macCmdPayload[0] = status;
 8008420:	a908      	add	r1, sp, #32
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8008422:	2201      	movs	r2, #1
 8008424:	200a      	movs	r0, #10
                    macCmdPayload[0] = status;
 8008426:	700b      	strb	r3, [r1, #0]
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8008428:	e718      	b.n	800825c <ProcessMacCommands.constprop.0+0x1f4>
 800842a:	46c0      	nop			; (mov r8, r8)
 800842c:	200009d0 	.word	0x200009d0
 8008430:	00000454 	.word	0x00000454
 8008434:	00000455 	.word	0x00000455
 8008438:	20000684 	.word	0x20000684
 800843c:	200006bd 	.word	0x200006bd
 8008440:	200006bc 	.word	0x200006bc
 8008444:	00000481 	.word	0x00000481
 8008448:	200006c4 	.word	0x200006c4
 800844c:	0800e9c7 	.word	0x0800e9c7
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8008450:	200a      	movs	r0, #10
 8008452:	f002 f8ad 	bl	800a5b0 <LoRaMacConfirmQueueIsCmdActive>
 8008456:	2800      	cmp	r0, #0
 8008458:	d100      	bne.n	800845c <ProcessMacCommands.constprop.0+0x3f4>
 800845a:	e64e      	b.n	80080fa <ProcessMacCommands.constprop.0+0x92>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800845c:	210a      	movs	r1, #10
 800845e:	2000      	movs	r0, #0
 8008460:	f002 f862 	bl	800a528 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t sysTime = { 0 };
 8008464:	231e      	movs	r3, #30
 8008466:	aa04      	add	r2, sp, #16
 8008468:	189b      	adds	r3, r3, r2
 800846a:	2200      	movs	r2, #0
 800846c:	801a      	strh	r2, [r3, #0]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800846e:	1ca3      	adds	r3, r4, #2
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8008470:	b2db      	uxtb	r3, r3
 8008472:	5cfe      	ldrb	r6, [r7, r3]
 8008474:	1ce3      	adds	r3, r4, #3
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8008476:	b2db      	uxtb	r3, r3
 8008478:	5cf9      	ldrb	r1, [r7, r3]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800847a:	0236      	lsls	r6, r6, #8
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800847c:	0409      	lsls	r1, r1, #16
 800847e:	430e      	orrs	r6, r1
 8008480:	1d23      	adds	r3, r4, #4
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8008482:	5d79      	ldrb	r1, [r7, r5]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8008484:	b2db      	uxtb	r3, r3
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8008486:	430e      	orrs	r6, r1
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8008488:	5cf9      	ldrb	r1, [r7, r3]
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800848a:	23fa      	movs	r3, #250	; 0xfa
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800848c:	1da5      	adds	r5, r4, #6
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800848e:	3405      	adds	r4, #5
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8008490:	b2e4      	uxtb	r4, r4
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8008492:	5d3a      	ldrb	r2, [r7, r4]
 8008494:	009b      	lsls	r3, r3, #2
 8008496:	4353      	muls	r3, r2
                    sysTime = gpsEpochTime;
 8008498:	aa04      	add	r2, sp, #16
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800849a:	121b      	asrs	r3, r3, #8
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800849c:	0609      	lsls	r1, r1, #24
                    sysTime = gpsEpochTime;
 800849e:	8393      	strh	r3, [r2, #28]
                    sysTimeCurrent = SysTimeGet( );
 80084a0:	a80e      	add	r0, sp, #56	; 0x38
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 80084a2:	430e      	orrs	r6, r1
                    sysTimeCurrent = SysTimeGet( );
 80084a4:	f005 fc92 	bl	800ddcc <SysTimeGet>
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 80084a8:	4b41      	ldr	r3, [pc, #260]	; (80085b0 <ProcessMacCommands.constprop.0+0x548>)
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 80084aa:	4c42      	ldr	r4, [pc, #264]	; (80085b4 <ProcessMacCommands.constprop.0+0x54c>)
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 80084ac:	18f1      	adds	r1, r6, r3
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 80084ae:	23cf      	movs	r3, #207	; 0xcf
 80084b0:	009b      	lsls	r3, r3, #2
 80084b2:	18e3      	adds	r3, r4, r3
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80084b8:	9300      	str	r3, [sp, #0]
 80084ba:	23ce      	movs	r3, #206	; 0xce
 80084bc:	009b      	lsls	r3, r3, #2
 80084be:	58e3      	ldr	r3, [r4, r3]
 80084c0:	a80c      	add	r0, sp, #48	; 0x30
 80084c2:	910a      	str	r1, [sp, #40]	; 0x28
 80084c4:	f005 fc44 	bl	800dd50 <SysTimeSub>
 80084c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80084cc:	990e      	ldr	r1, [sp, #56]	; 0x38
 80084ce:	9300      	str	r3, [sp, #0]
 80084d0:	a80a      	add	r0, sp, #40	; 0x28
 80084d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084d4:	f005 fc22 	bl	800dd1c <SysTimeAdd>
                    SysTimeSet( sysTime );
 80084d8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80084da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80084dc:	f005 fc4e 	bl	800dd7c <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 80084e0:	f001 feaf 	bl	800a242 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 80084e4:	2201      	movs	r2, #1
 80084e6:	4b34      	ldr	r3, [pc, #208]	; (80085b8 <ProcessMacCommands.constprop.0+0x550>)
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 80084e8:	b2ed      	uxtb	r5, r5
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 80084ea:	54e2      	strb	r2, [r4, r3]
 80084ec:	e605      	b.n	80080fa <ProcessMacCommands.constprop.0+0x92>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 80084ee:	200d      	movs	r0, #13
 80084f0:	f002 f85e 	bl	800a5b0 <LoRaMacConfirmQueueIsCmdActive>
 80084f4:	2800      	cmp	r0, #0
 80084f6:	d100      	bne.n	80084fa <ProcessMacCommands.constprop.0+0x492>
 80084f8:	e5ff      	b.n	80080fa <ProcessMacCommands.constprop.0+0x92>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 80084fa:	210d      	movs	r1, #13
 80084fc:	2000      	movs	r0, #0
 80084fe:	f002 f813 	bl	800a528 <LoRaMacConfirmQueueSetStatus>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8008502:	2390      	movs	r3, #144	; 0x90
 8008504:	4a2b      	ldr	r2, [pc, #172]	; (80085b4 <ProcessMacCommands.constprop.0+0x54c>)
 8008506:	00db      	lsls	r3, r3, #3
 8008508:	5cd3      	ldrb	r3, [r2, r3]
 800850a:	3b04      	subs	r3, #4
 800850c:	2b01      	cmp	r3, #1
 800850e:	d800      	bhi.n	8008512 <ProcessMacCommands.constprop.0+0x4aa>
 8008510:	e5f3      	b.n	80080fa <ProcessMacCommands.constprop.0+0x92>
                        LoRaMacClassBPingSlotInfoAns( );
 8008512:	f001 fe92 	bl	800a23a <LoRaMacClassBPingSlotInfoAns>
 8008516:	e5f0      	b.n	80080fa <ProcessMacCommands.constprop.0+0x92>
                frequency = ( uint32_t )payload[macIndex++];
 8008518:	1ca3      	adds	r3, r4, #2
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800851a:	b2db      	uxtb	r3, r3
 800851c:	5cf9      	ldrb	r1, [r7, r3]
 800851e:	1ce3      	adds	r3, r4, #3
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8008520:	b2db      	uxtb	r3, r3
 8008522:	5cfb      	ldrb	r3, [r7, r3]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8008524:	0209      	lsls	r1, r1, #8
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8008526:	041b      	lsls	r3, r3, #16
 8008528:	4319      	orrs	r1, r3
                frequency *= 100;
 800852a:	2364      	movs	r3, #100	; 0x64
                frequency = ( uint32_t )payload[macIndex++];
 800852c:	5d7a      	ldrb	r2, [r7, r5]
                datarate = payload[macIndex++] & 0x0F;
 800852e:	1d65      	adds	r5, r4, #5
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8008530:	3404      	adds	r4, #4
                datarate = payload[macIndex++] & 0x0F;
 8008532:	b2e4      	uxtb	r4, r4
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8008534:	4311      	orrs	r1, r2
                datarate = payload[macIndex++] & 0x0F;
 8008536:	5d38      	ldrb	r0, [r7, r4]
                frequency *= 100;
 8008538:	4359      	muls	r1, r3
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800853a:	3b55      	subs	r3, #85	; 0x55
 800853c:	4018      	ands	r0, r3
 800853e:	f001 fe7d 	bl	800a23c <LoRaMacClassBPingSlotChannelReq>
                macCmdPayload[0] = status;
 8008542:	a908      	add	r1, sp, #32
 8008544:	7008      	strb	r0, [r1, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 8008546:	2201      	movs	r2, #1
 8008548:	2011      	movs	r0, #17
                datarate = payload[macIndex++] & 0x0F;
 800854a:	b2ed      	uxtb	r5, r5
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 800854c:	e6a4      	b.n	8008298 <ProcessMacCommands.constprop.0+0x230>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800854e:	200e      	movs	r0, #14
 8008550:	f002 f82e 	bl	800a5b0 <LoRaMacConfirmQueueIsCmdActive>
 8008554:	2800      	cmp	r0, #0
 8008556:	d100      	bne.n	800855a <ProcessMacCommands.constprop.0+0x4f2>
 8008558:	e5cf      	b.n	80080fa <ProcessMacCommands.constprop.0+0x92>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800855a:	210e      	movs	r1, #14
 800855c:	2000      	movs	r0, #0
 800855e:	f001 ffe3 	bl	800a528 <LoRaMacConfirmQueueSetStatus>
                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8008562:	1ca3      	adds	r3, r4, #2
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8008564:	b2db      	uxtb	r3, r3
 8008566:	5cf8      	ldrb	r0, [r7, r3]
 8008568:	5d7b      	ldrb	r3, [r7, r5]
 800856a:	0200      	lsls	r0, r0, #8
 800856c:	4318      	orrs	r0, r3
                    beaconTimingChannel = payload[macIndex++];
 800856e:	1d25      	adds	r5, r4, #4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8008570:	4b12      	ldr	r3, [pc, #72]	; (80085bc <ProcessMacCommands.constprop.0+0x554>)
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8008572:	3403      	adds	r4, #3
                    beaconTimingChannel = payload[macIndex++];
 8008574:	b2e4      	uxtb	r4, r4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8008576:	5d39      	ldrb	r1, [r7, r4]
 8008578:	685a      	ldr	r2, [r3, #4]
                    beaconTimingChannel = payload[macIndex++];
 800857a:	b2ed      	uxtb	r5, r5
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800857c:	f001 fe60 	bl	800a240 <LoRaMacClassBBeaconTimingAns>
 8008580:	e5bb      	b.n	80080fa <ProcessMacCommands.constprop.0+0x92>
                    frequency = ( uint32_t )payload[macIndex++];
 8008582:	5d7a      	ldrb	r2, [r7, r5]
 8008584:	1ca3      	adds	r3, r4, #2
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8008586:	1d25      	adds	r5, r4, #4
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8008588:	3403      	adds	r4, #3
 800858a:	b2db      	uxtb	r3, r3
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800858c:	b2e4      	uxtb	r4, r4
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800858e:	5cf8      	ldrb	r0, [r7, r3]
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8008590:	5d3b      	ldrb	r3, [r7, r4]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8008592:	0200      	lsls	r0, r0, #8
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8008594:	041b      	lsls	r3, r3, #16
 8008596:	4318      	orrs	r0, r3
                    frequency *= 100;
 8008598:	2364      	movs	r3, #100	; 0x64
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800859a:	4310      	orrs	r0, r2
                    frequency *= 100;
 800859c:	4358      	muls	r0, r3
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800859e:	f001 fe51 	bl	800a244 <LoRaMacClassBBeaconFreqReq>
 80085a2:	a908      	add	r1, sp, #32
 80085a4:	7008      	strb	r0, [r1, #0]
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 80085a6:	2201      	movs	r2, #1
 80085a8:	2013      	movs	r0, #19
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 80085aa:	b2ed      	uxtb	r5, r5
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 80085ac:	e674      	b.n	8008298 <ProcessMacCommands.constprop.0+0x230>
 80085ae:	46c0      	nop			; (mov r8, r8)
 80085b0:	12d53d80 	.word	0x12d53d80
 80085b4:	200009d0 	.word	0x200009d0
 80085b8:	00000434 	.word	0x00000434
 80085bc:	2000066c 	.word	0x2000066c

080085c0 <StopRetransmission.isra.0>:
    return false;
}

static bool StopRetransmission( void )
{
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80085c0:	4b0f      	ldr	r3, [pc, #60]	; (8008600 <StopRetransmission.isra.0+0x40>)
 80085c2:	4a10      	ldr	r2, [pc, #64]	; (8008604 <StopRetransmission.isra.0+0x44>)
 80085c4:	5c9a      	ldrb	r2, [r3, r2]
 80085c6:	0792      	lsls	r2, r2, #30
 80085c8:	d503      	bpl.n	80085d2 <StopRetransmission.isra.0+0x12>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 80085ca:	4a0f      	ldr	r2, [pc, #60]	; (8008608 <StopRetransmission.isra.0+0x48>)
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80085cc:	5c9a      	ldrb	r2, [r3, r2]
 80085ce:	2a01      	cmp	r2, #1
 80085d0:	d908      	bls.n	80085e4 <StopRetransmission.isra.0+0x24>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 80085d2:	4a0e      	ldr	r2, [pc, #56]	; (800860c <StopRetransmission.isra.0+0x4c>)
 80085d4:	0011      	movs	r1, r2
 80085d6:	31fe      	adds	r1, #254	; 0xfe
 80085d8:	7809      	ldrb	r1, [r1, #0]
 80085da:	2900      	cmp	r1, #0
 80085dc:	d002      	beq.n	80085e4 <StopRetransmission.isra.0+0x24>
        {
            Nvm.MacGroup1.AdrAckCounter++;
 80085de:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80085e0:	3101      	adds	r1, #1
 80085e2:	6291      	str	r1, [r2, #40]	; 0x28
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 80085e4:	2182      	movs	r1, #130	; 0x82
 80085e6:	2200      	movs	r2, #0
 80085e8:	00c9      	lsls	r1, r1, #3
 80085ea:	545a      	strb	r2, [r3, r1]
    MacCtx.NodeAckRequested = false;
 80085ec:	4908      	ldr	r1, [pc, #32]	; (8008610 <StopRetransmission.isra.0+0x50>)
 80085ee:	545a      	strb	r2, [r3, r1]
    MacCtx.AckTimeoutRetry = false;
 80085f0:	4908      	ldr	r1, [pc, #32]	; (8008614 <StopRetransmission.isra.0+0x54>)
 80085f2:	545a      	strb	r2, [r3, r1]
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80085f4:	39d3      	subs	r1, #211	; 0xd3
 80085f6:	5858      	ldr	r0, [r3, r1]
 80085f8:	3202      	adds	r2, #2
 80085fa:	4390      	bics	r0, r2
 80085fc:	5058      	str	r0, [r3, r1]

    return true;
}
 80085fe:	4770      	bx	lr
 8008600:	200009d0 	.word	0x200009d0
 8008604:	00000481 	.word	0x00000481
 8008608:	0000047f 	.word	0x0000047f
 800860c:	20000684 	.word	0x20000684
 8008610:	00000414 	.word	0x00000414
 8008614:	00000413 	.word	0x00000413

08008618 <OnTxDelayedTimerEvent>:
{
 8008618:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 800861a:	4811      	ldr	r0, [pc, #68]	; (8008660 <OnTxDelayedTimerEvent+0x48>)
 800861c:	f005 fcd2 	bl	800dfc4 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8008620:	22d0      	movs	r2, #208	; 0xd0
 8008622:	2320      	movs	r3, #32
 8008624:	4c0f      	ldr	r4, [pc, #60]	; (8008664 <OnTxDelayedTimerEvent+0x4c>)
 8008626:	0092      	lsls	r2, r2, #2
 8008628:	58a1      	ldr	r1, [r4, r2]
    switch( ScheduleTx( true ) )
 800862a:	2001      	movs	r0, #1
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800862c:	4399      	bics	r1, r3
 800862e:	50a1      	str	r1, [r4, r2]
    switch( ScheduleTx( true ) )
 8008630:	f7ff fa34 	bl	8007a9c <ScheduleTx>
 8008634:	2800      	cmp	r0, #0
 8008636:	d011      	beq.n	800865c <OnTxDelayedTimerEvent+0x44>
 8008638:	280b      	cmp	r0, #11
 800863a:	d00f      	beq.n	800865c <OnTxDelayedTimerEvent+0x44>
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800863c:	2009      	movs	r0, #9
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800863e:	4b0a      	ldr	r3, [pc, #40]	; (8008668 <OnTxDelayedTimerEvent+0x50>)
 8008640:	3339      	adds	r3, #57	; 0x39
 8008642:	781a      	ldrb	r2, [r3, #0]
 8008644:	4b09      	ldr	r3, [pc, #36]	; (800866c <OnTxDelayedTimerEvent+0x54>)
 8008646:	54e2      	strb	r2, [r4, r3]
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8008648:	4b09      	ldr	r3, [pc, #36]	; (8008670 <OnTxDelayedTimerEvent+0x58>)
 800864a:	5ce2      	ldrb	r2, [r4, r3]
 800864c:	4b09      	ldr	r3, [pc, #36]	; (8008674 <OnTxDelayedTimerEvent+0x5c>)
 800864e:	54e2      	strb	r2, [r4, r3]
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8008650:	4b09      	ldr	r3, [pc, #36]	; (8008678 <OnTxDelayedTimerEvent+0x60>)
 8008652:	54e0      	strb	r0, [r4, r3]
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 8008654:	f001 ff8e 	bl	800a574 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 8008658:	f7ff ffb2 	bl	80085c0 <StopRetransmission.isra.0>
}
 800865c:	bd10      	pop	{r4, pc}
 800865e:	46c0      	nop			; (mov r8, r8)
 8008660:	20000d38 	.word	0x20000d38
 8008664:	200009d0 	.word	0x200009d0
 8008668:	20000684 	.word	0x20000684
 800866c:	0000043a 	.word	0x0000043a
 8008670:	00000412 	.word	0x00000412
 8008674:	0000043d 	.word	0x0000043d
 8008678:	00000439 	.word	0x00000439

0800867c <LoRaMacIsBusy>:
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800867c:	22d0      	movs	r2, #208	; 0xd0
 800867e:	4b06      	ldr	r3, [pc, #24]	; (8008698 <LoRaMacIsBusy+0x1c>)
 8008680:	0092      	lsls	r2, r2, #2
 8008682:	589a      	ldr	r2, [r3, r2]
    return true;
 8008684:	2001      	movs	r0, #1
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8008686:	2a00      	cmp	r2, #0
 8008688:	d105      	bne.n	8008696 <LoRaMacIsBusy+0x1a>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800868a:	4a04      	ldr	r2, [pc, #16]	; (800869c <LoRaMacIsBusy+0x20>)
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800868c:	5c98      	ldrb	r0, [r3, r2]
 800868e:	3801      	subs	r0, #1
 8008690:	1e43      	subs	r3, r0, #1
 8008692:	4198      	sbcs	r0, r3
 8008694:	b2c0      	uxtb	r0, r0
}
 8008696:	4770      	bx	lr
 8008698:	200009d0 	.word	0x200009d0
 800869c:	00000482 	.word	0x00000482

080086a0 <LoRaMacProcess>:
{
 80086a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086a2:	b0a9      	sub	sp, #164	; 0xa4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086a4:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80086a8:	b672      	cpsid	i
    LoRaMacRadioEvents.Value = 0;
 80086aa:	2100      	movs	r1, #0
    events = LoRaMacRadioEvents;
 80086ac:	4ede      	ldr	r6, [pc, #888]	; (8008a28 <LoRaMacProcess+0x388>)
 80086ae:	6833      	ldr	r3, [r6, #0]
    LoRaMacRadioEvents.Value = 0;
 80086b0:	6031      	str	r1, [r6, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086b2:	f382 8810 	msr	PRIMASK, r2
    if( events.Value != 0 )
 80086b6:	428b      	cmp	r3, r1
 80086b8:	d100      	bne.n	80086bc <LoRaMacProcess+0x1c>
 80086ba:	e0e5      	b.n	8008888 <LoRaMacProcess+0x1e8>
        if( events.Events.TxDone == 1 )
 80086bc:	b2da      	uxtb	r2, r3
 80086be:	9205      	str	r2, [sp, #20]
 80086c0:	06db      	lsls	r3, r3, #27
 80086c2:	d56e      	bpl.n	80087a2 <LoRaMacProcess+0x102>
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80086c4:	4cd9      	ldr	r4, [pc, #868]	; (8008a2c <LoRaMacProcess+0x38c>)
 80086c6:	0023      	movs	r3, r4
 80086c8:	33fc      	adds	r3, #252	; 0xfc
 80086ca:	781b      	ldrb	r3, [r3, #0]
 80086cc:	2b02      	cmp	r3, #2
 80086ce:	d003      	beq.n	80086d8 <LoRaMacProcess+0x38>
        Radio.Sleep( );
 80086d0:	4bd7      	ldr	r3, [pc, #860]	; (8008a30 <LoRaMacProcess+0x390>)
 80086d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d4:	9302      	str	r3, [sp, #8]
 80086d6:	4798      	blx	r3
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 80086d8:	23ec      	movs	r3, #236	; 0xec
 80086da:	4fd6      	ldr	r7, [pc, #856]	; (8008a34 <LoRaMacProcess+0x394>)
 80086dc:	4dd6      	ldr	r5, [pc, #856]	; (8008a38 <LoRaMacProcess+0x398>)
 80086de:	009b      	lsls	r3, r3, #2
 80086e0:	58e9      	ldr	r1, [r5, r3]
 80086e2:	0038      	movs	r0, r7
 80086e4:	f005 fd04 	bl	800e0f0 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 80086e8:	0038      	movs	r0, r7
 80086ea:	f005 fcbf 	bl	800e06c <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 80086ee:	23ed      	movs	r3, #237	; 0xed
 80086f0:	4fd2      	ldr	r7, [pc, #840]	; (8008a3c <LoRaMacProcess+0x39c>)
 80086f2:	009b      	lsls	r3, r3, #2
 80086f4:	58e9      	ldr	r1, [r5, r3]
 80086f6:	0038      	movs	r0, r7
 80086f8:	f005 fcfa 	bl	800e0f0 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 80086fc:	0038      	movs	r0, r7
 80086fe:	f005 fcb5 	bl	800e06c <UTIL_TIMER_Start>
    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 8008702:	0023      	movs	r3, r4
 8008704:	33fc      	adds	r3, #252	; 0xfc
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	2b02      	cmp	r3, #2
 800870a:	d003      	beq.n	8008714 <LoRaMacProcess+0x74>
 800870c:	4bcc      	ldr	r3, [pc, #816]	; (8008a40 <LoRaMacProcess+0x3a0>)
 800870e:	5ceb      	ldrb	r3, [r5, r3]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d013      	beq.n	800873c <LoRaMacProcess+0x9c>
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 8008714:	2316      	movs	r3, #22
 8008716:	a912      	add	r1, sp, #72	; 0x48
 8008718:	700b      	strb	r3, [r1, #0]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800871a:	0023      	movs	r3, r4
 800871c:	3340      	adds	r3, #64	; 0x40
 800871e:	7818      	ldrb	r0, [r3, #0]
 8008720:	f002 fbf2 	bl	800af08 <RegionGetPhyParam>
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8008724:	23ed      	movs	r3, #237	; 0xed
 8008726:	009b      	lsls	r3, r3, #2
 8008728:	58e9      	ldr	r1, [r5, r3]
 800872a:	4dc6      	ldr	r5, [pc, #792]	; (8008a44 <LoRaMacProcess+0x3a4>)
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800872c:	9010      	str	r0, [sp, #64]	; 0x40
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800872e:	1809      	adds	r1, r1, r0
 8008730:	0028      	movs	r0, r5
 8008732:	f005 fcdd 	bl	800e0f0 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 8008736:	0028      	movs	r0, r5
 8008738:	f005 fc98 	bl	800e06c <UTIL_TIMER_Start>
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800873c:	6973      	ldr	r3, [r6, #20]
    txDone.Channel = MacCtx.Channel;
 800873e:	4fbe      	ldr	r7, [pc, #760]	; (8008a38 <LoRaMacProcess+0x398>)
 8008740:	4ac1      	ldr	r2, [pc, #772]	; (8008a48 <LoRaMacProcess+0x3a8>)
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 8008742:	62e3      	str	r3, [r4, #44]	; 0x2c
    txDone.Channel = MacCtx.Channel;
 8008744:	5cba      	ldrb	r2, [r7, r2]
 8008746:	ad1c      	add	r5, sp, #112	; 0x70
 8008748:	702a      	strb	r2, [r5, #0]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800874a:	a80e      	add	r0, sp, #56	; 0x38
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800874c:	606b      	str	r3, [r5, #4]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800874e:	f005 fb69 	bl	800de24 <SysTimeGetMcuTime>
 8008752:	0023      	movs	r3, r4
 8008754:	3309      	adds	r3, #9
 8008756:	33ff      	adds	r3, #255	; 0xff
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	ae08      	add	r6, sp, #32
 800875c:	9300      	str	r3, [sp, #0]
 800875e:	2382      	movs	r3, #130	; 0x82
 8008760:	005b      	lsls	r3, r3, #1
 8008762:	58e3      	ldr	r3, [r4, r3]
 8008764:	0030      	movs	r0, r6
 8008766:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008768:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800876a:	f005 faf1 	bl	800dd50 <SysTimeSub>
 800876e:	ab1f      	add	r3, sp, #124	; 0x7c
 8008770:	ce06      	ldmia	r6!, {r1, r2}
 8008772:	c306      	stmia	r3!, {r1, r2}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 8008774:	2383      	movs	r3, #131	; 0x83
 8008776:	00db      	lsls	r3, r3, #3
 8008778:	58fb      	ldr	r3, [r7, r3]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800877a:	34ff      	adds	r4, #255	; 0xff
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800877c:	60ab      	str	r3, [r5, #8]
    txDone.Joined  = true;
 800877e:	2301      	movs	r3, #1
 8008780:	706b      	strb	r3, [r5, #1]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8008782:	7c63      	ldrb	r3, [r4, #17]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d100      	bne.n	800878a <LoRaMacProcess+0xea>
        txDone.Joined  = false;
 8008788:	706b      	strb	r3, [r5, #1]
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800878a:	4ba8      	ldr	r3, [pc, #672]	; (8008a2c <LoRaMacProcess+0x38c>)
 800878c:	0029      	movs	r1, r5
 800878e:	3340      	adds	r3, #64	; 0x40
 8008790:	7818      	ldrb	r0, [r3, #0]
 8008792:	f002 fbc5 	bl	800af20 <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
 8008796:	4baa      	ldr	r3, [pc, #680]	; (8008a40 <LoRaMacProcess+0x3a0>)
 8008798:	5cfb      	ldrb	r3, [r7, r3]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d101      	bne.n	80087a2 <LoRaMacProcess+0x102>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800879e:	4aab      	ldr	r2, [pc, #684]	; (8008a4c <LoRaMacProcess+0x3ac>)
 80087a0:	54bb      	strb	r3, [r7, r2]
        if( events.Events.RxDone == 1 )
 80087a2:	9b05      	ldr	r3, [sp, #20]
 80087a4:	071b      	lsls	r3, r3, #28
 80087a6:	d541      	bpl.n	800882c <LoRaMacProcess+0x18c>
    uint8_t *payload = RxDoneParams.Payload;
 80087a8:	4b9f      	ldr	r3, [pc, #636]	; (8008a28 <LoRaMacProcess+0x388>)
    uint32_t address = Nvm.MacGroup2.DevAddr;
 80087aa:	4fa0      	ldr	r7, [pc, #640]	; (8008a2c <LoRaMacProcess+0x38c>)
    uint16_t size = RxDoneParams.Size;
 80087ac:	899a      	ldrh	r2, [r3, #12]
    uint8_t *payload = RxDoneParams.Payload;
 80087ae:	689d      	ldr	r5, [r3, #8]
    uint16_t size = RxDoneParams.Size;
 80087b0:	9202      	str	r2, [sp, #8]
    int16_t rssi = RxDoneParams.Rssi;
 80087b2:	220e      	movs	r2, #14
 80087b4:	5e9c      	ldrsh	r4, [r3, r2]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 80087b6:	003a      	movs	r2, r7
    int8_t snr = RxDoneParams.Snr;
 80087b8:	7c1b      	ldrb	r3, [r3, #16]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 80087ba:	32cc      	adds	r2, #204	; 0xcc
    int8_t snr = RxDoneParams.Snr;
 80087bc:	b25b      	sxtb	r3, r3
 80087be:	9303      	str	r3, [sp, #12]
    uint32_t downLinkCounter = 0;
 80087c0:	2300      	movs	r3, #0
    uint32_t address = Nvm.MacGroup2.DevAddr;
 80087c2:	6812      	ldr	r2, [r2, #0]
    MacCtx.McpsConfirm.AckReceived = false;
 80087c4:	4e9c      	ldr	r6, [pc, #624]	; (8008a38 <LoRaMacProcess+0x398>)
    uint32_t address = Nvm.MacGroup2.DevAddr;
 80087c6:	9207      	str	r2, [sp, #28]
    MacCtx.McpsConfirm.AckReceived = false;
 80087c8:	4aa1      	ldr	r2, [pc, #644]	; (8008a50 <LoRaMacProcess+0x3b0>)
    MacCtx.RxStatus.Snr = snr;
 80087ca:	9903      	ldr	r1, [sp, #12]
    MacCtx.McpsConfirm.AckReceived = false;
 80087cc:	54b3      	strb	r3, [r6, r2]
    MacCtx.RxStatus.Rssi = rssi;
 80087ce:	4aa1      	ldr	r2, [pc, #644]	; (8008a54 <LoRaMacProcess+0x3b4>)
    uint32_t downLinkCounter = 0;
 80087d0:	930b      	str	r3, [sp, #44]	; 0x2c
    MacCtx.RxStatus.Rssi = rssi;
 80087d2:	52b4      	strh	r4, [r6, r2]
    MacCtx.RxStatus.Snr = snr;
 80087d4:	4aa0      	ldr	r2, [pc, #640]	; (8008a58 <LoRaMacProcess+0x3b8>)
 80087d6:	54b1      	strb	r1, [r6, r2]
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 80087d8:	3202      	adds	r2, #2
 80087da:	5cb2      	ldrb	r2, [r6, r2]
 80087dc:	499f      	ldr	r1, [pc, #636]	; (8008a5c <LoRaMacProcess+0x3bc>)
 80087de:	5472      	strb	r2, [r6, r1]
    MacCtx.McpsIndication.Multicast = 0;
 80087e0:	4a9f      	ldr	r2, [pc, #636]	; (8008a60 <LoRaMacProcess+0x3c0>)
 80087e2:	52b3      	strh	r3, [r6, r2]
    MacCtx.McpsIndication.FramePending = 0;
 80087e4:	4a9f      	ldr	r2, [pc, #636]	; (8008a64 <LoRaMacProcess+0x3c4>)
 80087e6:	54b3      	strb	r3, [r6, r2]
    MacCtx.McpsIndication.Buffer = NULL;
 80087e8:	4a9f      	ldr	r2, [pc, #636]	; (8008a68 <LoRaMacProcess+0x3c8>)
 80087ea:	50b3      	str	r3, [r6, r2]
    MacCtx.McpsIndication.BufferSize = 0;
 80087ec:	3204      	adds	r2, #4
 80087ee:	52b3      	strh	r3, [r6, r2]
    MacCtx.McpsIndication.AckReceived = false;
 80087f0:	4a9e      	ldr	r2, [pc, #632]	; (8008a6c <LoRaMacProcess+0x3cc>)
 80087f2:	54b3      	strb	r3, [r6, r2]
    MacCtx.McpsIndication.DownLinkCounter = 0;
 80087f4:	4a9e      	ldr	r2, [pc, #632]	; (8008a70 <LoRaMacProcess+0x3d0>)
 80087f6:	50b3      	str	r3, [r6, r2]
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 80087f8:	4a9e      	ldr	r2, [pc, #632]	; (8008a74 <LoRaMacProcess+0x3d4>)
 80087fa:	54b3      	strb	r3, [r6, r2]
    MacCtx.McpsIndication.DevAddress = 0;
 80087fc:	3214      	adds	r2, #20
 80087fe:	50b3      	str	r3, [r6, r2]
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8008800:	4a9d      	ldr	r2, [pc, #628]	; (8008a78 <LoRaMacProcess+0x3d8>)
 8008802:	54b3      	strb	r3, [r6, r2]
    Radio.Sleep( );
 8008804:	4b8a      	ldr	r3, [pc, #552]	; (8008a30 <LoRaMacProcess+0x390>)
 8008806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008808:	9304      	str	r3, [sp, #16]
 800880a:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 800880c:	488b      	ldr	r0, [pc, #556]	; (8008a3c <LoRaMacProcess+0x39c>)
 800880e:	f005 fbd9 	bl	800dfc4 <UTIL_TIMER_Stop>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 8008812:	0028      	movs	r0, r5
 8008814:	9902      	ldr	r1, [sp, #8]
 8008816:	f001 fcfd 	bl	800a214 <LoRaMacClassBRxBeacon>
 800881a:	9004      	str	r0, [sp, #16]
 800881c:	2800      	cmp	r0, #0
 800881e:	d100      	bne.n	8008822 <LoRaMacProcess+0x182>
 8008820:	e186      	b.n	8008b30 <LoRaMacProcess+0x490>
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 8008822:	4b96      	ldr	r3, [pc, #600]	; (8008a7c <LoRaMacProcess+0x3dc>)
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 8008824:	9a03      	ldr	r2, [sp, #12]
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 8008826:	52f4      	strh	r4, [r6, r3]
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 8008828:	4b95      	ldr	r3, [pc, #596]	; (8008a80 <LoRaMacProcess+0x3e0>)
 800882a:	54f2      	strb	r2, [r6, r3]
        if( events.Events.TxTimeout == 1 )
 800882c:	9b05      	ldr	r3, [sp, #20]
 800882e:	075b      	lsls	r3, r3, #29
 8008830:	d51c      	bpl.n	800886c <LoRaMacProcess+0x1cc>
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8008832:	4b7e      	ldr	r3, [pc, #504]	; (8008a2c <LoRaMacProcess+0x38c>)
 8008834:	33fc      	adds	r3, #252	; 0xfc
 8008836:	781b      	ldrb	r3, [r3, #0]
 8008838:	2b02      	cmp	r3, #2
 800883a:	d003      	beq.n	8008844 <LoRaMacProcess+0x1a4>
        Radio.Sleep( );
 800883c:	4b7c      	ldr	r3, [pc, #496]	; (8008a30 <LoRaMacProcess+0x390>)
 800883e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008840:	9302      	str	r3, [sp, #8]
 8008842:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 8008844:	f7fe ff04 	bl	8007650 <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8008848:	2002      	movs	r0, #2
 800884a:	4c7b      	ldr	r4, [pc, #492]	; (8008a38 <LoRaMacProcess+0x398>)
 800884c:	4b7f      	ldr	r3, [pc, #508]	; (8008a4c <LoRaMacProcess+0x3ac>)
 800884e:	54e0      	strb	r0, [r4, r3]
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8008850:	f001 fe90 	bl	800a574 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 8008854:	4b7a      	ldr	r3, [pc, #488]	; (8008a40 <LoRaMacProcess+0x3a0>)
 8008856:	5ce3      	ldrb	r3, [r4, r3]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d002      	beq.n	8008862 <LoRaMacProcess+0x1c2>
        MacCtx.AckTimeoutRetry = true;
 800885c:	2201      	movs	r2, #1
 800885e:	4b89      	ldr	r3, [pc, #548]	; (8008a84 <LoRaMacProcess+0x3e4>)
 8008860:	54e2      	strb	r2, [r4, r3]
    MacCtx.MacFlags.Bits.MacDone = 1;
 8008862:	2320      	movs	r3, #32
 8008864:	4988      	ldr	r1, [pc, #544]	; (8008a88 <LoRaMacProcess+0x3e8>)
 8008866:	5c62      	ldrb	r2, [r4, r1]
 8008868:	4313      	orrs	r3, r2
 800886a:	5463      	strb	r3, [r4, r1]
        if( events.Events.RxError == 1 )
 800886c:	9b05      	ldr	r3, [sp, #20]
 800886e:	079b      	lsls	r3, r3, #30
 8008870:	d503      	bpl.n	800887a <LoRaMacProcess+0x1da>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 8008872:	2106      	movs	r1, #6
 8008874:	2005      	movs	r0, #5
 8008876:	f7fe ff5f 	bl	8007738 <HandleRadioRxErrorTimeout>
        if( events.Events.RxTimeout == 1 )
 800887a:	9b05      	ldr	r3, [sp, #20]
 800887c:	07db      	lsls	r3, r3, #31
 800887e:	d503      	bpl.n	8008888 <LoRaMacProcess+0x1e8>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8008880:	2104      	movs	r1, #4
 8008882:	2003      	movs	r0, #3
 8008884:	f7fe ff58 	bl	8007738 <HandleRadioRxErrorTimeout>
    LoRaMacClassBProcess( );
 8008888:	f001 fce1 	bl	800a24e <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800888c:	4c6a      	ldr	r4, [pc, #424]	; (8008a38 <LoRaMacProcess+0x398>)
 800888e:	4b7e      	ldr	r3, [pc, #504]	; (8008a88 <LoRaMacProcess+0x3e8>)
 8008890:	5ce2      	ldrb	r2, [r4, r3]
 8008892:	0693      	lsls	r3, r2, #26
 8008894:	d400      	bmi.n	8008898 <LoRaMacProcess+0x1f8>
 8008896:	e115      	b.n	8008ac4 <LoRaMacProcess+0x424>
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8008898:	21d0      	movs	r1, #208	; 0xd0
    MacCtx.AllowRequests = requestState;
 800889a:	2300      	movs	r3, #0
 800889c:	4d7b      	ldr	r5, [pc, #492]	; (8008a8c <LoRaMacProcess+0x3ec>)
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800889e:	0089      	lsls	r1, r1, #2
    MacCtx.AllowRequests = requestState;
 80088a0:	5563      	strb	r3, [r4, r5]
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 80088a2:	5863      	ldr	r3, [r4, r1]
 80088a4:	0618      	lsls	r0, r3, #24
 80088a6:	d502      	bpl.n	80088ae <LoRaMacProcess+0x20e>
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80088a8:	2082      	movs	r0, #130	; 0x82
 80088aa:	4383      	bics	r3, r0
 80088ac:	5063      	str	r3, [r4, r1]
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}

static uint8_t IsRequestPending( void )
{
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 80088ae:	2305      	movs	r3, #5
 80088b0:	421a      	tst	r2, r3
 80088b2:	d100      	bne.n	80088b6 <LoRaMacProcess+0x216>
 80088b4:	e38f      	b.n	8008fd6 <LoRaMacProcess+0x936>
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 80088b6:	200c      	movs	r0, #12
 80088b8:	f001 fe7a 	bl	800a5b0 <LoRaMacConfirmQueueIsCmdActive>
 80088bc:	2800      	cmp	r0, #0
 80088be:	d100      	bne.n	80088c2 <LoRaMacProcess+0x222>
 80088c0:	e389      	b.n	8008fd6 <LoRaMacProcess+0x936>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 80088c2:	4b71      	ldr	r3, [pc, #452]	; (8008a88 <LoRaMacProcess+0x3e8>)
 80088c4:	5ce3      	ldrb	r3, [r4, r3]
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 80088c6:	07da      	lsls	r2, r3, #31
 80088c8:	d500      	bpl.n	80088cc <LoRaMacProcess+0x22c>
 80088ca:	e384      	b.n	8008fd6 <LoRaMacProcess+0x936>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 80088cc:	075b      	lsls	r3, r3, #29
 80088ce:	d400      	bmi.n	80088d2 <LoRaMacProcess+0x232>
 80088d0:	e398      	b.n	8009004 <LoRaMacProcess+0x964>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80088d2:	22d0      	movs	r2, #208	; 0xd0
 80088d4:	2302      	movs	r3, #2
 80088d6:	0092      	lsls	r2, r2, #2
 80088d8:	58a1      	ldr	r1, [r4, r2]
 80088da:	4399      	bics	r1, r3
 80088dc:	50a1      	str	r1, [r4, r2]
    if( MacCtx.MacState == LORAMAC_IDLE )
 80088de:	23d0      	movs	r3, #208	; 0xd0
 80088e0:	009b      	lsls	r3, r3, #2
 80088e2:	58e3      	ldr	r3, [r4, r3]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d000      	beq.n	80088ea <LoRaMacProcess+0x24a>
 80088e8:	e0ea      	b.n	8008ac0 <LoRaMacProcess+0x420>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 80088ea:	4a67      	ldr	r2, [pc, #412]	; (8008a88 <LoRaMacProcess+0x3e8>)
 80088ec:	3301      	adds	r3, #1
 80088ee:	5ca7      	ldrb	r7, [r4, r2]
 80088f0:	0039      	movs	r1, r7
 80088f2:	4019      	ands	r1, r3
 80088f4:	421f      	tst	r7, r3
 80088f6:	d002      	beq.n	80088fe <LoRaMacProcess+0x25e>
            MacCtx.MacFlags.Bits.McpsReq = 0;
 80088f8:	0038      	movs	r0, r7
 80088fa:	4398      	bics	r0, r3
 80088fc:	54a0      	strb	r0, [r4, r2]
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 80088fe:	2204      	movs	r2, #4
 8008900:	4861      	ldr	r0, [pc, #388]	; (8008a88 <LoRaMacProcess+0x3e8>)
 8008902:	5c23      	ldrb	r3, [r4, r0]
 8008904:	4213      	tst	r3, r2
 8008906:	d001      	beq.n	800890c <LoRaMacProcess+0x26c>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8008908:	4393      	bics	r3, r2
 800890a:	5423      	strb	r3, [r4, r0]
    MacCtx.AllowRequests = requestState;
 800890c:	2301      	movs	r3, #1
 800890e:	5563      	strb	r3, [r4, r5]
        if( reqEvents.Bits.McpsReq == 1 )
 8008910:	2900      	cmp	r1, #0
 8008912:	d005      	beq.n	8008920 <LoRaMacProcess+0x280>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 8008914:	23d1      	movs	r3, #209	; 0xd1
 8008916:	009b      	lsls	r3, r3, #2
 8008918:	58e3      	ldr	r3, [r4, r3]
 800891a:	485d      	ldr	r0, [pc, #372]	; (8008a90 <LoRaMacProcess+0x3f0>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 8008920:	2604      	movs	r6, #4
 8008922:	4237      	tst	r7, r6
 8008924:	d00a      	beq.n	800893c <LoRaMacProcess+0x29c>
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 8008926:	485b      	ldr	r0, [pc, #364]	; (8008a94 <LoRaMacProcess+0x3f4>)
 8008928:	f001 fe4e 	bl	800a5c8 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800892c:	f001 fe78 	bl	800a620 <LoRaMacConfirmQueueGetCnt>
 8008930:	2800      	cmp	r0, #0
 8008932:	d003      	beq.n	800893c <LoRaMacProcess+0x29c>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 8008934:	4a54      	ldr	r2, [pc, #336]	; (8008a88 <LoRaMacProcess+0x3e8>)
 8008936:	5ca3      	ldrb	r3, [r4, r2]
 8008938:	431e      	orrs	r6, r3
 800893a:	54a6      	strb	r6, [r4, r2]
        LoRaMacClassBResumeBeaconing( );
 800893c:	f001 fc76 	bl	800a22c <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 8008940:	2220      	movs	r2, #32
 8008942:	4e51      	ldr	r6, [pc, #324]	; (8008a88 <LoRaMacProcess+0x3e8>)
 8008944:	5da3      	ldrb	r3, [r4, r6]
 8008946:	4393      	bics	r3, r2
 8008948:	55a3      	strb	r3, [r4, r6]
    if( MacCtx.MacState == LORAMAC_IDLE )
 800894a:	23d0      	movs	r3, #208	; 0xd0
 800894c:	009b      	lsls	r3, r3, #2
 800894e:	58e3      	ldr	r3, [r4, r3]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d000      	beq.n	8008956 <LoRaMacProcess+0x2b6>
 8008954:	e0b4      	b.n	8008ac0 <LoRaMacProcess+0x420>
        bool isStickyMacCommandPending = false;
 8008956:	2758      	movs	r7, #88	; 0x58
 8008958:	aa06      	add	r2, sp, #24
 800895a:	19d2      	adds	r2, r2, r7
 800895c:	7013      	strb	r3, [r2, #0]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800895e:	a81c      	add	r0, sp, #112	; 0x70
 8008960:	f001 fd5c 	bl	800a41c <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 8008964:	ab06      	add	r3, sp, #24
 8008966:	19db      	adds	r3, r3, r7
 8008968:	781b      	ldrb	r3, [r3, #0]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d003      	beq.n	8008976 <LoRaMacProcess+0x2d6>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 800896e:	2310      	movs	r3, #16
 8008970:	5da2      	ldrb	r2, [r4, r6]
 8008972:	4313      	orrs	r3, r2
 8008974:	55a3      	strb	r3, [r4, r6]
    if( MacCtx.MacState != LORAMAC_IDLE )
 8008976:	23d0      	movs	r3, #208	; 0xd0
 8008978:	009b      	lsls	r3, r3, #2
 800897a:	58e6      	ldr	r6, [r4, r3]
 800897c:	2e00      	cmp	r6, #0
 800897e:	d000      	beq.n	8008982 <LoRaMacProcess+0x2e2>
 8008980:	e09e      	b.n	8008ac0 <LoRaMacProcess+0x420>
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 8008982:	4f2a      	ldr	r7, [pc, #168]	; (8008a2c <LoRaMacProcess+0x38c>)
 8008984:	2124      	movs	r1, #36	; 0x24
 8008986:	0038      	movs	r0, r7
 8008988:	f003 fc94 	bl	800c2b4 <Crc32>
    if( crc != nvmData->Crypto.Crc32 )
 800898c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800898e:	4298      	cmp	r0, r3
 8008990:	d001      	beq.n	8008996 <LoRaMacProcess+0x2f6>
        nvmData->Crypto.Crc32 = crc;
 8008992:	6278      	str	r0, [r7, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 8008994:	3601      	adds	r6, #1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 8008996:	2114      	movs	r1, #20
 8008998:	483f      	ldr	r0, [pc, #252]	; (8008a98 <LoRaMacProcess+0x3f8>)
 800899a:	f003 fc8b 	bl	800c2b4 <Crc32>
    if( crc != nvmData->MacGroup1.Crc32 )
 800899e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089a0:	4298      	cmp	r0, r3
 80089a2:	d002      	beq.n	80089aa <LoRaMacProcess+0x30a>
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 80089a4:	2302      	movs	r3, #2
        nvmData->MacGroup1.Crc32 = crc;
 80089a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 80089a8:	431e      	orrs	r6, r3
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 80089aa:	21d4      	movs	r1, #212	; 0xd4
 80089ac:	483b      	ldr	r0, [pc, #236]	; (8008a9c <LoRaMacProcess+0x3fc>)
 80089ae:	f003 fc81 	bl	800c2b4 <Crc32>
    if( crc != nvmData->MacGroup2.Crc32 )
 80089b2:	003b      	movs	r3, r7
 80089b4:	33fc      	adds	r3, #252	; 0xfc
 80089b6:	699a      	ldr	r2, [r3, #24]
 80089b8:	4290      	cmp	r0, r2
 80089ba:	d002      	beq.n	80089c2 <LoRaMacProcess+0x322>
        nvmData->MacGroup2.Crc32 = crc;
 80089bc:	6198      	str	r0, [r3, #24]
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 80089be:	2304      	movs	r3, #4
 80089c0:	431e      	orrs	r6, r3
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 80089c2:	21bc      	movs	r1, #188	; 0xbc
 80089c4:	4836      	ldr	r0, [pc, #216]	; (8008aa0 <LoRaMacProcess+0x400>)
 80089c6:	f003 fc75 	bl	800c2b4 <Crc32>
    if( crc != nvmData->SecureElement.Crc32 )
 80089ca:	23ea      	movs	r3, #234	; 0xea
 80089cc:	005b      	lsls	r3, r3, #1
 80089ce:	58fa      	ldr	r2, [r7, r3]
 80089d0:	4290      	cmp	r0, r2
 80089d2:	d003      	beq.n	80089dc <LoRaMacProcess+0x33c>
        nvmData->SecureElement.Crc32 = crc;
 80089d4:	50f8      	str	r0, [r7, r3]
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 80089d6:	3bcd      	subs	r3, #205	; 0xcd
 80089d8:	3bff      	subs	r3, #255	; 0xff
 80089da:	431e      	orrs	r6, r3
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 80089dc:	2190      	movs	r1, #144	; 0x90
 80089de:	4831      	ldr	r0, [pc, #196]	; (8008aa4 <LoRaMacProcess+0x404>)
 80089e0:	f003 fc68 	bl	800c2b4 <Crc32>
    if( crc != nvmData->RegionGroup1.Crc32 )
 80089e4:	239a      	movs	r3, #154	; 0x9a
 80089e6:	009b      	lsls	r3, r3, #2
 80089e8:	58fa      	ldr	r2, [r7, r3]
 80089ea:	4290      	cmp	r0, r2
 80089ec:	d002      	beq.n	80089f4 <LoRaMacProcess+0x354>
        nvmData->RegionGroup1.Crc32 = crc;
 80089ee:	50f8      	str	r0, [r7, r3]
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 80089f0:	2310      	movs	r3, #16
 80089f2:	431e      	orrs	r6, r3
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 80089f4:	21c4      	movs	r1, #196	; 0xc4
 80089f6:	482c      	ldr	r0, [pc, #176]	; (8008aa8 <LoRaMacProcess+0x408>)
 80089f8:	f003 fc5c 	bl	800c2b4 <Crc32>
    if( crc != nvmData->RegionGroup2.Crc32 )
 80089fc:	23cc      	movs	r3, #204	; 0xcc
 80089fe:	009b      	lsls	r3, r3, #2
 8008a00:	58fa      	ldr	r2, [r7, r3]
 8008a02:	4290      	cmp	r0, r2
 8008a04:	d002      	beq.n	8008a0c <LoRaMacProcess+0x36c>
        nvmData->RegionGroup2.Crc32 = crc;
 8008a06:	50f8      	str	r0, [r7, r3]
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 8008a08:	2320      	movs	r3, #32
 8008a0a:	431e      	orrs	r6, r3
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 8008a0c:	2114      	movs	r1, #20
 8008a0e:	4827      	ldr	r0, [pc, #156]	; (8008aac <LoRaMacProcess+0x40c>)
 8008a10:	f003 fc50 	bl	800c2b4 <Crc32>
    if( crc != nvmData->ClassB.Crc32 )
 8008a14:	23d2      	movs	r3, #210	; 0xd2
 8008a16:	009b      	lsls	r3, r3, #2
 8008a18:	58fa      	ldr	r2, [r7, r3]
 8008a1a:	4290      	cmp	r0, r2
 8008a1c:	d048      	beq.n	8008ab0 <LoRaMacProcess+0x410>
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 8008a1e:	2240      	movs	r2, #64	; 0x40
        nvmData->ClassB.Crc32 = crc;
 8008a20:	50f8      	str	r0, [r7, r3]
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 8008a22:	4316      	orrs	r6, r2
 8008a24:	e044      	b.n	8008ab0 <LoRaMacProcess+0x410>
 8008a26:	46c0      	nop			; (mov r8, r8)
 8008a28:	2000066c 	.word	0x2000066c
 8008a2c:	20000684 	.word	0x20000684
 8008a30:	0800eb54 	.word	0x0800eb54
 8008a34:	20000d50 	.word	0x20000d50
 8008a38:	200009d0 	.word	0x200009d0
 8008a3c:	20000d68 	.word	0x20000d68
 8008a40:	00000414 	.word	0x00000414
 8008a44:	20000dc8 	.word	0x20000dc8
 8008a48:	00000415 	.word	0x00000415
 8008a4c:	00000439 	.word	0x00000439
 8008a50:	0000043c 	.word	0x0000043c
 8008a54:	0000047c 	.word	0x0000047c
 8008a58:	0000047e 	.word	0x0000047e
 8008a5c:	0000047f 	.word	0x0000047f
 8008a60:	0000041e 	.word	0x0000041e
 8008a64:	00000421 	.word	0x00000421
 8008a68:	00000424 	.word	0x00000424
 8008a6c:	0000042a 	.word	0x0000042a
 8008a70:	0000042c 	.word	0x0000042c
 8008a74:	0000041c 	.word	0x0000041c
 8008a78:	00000434 	.word	0x00000434
 8008a7c:	00000472 	.word	0x00000472
 8008a80:	00000474 	.word	0x00000474
 8008a84:	00000413 	.word	0x00000413
 8008a88:	00000481 	.word	0x00000481
 8008a8c:	00000482 	.word	0x00000482
 8008a90:	20000e08 	.word	0x20000e08
 8008a94:	20000e1c 	.word	0x20000e1c
 8008a98:	200006ac 	.word	0x200006ac
 8008a9c:	200006c4 	.word	0x200006c4
 8008aa0:	2000079c 	.word	0x2000079c
 8008aa4:	2000085c 	.word	0x2000085c
 8008aa8:	200008f0 	.word	0x200008f0
 8008aac:	200009b8 	.word	0x200009b8
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8008ab0:	58e3      	ldr	r3, [r4, r3]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d004      	beq.n	8008ac0 <LoRaMacProcess+0x420>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8008ab6:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d001      	beq.n	8008ac0 <LoRaMacProcess+0x420>
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8008abc:	0030      	movs	r0, r6
 8008abe:	4798      	blx	r3
    MacCtx.AllowRequests = requestState;
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	5563      	strb	r3, [r4, r5]
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 8008ac4:	2208      	movs	r2, #8
 8008ac6:	49c9      	ldr	r1, [pc, #804]	; (8008dec <LoRaMacProcess+0x74c>)
 8008ac8:	5c63      	ldrb	r3, [r4, r1]
 8008aca:	4213      	tst	r3, r2
 8008acc:	d008      	beq.n	8008ae0 <LoRaMacProcess+0x440>
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8008ace:	4393      	bics	r3, r2
 8008ad0:	5463      	strb	r3, [r4, r1]
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 8008ad2:	23d1      	movs	r3, #209	; 0xd1
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	58e3      	ldr	r3, [r4, r3]
 8008ad8:	49c5      	ldr	r1, [pc, #788]	; (8008df0 <LoRaMacProcess+0x750>)
 8008ada:	68db      	ldr	r3, [r3, #12]
 8008adc:	48c5      	ldr	r0, [pc, #788]	; (8008df4 <LoRaMacProcess+0x754>)
 8008ade:	4798      	blx	r3
    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 8008ae0:	2510      	movs	r5, #16
 8008ae2:	4ec2      	ldr	r6, [pc, #776]	; (8008dec <LoRaMacProcess+0x74c>)
 8008ae4:	5da3      	ldrb	r3, [r4, r6]
 8008ae6:	422b      	tst	r3, r5
 8008ae8:	d00b      	beq.n	8008b02 <LoRaMacProcess+0x462>
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 8008aea:	2307      	movs	r3, #7
 8008aec:	a81c      	add	r0, sp, #112	; 0x70
 8008aee:	8003      	strh	r3, [r0, #0]
        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication, &MacCtx.RxStatus );
 8008af0:	23d1      	movs	r3, #209	; 0xd1
 8008af2:	009b      	lsls	r3, r3, #2
 8008af4:	58e3      	ldr	r3, [r4, r3]
 8008af6:	49be      	ldr	r1, [pc, #760]	; (8008df0 <LoRaMacProcess+0x750>)
 8008af8:	68db      	ldr	r3, [r3, #12]
 8008afa:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 8008afc:	5da3      	ldrb	r3, [r4, r6]
 8008afe:	43ab      	bics	r3, r5
 8008b00:	55a3      	strb	r3, [r4, r6]
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8008b02:	2202      	movs	r2, #2
 8008b04:	49b9      	ldr	r1, [pc, #740]	; (8008dec <LoRaMacProcess+0x74c>)
 8008b06:	5c63      	ldrb	r3, [r4, r1]
 8008b08:	4213      	tst	r3, r2
 8008b0a:	d008      	beq.n	8008b1e <LoRaMacProcess+0x47e>
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8008b0c:	4393      	bics	r3, r2
 8008b0e:	5463      	strb	r3, [r4, r1]
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 8008b10:	23d1      	movs	r3, #209	; 0xd1
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	58e3      	ldr	r3, [r4, r3]
 8008b16:	49b6      	ldr	r1, [pc, #728]	; (8008df0 <LoRaMacProcess+0x750>)
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	48b7      	ldr	r0, [pc, #732]	; (8008df8 <LoRaMacProcess+0x758>)
 8008b1c:	4798      	blx	r3
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 8008b1e:	2390      	movs	r3, #144	; 0x90
 8008b20:	00db      	lsls	r3, r3, #3
 8008b22:	5ce3      	ldrb	r3, [r4, r3]
 8008b24:	2b02      	cmp	r3, #2
 8008b26:	d101      	bne.n	8008b2c <LoRaMacProcess+0x48c>
        OpenContinuousRxCWindow( );
 8008b28:	f7ff f968 	bl	8007dfc <OpenContinuousRxCWindow>
}
 8008b2c:	b029      	add	sp, #164	; 0xa4
 8008b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8008b30:	003b      	movs	r3, r7
 8008b32:	33fc      	adds	r3, #252	; 0xfc
 8008b34:	781b      	ldrb	r3, [r3, #0]
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	d10c      	bne.n	8008b54 <LoRaMacProcess+0x4b4>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8008b3a:	f001 fb6f 	bl	800a21c <LoRaMacClassBIsPingExpected>
 8008b3e:	1e04      	subs	r4, r0, #0
 8008b40:	d019      	beq.n	8008b76 <LoRaMacProcess+0x4d6>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008b42:	9804      	ldr	r0, [sp, #16]
 8008b44:	f001 fb5f 	bl	800a206 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8008b48:	9804      	ldr	r0, [sp, #16]
 8008b4a:	f001 fb61 	bl	800a210 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8008b4e:	2304      	movs	r3, #4
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8008b50:	4aaa      	ldr	r2, [pc, #680]	; (8008dfc <LoRaMacProcess+0x75c>)
 8008b52:	54b3      	strb	r3, [r6, r2]
    macHdr.Value = payload[pktHeaderLen++];
 8008b54:	782b      	ldrb	r3, [r5, #0]
 8008b56:	4caa      	ldr	r4, [pc, #680]	; (8008e00 <LoRaMacProcess+0x760>)
    switch( macHdr.Bits.MType )
 8008b58:	0958      	lsrs	r0, r3, #5
 8008b5a:	3801      	subs	r0, #1
    macHdr.Value = payload[pktHeaderLen++];
 8008b5c:	9306      	str	r3, [sp, #24]
    switch( macHdr.Bits.MType )
 8008b5e:	2806      	cmp	r0, #6
 8008b60:	d900      	bls.n	8008b64 <LoRaMacProcess+0x4c4>
 8008b62:	e22b      	b.n	8008fbc <LoRaMacProcess+0x91c>
 8008b64:	f7f7 faf6 	bl	8000154 <__gnu_thumb1_case_uhi>
 8008b68:	022a0013 	.word	0x022a0013
 8008b6c:	022a009b 	.word	0x022a009b
 8008b70:	022a0098 	.word	0x022a0098
 8008b74:	0215      	.short	0x0215
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8008b76:	f001 fb53 	bl	800a220 <LoRaMacClassBIsMulticastExpected>
 8008b7a:	2800      	cmp	r0, #0
 8008b7c:	d0ea      	beq.n	8008b54 <LoRaMacProcess+0x4b4>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008b7e:	0020      	movs	r0, r4
 8008b80:	f001 fb42 	bl	800a208 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8008b84:	0020      	movs	r0, r4
 8008b86:	f001 fb44 	bl	800a212 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8008b8a:	2305      	movs	r3, #5
 8008b8c:	e7e0      	b.n	8008b50 <LoRaMacProcess+0x4b0>
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 8008b8e:	9b02      	ldr	r3, [sp, #8]
 8008b90:	2b10      	cmp	r3, #16
 8008b92:	d806      	bhi.n	8008ba2 <LoRaMacProcess+0x502>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008b94:	2101      	movs	r1, #1
 8008b96:	4a9a      	ldr	r2, [pc, #616]	; (8008e00 <LoRaMacProcess+0x760>)
 8008b98:	4b9a      	ldr	r3, [pc, #616]	; (8008e04 <LoRaMacProcess+0x764>)
 8008b9a:	54d1      	strb	r1, [r2, r3]
                PrepareRxDoneAbort( );
 8008b9c:	f7fe fdae 	bl	80076fc <PrepareRxDoneAbort>
                return;
 8008ba0:	e644      	b.n	800882c <LoRaMacProcess+0x18c>
            macMsgJoinAccept.BufSize = size;
 8008ba2:	466b      	mov	r3, sp
            macMsgJoinAccept.Buffer = payload;
 8008ba4:	9512      	str	r5, [sp, #72]	; 0x48
            macMsgJoinAccept.BufSize = size;
 8008ba6:	7a1d      	ldrb	r5, [r3, #8]
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8008ba8:	003b      	movs	r3, r7
            macMsgJoinAccept.Buffer = payload;
 8008baa:	ae12      	add	r6, sp, #72	; 0x48
            macMsgJoinAccept.BufSize = size;
 8008bac:	7135      	strb	r5, [r6, #4]
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8008bae:	33ff      	adds	r3, #255	; 0xff
 8008bb0:	7c5b      	ldrb	r3, [r3, #17]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d1ee      	bne.n	8008b94 <LoRaMacProcess+0x4f4>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 8008bb6:	f7fe f80f 	bl	8006bd8 <SecureElementGetJoinEui>
 8008bba:	0032      	movs	r2, r6
 8008bbc:	0001      	movs	r1, r0
 8008bbe:	20ff      	movs	r0, #255	; 0xff
 8008bc0:	f001 ffe2 	bl	800ab88 <LoRaMacCryptoHandleJoinAccept>
            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 8008bc4:	2800      	cmp	r0, #0
 8008bc6:	d15f      	bne.n	8008c88 <LoRaMacProcess+0x5e8>
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8008bc8:	003a      	movs	r2, r7
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 8008bca:	7ab3      	ldrb	r3, [r6, #10]
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8008bcc:	7af1      	ldrb	r1, [r6, #11]
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 8008bce:	021b      	lsls	r3, r3, #8
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8008bd0:	0409      	lsls	r1, r1, #16
 8008bd2:	430b      	orrs	r3, r1
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 8008bd4:	7a71      	ldrb	r1, [r6, #9]
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8008bd6:	32c8      	adds	r2, #200	; 0xc8
 8008bd8:	430b      	orrs	r3, r1
 8008bda:	6013      	str	r3, [r2, #0]
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 8008bdc:	003b      	movs	r3, r7
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8008bde:	0039      	movs	r1, r7
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 8008be0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008be2:	33cc      	adds	r3, #204	; 0xcc
 8008be4:	601a      	str	r2, [r3, #0]
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8008be6:	7c33      	ldrb	r3, [r6, #16]
 8008be8:	3161      	adds	r1, #97	; 0x61
 8008bea:	065a      	lsls	r2, r3, #25
 8008bec:	0f52      	lsrs	r2, r2, #29
 8008bee:	700a      	strb	r2, [r1, #0]
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8008bf0:	003a      	movs	r2, r7
 8008bf2:	071b      	lsls	r3, r3, #28
 8008bf4:	0f1b      	lsrs	r3, r3, #28
 8008bf6:	3268      	adds	r2, #104	; 0x68
 8008bf8:	7013      	strb	r3, [r2, #0]
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8008bfa:	003a      	movs	r2, r7
 8008bfc:	3270      	adds	r2, #112	; 0x70
 8008bfe:	7013      	strb	r3, [r2, #0]
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 8008c00:	7c73      	ldrb	r3, [r6, #17]
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d03e      	beq.n	8008c84 <LoRaMacProcess+0x5e4>
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 8008c06:	653b      	str	r3, [r7, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 8008c08:	23fa      	movs	r3, #250	; 0xfa
 8008c0a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	4353      	muls	r3, r2
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8008c10:	22fa      	movs	r2, #250	; 0xfa
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 8008c12:	2600      	movs	r6, #0
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8008c14:	0092      	lsls	r2, r2, #2
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 8008c16:	653b      	str	r3, [r7, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8008c18:	189b      	adds	r3, r3, r2
 8008c1a:	657b      	str	r3, [r7, #84]	; 0x54
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 8008c1c:	4b7a      	ldr	r3, [pc, #488]	; (8008e08 <LoRaMacProcess+0x768>)
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8008c1e:	aa06      	add	r2, sp, #24
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 8008c20:	73de      	strb	r6, [r3, #15]
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8008c22:	2342      	movs	r3, #66	; 0x42
 8008c24:	189b      	adds	r3, r3, r2
 8008c26:	9310      	str	r3, [sp, #64]	; 0x40
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 8008c28:	003b      	movs	r3, r7
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8008c2a:	a910      	add	r1, sp, #64	; 0x40
                applyCFList.Size = size - 17;
 8008c2c:	3d11      	subs	r5, #17
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 8008c2e:	3340      	adds	r3, #64	; 0x40
                applyCFList.Size = size - 17;
 8008c30:	710d      	strb	r5, [r1, #4]
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 8008c32:	7818      	ldrb	r0, [r3, #0]
 8008c34:	f002 f98e 	bl	800af54 <RegionApplyCFList>
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8008c38:	2302      	movs	r3, #2
 8008c3a:	4a73      	ldr	r2, [pc, #460]	; (8008e08 <LoRaMacProcess+0x768>)
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8008c3c:	2001      	movs	r0, #1
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8008c3e:	7453      	strb	r3, [r2, #17]
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8008c40:	f001 fcb6 	bl	800a5b0 <LoRaMacConfirmQueueIsCmdActive>
 8008c44:	42b0      	cmp	r0, r6
 8008c46:	d003      	beq.n	8008c50 <LoRaMacProcess+0x5b0>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 8008c48:	2101      	movs	r1, #1
 8008c4a:	0030      	movs	r0, r6
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8008c4c:	f001 fc6c 	bl	800a528 <LoRaMacConfirmQueueSetStatus>
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 8008c50:	2308      	movs	r3, #8
 8008c52:	4966      	ldr	r1, [pc, #408]	; (8008dec <LoRaMacProcess+0x74c>)
 8008c54:	5c62      	ldrb	r2, [r4, r1]
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8008c56:	4313      	orrs	r3, r2
 8008c58:	5463      	strb	r3, [r4, r1]
    if( MacCtx.NodeAckRequested == true )
 8008c5a:	4c69      	ldr	r4, [pc, #420]	; (8008e00 <LoRaMacProcess+0x760>)
 8008c5c:	4b6b      	ldr	r3, [pc, #428]	; (8008e0c <LoRaMacProcess+0x76c>)
 8008c5e:	5ce3      	ldrb	r3, [r4, r3]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d100      	bne.n	8008c66 <LoRaMacProcess+0x5c6>
 8008c64:	e1b0      	b.n	8008fc8 <LoRaMacProcess+0x928>
        if( MacCtx.McpsConfirm.AckReceived == true )
 8008c66:	4b6a      	ldr	r3, [pc, #424]	; (8008e10 <LoRaMacProcess+0x770>)
 8008c68:	5ce3      	ldrb	r3, [r4, r3]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d002      	beq.n	8008c74 <LoRaMacProcess+0x5d4>
            OnAckTimeoutTimerEvent( NULL );
 8008c6e:	2000      	movs	r0, #0
 8008c70:	f7fe fd18 	bl	80076a4 <OnAckTimeoutTimerEvent>
    MacCtx.MacFlags.Bits.MacDone = 1;
 8008c74:	2320      	movs	r3, #32
 8008c76:	495d      	ldr	r1, [pc, #372]	; (8008dec <LoRaMacProcess+0x74c>)
 8008c78:	5c62      	ldrb	r2, [r4, r1]
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	5463      	strb	r3, [r4, r1]
    UpdateRxSlotIdleState( );
 8008c7e:	f7fe fce7 	bl	8007650 <UpdateRxSlotIdleState>
 8008c82:	e5d3      	b.n	800882c <LoRaMacProcess+0x18c>
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 8008c84:	2301      	movs	r3, #1
 8008c86:	e7be      	b.n	8008c06 <LoRaMacProcess+0x566>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8008c88:	2001      	movs	r0, #1
 8008c8a:	f001 fc91 	bl	800a5b0 <LoRaMacConfirmQueueIsCmdActive>
 8008c8e:	2800      	cmp	r0, #0
 8008c90:	d0de      	beq.n	8008c50 <LoRaMacProcess+0x5b0>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8008c92:	2101      	movs	r1, #1
 8008c94:	2007      	movs	r0, #7
 8008c96:	e7d9      	b.n	8008c4c <LoRaMacProcess+0x5ac>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8008c98:	2301      	movs	r3, #1
 8008c9a:	4a5e      	ldr	r2, [pc, #376]	; (8008e14 <LoRaMacProcess+0x774>)
 8008c9c:	54a3      	strb	r3, [r4, r2]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8008c9e:	4b5e      	ldr	r3, [pc, #376]	; (8008e18 <LoRaMacProcess+0x778>)
 8008ca0:	a90c      	add	r1, sp, #48	; 0x30
 8008ca2:	001a      	movs	r2, r3
 8008ca4:	3275      	adds	r2, #117	; 0x75
 8008ca6:	7812      	ldrb	r2, [r2, #0]
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 8008ca8:	4855      	ldr	r0, [pc, #340]	; (8008e00 <LoRaMacProcess+0x760>)
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8008caa:	708a      	strb	r2, [r1, #2]
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 8008cac:	2284      	movs	r2, #132	; 0x84
 8008cae:	00d2      	lsls	r2, r2, #3
 8008cb0:	5c82      	ldrb	r2, [r0, r2]
 8008cb2:	704a      	strb	r2, [r1, #1]
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 8008cb4:	220d      	movs	r2, #13
 8008cb6:	700a      	strb	r2, [r1, #0]
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8008cb8:	001a      	movs	r2, r3
 8008cba:	3280      	adds	r2, #128	; 0x80
 8008cbc:	7812      	ldrb	r2, [r2, #0]
 8008cbe:	2a00      	cmp	r2, #0
 8008cc0:	d001      	beq.n	8008cc6 <LoRaMacProcess+0x626>
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8008cc2:	220e      	movs	r2, #14
 8008cc4:	700a      	strb	r2, [r1, #0]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008cc6:	3340      	adds	r3, #64	; 0x40
 8008cc8:	7818      	ldrb	r0, [r3, #0]
 8008cca:	f002 f91d 	bl	800af08 <RegionGetPhyParam>
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 8008cce:	9a02      	ldr	r2, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008cd0:	900a      	str	r0, [sp, #40]	; 0x28
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 8008cd2:	3a0d      	subs	r2, #13
 8008cd4:	1c13      	adds	r3, r2, #0
 8008cd6:	0412      	lsls	r2, r2, #16
 8008cd8:	d500      	bpl.n	8008cdc <LoRaMacProcess+0x63c>
 8008cda:	2300      	movs	r3, #0
 8008cdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008cde:	b21b      	sxth	r3, r3
 8008ce0:	b212      	sxth	r2, r2
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	dd00      	ble.n	8008ce8 <LoRaMacProcess+0x648>
 8008ce6:	e755      	b.n	8008b94 <LoRaMacProcess+0x4f4>
 8008ce8:	9b02      	ldr	r3, [sp, #8]
 8008cea:	2b0b      	cmp	r3, #11
 8008cec:	d800      	bhi.n	8008cf0 <LoRaMacProcess+0x650>
 8008cee:	e751      	b.n	8008b94 <LoRaMacProcess+0x4f4>
            macMsgData.BufSize = size;
 8008cf0:	225c      	movs	r2, #92	; 0x5c
 8008cf2:	ab06      	add	r3, sp, #24
 8008cf4:	189b      	adds	r3, r3, r2
 8008cf6:	9a02      	ldr	r2, [sp, #8]
            macMsgData.Buffer = payload;
 8008cf8:	951c      	str	r5, [sp, #112]	; 0x70
            macMsgData.BufSize = size;
 8008cfa:	701a      	strb	r2, [r3, #0]
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8008cfc:	22ff      	movs	r2, #255	; 0xff
            macMsgData.FRMPayload = MacCtx.RxPayload;
 8008cfe:	4b47      	ldr	r3, [pc, #284]	; (8008e1c <LoRaMacProcess+0x77c>)
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8008d00:	a81c      	add	r0, sp, #112	; 0x70
            macMsgData.FRMPayload = MacCtx.RxPayload;
 8008d02:	9325      	str	r3, [sp, #148]	; 0x94
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8008d04:	ab26      	add	r3, sp, #152	; 0x98
 8008d06:	701a      	strb	r2, [r3, #0]
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8008d08:	f001 fffa 	bl	800ad00 <LoRaMacParserData>
 8008d0c:	9004      	str	r0, [sp, #16]
 8008d0e:	2800      	cmp	r0, #0
 8008d10:	d000      	beq.n	8008d14 <LoRaMacProcess+0x674>
 8008d12:	e73f      	b.n	8008b94 <LoRaMacProcess+0x4f4>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 8008d14:	2386      	movs	r3, #134	; 0x86
 8008d16:	4a3a      	ldr	r2, [pc, #232]	; (8008e00 <LoRaMacProcess+0x760>)
 8008d18:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008d1a:	00db      	lsls	r3, r3, #3
 8008d1c:	50d1      	str	r1, [r2, r3]
    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8008d1e:	2264      	movs	r2, #100	; 0x64
 8008d20:	ab06      	add	r3, sp, #24
 8008d22:	189b      	adds	r3, r3, r2
 8008d24:	781a      	ldrb	r2, [r3, #0]
 8008d26:	230f      	movs	r3, #15
 8008d28:	0010      	movs	r0, r2
 8008d2a:	4018      	ands	r0, r3
 8008d2c:	421a      	tst	r2, r3
 8008d2e:	d005      	beq.n	8008d3c <LoRaMacProcess+0x69c>
 8008d30:	334a      	adds	r3, #74	; 0x4a
 8008d32:	ac06      	add	r4, sp, #24
 8008d34:	191b      	adds	r3, r3, r4
 8008d36:	7fdb      	ldrb	r3, [r3, #31]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d151      	bne.n	8008de0 <LoRaMacProcess+0x740>
    else if( macMsg->FRMPayloadSize == 0 )
 8008d3c:	ab26      	add	r3, sp, #152	; 0x98
 8008d3e:	781b      	ldrb	r3, [r3, #0]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d04f      	beq.n	8008de4 <LoRaMacProcess+0x744>
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8008d44:	2800      	cmp	r0, #0
 8008d46:	d000      	beq.n	8008d4a <LoRaMacProcess+0x6aa>
 8008d48:	e724      	b.n	8008b94 <LoRaMacProcess+0x4f4>
 8008d4a:	2359      	movs	r3, #89	; 0x59
 8008d4c:	a806      	add	r0, sp, #24
 8008d4e:	181b      	adds	r3, r3, r0
 8008d50:	7fdb      	ldrb	r3, [r3, #31]
        *fType = FRAME_TYPE_D;
 8008d52:	1e58      	subs	r0, r3, #1
 8008d54:	4183      	sbcs	r3, r0
 8008d56:	3302      	adds	r3, #2
        *fType = FRAME_TYPE_B;
 8008d58:	9302      	str	r3, [sp, #8]
            downLinkCounter = 0;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	930b      	str	r3, [sp, #44]	; 0x2c
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8008d5e:	4b2e      	ldr	r3, [pc, #184]	; (8008e18 <LoRaMacProcess+0x778>)
 8008d60:	0018      	movs	r0, r3
 8008d62:	30d4      	adds	r0, #212	; 0xd4
 8008d64:	6800      	ldr	r0, [r0, #0]
 8008d66:	4281      	cmp	r1, r0
 8008d68:	d13e      	bne.n	8008de8 <LoRaMacProcess+0x748>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 8008d6a:	0019      	movs	r1, r3
 8008d6c:	31d2      	adds	r1, #210	; 0xd2
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8008d6e:	7809      	ldrb	r1, [r1, #0]
 8008d70:	2501      	movs	r5, #1
 8008d72:	2900      	cmp	r1, #0
 8008d74:	d01a      	beq.n	8008dac <LoRaMacProcess+0x70c>
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 8008d76:	0019      	movs	r1, r3
 8008d78:	31d3      	adds	r1, #211	; 0xd3
 8008d7a:	780d      	ldrb	r5, [r1, #0]
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 8008d7c:	0019      	movs	r1, r3
 8008d7e:	31f0      	adds	r1, #240	; 0xf0
 8008d80:	6809      	ldr	r1, [r1, #0]
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8008d82:	33fc      	adds	r3, #252	; 0xfc
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 8008d84:	6809      	ldr	r1, [r1, #0]
 8008d86:	910b      	str	r1, [sp, #44]	; 0x2c
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8008d88:	781b      	ldrb	r3, [r3, #0]
 8008d8a:	2b02      	cmp	r3, #2
 8008d8c:	d103      	bne.n	8008d96 <LoRaMacProcess+0x6f6>
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8008d8e:	2103      	movs	r1, #3
 8008d90:	4b1b      	ldr	r3, [pc, #108]	; (8008e00 <LoRaMacProcess+0x760>)
 8008d92:	4c1a      	ldr	r4, [pc, #104]	; (8008dfc <LoRaMacProcess+0x75c>)
 8008d94:	5519      	strb	r1, [r3, r4]
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8008d96:	9b02      	ldr	r3, [sp, #8]
 8008d98:	2b03      	cmp	r3, #3
 8008d9a:	d000      	beq.n	8008d9e <LoRaMacProcess+0x6fe>
 8008d9c:	e6fa      	b.n	8008b94 <LoRaMacProcess+0x4f4>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8008d9e:	2360      	movs	r3, #96	; 0x60
 8008da0:	421a      	tst	r2, r3
 8008da2:	d000      	beq.n	8008da6 <LoRaMacProcess+0x706>
 8008da4:	e6f6      	b.n	8008b94 <LoRaMacProcess+0x4f4>
 8008da6:	3b5f      	subs	r3, #95	; 0x5f
 8008da8:	9007      	str	r0, [sp, #28]
 8008daa:	9304      	str	r3, [sp, #16]
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 8008dac:	2315      	movs	r3, #21
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008dae:	4c1a      	ldr	r4, [pc, #104]	; (8008e18 <LoRaMacProcess+0x778>)
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 8008db0:	a90c      	add	r1, sp, #48	; 0x30
 8008db2:	700b      	strb	r3, [r1, #0]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008db4:	0023      	movs	r3, r4
 8008db6:	3340      	adds	r3, #64	; 0x40
 8008db8:	7818      	ldrb	r0, [r3, #0]
 8008dba:	f002 f8a5 	bl	800af08 <RegionGetPhyParam>
 8008dbe:	34ff      	adds	r4, #255	; 0xff
 8008dc0:	7be4      	ldrb	r4, [r4, #15]
 8008dc2:	4e10      	ldr	r6, [pc, #64]	; (8008e04 <LoRaMacProcess+0x764>)
 8008dc4:	900a      	str	r0, [sp, #40]	; 0x28
    switch( addrID )
 8008dc6:	2d00      	cmp	r5, #0
 8008dc8:	d02a      	beq.n	8008e20 <LoRaMacProcess+0x780>
 8008dca:	2d01      	cmp	r5, #1
 8008dcc:	d154      	bne.n	8008e78 <LoRaMacProcess+0x7d8>
            if( lrWanVersion.Fields.Minor == 1 )
 8008dce:	2c01      	cmp	r4, #1
 8008dd0:	d14d      	bne.n	8008e6e <LoRaMacProcess+0x7ce>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8008dd2:	9b02      	ldr	r3, [sp, #8]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d001      	beq.n	8008ddc <LoRaMacProcess+0x73c>
 8008dd8:	2b03      	cmp	r3, #3
 8008dda:	d122      	bne.n	8008e22 <LoRaMacProcess+0x782>
                    *fCntID = A_FCNT_DOWN;
 8008ddc:	2402      	movs	r4, #2
 8008dde:	e020      	b.n	8008e22 <LoRaMacProcess+0x782>
        *fType = FRAME_TYPE_A;
 8008de0:	9b04      	ldr	r3, [sp, #16]
 8008de2:	e7b9      	b.n	8008d58 <LoRaMacProcess+0x6b8>
        *fType = FRAME_TYPE_B;
 8008de4:	2301      	movs	r3, #1
 8008de6:	e7b7      	b.n	8008d58 <LoRaMacProcess+0x6b8>
 8008de8:	2501      	movs	r5, #1
 8008dea:	e7df      	b.n	8008dac <LoRaMacProcess+0x70c>
 8008dec:	00000481 	.word	0x00000481
 8008df0:	20000e4c 	.word	0x20000e4c
 8008df4:	20000e30 	.word	0x20000e30
 8008df8:	20000dec 	.word	0x20000dec
 8008dfc:	0000047f 	.word	0x0000047f
 8008e00:	200009d0 	.word	0x200009d0
 8008e04:	0000041d 	.word	0x0000041d
 8008e08:	20000783 	.word	0x20000783
 8008e0c:	00000414 	.word	0x00000414
 8008e10:	0000043c 	.word	0x0000043c
 8008e14:	0000041c 	.word	0x0000041c
 8008e18:	20000684 	.word	0x20000684
 8008e1c:	20000c08 	.word	0x20000c08
    switch( addrID )
 8008e20:	2404      	movs	r4, #4
    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 8008e22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e24:	af1c      	add	r7, sp, #112	; 0x70
 8008e26:	b299      	uxth	r1, r3
 8008e28:	0020      	movs	r0, r4
 8008e2a:	89fa      	ldrh	r2, [r7, #14]
 8008e2c:	ab0b      	add	r3, sp, #44	; 0x2c
 8008e2e:	f001 fd35 	bl	800a89c <LoRaMacCryptoGetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8008e32:	2800      	cmp	r0, #0
 8008e34:	d024      	beq.n	8008e80 <LoRaMacProcess+0x7e0>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 8008e36:	4bba      	ldr	r3, [pc, #744]	; (8009120 <LoRaMacProcess+0xa80>)
 8008e38:	2807      	cmp	r0, #7
 8008e3a:	d11a      	bne.n	8008e72 <LoRaMacProcess+0x7d2>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 8008e3c:	2208      	movs	r2, #8
 8008e3e:	559a      	strb	r2, [r3, r6]
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 8008e40:	4bb8      	ldr	r3, [pc, #736]	; (8009124 <LoRaMacProcess+0xa84>)
 8008e42:	001a      	movs	r2, r3
 8008e44:	32ff      	adds	r2, #255	; 0xff
 8008e46:	7bd2      	ldrb	r2, [r2, #15]
 8008e48:	2a00      	cmp	r2, #0
 8008e4a:	d10b      	bne.n	8008e64 <LoRaMacProcess+0x7c4>
 8008e4c:	9906      	ldr	r1, [sp, #24]
 8008e4e:	321f      	adds	r2, #31
 8008e50:	4391      	bics	r1, r2
 8008e52:	29a0      	cmp	r1, #160	; 0xa0
 8008e54:	d106      	bne.n	8008e64 <LoRaMacProcess+0x7c4>
 8008e56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e58:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008e5a:	4291      	cmp	r1, r2
 8008e5c:	d102      	bne.n	8008e64 <LoRaMacProcess+0x7c4>
                        Nvm.MacGroup1.SrvAckRequested = true;
 8008e5e:	2201      	movs	r2, #1
 8008e60:	333a      	adds	r3, #58	; 0x3a
 8008e62:	701a      	strb	r2, [r3, #0]
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8008e64:	4bae      	ldr	r3, [pc, #696]	; (8009120 <LoRaMacProcess+0xa80>)
 8008e66:	4ab0      	ldr	r2, [pc, #704]	; (8009128 <LoRaMacProcess+0xa88>)
 8008e68:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008e6a:	5099      	str	r1, [r3, r2]
                PrepareRxDoneAbort( );
 8008e6c:	e696      	b.n	8008b9c <LoRaMacProcess+0x4fc>
                *fCntID = FCNT_DOWN;
 8008e6e:	2403      	movs	r4, #3
 8008e70:	e7d7      	b.n	8008e22 <LoRaMacProcess+0x782>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 8008e72:	220a      	movs	r2, #10
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 8008e74:	2808      	cmp	r0, #8
 8008e76:	d001      	beq.n	8008e7c <LoRaMacProcess+0x7dc>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008e78:	2201      	movs	r2, #1
 8008e7a:	4ba9      	ldr	r3, [pc, #676]	; (8009120 <LoRaMacProcess+0xa80>)
 8008e7c:	559a      	strb	r2, [r3, r6]
 8008e7e:	e7f1      	b.n	8008e64 <LoRaMacProcess+0x7c4>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 8008e80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e82:	0022      	movs	r2, r4
 8008e84:	0028      	movs	r0, r5
 8008e86:	9907      	ldr	r1, [sp, #28]
 8008e88:	9700      	str	r7, [sp, #0]
 8008e8a:	f001 fde3 	bl	800aa54 <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8008e8e:	4ba4      	ldr	r3, [pc, #656]	; (8009120 <LoRaMacProcess+0xa80>)
 8008e90:	2800      	cmp	r0, #0
 8008e92:	d005      	beq.n	8008ea0 <LoRaMacProcess+0x800>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 8008e94:	3802      	subs	r0, #2
 8008e96:	1e42      	subs	r2, r0, #1
 8008e98:	4190      	sbcs	r0, r2
 8008e9a:	300b      	adds	r0, #11
 8008e9c:	5598      	strb	r0, [r3, r6]
 8008e9e:	e67d      	b.n	8008b9c <LoRaMacProcess+0x4fc>
            MacCtx.McpsIndication.Multicast = multicast;
 8008ea0:	4aa2      	ldr	r2, [pc, #648]	; (800912c <LoRaMacProcess+0xa8c>)
 8008ea2:	9904      	ldr	r1, [sp, #16]
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 8008ea4:	4ca2      	ldr	r4, [pc, #648]	; (8009130 <LoRaMacProcess+0xa90>)
            MacCtx.McpsIndication.Multicast = multicast;
 8008ea6:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 8008ea8:	7b3a      	ldrb	r2, [r7, #12]
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8008eaa:	5598      	strb	r0, [r3, r6]
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 8008eac:	06d1      	lsls	r1, r2, #27
 8008eae:	0fc9      	lsrs	r1, r1, #31
 8008eb0:	5519      	strb	r1, [r3, r4]
            MacCtx.McpsIndication.Buffer = NULL;
 8008eb2:	49a0      	ldr	r1, [pc, #640]	; (8009134 <LoRaMacProcess+0xa94>)
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8008eb4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
            MacCtx.McpsIndication.Buffer = NULL;
 8008eb6:	5058      	str	r0, [r3, r1]
            MacCtx.McpsIndication.BufferSize = 0;
 8008eb8:	3104      	adds	r1, #4
 8008eba:	5458      	strb	r0, [r3, r1]
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8008ebc:	499a      	ldr	r1, [pc, #616]	; (8009128 <LoRaMacProcess+0xa88>)
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8008ebe:	0692      	lsls	r2, r2, #26
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8008ec0:	505c      	str	r4, [r3, r1]
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8008ec2:	499d      	ldr	r1, [pc, #628]	; (8009138 <LoRaMacProcess+0xa98>)
 8008ec4:	0fd2      	lsrs	r2, r2, #31
 8008ec6:	545a      	strb	r2, [r3, r1]
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8008ec8:	499c      	ldr	r1, [pc, #624]	; (800913c <LoRaMacProcess+0xa9c>)
 8008eca:	5458      	strb	r0, [r3, r1]
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8008ecc:	499c      	ldr	r1, [pc, #624]	; (8009140 <LoRaMacProcess+0xaa0>)
 8008ece:	545a      	strb	r2, [r3, r1]
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8008ed0:	4a9c      	ldr	r2, [pc, #624]	; (8009144 <LoRaMacProcess+0xaa4>)
 8008ed2:	5c9a      	ldrb	r2, [r3, r2]
 8008ed4:	2a01      	cmp	r2, #1
 8008ed6:	d801      	bhi.n	8008edc <LoRaMacProcess+0x83c>
                Nvm.MacGroup1.AdrAckCounter = 0;
 8008ed8:	4b92      	ldr	r3, [pc, #584]	; (8009124 <LoRaMacProcess+0xa84>)
 8008eda:	6298      	str	r0, [r3, #40]	; 0x28
            if( multicast == 1 )
 8008edc:	9b04      	ldr	r3, [sp, #16]
 8008ede:	4c90      	ldr	r4, [pc, #576]	; (8009120 <LoRaMacProcess+0xa80>)
 8008ee0:	ad1c      	add	r5, sp, #112	; 0x70
 8008ee2:	2b01      	cmp	r3, #1
 8008ee4:	d130      	bne.n	8008f48 <LoRaMacProcess+0x8a8>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 8008ee6:	3301      	adds	r3, #1
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8008ee8:	4997      	ldr	r1, [pc, #604]	; (8009148 <LoRaMacProcess+0xaa8>)
 8008eea:	5463      	strb	r3, [r4, r1]
            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 8008eec:	2387      	movs	r3, #135	; 0x87
 8008eee:	00db      	lsls	r3, r3, #3
 8008ef0:	5ce1      	ldrb	r1, [r4, r3]
 8008ef2:	7b2b      	ldrb	r3, [r5, #12]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8008ef4:	2a01      	cmp	r2, #1
 8008ef6:	d805      	bhi.n	8008f04 <LoRaMacProcess+0x864>
        if( request == MCPS_CONFIRMED )
 8008ef8:	2901      	cmp	r1, #1
 8008efa:	d101      	bne.n	8008f00 <LoRaMacProcess+0x860>
            if( fCtrl.Bits.Ack == 1 )
 8008efc:	069b      	lsls	r3, r3, #26
 8008efe:	d501      	bpl.n	8008f04 <LoRaMacProcess+0x864>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8008f00:	f001 fa3a 	bl	800a378 <LoRaMacCommandsRemoveStickyAnsCmds>
            switch( fType )
 8008f04:	2759      	movs	r7, #89	; 0x59
 8008f06:	ab06      	add	r3, sp, #24
 8008f08:	18ff      	adds	r7, r7, r3
 8008f0a:	9b02      	ldr	r3, [sp, #8]
 8008f0c:	4e8f      	ldr	r6, [pc, #572]	; (800914c <LoRaMacProcess+0xaac>)
 8008f0e:	2b02      	cmp	r3, #2
 8008f10:	d033      	beq.n	8008f7a <LoRaMacProcess+0x8da>
 8008f12:	2b03      	cmp	r3, #3
 8008f14:	d008      	beq.n	8008f28 <LoRaMacProcess+0x888>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8008f16:	7b29      	ldrb	r1, [r5, #12]
 8008f18:	9a03      	ldr	r2, [sp, #12]
 8008f1a:	0709      	lsls	r1, r1, #28
 8008f1c:	0f09      	lsrs	r1, r1, #28
 8008f1e:	a820      	add	r0, sp, #128	; 0x80
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d02e      	beq.n	8008f82 <LoRaMacProcess+0x8e2>
 8008f24:	f7ff f8a0 	bl	8008068 <ProcessMacCommands.constprop.0>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8008f28:	7ffb      	ldrb	r3, [r7, #31]
 8008f2a:	55a3      	strb	r3, [r4, r6]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8008f2c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008f2e:	9302      	str	r3, [sp, #8]
 8008f30:	9a02      	ldr	r2, [sp, #8]
 8008f32:	4b80      	ldr	r3, [pc, #512]	; (8009134 <LoRaMacProcess+0xa94>)
 8008f34:	50e2      	str	r2, [r4, r3]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8008f36:	ab26      	add	r3, sp, #152	; 0x98
 8008f38:	781a      	ldrb	r2, [r3, #0]
 8008f3a:	2385      	movs	r3, #133	; 0x85
 8008f3c:	00db      	lsls	r3, r3, #3
 8008f3e:	54e2      	strb	r2, [r4, r3]
                    MacCtx.McpsIndication.RxData = true;
 8008f40:	2201      	movs	r2, #1
 8008f42:	4b83      	ldr	r3, [pc, #524]	; (8009150 <LoRaMacProcess+0xab0>)
 8008f44:	54e2      	strb	r2, [r4, r3]
                    break;
 8008f46:	e020      	b.n	8008f8a <LoRaMacProcess+0x8ea>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 8008f48:	231f      	movs	r3, #31
 8008f4a:	9906      	ldr	r1, [sp, #24]
 8008f4c:	4399      	bics	r1, r3
 8008f4e:	4b75      	ldr	r3, [pc, #468]	; (8009124 <LoRaMacProcess+0xa84>)
 8008f50:	29a0      	cmp	r1, #160	; 0xa0
 8008f52:	d10c      	bne.n	8008f6e <LoRaMacProcess+0x8ce>
                    Nvm.MacGroup1.SrvAckRequested = true;
 8008f54:	0019      	movs	r1, r3
 8008f56:	2001      	movs	r0, #1
 8008f58:	313a      	adds	r1, #58	; 0x3a
 8008f5a:	7008      	strb	r0, [r1, #0]
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8008f5c:	0019      	movs	r1, r3
 8008f5e:	31ff      	adds	r1, #255	; 0xff
 8008f60:	7bc9      	ldrb	r1, [r1, #15]
 8008f62:	2900      	cmp	r1, #0
 8008f64:	d101      	bne.n	8008f6a <LoRaMacProcess+0x8ca>
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 8008f66:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8008f68:	6359      	str	r1, [r3, #52]	; 0x34
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	e7bc      	b.n	8008ee8 <LoRaMacProcess+0x848>
                    Nvm.MacGroup1.SrvAckRequested = false;
 8008f6e:	2100      	movs	r1, #0
 8008f70:	333a      	adds	r3, #58	; 0x3a
 8008f72:	7019      	strb	r1, [r3, #0]
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8008f74:	4b74      	ldr	r3, [pc, #464]	; (8009148 <LoRaMacProcess+0xaa8>)
 8008f76:	54e1      	strb	r1, [r4, r3]
 8008f78:	e7b8      	b.n	8008eec <LoRaMacProcess+0x84c>
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 8008f7a:	ab26      	add	r3, sp, #152	; 0x98
 8008f7c:	7819      	ldrb	r1, [r3, #0]
 8008f7e:	9a03      	ldr	r2, [sp, #12]
 8008f80:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008f82:	f7ff f871 	bl	8008068 <ProcessMacCommands.constprop.0>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8008f86:	7ffb      	ldrb	r3, [r7, #31]
 8008f88:	55a3      	strb	r3, [r4, r6]
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8008f8a:	4972      	ldr	r1, [pc, #456]	; (8009154 <LoRaMacProcess+0xab4>)
 8008f8c:	2302      	movs	r3, #2
 8008f8e:	5c62      	ldrb	r2, [r4, r1]
 8008f90:	e661      	b.n	8008c56 <LoRaMacProcess+0x5b6>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 8008f92:	9f02      	ldr	r7, [sp, #8]
 8008f94:	4c70      	ldr	r4, [pc, #448]	; (8009158 <LoRaMacProcess+0xab8>)
 8008f96:	3f01      	subs	r7, #1
 8008f98:	b2ba      	uxth	r2, r7
 8008f9a:	1c69      	adds	r1, r5, #1
 8008f9c:	0020      	movs	r0, r4
 8008f9e:	f003 f96f 	bl	800c280 <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 8008fa2:	2303      	movs	r3, #3
 8008fa4:	4a68      	ldr	r2, [pc, #416]	; (8009148 <LoRaMacProcess+0xaa8>)
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8008fa6:	496b      	ldr	r1, [pc, #428]	; (8009154 <LoRaMacProcess+0xab4>)
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 8008fa8:	52b3      	strh	r3, [r6, r2]
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 8008faa:	4b62      	ldr	r3, [pc, #392]	; (8009134 <LoRaMacProcess+0xa94>)
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8008fac:	5c72      	ldrb	r2, [r6, r1]
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 8008fae:	50f4      	str	r4, [r6, r3]
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 8008fb0:	3304      	adds	r3, #4
 8008fb2:	54f7      	strb	r7, [r6, r3]
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8008fb4:	2302      	movs	r3, #2
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	5473      	strb	r3, [r6, r1]
            break;
 8008fba:	e64e      	b.n	8008c5a <LoRaMacProcess+0x5ba>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	4b67      	ldr	r3, [pc, #412]	; (800915c <LoRaMacProcess+0xabc>)
 8008fc0:	54e2      	strb	r2, [r4, r3]
            PrepareRxDoneAbort( );
 8008fc2:	f7fe fb9b 	bl	80076fc <PrepareRxDoneAbort>
            break;
 8008fc6:	e648      	b.n	8008c5a <LoRaMacProcess+0x5ba>
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8008fc8:	4b56      	ldr	r3, [pc, #344]	; (8009124 <LoRaMacProcess+0xa84>)
 8008fca:	33fc      	adds	r3, #252	; 0xfc
 8008fcc:	781b      	ldrb	r3, [r3, #0]
 8008fce:	2b02      	cmp	r3, #2
 8008fd0:	d000      	beq.n	8008fd4 <LoRaMacProcess+0x934>
 8008fd2:	e64f      	b.n	8008c74 <LoRaMacProcess+0x5d4>
 8008fd4:	e64b      	b.n	8008c6e <LoRaMacProcess+0x5ce>
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8008fd6:	4b5f      	ldr	r3, [pc, #380]	; (8009154 <LoRaMacProcess+0xab4>)
 8008fd8:	5ce3      	ldrb	r3, [r4, r3]
 8008fda:	075b      	lsls	r3, r3, #29
 8008fdc:	d512      	bpl.n	8009004 <LoRaMacProcess+0x964>
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8008fde:	2001      	movs	r0, #1
 8008fe0:	26d0      	movs	r6, #208	; 0xd0
 8008fe2:	f001 fae5 	bl	800a5b0 <LoRaMacConfirmQueueIsCmdActive>
 8008fe6:	00b6      	lsls	r6, r6, #2
 8008fe8:	2800      	cmp	r0, #0
 8008fea:	d036      	beq.n	800905a <LoRaMacProcess+0x9ba>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8008fec:	2001      	movs	r0, #1
 8008fee:	f001 faaf 	bl	800a550 <LoRaMacConfirmQueueGetStatus>
 8008ff2:	2800      	cmp	r0, #0
 8008ff4:	d102      	bne.n	8008ffc <LoRaMacProcess+0x95c>
                MacCtx.ChannelsNbTransCounter = 0;
 8008ff6:	2382      	movs	r3, #130	; 0x82
 8008ff8:	00db      	lsls	r3, r3, #3
 8008ffa:	54e0      	strb	r0, [r4, r3]
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8008ffc:	2302      	movs	r3, #2
 8008ffe:	59a2      	ldr	r2, [r4, r6]
 8009000:	439a      	bics	r2, r3
 8009002:	51a2      	str	r2, [r4, r6]
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8009004:	4b53      	ldr	r3, [pc, #332]	; (8009154 <LoRaMacProcess+0xab4>)
 8009006:	5ce1      	ldrb	r1, [r4, r3]
 8009008:	07cb      	lsls	r3, r1, #31
 800900a:	d400      	bmi.n	800900e <LoRaMacProcess+0x96e>
 800900c:	e467      	b.n	80088de <LoRaMacProcess+0x23e>
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800900e:	2387      	movs	r3, #135	; 0x87
 8009010:	00db      	lsls	r3, r3, #3
 8009012:	5ce3      	ldrb	r3, [r4, r3]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d001      	beq.n	800901c <LoRaMacProcess+0x97c>
 8009018:	2b03      	cmp	r3, #3
 800901a:	d129      	bne.n	8009070 <LoRaMacProcess+0x9d0>
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 800901c:	4b41      	ldr	r3, [pc, #260]	; (8009124 <LoRaMacProcess+0xa84>)
    if( MacCtx.ChannelsNbTransCounter >=
 800901e:	2082      	movs	r0, #130	; 0x82
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 8009020:	001a      	movs	r2, r3
    if( MacCtx.ChannelsNbTransCounter >=
 8009022:	00c0      	lsls	r0, r0, #3
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 8009024:	3260      	adds	r2, #96	; 0x60
    if( MacCtx.ChannelsNbTransCounter >=
 8009026:	5c20      	ldrb	r0, [r4, r0]
 8009028:	7812      	ldrb	r2, [r2, #0]
 800902a:	4290      	cmp	r0, r2
 800902c:	d209      	bcs.n	8009042 <LoRaMacProcess+0x9a2>
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800902e:	078a      	lsls	r2, r1, #30
 8009030:	d550      	bpl.n	80090d4 <LoRaMacProcess+0xa34>
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8009032:	33fc      	adds	r3, #252	; 0xfc
 8009034:	781b      	ldrb	r3, [r3, #0]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d003      	beq.n	8009042 <LoRaMacProcess+0x9a2>
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800903a:	4b42      	ldr	r3, [pc, #264]	; (8009144 <LoRaMacProcess+0xaa4>)
 800903c:	5ce3      	ldrb	r3, [r4, r3]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d148      	bne.n	80090d4 <LoRaMacProcess+0xa34>
            TimerStop( &MacCtx.TxDelayedTimer );
 8009042:	4847      	ldr	r0, [pc, #284]	; (8009160 <LoRaMacProcess+0xac0>)
 8009044:	f004 ffbe 	bl	800dfc4 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8009048:	22d0      	movs	r2, #208	; 0xd0
 800904a:	2320      	movs	r3, #32
 800904c:	0092      	lsls	r2, r2, #2
 800904e:	58a1      	ldr	r1, [r4, r2]
 8009050:	4399      	bics	r1, r3
 8009052:	50a1      	str	r1, [r4, r2]
            StopRetransmission( );
 8009054:	f7ff fab4 	bl	80085c0 <StopRetransmission.isra.0>
 8009058:	e441      	b.n	80088de <LoRaMacProcess+0x23e>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800905a:	2005      	movs	r0, #5
 800905c:	f001 faa8 	bl	800a5b0 <LoRaMacConfirmQueueIsCmdActive>
 8009060:	2800      	cmp	r0, #0
 8009062:	d1cb      	bne.n	8008ffc <LoRaMacProcess+0x95c>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 8009064:	2006      	movs	r0, #6
 8009066:	f001 faa3 	bl	800a5b0 <LoRaMacConfirmQueueIsCmdActive>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800906a:	2800      	cmp	r0, #0
 800906c:	d1c6      	bne.n	8008ffc <LoRaMacProcess+0x95c>
 800906e:	e7c9      	b.n	8009004 <LoRaMacProcess+0x964>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 8009070:	2b01      	cmp	r3, #1
 8009072:	d12f      	bne.n	80090d4 <LoRaMacProcess+0xa34>
            if( MacCtx.AckTimeoutRetry == true )
 8009074:	4b3b      	ldr	r3, [pc, #236]	; (8009164 <LoRaMacProcess+0xac4>)
 8009076:	5ce2      	ldrb	r2, [r4, r3]
 8009078:	2a00      	cmp	r2, #0
 800907a:	d100      	bne.n	800907e <LoRaMacProcess+0x9de>
 800907c:	e42f      	b.n	80088de <LoRaMacProcess+0x23e>
    if( MacCtx.AckTimeoutRetriesCounter >=
 800907e:	4e3a      	ldr	r6, [pc, #232]	; (8009168 <LoRaMacProcess+0xac8>)
        MacCtx.AckTimeoutRetries )
 8009080:	483a      	ldr	r0, [pc, #232]	; (800916c <LoRaMacProcess+0xacc>)
    if( MacCtx.AckTimeoutRetriesCounter >=
 8009082:	5da3      	ldrb	r3, [r4, r6]
        MacCtx.AckTimeoutRetries )
 8009084:	5c27      	ldrb	r7, [r4, r0]
    if( MacCtx.AckTimeoutRetriesCounter >=
 8009086:	42bb      	cmp	r3, r7
 8009088:	d204      	bcs.n	8009094 <LoRaMacProcess+0x9f4>
    return false;
 800908a:	2200      	movs	r2, #0
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800908c:	0789      	lsls	r1, r1, #30
 800908e:	d501      	bpl.n	8009094 <LoRaMacProcess+0x9f4>
        if( MacCtx.McpsConfirm.AckReceived == true )
 8009090:	4a2b      	ldr	r2, [pc, #172]	; (8009140 <LoRaMacProcess+0xaa0>)
 8009092:	5ca2      	ldrb	r2, [r4, r2]
                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8009094:	4823      	ldr	r0, [pc, #140]	; (8009124 <LoRaMacProcess+0xa84>)
 8009096:	0001      	movs	r1, r0
 8009098:	31ff      	adds	r1, #255	; 0xff
 800909a:	7bc9      	ldrb	r1, [r1, #15]
 800909c:	2900      	cmp	r1, #0
 800909e:	d13c      	bne.n	800911a <LoRaMacProcess+0xa7a>
                    if( stopRetransmission == false )
 80090a0:	2a00      	cmp	r2, #0
 80090a2:	d123      	bne.n	80090ec <LoRaMacProcess+0xa4c>
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 80090a4:	42bb      	cmp	r3, r7
 80090a6:	d215      	bcs.n	80090d4 <LoRaMacProcess+0xa34>
        MacCtx.AckTimeoutRetriesCounter++;
 80090a8:	3301      	adds	r3, #1
 80090aa:	b2db      	uxtb	r3, r3
 80090ac:	55a3      	strb	r3, [r4, r6]
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 80090ae:	07db      	lsls	r3, r3, #31
 80090b0:	d510      	bpl.n	80090d4 <LoRaMacProcess+0xa34>
            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 80090b2:	2322      	movs	r3, #34	; 0x22
 80090b4:	a91c      	add	r1, sp, #112	; 0x70
 80090b6:	700b      	strb	r3, [r1, #0]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80090b8:	0003      	movs	r3, r0
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80090ba:	0006      	movs	r6, r0
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80090bc:	3374      	adds	r3, #116	; 0x74
 80090be:	781b      	ldrb	r3, [r3, #0]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80090c0:	3639      	adds	r6, #57	; 0x39
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80090c2:	708b      	strb	r3, [r1, #2]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80090c4:	7833      	ldrb	r3, [r6, #0]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80090c6:	3040      	adds	r0, #64	; 0x40
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80090c8:	704b      	strb	r3, [r1, #1]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80090ca:	7800      	ldrb	r0, [r0, #0]
 80090cc:	f001 ff1c 	bl	800af08 <RegionGetPhyParam>
 80090d0:	9012      	str	r0, [sp, #72]	; 0x48
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 80090d2:	7030      	strb	r0, [r6, #0]
            MacCtx.MacFlags.Bits.MacDone = 0;
 80090d4:	2220      	movs	r2, #32
            MacCtx.AckTimeoutRetry = false;
 80090d6:	2000      	movs	r0, #0
            MacCtx.MacFlags.Bits.MacDone = 0;
 80090d8:	491e      	ldr	r1, [pc, #120]	; (8009154 <LoRaMacProcess+0xab4>)
 80090da:	5c63      	ldrb	r3, [r4, r1]
 80090dc:	4393      	bics	r3, r2
 80090de:	5463      	strb	r3, [r4, r1]
            MacCtx.AckTimeoutRetry = false;
 80090e0:	4b20      	ldr	r3, [pc, #128]	; (8009164 <LoRaMacProcess+0xac4>)
 80090e2:	54e0      	strb	r0, [r4, r3]
            OnTxDelayedTimerEvent( NULL );
 80090e4:	f7ff fa98 	bl	8008618 <OnTxDelayedTimerEvent>
 80090e8:	f7ff fbf9 	bl	80088de <LoRaMacProcess+0x23e>
    if( MacCtx.McpsConfirm.AckReceived == false )
 80090ec:	4b14      	ldr	r3, [pc, #80]	; (8009140 <LoRaMacProcess+0xaa0>)
 80090ee:	5ce7      	ldrb	r7, [r4, r3]
 80090f0:	2f00      	cmp	r7, #0
 80090f2:	d10e      	bne.n	8009112 <LoRaMacProcess+0xa72>
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 80090f4:	2302      	movs	r3, #2
 80090f6:	a91c      	add	r1, sp, #112	; 0x70
 80090f8:	720b      	strb	r3, [r1, #8]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 80090fa:	4b1d      	ldr	r3, [pc, #116]	; (8009170 <LoRaMacProcess+0xad0>)
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80090fc:	3040      	adds	r0, #64	; 0x40
        params.NvmGroup1 = &Nvm.RegionGroup1;
 80090fe:	931c      	str	r3, [sp, #112]	; 0x70
        params.NvmGroup2 = &Nvm.RegionGroup2;
 8009100:	4b1c      	ldr	r3, [pc, #112]	; (8009174 <LoRaMacProcess+0xad4>)
 8009102:	604b      	str	r3, [r1, #4]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8009104:	7800      	ldrb	r0, [r0, #0]
 8009106:	f001 ff12 	bl	800af2e <RegionInitDefaults>
        MacCtx.NodeAckRequested = false;
 800910a:	4b1b      	ldr	r3, [pc, #108]	; (8009178 <LoRaMacProcess+0xad8>)
 800910c:	54e7      	strb	r7, [r4, r3]
        MacCtx.McpsConfirm.AckReceived = false;
 800910e:	4b0c      	ldr	r3, [pc, #48]	; (8009140 <LoRaMacProcess+0xaa0>)
 8009110:	54e7      	strb	r7, [r4, r3]
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8009112:	5da2      	ldrb	r2, [r4, r6]
 8009114:	4b19      	ldr	r3, [pc, #100]	; (800917c <LoRaMacProcess+0xadc>)
 8009116:	54e2      	strb	r2, [r4, r3]
        if( stopRetransmission == true )
 8009118:	e793      	b.n	8009042 <LoRaMacProcess+0x9a2>
 800911a:	2a00      	cmp	r2, #0
 800911c:	d0da      	beq.n	80090d4 <LoRaMacProcess+0xa34>
 800911e:	e790      	b.n	8009042 <LoRaMacProcess+0x9a2>
 8009120:	200009d0 	.word	0x200009d0
 8009124:	20000684 	.word	0x20000684
 8009128:	0000042c 	.word	0x0000042c
 800912c:	0000041e 	.word	0x0000041e
 8009130:	00000421 	.word	0x00000421
 8009134:	00000424 	.word	0x00000424
 8009138:	0000042a 	.word	0x0000042a
 800913c:	00000439 	.word	0x00000439
 8009140:	0000043c 	.word	0x0000043c
 8009144:	0000047f 	.word	0x0000047f
 8009148:	0000041c 	.word	0x0000041c
 800914c:	0000041f 	.word	0x0000041f
 8009150:	00000429 	.word	0x00000429
 8009154:	00000481 	.word	0x00000481
 8009158:	20000c08 	.word	0x20000c08
 800915c:	0000041d 	.word	0x0000041d
 8009160:	20000d38 	.word	0x20000d38
 8009164:	00000413 	.word	0x00000413
 8009168:	00000412 	.word	0x00000412
 800916c:	00000411 	.word	0x00000411
 8009170:	2000085c 	.word	0x2000085c
 8009174:	200008f0 	.word	0x200008f0
 8009178:	00000414 	.word	0x00000414
 800917c:	0000043d 	.word	0x0000043d

08009180 <LoRaMacInitialization>:
    return 0;
}


LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8009180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009182:	b08d      	sub	sp, #52	; 0x34
 8009184:	0006      	movs	r6, r0
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8009186:	2503      	movs	r5, #3
{
 8009188:	9102      	str	r1, [sp, #8]
 800918a:	9203      	str	r2, [sp, #12]
    if( ( primitives == NULL ) ||
 800918c:	2800      	cmp	r0, #0
 800918e:	d100      	bne.n	8009192 <LoRaMacInitialization+0x12>
 8009190:	e165      	b.n	800945e <LoRaMacInitialization+0x2de>
 8009192:	2900      	cmp	r1, #0
 8009194:	d100      	bne.n	8009198 <LoRaMacInitialization+0x18>
 8009196:	e162      	b.n	800945e <LoRaMacInitialization+0x2de>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8009198:	6803      	ldr	r3, [r0, #0]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d100      	bne.n	80091a0 <LoRaMacInitialization+0x20>
 800919e:	e15e      	b.n	800945e <LoRaMacInitialization+0x2de>
 80091a0:	6843      	ldr	r3, [r0, #4]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d100      	bne.n	80091a8 <LoRaMacInitialization+0x28>
 80091a6:	e15a      	b.n	800945e <LoRaMacInitialization+0x2de>
        ( primitives->MacMcpsIndication == NULL ) ||
 80091a8:	6883      	ldr	r3, [r0, #8]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d100      	bne.n	80091b0 <LoRaMacInitialization+0x30>
 80091ae:	e156      	b.n	800945e <LoRaMacInitialization+0x2de>
        ( primitives->MacMlmeConfirm == NULL ) ||
 80091b0:	68c3      	ldr	r3, [r0, #12]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d100      	bne.n	80091b8 <LoRaMacInitialization+0x38>
 80091b6:	e152      	b.n	800945e <LoRaMacInitialization+0x2de>
        ( primitives->MacMlmeIndication == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 80091b8:	0010      	movs	r0, r2
 80091ba:	f001 fea0 	bl	800aefe <RegionIsActive>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 80091be:	3506      	adds	r5, #6
    if( RegionIsActive( region ) == false )
 80091c0:	2800      	cmp	r0, #0
 80091c2:	d100      	bne.n	80091c6 <LoRaMacInitialization+0x46>
 80091c4:	e14b      	b.n	800945e <LoRaMacInitialization+0x2de>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 80091c6:	0030      	movs	r0, r6
 80091c8:	f001 f966 	bl	800a498 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 80091cc:	22d3      	movs	r2, #211	; 0xd3
 80091ce:	4cb6      	ldr	r4, [pc, #728]	; (80094a8 <LoRaMacInitialization+0x328>)
 80091d0:	2100      	movs	r1, #0
 80091d2:	0020      	movs	r0, r4
 80091d4:	0092      	lsls	r2, r2, #2
 80091d6:	f003 f868 	bl	800c2aa <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 80091da:	22a1      	movs	r2, #161	; 0xa1
 80091dc:	2100      	movs	r1, #0
 80091de:	48b3      	ldr	r0, [pc, #716]	; (80094ac <LoRaMacInitialization+0x32c>)
 80091e0:	00d2      	lsls	r2, r2, #3
 80091e2:	f003 f862 	bl	800c2aa <memset1>

    // Set non zero variables to its default value
    MacCtx.AckTimeoutRetriesCounter = 1;
 80091e6:	2201      	movs	r2, #1
    MacCtx.AckTimeoutRetries = 1;
    Nvm.MacGroup2.Region = region;
 80091e8:	0027      	movs	r7, r4
    MacCtx.AckTimeoutRetriesCounter = 1;
 80091ea:	49b0      	ldr	r1, [pc, #704]	; (80094ac <LoRaMacInitialization+0x32c>)
 80091ec:	4bb0      	ldr	r3, [pc, #704]	; (80094b0 <LoRaMacInitialization+0x330>)
    Nvm.MacGroup2.Region = region;
 80091ee:	3740      	adds	r7, #64	; 0x40
    MacCtx.AckTimeoutRetriesCounter = 1;
 80091f0:	54ca      	strb	r2, [r1, r3]
    MacCtx.AckTimeoutRetries = 1;
 80091f2:	4bb0      	ldr	r3, [pc, #704]	; (80094b4 <LoRaMacInitialization+0x334>)
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 80091f4:	2500      	movs	r5, #0
    MacCtx.AckTimeoutRetries = 1;
 80091f6:	54ca      	strb	r2, [r1, r3]
    Nvm.MacGroup2.Region = region;
 80091f8:	9b03      	ldr	r3, [sp, #12]
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 80091fa:	0021      	movs	r1, r4
    Nvm.MacGroup2.Region = region;
 80091fc:	703b      	strb	r3, [r7, #0]
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 80091fe:	0023      	movs	r3, r4

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8009200:	4aad      	ldr	r2, [pc, #692]	; (80094b8 <LoRaMacInitialization+0x338>)
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8009202:	33fc      	adds	r3, #252	; 0xfc
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8009204:	611a      	str	r2, [r3, #16]
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8009206:	701d      	strb	r5, [r3, #0]

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8009208:	230f      	movs	r3, #15
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 800920a:	3180      	adds	r1, #128	; 0x80
 800920c:	700d      	strb	r5, [r1, #0]
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800920e:	ad07      	add	r5, sp, #28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009210:	0029      	movs	r1, r5
 8009212:	9803      	ldr	r0, [sp, #12]
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8009214:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009216:	f001 fe77 	bl	800af08 <RegionGetPhyParam>
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 800921a:	1e43      	subs	r3, r0, #1
 800921c:	4198      	sbcs	r0, r3
 800921e:	0023      	movs	r3, r4

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8009220:	210a      	movs	r1, #10
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8009222:	33ff      	adds	r3, #255	; 0xff
    getPhy.Attribute = PHY_DEF_TX_POWER;
 8009224:	7029      	strb	r1, [r5, #0]
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8009226:	7058      	strb	r0, [r3, #1]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009228:	0029      	movs	r1, r5
 800922a:	7838      	ldrb	r0, [r7, #0]
 800922c:	f001 fe6c 	bl	800af08 <RegionGetPhyParam>
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8009230:	0023      	movs	r3, r4
 8009232:	33c4      	adds	r3, #196	; 0xc4
 8009234:	7018      	strb	r0, [r3, #0]

    getPhy.Attribute = PHY_DEF_TX_DR;
 8009236:	2006      	movs	r0, #6
 8009238:	7028      	strb	r0, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800923a:	0029      	movs	r1, r5
 800923c:	7838      	ldrb	r0, [r7, #0]
 800923e:	f001 fe63 	bl	800af08 <RegionGetPhyParam>
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8009242:	0023      	movs	r3, r4
 8009244:	33c5      	adds	r3, #197	; 0xc5
 8009246:	7018      	strb	r0, [r3, #0]

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8009248:	2310      	movs	r3, #16
 800924a:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800924c:	0029      	movs	r1, r5
 800924e:	7838      	ldrb	r0, [r7, #0]
 8009250:	f001 fe5a 	bl	800af08 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8009254:	4b99      	ldr	r3, [pc, #612]	; (80094bc <LoRaMacInitialization+0x33c>)

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009256:	0029      	movs	r1, r5
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8009258:	6018      	str	r0, [r3, #0]
    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800925a:	2311      	movs	r3, #17
 800925c:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800925e:	7838      	ldrb	r0, [r7, #0]
 8009260:	f001 fe52 	bl	800af08 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8009264:	4b96      	ldr	r3, [pc, #600]	; (80094c0 <LoRaMacInitialization+0x340>)

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009266:	0029      	movs	r1, r5
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8009268:	6018      	str	r0, [r3, #0]
    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800926a:	2312      	movs	r3, #18
 800926c:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800926e:	7838      	ldrb	r0, [r7, #0]
 8009270:	f001 fe4a 	bl	800af08 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8009274:	4b93      	ldr	r3, [pc, #588]	; (80094c4 <LoRaMacInitialization+0x344>)

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009276:	0029      	movs	r1, r5
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8009278:	6018      	str	r0, [r3, #0]
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800927a:	2313      	movs	r3, #19
 800927c:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800927e:	7838      	ldrb	r0, [r7, #0]
 8009280:	f001 fe42 	bl	800af08 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8009284:	4b90      	ldr	r3, [pc, #576]	; (80094c8 <LoRaMacInitialization+0x348>)

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009286:	0029      	movs	r1, r5
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8009288:	6018      	str	r0, [r3, #0]
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800928a:	2314      	movs	r3, #20
 800928c:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800928e:	7838      	ldrb	r0, [r7, #0]
 8009290:	f001 fe3a 	bl	800af08 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8009294:	4b8d      	ldr	r3, [pc, #564]	; (80094cc <LoRaMacInitialization+0x34c>)

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009296:	0029      	movs	r1, r5
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8009298:	6018      	str	r0, [r3, #0]
    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800929a:	2317      	movs	r3, #23
 800929c:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800929e:	7838      	ldrb	r0, [r7, #0]
 80092a0:	f001 fe32 	bl	800af08 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 80092a4:	0023      	movs	r3, r4
 80092a6:	33a1      	adds	r3, #161	; 0xa1
 80092a8:	7018      	strb	r0, [r3, #0]

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 80092aa:	2318      	movs	r3, #24
 80092ac:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80092ae:	0029      	movs	r1, r5
 80092b0:	7838      	ldrb	r0, [r7, #0]
 80092b2:	f001 fe29 	bl	800af08 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 80092b6:	0023      	movs	r3, r4
 80092b8:	33a4      	adds	r3, #164	; 0xa4
 80092ba:	6018      	str	r0, [r3, #0]
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 80092bc:	0023      	movs	r3, r4
 80092be:	33ac      	adds	r3, #172	; 0xac
 80092c0:	6018      	str	r0, [r3, #0]

    getPhy.Attribute = PHY_DEF_RX2_DR;
 80092c2:	2319      	movs	r3, #25
 80092c4:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80092c6:	0029      	movs	r1, r5
 80092c8:	7838      	ldrb	r0, [r7, #0]
 80092ca:	f001 fe1d 	bl	800af08 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 80092ce:	0023      	movs	r3, r4
 80092d0:	b2c0      	uxtb	r0, r0
 80092d2:	33a8      	adds	r3, #168	; 0xa8
 80092d4:	7018      	strb	r0, [r3, #0]
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 80092d6:	0023      	movs	r3, r4
 80092d8:	33b0      	adds	r3, #176	; 0xb0
 80092da:	7018      	strb	r0, [r3, #0]

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 80092dc:	231e      	movs	r3, #30
 80092de:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80092e0:	0029      	movs	r1, r5
 80092e2:	7838      	ldrb	r0, [r7, #0]
 80092e4:	f001 fe10 	bl	800af08 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 80092e8:	0023      	movs	r3, r4
 80092ea:	33b4      	adds	r3, #180	; 0xb4
 80092ec:	7018      	strb	r0, [r3, #0]

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 80092ee:	231f      	movs	r3, #31
 80092f0:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80092f2:	0029      	movs	r1, r5
 80092f4:	7838      	ldrb	r0, [r7, #0]
 80092f6:	f001 fe07 	bl	800af08 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 80092fa:	0023      	movs	r3, r4
 80092fc:	33b5      	adds	r3, #181	; 0xb5
 80092fe:	7018      	strb	r0, [r3, #0]

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8009300:	2320      	movs	r3, #32
 8009302:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009304:	0029      	movs	r1, r5
 8009306:	7838      	ldrb	r0, [r7, #0]
 8009308:	f001 fdfe 	bl	800af08 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 800930c:	0023      	movs	r3, r4
 800930e:	33b8      	adds	r3, #184	; 0xb8
 8009310:	6018      	str	r0, [r3, #0]

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8009312:	2321      	movs	r3, #33	; 0x21
 8009314:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009316:	0029      	movs	r1, r5
 8009318:	7838      	ldrb	r0, [r7, #0]
 800931a:	f001 fdf5 	bl	800af08 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 800931e:	0023      	movs	r3, r4
 8009320:	33bc      	adds	r3, #188	; 0xbc
 8009322:	6018      	str	r0, [r3, #0]

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8009324:	230b      	movs	r3, #11
 8009326:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009328:	0029      	movs	r1, r5
 800932a:	7838      	ldrb	r0, [r7, #0]
 800932c:	f001 fdec 	bl	800af08 <RegionGetPhyParam>
    MacCtx.AdrAckLimit = phyParam.Value;
 8009330:	23fd      	movs	r3, #253	; 0xfd
 8009332:	495e      	ldr	r1, [pc, #376]	; (80094ac <LoRaMacInitialization+0x32c>)
 8009334:	009b      	lsls	r3, r3, #2
 8009336:	52c8      	strh	r0, [r1, r3]

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8009338:	230c      	movs	r3, #12
 800933a:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800933c:	0029      	movs	r1, r5
 800933e:	7838      	ldrb	r0, [r7, #0]
 8009340:	f001 fde2 	bl	800af08 <RegionGetPhyParam>
    MacCtx.AdrAckDelay = phyParam.Value;
 8009344:	4959      	ldr	r1, [pc, #356]	; (80094ac <LoRaMacInitialization+0x32c>)
 8009346:	4b62      	ldr	r3, [pc, #392]	; (80094d0 <LoRaMacInitialization+0x350>)

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8009348:	2201      	movs	r2, #1
    MacCtx.AdrAckDelay = phyParam.Value;
 800934a:	52c8      	strh	r0, [r1, r3]
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 800934c:	0023      	movs	r3, r4
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 800934e:	210a      	movs	r1, #10
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8009350:	33a0      	adds	r3, #160	; 0xa0
 8009352:	701a      	strb	r2, [r3, #0]
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8009354:	4b5f      	ldr	r3, [pc, #380]	; (80094d4 <LoRaMacInitialization+0x354>)
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009356:	9006      	str	r0, [sp, #24]
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8009358:	67d9      	str	r1, [r3, #124]	; 0x7c
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 800935a:	0023      	movs	r3, r4
 800935c:	2006      	movs	r0, #6
 800935e:	3388      	adds	r3, #136	; 0x88
 8009360:	7018      	strb	r0, [r3, #0]

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8009362:	0023      	movs	r3, r4
 8009364:	3348      	adds	r3, #72	; 0x48
 8009366:	7018      	strb	r0, [r3, #0]
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8009368:	4b54      	ldr	r3, [pc, #336]	; (80094bc <LoRaMacInitialization+0x33c>)
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 800936a:	2500      	movs	r5, #0
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 800936c:	681b      	ldr	r3, [r3, #0]
    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 800936e:	6461      	str	r1, [r4, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8009370:	64e3      	str	r3, [r4, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8009372:	4b53      	ldr	r3, [pc, #332]	; (80094c0 <LoRaMacInitialization+0x340>)
    params.Type = INIT_TYPE_DEFAULTS;
 8009374:	a909      	add	r1, sp, #36	; 0x24
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8009376:	681b      	ldr	r3, [r3, #0]
    params.Type = INIT_TYPE_DEFAULTS;
 8009378:	720d      	strb	r5, [r1, #8]
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 800937a:	6523      	str	r3, [r4, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 800937c:	4b51      	ldr	r3, [pc, #324]	; (80094c4 <LoRaMacInitialization+0x344>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	6563      	str	r3, [r4, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8009382:	4b51      	ldr	r3, [pc, #324]	; (80094c8 <LoRaMacInitialization+0x348>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	65a3      	str	r3, [r4, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 8009388:	4b50      	ldr	r3, [pc, #320]	; (80094cc <LoRaMacInitialization+0x34c>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	65e3      	str	r3, [r4, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 800938e:	0023      	movs	r3, r4
 8009390:	3360      	adds	r3, #96	; 0x60
 8009392:	701a      	strb	r2, [r3, #0]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8009394:	4b50      	ldr	r3, [pc, #320]	; (80094d8 <LoRaMacInitialization+0x358>)
 8009396:	9309      	str	r3, [sp, #36]	; 0x24
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8009398:	4b50      	ldr	r3, [pc, #320]	; (80094dc <LoRaMacInitialization+0x35c>)
 800939a:	604b      	str	r3, [r1, #4]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800939c:	7838      	ldrb	r0, [r7, #0]
 800939e:	f001 fdc6 	bl	800af2e <RegionInitDefaults>

    MacCtx.MacCallbacks = callbacks;
 80093a2:	23d2      	movs	r3, #210	; 0xd2
 80093a4:	4941      	ldr	r1, [pc, #260]	; (80094ac <LoRaMacInitialization+0x32c>)
 80093a6:	9802      	ldr	r0, [sp, #8]
 80093a8:	009b      	lsls	r3, r3, #2
 80093aa:	50c8      	str	r0, [r1, r3]
    ResetMacParameters( );
 80093ac:	f7fe fac4 	bl	8007938 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 80093b0:	0023      	movs	r3, r4
 80093b2:	2201      	movs	r2, #1
 80093b4:	33fd      	adds	r3, #253	; 0xfd
 80093b6:	701a      	strb	r2, [r3, #0]

    MacCtx.MacPrimitives = primitives;
 80093b8:	23d1      	movs	r3, #209	; 0xd1
 80093ba:	493c      	ldr	r1, [pc, #240]	; (80094ac <LoRaMacInitialization+0x32c>)
 80093bc:	009b      	lsls	r3, r3, #2
 80093be:	50ce      	str	r6, [r1, r3]
    MacCtx.MacFlags.Value = 0;
 80093c0:	4b47      	ldr	r3, [pc, #284]	; (80094e0 <LoRaMacInitialization+0x360>)
    MacCtx.MacState = LORAMAC_STOPPED;

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 80093c2:	62e5      	str	r5, [r4, #44]	; 0x2c
    MacCtx.MacFlags.Value = 0;
 80093c4:	54cd      	strb	r5, [r1, r3]
    MacCtx.MacState = LORAMAC_STOPPED;
 80093c6:	3b42      	subs	r3, #66	; 0x42
 80093c8:	3bff      	subs	r3, #255	; 0xff
 80093ca:	50ca      	str	r2, [r1, r3]
    Nvm.MacGroup1.AggregatedTimeOff = 0;

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 80093cc:	2101      	movs	r1, #1
 80093ce:	002a      	movs	r2, r5
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 80093d0:	6325      	str	r5, [r4, #48]	; 0x30
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 80093d2:	4b44      	ldr	r3, [pc, #272]	; (80094e4 <LoRaMacInitialization+0x364>)
 80093d4:	9500      	str	r5, [sp, #0]
 80093d6:	4249      	negs	r1, r1
 80093d8:	4843      	ldr	r0, [pc, #268]	; (80094e8 <LoRaMacInitialization+0x368>)
 80093da:	f004 fd93 	bl	800df04 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 80093de:	2101      	movs	r1, #1
 80093e0:	002a      	movs	r2, r5
 80093e2:	4b42      	ldr	r3, [pc, #264]	; (80094ec <LoRaMacInitialization+0x36c>)
 80093e4:	9500      	str	r5, [sp, #0]
 80093e6:	4249      	negs	r1, r1
 80093e8:	4841      	ldr	r0, [pc, #260]	; (80094f0 <LoRaMacInitialization+0x370>)
 80093ea:	f004 fd8b 	bl	800df04 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 80093ee:	2101      	movs	r1, #1
 80093f0:	002a      	movs	r2, r5
 80093f2:	4b40      	ldr	r3, [pc, #256]	; (80094f4 <LoRaMacInitialization+0x374>)
 80093f4:	9500      	str	r5, [sp, #0]
 80093f6:	4249      	negs	r1, r1
 80093f8:	483f      	ldr	r0, [pc, #252]	; (80094f8 <LoRaMacInitialization+0x378>)
 80093fa:	f004 fd83 	bl	800df04 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 80093fe:	2101      	movs	r1, #1
 8009400:	002a      	movs	r2, r5
 8009402:	4249      	negs	r1, r1
 8009404:	4b3d      	ldr	r3, [pc, #244]	; (80094fc <LoRaMacInitialization+0x37c>)
 8009406:	9500      	str	r5, [sp, #0]
 8009408:	483d      	ldr	r0, [pc, #244]	; (8009500 <LoRaMacInitialization+0x380>)

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 800940a:	ad04      	add	r5, sp, #16
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 800940c:	f004 fd7a 	bl	800df04 <UTIL_TIMER_Create>
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8009410:	0028      	movs	r0, r5
 8009412:	f004 fd07 	bl	800de24 <SysTimeGetMcuTime>
 8009416:	1d63      	adds	r3, r4, #5
 8009418:	33ff      	adds	r3, #255	; 0xff
 800941a:	cd06      	ldmia	r5!, {r1, r2}
 800941c:	c306      	stmia	r3!, {r1, r2}

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 800941e:	21d3      	movs	r1, #211	; 0xd3
 8009420:	4b38      	ldr	r3, [pc, #224]	; (8009504 <LoRaMacInitialization+0x384>)
 8009422:	4a22      	ldr	r2, [pc, #136]	; (80094ac <LoRaMacInitialization+0x32c>)
 8009424:	0089      	lsls	r1, r1, #2
 8009426:	5053      	str	r3, [r2, r1]
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8009428:	23d5      	movs	r3, #213	; 0xd5
 800942a:	4920      	ldr	r1, [pc, #128]	; (80094ac <LoRaMacInitialization+0x32c>)
 800942c:	4a36      	ldr	r2, [pc, #216]	; (8009508 <LoRaMacInitialization+0x388>)
 800942e:	009b      	lsls	r3, r3, #2
 8009430:	50ca      	str	r2, [r1, r3]
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8009432:	4a36      	ldr	r2, [pc, #216]	; (800950c <LoRaMacInitialization+0x38c>)
 8009434:	3308      	adds	r3, #8
 8009436:	50ca      	str	r2, [r1, r3]
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8009438:	4a35      	ldr	r2, [pc, #212]	; (8009510 <LoRaMacInitialization+0x390>)
 800943a:	3b0c      	subs	r3, #12
 800943c:	50ca      	str	r2, [r1, r3]
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
    Radio.Init( &MacCtx.RadioEvents );
 800943e:	4e35      	ldr	r6, [pc, #212]	; (8009514 <LoRaMacInitialization+0x394>)
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8009440:	4a35      	ldr	r2, [pc, #212]	; (8009518 <LoRaMacInitialization+0x398>)
 8009442:	3308      	adds	r3, #8
 8009444:	50ca      	str	r2, [r1, r3]
    Radio.Init( &MacCtx.RadioEvents );
 8009446:	6833      	ldr	r3, [r6, #0]
 8009448:	4834      	ldr	r0, [pc, #208]	; (800951c <LoRaMacInitialization+0x39c>)
 800944a:	9303      	str	r3, [sp, #12]
 800944c:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 800944e:	9b02      	ldr	r3, [sp, #8]
 8009450:	4833      	ldr	r0, [pc, #204]	; (8009520 <LoRaMacInitialization+0x3a0>)
 8009452:	6899      	ldr	r1, [r3, #8]
 8009454:	f7fd fa18 	bl	8006888 <SecureElementInit>
 8009458:	2800      	cmp	r0, #0
 800945a:	d003      	beq.n	8009464 <LoRaMacInitialization+0x2e4>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800945c:	2511      	movs	r5, #17
    Radio.Sleep( );

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );

    return LORAMAC_STATUS_OK;
}
 800945e:	0028      	movs	r0, r5
 8009460:	b00d      	add	sp, #52	; 0x34
 8009462:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8009464:	0020      	movs	r0, r4
 8009466:	f001 f9e5 	bl	800a834 <LoRaMacCryptoInit>
 800946a:	2800      	cmp	r0, #0
 800946c:	d1f6      	bne.n	800945c <LoRaMacInitialization+0x2dc>
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 800946e:	f000 feef 	bl	800a250 <LoRaMacCommandsInit>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009472:	2513      	movs	r5, #19
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8009474:	2800      	cmp	r0, #0
 8009476:	d1f2      	bne.n	800945e <LoRaMacInitialization+0x2de>
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8009478:	482a      	ldr	r0, [pc, #168]	; (8009524 <LoRaMacInitialization+0x3a4>)
 800947a:	f001 fa4d 	bl	800a918 <LoRaMacCryptoSetMulticastReference>
 800947e:	1e05      	subs	r5, r0, #0
 8009480:	d1ec      	bne.n	800945c <LoRaMacInitialization+0x2dc>
    srand1( Radio.Random( ) );
 8009482:	6973      	ldr	r3, [r6, #20]
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8009484:	34fd      	adds	r4, #253	; 0xfd
    srand1( Radio.Random( ) );
 8009486:	9302      	str	r3, [sp, #8]
 8009488:	4798      	blx	r3
 800948a:	f002 fed7 	bl	800c23c <srand1>
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800948e:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8009490:	7820      	ldrb	r0, [r4, #0]
 8009492:	9302      	str	r3, [sp, #8]
 8009494:	4798      	blx	r3
    Radio.Sleep( );
 8009496:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8009498:	9302      	str	r3, [sp, #8]
 800949a:	4798      	blx	r3
    MacCtx.AllowRequests = requestState;
 800949c:	2201      	movs	r2, #1
 800949e:	4b22      	ldr	r3, [pc, #136]	; (8009528 <LoRaMacInitialization+0x3a8>)
 80094a0:	4902      	ldr	r1, [pc, #8]	; (80094ac <LoRaMacInitialization+0x32c>)
 80094a2:	54ca      	strb	r2, [r1, r3]
    return LORAMAC_STATUS_OK;
 80094a4:	e7db      	b.n	800945e <LoRaMacInitialization+0x2de>
 80094a6:	46c0      	nop			; (mov r8, r8)
 80094a8:	20000684 	.word	0x20000684
 80094ac:	200009d0 	.word	0x200009d0
 80094b0:	00000412 	.word	0x00000412
 80094b4:	00000411 	.word	0x00000411
 80094b8:	01000300 	.word	0x01000300
 80094bc:	20000710 	.word	0x20000710
 80094c0:	20000714 	.word	0x20000714
 80094c4:	20000718 	.word	0x20000718
 80094c8:	2000071c 	.word	0x2000071c
 80094cc:	20000720 	.word	0x20000720
 80094d0:	000003f6 	.word	0x000003f6
 80094d4:	2000068c 	.word	0x2000068c
 80094d8:	2000085c 	.word	0x2000085c
 80094dc:	200008f0 	.word	0x200008f0
 80094e0:	00000481 	.word	0x00000481
 80094e4:	08008619 	.word	0x08008619
 80094e8:	20000d38 	.word	0x20000d38
 80094ec:	08007fa9 	.word	0x08007fa9
 80094f0:	20000d50 	.word	0x20000d50
 80094f4:	08008005 	.word	0x08008005
 80094f8:	20000d68 	.word	0x20000d68
 80094fc:	080076a5 	.word	0x080076a5
 8009500:	20000dc8 	.word	0x20000dc8
 8009504:	080078e5 	.word	0x080078e5
 8009508:	08007895 	.word	0x08007895
 800950c:	08007625 	.word	0x08007625
 8009510:	08007859 	.word	0x08007859
 8009514:	0800eb54 	.word	0x0800eb54
 8009518:	0800781d 	.word	0x0800781d
 800951c:	20000d1c 	.word	0x20000d1c
 8009520:	2000079c 	.word	0x2000079c
 8009524:	20000754 	.word	0x20000754
 8009528:	00000482 	.word	0x00000482

0800952c <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
    MacCtx.MacState = LORAMAC_IDLE;
 800952c:	23d0      	movs	r3, #208	; 0xd0
 800952e:	2000      	movs	r0, #0
 8009530:	4a01      	ldr	r2, [pc, #4]	; (8009538 <LoRaMacStart+0xc>)
 8009532:	009b      	lsls	r3, r3, #2
 8009534:	50d0      	str	r0, [r2, r3]
    return LORAMAC_STATUS_OK;
}
 8009536:	4770      	bx	lr
 8009538:	200009d0 	.word	0x200009d0

0800953c <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 800953c:	b5f0      	push	{r4, r5, r6, r7, lr}
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800953e:	4b2a      	ldr	r3, [pc, #168]	; (80095e8 <LoRaMacQueryTxPossible+0xac>)
{
 8009540:	b089      	sub	sp, #36	; 0x24
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8009542:	001a      	movs	r2, r3
{
 8009544:	0005      	movs	r5, r0
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8009546:	4668      	mov	r0, sp
{
 8009548:	000c      	movs	r4, r1
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800954a:	6a99      	ldr	r1, [r3, #40]	; 0x28
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800954c:	32c5      	adds	r2, #197	; 0xc5
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800954e:	9101      	str	r1, [sp, #4]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8009550:	7812      	ldrb	r2, [r2, #0]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
    size_t macCmdsSize = 0;
 8009552:	2600      	movs	r6, #0
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8009554:	7082      	strb	r2, [r0, #2]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8009556:	0018      	movs	r0, r3
 8009558:	466a      	mov	r2, sp
 800955a:	30c4      	adds	r0, #196	; 0xc4
 800955c:	7800      	ldrb	r0, [r0, #0]
 800955e:	3203      	adds	r2, #3
 8009560:	7010      	strb	r0, [r2, #0]
    size_t macCmdsSize = 0;
 8009562:	9602      	str	r6, [sp, #8]

    if( txInfo == NULL )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8009564:	2003      	movs	r0, #3
    if( txInfo == NULL )
 8009566:	42b4      	cmp	r4, r6
 8009568:	d035      	beq.n	80095d6 <LoRaMacQueryTxPossible+0x9a>
    }

    // Setup ADR request
    adrNext.Version = Nvm.MacGroup2.Version;
 800956a:	001f      	movs	r7, r3
 800956c:	a803      	add	r0, sp, #12
    adrNext.UpdateChanMask = false;
 800956e:	7106      	strb	r6, [r0, #4]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8009570:	001e      	movs	r6, r3
    adrNext.Version = Nvm.MacGroup2.Version;
 8009572:	37fc      	adds	r7, #252	; 0xfc
 8009574:	693f      	ldr	r7, [r7, #16]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8009576:	36fe      	adds	r6, #254	; 0xfe
    adrNext.Version = Nvm.MacGroup2.Version;
 8009578:	9703      	str	r7, [sp, #12]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800957a:	7836      	ldrb	r6, [r6, #0]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800957c:	6081      	str	r1, [r0, #8]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800957e:	21fd      	movs	r1, #253	; 0xfd
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8009580:	7146      	strb	r6, [r0, #5]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8009582:	4e1a      	ldr	r6, [pc, #104]	; (80095ec <LoRaMacQueryTxPossible+0xb0>)
 8009584:	0089      	lsls	r1, r1, #2
 8009586:	5871      	ldr	r1, [r6, r1]
 8009588:	9106      	str	r1, [sp, #24]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800958a:	8f19      	ldrh	r1, [r3, #56]	; 0x38
 800958c:	ba49      	rev16	r1, r1
 800958e:	8201      	strh	r1, [r0, #16]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009590:	0019      	movs	r1, r3
 8009592:	3174      	adds	r1, #116	; 0x74
 8009594:	7809      	ldrb	r1, [r1, #0]
    adrNext.Region = Nvm.MacGroup2.Region;
 8009596:	3340      	adds	r3, #64	; 0x40
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009598:	7481      	strb	r1, [r0, #18]

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 800959a:	4669      	mov	r1, sp
    adrNext.Region = Nvm.MacGroup2.Region;
 800959c:	781b      	ldrb	r3, [r3, #0]
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 800959e:	3102      	adds	r1, #2
    adrNext.Region = Nvm.MacGroup2.Region;
 80095a0:	74c3      	strb	r3, [r0, #19]
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 80095a2:	ab01      	add	r3, sp, #4
 80095a4:	f000 fdc4 	bl	800a130 <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80095a8:	466b      	mov	r3, sp
 80095aa:	2002      	movs	r0, #2
 80095ac:	5618      	ldrsb	r0, [r3, r0]
 80095ae:	f7fe f85f 	bl	8007670 <GetMaxAppPayloadWithoutFOptsLength>
 80095b2:	7060      	strb	r0, [r4, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80095b4:	a802      	add	r0, sp, #8
 80095b6:	f000 fef3 	bl	800a3a0 <LoRaMacCommandsGetSizeSerializedCmds>
 80095ba:	2800      	cmp	r0, #0
 80095bc:	d111      	bne.n	80095e2 <LoRaMacQueryTxPossible+0xa6>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 80095be:	9b02      	ldr	r3, [sp, #8]
 80095c0:	2b0f      	cmp	r3, #15
 80095c2:	d80a      	bhi.n	80095da <LoRaMacQueryTxPossible+0x9e>
 80095c4:	7862      	ldrb	r2, [r4, #1]
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d807      	bhi.n	80095da <LoRaMacQueryTxPossible+0x9e>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 80095ca:	1ad1      	subs	r1, r2, r3

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 80095cc:	18eb      	adds	r3, r5, r3
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 80095ce:	7021      	strb	r1, [r4, #0]
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 80095d0:	429a      	cmp	r2, r3
 80095d2:	d200      	bcs.n	80095d6 <LoRaMacQueryTxPossible+0x9a>
        {
            return LORAMAC_STATUS_OK;
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 80095d4:	3008      	adds	r0, #8
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 80095d6:	b009      	add	sp, #36	; 0x24
 80095d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 80095da:	2300      	movs	r3, #0
        return LORAMAC_STATUS_LENGTH_ERROR;
 80095dc:	2008      	movs	r0, #8
        txInfo->MaxPossibleApplicationDataSize = 0;
 80095de:	7023      	strb	r3, [r4, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 80095e0:	e7f9      	b.n	80095d6 <LoRaMacQueryTxPossible+0x9a>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80095e2:	2013      	movs	r0, #19
 80095e4:	e7f7      	b.n	80095d6 <LoRaMacQueryTxPossible+0x9a>
 80095e6:	46c0      	nop			; (mov r8, r8)
 80095e8:	20000684 	.word	0x20000684
 80095ec:	200009d0 	.word	0x200009d0

080095f0 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 80095f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80095f2:	0004      	movs	r4, r0
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80095f4:	2003      	movs	r0, #3
    if( mibGet == NULL )
 80095f6:	2c00      	cmp	r4, #0
 80095f8:	d01e      	beq.n	8009638 <LoRaMacMibGetRequestConfirm+0x48>
    }

    switch( mibGet->Type )
 80095fa:	7820      	ldrb	r0, [r4, #0]
 80095fc:	2828      	cmp	r0, #40	; 0x28
 80095fe:	d900      	bls.n	8009602 <LoRaMacMibGetRequestConfirm+0x12>
 8009600:	e091      	b.n	8009726 <LoRaMacMibGetRequestConfirm+0x136>
 8009602:	f7f6 fd93 	bl	800012c <__gnu_thumb1_case_uqi>
 8009606:	1b15      	.short	0x1b15
 8009608:	2c282520 	.word	0x2c282520
 800960c:	90909031 	.word	0x90909031
 8009610:	90909090 	.word	0x90909090
 8009614:	3a373490 	.word	0x3a373490
 8009618:	514d4943 	.word	0x514d4943
 800961c:	5d5a5457 	.word	0x5d5a5457
 8009620:	69666360 	.word	0x69666360
 8009624:	72756f6c 	.word	0x72756f6c
 8009628:	847e7b78 	.word	0x847e7b78
 800962c:	9082      	.short	0x9082
 800962e:	88          	.byte	0x88
 800962f:	00          	.byte	0x00
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8009630:	4b3f      	ldr	r3, [pc, #252]	; (8009730 <LoRaMacMibGetRequestConfirm+0x140>)
 8009632:	33fc      	adds	r3, #252	; 0xfc
 8009634:	781b      	ldrb	r3, [r3, #0]
 8009636:	7123      	strb	r3, [r4, #4]
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
            break;
        }
    }
    return status;
}
 8009638:	b004      	add	sp, #16
 800963a:	bd10      	pop	{r4, pc}
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800963c:	4b3c      	ldr	r3, [pc, #240]	; (8009730 <LoRaMacMibGetRequestConfirm+0x140>)
 800963e:	33ff      	adds	r3, #255	; 0xff
 8009640:	7c5b      	ldrb	r3, [r3, #17]
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8009642:	7123      	strb	r3, [r4, #4]
            break;
 8009644:	e002      	b.n	800964c <LoRaMacMibGetRequestConfirm+0x5c>
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 8009646:	f7fd fab1 	bl	8006bac <SecureElementGetDevEui>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 800964a:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800964c:	2000      	movs	r0, #0
            break;
 800964e:	e7f3      	b.n	8009638 <LoRaMacMibGetRequestConfirm+0x48>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 8009650:	f7fd fac2 	bl	8006bd8 <SecureElementGetJoinEui>
 8009654:	e7f9      	b.n	800964a <LoRaMacMibGetRequestConfirm+0x5a>
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8009656:	4b36      	ldr	r3, [pc, #216]	; (8009730 <LoRaMacMibGetRequestConfirm+0x140>)
 8009658:	33fe      	adds	r3, #254	; 0xfe
 800965a:	781b      	ldrb	r3, [r3, #0]
 800965c:	e7f1      	b.n	8009642 <LoRaMacMibGetRequestConfirm+0x52>
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 800965e:	4b34      	ldr	r3, [pc, #208]	; (8009730 <LoRaMacMibGetRequestConfirm+0x140>)
 8009660:	33c8      	adds	r3, #200	; 0xc8
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 8009662:	681b      	ldr	r3, [r3, #0]
            mibGet->Param.Contexts = GetNvmData( );
 8009664:	6063      	str	r3, [r4, #4]
            break;
 8009666:	e7f1      	b.n	800964c <LoRaMacMibGetRequestConfirm+0x5c>
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 8009668:	4b31      	ldr	r3, [pc, #196]	; (8009730 <LoRaMacMibGetRequestConfirm+0x140>)
 800966a:	33cc      	adds	r3, #204	; 0xcc
 800966c:	e7f9      	b.n	8009662 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 800966e:	4b30      	ldr	r3, [pc, #192]	; (8009730 <LoRaMacMibGetRequestConfirm+0x140>)
 8009670:	33fd      	adds	r3, #253	; 0xfd
 8009672:	e7f2      	b.n	800965a <LoRaMacMibGetRequestConfirm+0x6a>
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8009674:	4b2e      	ldr	r3, [pc, #184]	; (8009730 <LoRaMacMibGetRequestConfirm+0x140>)
 8009676:	3380      	adds	r3, #128	; 0x80
 8009678:	e7ef      	b.n	800965a <LoRaMacMibGetRequestConfirm+0x6a>
            getPhy.Attribute = PHY_CHANNELS;
 800967a:	231d      	movs	r3, #29
 800967c:	a902      	add	r1, sp, #8
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800967e:	700b      	strb	r3, [r1, #0]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009680:	4b2b      	ldr	r3, [pc, #172]	; (8009730 <LoRaMacMibGetRequestConfirm+0x140>)
 8009682:	3340      	adds	r3, #64	; 0x40
 8009684:	7818      	ldrb	r0, [r3, #0]
 8009686:	f001 fc3f 	bl	800af08 <RegionGetPhyParam>
 800968a:	e7de      	b.n	800964a <LoRaMacMibGetRequestConfirm+0x5a>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800968c:	4b28      	ldr	r3, [pc, #160]	; (8009730 <LoRaMacMibGetRequestConfirm+0x140>)
 800968e:	3404      	adds	r4, #4
 8009690:	3364      	adds	r3, #100	; 0x64
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8009692:	cb06      	ldmia	r3!, {r1, r2}
 8009694:	c406      	stmia	r4!, {r1, r2}
            break;
 8009696:	e7d9      	b.n	800964c <LoRaMacMibGetRequestConfirm+0x5c>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8009698:	4b25      	ldr	r3, [pc, #148]	; (8009730 <LoRaMacMibGetRequestConfirm+0x140>)
 800969a:	33a4      	adds	r3, #164	; 0xa4
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800969c:	3404      	adds	r4, #4
 800969e:	e7f8      	b.n	8009692 <LoRaMacMibGetRequestConfirm+0xa2>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 80096a0:	4b23      	ldr	r3, [pc, #140]	; (8009730 <LoRaMacMibGetRequestConfirm+0x140>)
 80096a2:	3404      	adds	r4, #4
 80096a4:	336c      	adds	r3, #108	; 0x6c
 80096a6:	e7f4      	b.n	8009692 <LoRaMacMibGetRequestConfirm+0xa2>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80096a8:	4b21      	ldr	r3, [pc, #132]	; (8009730 <LoRaMacMibGetRequestConfirm+0x140>)
 80096aa:	33ac      	adds	r3, #172	; 0xac
 80096ac:	e7f6      	b.n	800969c <LoRaMacMibGetRequestConfirm+0xac>
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 80096ae:	231b      	movs	r3, #27
 80096b0:	a902      	add	r1, sp, #8
 80096b2:	e7e4      	b.n	800967e <LoRaMacMibGetRequestConfirm+0x8e>
            getPhy.Attribute = PHY_CHANNELS_MASK;
 80096b4:	231a      	movs	r3, #26
 80096b6:	a902      	add	r1, sp, #8
 80096b8:	e7e1      	b.n	800967e <LoRaMacMibGetRequestConfirm+0x8e>
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80096ba:	4b1d      	ldr	r3, [pc, #116]	; (8009730 <LoRaMacMibGetRequestConfirm+0x140>)
 80096bc:	3360      	adds	r3, #96	; 0x60
 80096be:	e7cc      	b.n	800965a <LoRaMacMibGetRequestConfirm+0x6a>
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 80096c0:	4b1b      	ldr	r3, [pc, #108]	; (8009730 <LoRaMacMibGetRequestConfirm+0x140>)
 80096c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096c4:	e7ce      	b.n	8009664 <LoRaMacMibGetRequestConfirm+0x74>
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 80096c6:	4b1a      	ldr	r3, [pc, #104]	; (8009730 <LoRaMacMibGetRequestConfirm+0x140>)
 80096c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096ca:	e7cb      	b.n	8009664 <LoRaMacMibGetRequestConfirm+0x74>
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 80096cc:	4b18      	ldr	r3, [pc, #96]	; (8009730 <LoRaMacMibGetRequestConfirm+0x140>)
 80096ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096d0:	e7c8      	b.n	8009664 <LoRaMacMibGetRequestConfirm+0x74>
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 80096d2:	4b17      	ldr	r3, [pc, #92]	; (8009730 <LoRaMacMibGetRequestConfirm+0x140>)
 80096d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096d6:	e7c5      	b.n	8009664 <LoRaMacMibGetRequestConfirm+0x74>
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 80096d8:	4b15      	ldr	r3, [pc, #84]	; (8009730 <LoRaMacMibGetRequestConfirm+0x140>)
 80096da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096dc:	e7c2      	b.n	8009664 <LoRaMacMibGetRequestConfirm+0x74>
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80096de:	4b14      	ldr	r3, [pc, #80]	; (8009730 <LoRaMacMibGetRequestConfirm+0x140>)
 80096e0:	33c5      	adds	r3, #197	; 0xc5
 80096e2:	e7ba      	b.n	800965a <LoRaMacMibGetRequestConfirm+0x6a>
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 80096e4:	4b12      	ldr	r3, [pc, #72]	; (8009730 <LoRaMacMibGetRequestConfirm+0x140>)
 80096e6:	3339      	adds	r3, #57	; 0x39
 80096e8:	e7b7      	b.n	800965a <LoRaMacMibGetRequestConfirm+0x6a>
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80096ea:	4b11      	ldr	r3, [pc, #68]	; (8009730 <LoRaMacMibGetRequestConfirm+0x140>)
 80096ec:	33c4      	adds	r3, #196	; 0xc4
 80096ee:	e7b4      	b.n	800965a <LoRaMacMibGetRequestConfirm+0x6a>
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 80096f0:	4b0f      	ldr	r3, [pc, #60]	; (8009730 <LoRaMacMibGetRequestConfirm+0x140>)
 80096f2:	3338      	adds	r3, #56	; 0x38
 80096f4:	e7b1      	b.n	800965a <LoRaMacMibGetRequestConfirm+0x6a>
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 80096f6:	4b0e      	ldr	r3, [pc, #56]	; (8009730 <LoRaMacMibGetRequestConfirm+0x140>)
 80096f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096fa:	e7b3      	b.n	8009664 <LoRaMacMibGetRequestConfirm+0x74>
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 80096fc:	4b0c      	ldr	r3, [pc, #48]	; (8009730 <LoRaMacMibGetRequestConfirm+0x140>)
 80096fe:	3348      	adds	r3, #72	; 0x48
 8009700:	e7ab      	b.n	800965a <LoRaMacMibGetRequestConfirm+0x6a>
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8009702:	4b0b      	ldr	r3, [pc, #44]	; (8009730 <LoRaMacMibGetRequestConfirm+0x140>)
 8009704:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8009706:	6063      	str	r3, [r4, #4]
 8009708:	e7a0      	b.n	800964c <LoRaMacMibGetRequestConfirm+0x5c>
            mibGet->Param.Contexts = GetNvmData( );
 800970a:	4b09      	ldr	r3, [pc, #36]	; (8009730 <LoRaMacMibGetRequestConfirm+0x140>)
 800970c:	e7aa      	b.n	8009664 <LoRaMacMibGetRequestConfirm+0x74>
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800970e:	4b08      	ldr	r3, [pc, #32]	; (8009730 <LoRaMacMibGetRequestConfirm+0x140>)
 8009710:	33bc      	adds	r3, #188	; 0xbc
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	e7f7      	b.n	8009706 <LoRaMacMibGetRequestConfirm+0x116>
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8009716:	4b06      	ldr	r3, [pc, #24]	; (8009730 <LoRaMacMibGetRequestConfirm+0x140>)
 8009718:	33fc      	adds	r3, #252	; 0xfc
 800971a:	691b      	ldr	r3, [r3, #16]
 800971c:	6063      	str	r3, [r4, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 800971e:	f001 fcb5 	bl	800b08c <RegionGetVersion>
 8009722:	60a0      	str	r0, [r4, #8]
            break;
 8009724:	e792      	b.n	800964c <LoRaMacMibGetRequestConfirm+0x5c>
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8009726:	0020      	movs	r0, r4
 8009728:	f000 fd83 	bl	800a232 <LoRaMacClassBMibGetRequestConfirm>
            break;
 800972c:	e784      	b.n	8009638 <LoRaMacMibGetRequestConfirm+0x48>
 800972e:	46c0      	nop			; (mov r8, r8)
 8009730:	20000684 	.word	0x20000684

08009734 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8009734:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009736:	1e04      	subs	r4, r0, #0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8009738:	d046      	beq.n	80097c8 <LoRaMacMibSetRequestConfirm+0x94>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800973a:	23d0      	movs	r3, #208	; 0xd0
 800973c:	4db5      	ldr	r5, [pc, #724]	; (8009a14 <LoRaMacMibSetRequestConfirm+0x2e0>)
 800973e:	009b      	lsls	r3, r3, #2
 8009740:	58eb      	ldr	r3, [r5, r3]
    {
        return LORAMAC_STATUS_BUSY;
 8009742:	2001      	movs	r0, #1
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8009744:	079a      	lsls	r2, r3, #30
 8009746:	d430      	bmi.n	80097aa <LoRaMacMibSetRequestConfirm+0x76>
    }

    switch( mibSet->Type )
 8009748:	7820      	ldrb	r0, [r4, #0]
 800974a:	2827      	cmp	r0, #39	; 0x27
 800974c:	d900      	bls.n	8009750 <LoRaMacMibSetRequestConfirm+0x1c>
 800974e:	e211      	b.n	8009b74 <LoRaMacMibSetRequestConfirm+0x440>
 8009750:	f7f6 fd00 	bl	8000154 <__gnu_thumb1_case_uhi>
 8009754:	002d0028 	.word	0x002d0028
 8009758:	003c0035 	.word	0x003c0035
 800975c:	00450040 	.word	0x00450040
 8009760:	004e004a 	.word	0x004e004a
 8009764:	005d0058 	.word	0x005d0058
 8009768:	00670062 	.word	0x00670062
 800976c:	0071006c 	.word	0x0071006c
 8009770:	007b0076 	.word	0x007b0076
 8009774:	02100087 	.word	0x02100087
 8009778:	00aa008b 	.word	0x00aa008b
 800977c:	00e700be 	.word	0x00e700be
 8009780:	00fa0109 	.word	0x00fa0109
 8009784:	0115010d 	.word	0x0115010d
 8009788:	011d0119 	.word	0x011d0119
 800978c:	01250121 	.word	0x01250121
 8009790:	013c0129 	.word	0x013c0129
 8009794:	01500166 	.word	0x01500166
 8009798:	017c0175 	.word	0x017c0175
 800979c:	01870183 	.word	0x01870183
 80097a0:	0204018c 	.word	0x0204018c
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 80097a4:	7920      	ldrb	r0, [r4, #4]
 80097a6:	f7fe fb5f 	bl	8007e68 <SwitchClass>
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
            break;
        }
    }
    return status;
}
 80097aa:	b004      	add	sp, #16
 80097ac:	bd70      	pop	{r4, r5, r6, pc}
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 80097ae:	7922      	ldrb	r2, [r4, #4]
 80097b0:	2a02      	cmp	r2, #2
 80097b2:	d009      	beq.n	80097c8 <LoRaMacMibSetRequestConfirm+0x94>
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 80097b4:	4b98      	ldr	r3, [pc, #608]	; (8009a18 <LoRaMacMibSetRequestConfirm+0x2e4>)
 80097b6:	33ff      	adds	r3, #255	; 0xff
 80097b8:	745a      	strb	r2, [r3, #17]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80097ba:	2000      	movs	r0, #0
            break;
 80097bc:	e7f5      	b.n	80097aa <LoRaMacMibSetRequestConfirm+0x76>
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 80097be:	6860      	ldr	r0, [r4, #4]
 80097c0:	f7fd f9e6 	bl	8006b90 <SecureElementSetDevEui>
 80097c4:	2800      	cmp	r0, #0
 80097c6:	d0f8      	beq.n	80097ba <LoRaMacMibSetRequestConfirm+0x86>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80097c8:	2003      	movs	r0, #3
 80097ca:	e7ee      	b.n	80097aa <LoRaMacMibSetRequestConfirm+0x76>
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 80097cc:	6860      	ldr	r0, [r4, #4]
 80097ce:	f7fd f9f3 	bl	8006bb8 <SecureElementSetJoinEui>
 80097d2:	e7f7      	b.n	80097c4 <LoRaMacMibSetRequestConfirm+0x90>
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 80097d4:	4b90      	ldr	r3, [pc, #576]	; (8009a18 <LoRaMacMibSetRequestConfirm+0x2e4>)
 80097d6:	7922      	ldrb	r2, [r4, #4]
 80097d8:	33fe      	adds	r3, #254	; 0xfe
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 80097da:	701a      	strb	r2, [r3, #0]
 80097dc:	e7ed      	b.n	80097ba <LoRaMacMibSetRequestConfirm+0x86>
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 80097de:	4b8e      	ldr	r3, [pc, #568]	; (8009a18 <LoRaMacMibSetRequestConfirm+0x2e4>)
 80097e0:	6862      	ldr	r2, [r4, #4]
 80097e2:	33c8      	adds	r3, #200	; 0xc8
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 80097e4:	601a      	str	r2, [r3, #0]
 80097e6:	e7e8      	b.n	80097ba <LoRaMacMibSetRequestConfirm+0x86>
 80097e8:	4b8b      	ldr	r3, [pc, #556]	; (8009a18 <LoRaMacMibSetRequestConfirm+0x2e4>)
 80097ea:	6862      	ldr	r2, [r4, #4]
 80097ec:	33cc      	adds	r3, #204	; 0xcc
 80097ee:	e7f9      	b.n	80097e4 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.AppKey != NULL )
 80097f0:	6861      	ldr	r1, [r4, #4]
 80097f2:	2900      	cmp	r1, #0
 80097f4:	d0e8      	beq.n	80097c8 <LoRaMacMibSetRequestConfirm+0x94>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 80097f6:	2000      	movs	r0, #0
 80097f8:	f001 f9ac 	bl	800ab54 <LoRaMacCryptoSetKey>
 80097fc:	2800      	cmp	r0, #0
 80097fe:	d0dc      	beq.n	80097ba <LoRaMacMibSetRequestConfirm+0x86>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8009800:	2011      	movs	r0, #17
 8009802:	e7d2      	b.n	80097aa <LoRaMacMibSetRequestConfirm+0x76>
            if( mibSet->Param.NwkKey != NULL )
 8009804:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8009806:	2001      	movs	r0, #1
            if( mibSet->Param.NwkKey != NULL )
 8009808:	2900      	cmp	r1, #0
 800980a:	d1f5      	bne.n	80097f8 <LoRaMacMibSetRequestConfirm+0xc4>
 800980c:	e7dc      	b.n	80097c8 <LoRaMacMibSetRequestConfirm+0x94>
            if( mibSet->Param.NwkSKey != NULL )
 800980e:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8009810:	2002      	movs	r0, #2
            if( mibSet->Param.NwkSKey != NULL )
 8009812:	2900      	cmp	r1, #0
 8009814:	d1f0      	bne.n	80097f8 <LoRaMacMibSetRequestConfirm+0xc4>
 8009816:	e7d7      	b.n	80097c8 <LoRaMacMibSetRequestConfirm+0x94>
            if( mibSet->Param.AppSKey != NULL )
 8009818:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 800981a:	2003      	movs	r0, #3
            if( mibSet->Param.AppSKey != NULL )
 800981c:	2900      	cmp	r1, #0
 800981e:	d1eb      	bne.n	80097f8 <LoRaMacMibSetRequestConfirm+0xc4>
 8009820:	e7d2      	b.n	80097c8 <LoRaMacMibSetRequestConfirm+0x94>
            if( mibSet->Param.McKEKey != NULL )
 8009822:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8009824:	207f      	movs	r0, #127	; 0x7f
            if( mibSet->Param.McKEKey != NULL )
 8009826:	2900      	cmp	r1, #0
 8009828:	d1e6      	bne.n	80097f8 <LoRaMacMibSetRequestConfirm+0xc4>
 800982a:	e7cd      	b.n	80097c8 <LoRaMacMibSetRequestConfirm+0x94>
            if( mibSet->Param.McKey0 != NULL )
 800982c:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 800982e:	2080      	movs	r0, #128	; 0x80
            if( mibSet->Param.McKey0 != NULL )
 8009830:	2900      	cmp	r1, #0
 8009832:	d1e1      	bne.n	80097f8 <LoRaMacMibSetRequestConfirm+0xc4>
 8009834:	e7c8      	b.n	80097c8 <LoRaMacMibSetRequestConfirm+0x94>
            if( mibSet->Param.McAppSKey0 != NULL )
 8009836:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8009838:	2081      	movs	r0, #129	; 0x81
            if( mibSet->Param.McAppSKey0 != NULL )
 800983a:	2900      	cmp	r1, #0
 800983c:	d1dc      	bne.n	80097f8 <LoRaMacMibSetRequestConfirm+0xc4>
 800983e:	e7c3      	b.n	80097c8 <LoRaMacMibSetRequestConfirm+0x94>
            if( mibSet->Param.McNwkSKey0 != NULL )
 8009840:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8009842:	2082      	movs	r0, #130	; 0x82
            if( mibSet->Param.McNwkSKey0 != NULL )
 8009844:	2900      	cmp	r1, #0
 8009846:	d1d7      	bne.n	80097f8 <LoRaMacMibSetRequestConfirm+0xc4>
 8009848:	e7be      	b.n	80097c8 <LoRaMacMibSetRequestConfirm+0x94>
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800984a:	4b73      	ldr	r3, [pc, #460]	; (8009a18 <LoRaMacMibSetRequestConfirm+0x2e4>)
 800984c:	7920      	ldrb	r0, [r4, #4]
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800984e:	4c73      	ldr	r4, [pc, #460]	; (8009a1c <LoRaMacMibSetRequestConfirm+0x2e8>)
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8009850:	33fd      	adds	r3, #253	; 0xfd
 8009852:	7018      	strb	r0, [r3, #0]
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8009854:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009856:	9301      	str	r3, [sp, #4]
 8009858:	4798      	blx	r3
            Radio.Sleep( );
 800985a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800985c:	9301      	str	r3, [sp, #4]
 800985e:	4798      	blx	r3
            break;
 8009860:	e7ab      	b.n	80097ba <LoRaMacMibSetRequestConfirm+0x86>
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8009862:	4b6d      	ldr	r3, [pc, #436]	; (8009a18 <LoRaMacMibSetRequestConfirm+0x2e4>)
 8009864:	7922      	ldrb	r2, [r4, #4]
 8009866:	3380      	adds	r3, #128	; 0x80
 8009868:	e7b7      	b.n	80097da <LoRaMacMibSetRequestConfirm+0xa6>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800986a:	7a23      	ldrb	r3, [r4, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800986c:	4d6a      	ldr	r5, [pc, #424]	; (8009a18 <LoRaMacMibSetRequestConfirm+0x2e4>)
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800986e:	aa02      	add	r2, sp, #8
 8009870:	7013      	strb	r3, [r2, #0]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009872:	002b      	movs	r3, r5
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8009874:	002e      	movs	r6, r5
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009876:	3375      	adds	r3, #117	; 0x75
 8009878:	781b      	ldrb	r3, [r3, #0]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 800987a:	3640      	adds	r6, #64	; 0x40
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800987c:	7053      	strb	r3, [r2, #1]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 800987e:	7830      	ldrb	r0, [r6, #0]
 8009880:	2207      	movs	r2, #7
 8009882:	a902      	add	r1, sp, #8
 8009884:	f001 fb5a 	bl	800af3c <RegionVerify>
 8009888:	2800      	cmp	r0, #0
 800988a:	d09d      	beq.n	80097c8 <LoRaMacMibSetRequestConfirm+0x94>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 800988c:	6863      	ldr	r3, [r4, #4]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 800988e:	2200      	movs	r2, #0
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8009890:	9302      	str	r3, [sp, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8009892:	7830      	ldrb	r0, [r6, #0]
 8009894:	a902      	add	r1, sp, #8
 8009896:	f001 fb51 	bl	800af3c <RegionVerify>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800989a:	3564      	adds	r5, #100	; 0x64
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 800989c:	2800      	cmp	r0, #0
 800989e:	d093      	beq.n	80097c8 <LoRaMacMibSetRequestConfirm+0x94>
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 80098a0:	3404      	adds	r4, #4
 80098a2:	cc0c      	ldmia	r4!, {r2, r3}
 80098a4:	c50c      	stmia	r5!, {r2, r3}
 80098a6:	e788      	b.n	80097ba <LoRaMacMibSetRequestConfirm+0x86>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80098a8:	7a23      	ldrb	r3, [r4, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80098aa:	4d5b      	ldr	r5, [pc, #364]	; (8009a18 <LoRaMacMibSetRequestConfirm+0x2e4>)
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80098ac:	aa02      	add	r2, sp, #8
 80098ae:	7013      	strb	r3, [r2, #0]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80098b0:	002b      	movs	r3, r5
 80098b2:	3375      	adds	r3, #117	; 0x75
 80098b4:	781b      	ldrb	r3, [r3, #0]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80098b6:	a902      	add	r1, sp, #8
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80098b8:	7053      	strb	r3, [r2, #1]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80098ba:	002b      	movs	r3, r5
 80098bc:	3340      	adds	r3, #64	; 0x40
 80098be:	2207      	movs	r2, #7
 80098c0:	7818      	ldrb	r0, [r3, #0]
 80098c2:	f001 fb3b 	bl	800af3c <RegionVerify>
 80098c6:	2800      	cmp	r0, #0
 80098c8:	d100      	bne.n	80098cc <LoRaMacMibSetRequestConfirm+0x198>
 80098ca:	e77d      	b.n	80097c8 <LoRaMacMibSetRequestConfirm+0x94>
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 80098cc:	35a4      	adds	r5, #164	; 0xa4
 80098ce:	e7e7      	b.n	80098a0 <LoRaMacMibSetRequestConfirm+0x16c>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80098d0:	7a23      	ldrb	r3, [r4, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80098d2:	4d51      	ldr	r5, [pc, #324]	; (8009a18 <LoRaMacMibSetRequestConfirm+0x2e4>)
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80098d4:	aa02      	add	r2, sp, #8
 80098d6:	7013      	strb	r3, [r2, #0]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80098d8:	002b      	movs	r3, r5
 80098da:	3375      	adds	r3, #117	; 0x75
 80098dc:	781b      	ldrb	r3, [r3, #0]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80098de:	a902      	add	r1, sp, #8
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80098e0:	7053      	strb	r3, [r2, #1]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80098e2:	002b      	movs	r3, r5
 80098e4:	3340      	adds	r3, #64	; 0x40
 80098e6:	2207      	movs	r2, #7
 80098e8:	7818      	ldrb	r0, [r3, #0]
 80098ea:	f001 fb27 	bl	800af3c <RegionVerify>
 80098ee:	2800      	cmp	r0, #0
 80098f0:	d100      	bne.n	80098f4 <LoRaMacMibSetRequestConfirm+0x1c0>
 80098f2:	e769      	b.n	80097c8 <LoRaMacMibSetRequestConfirm+0x94>
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 80098f4:	002b      	movs	r3, r5
 80098f6:	3404      	adds	r4, #4
 80098f8:	336c      	adds	r3, #108	; 0x6c
 80098fa:	cc06      	ldmia	r4!, {r1, r2}
 80098fc:	c306      	stmia	r3!, {r1, r2}
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 80098fe:	002b      	movs	r3, r5
 8009900:	33fc      	adds	r3, #252	; 0xfc
 8009902:	781b      	ldrb	r3, [r3, #0]
 8009904:	2b02      	cmp	r3, #2
 8009906:	d000      	beq.n	800990a <LoRaMacMibSetRequestConfirm+0x1d6>
 8009908:	e757      	b.n	80097ba <LoRaMacMibSetRequestConfirm+0x86>
 800990a:	35ff      	adds	r5, #255	; 0xff
 800990c:	7c6b      	ldrb	r3, [r5, #17]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d100      	bne.n	8009914 <LoRaMacMibSetRequestConfirm+0x1e0>
 8009912:	e752      	b.n	80097ba <LoRaMacMibSetRequestConfirm+0x86>
                    Radio.Sleep( );
 8009914:	4b41      	ldr	r3, [pc, #260]	; (8009a1c <LoRaMacMibSetRequestConfirm+0x2e8>)
 8009916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009918:	9301      	str	r3, [sp, #4]
 800991a:	4798      	blx	r3
                    OpenContinuousRxCWindow( );
 800991c:	f7fe fa6e 	bl	8007dfc <OpenContinuousRxCWindow>
 8009920:	e74b      	b.n	80097ba <LoRaMacMibSetRequestConfirm+0x86>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8009922:	7a23      	ldrb	r3, [r4, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009924:	4d3c      	ldr	r5, [pc, #240]	; (8009a18 <LoRaMacMibSetRequestConfirm+0x2e4>)
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8009926:	aa02      	add	r2, sp, #8
 8009928:	7013      	strb	r3, [r2, #0]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800992a:	002b      	movs	r3, r5
 800992c:	3375      	adds	r3, #117	; 0x75
 800992e:	781b      	ldrb	r3, [r3, #0]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8009930:	a902      	add	r1, sp, #8
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009932:	7053      	strb	r3, [r2, #1]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8009934:	002b      	movs	r3, r5
 8009936:	3340      	adds	r3, #64	; 0x40
 8009938:	2207      	movs	r2, #7
 800993a:	7818      	ldrb	r0, [r3, #0]
 800993c:	f001 fafe 	bl	800af3c <RegionVerify>
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8009940:	35ac      	adds	r5, #172	; 0xac
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8009942:	2800      	cmp	r0, #0
 8009944:	d1ac      	bne.n	80098a0 <LoRaMacMibSetRequestConfirm+0x16c>
 8009946:	e73f      	b.n	80097c8 <LoRaMacMibSetRequestConfirm+0x94>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8009948:	6863      	ldr	r3, [r4, #4]
 800994a:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800994c:	2301      	movs	r3, #1
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800994e:	aa02      	add	r2, sp, #8
 8009950:	7113      	strb	r3, [r2, #4]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8009952:	4b31      	ldr	r3, [pc, #196]	; (8009a18 <LoRaMacMibSetRequestConfirm+0x2e4>)
 8009954:	0011      	movs	r1, r2
 8009956:	3340      	adds	r3, #64	; 0x40
 8009958:	7818      	ldrb	r0, [r3, #0]
 800995a:	f001 fb02 	bl	800af62 <RegionChanMaskSet>
 800995e:	2800      	cmp	r0, #0
 8009960:	d000      	beq.n	8009964 <LoRaMacMibSetRequestConfirm+0x230>
 8009962:	e72a      	b.n	80097ba <LoRaMacMibSetRequestConfirm+0x86>
 8009964:	e730      	b.n	80097c8 <LoRaMacMibSetRequestConfirm+0x94>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8009966:	6863      	ldr	r3, [r4, #4]
 8009968:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800996a:	2300      	movs	r3, #0
 800996c:	e7ef      	b.n	800994e <LoRaMacMibSetRequestConfirm+0x21a>
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800996e:	7922      	ldrb	r2, [r4, #4]
 8009970:	1e53      	subs	r3, r2, #1
 8009972:	2b0e      	cmp	r3, #14
 8009974:	d900      	bls.n	8009978 <LoRaMacMibSetRequestConfirm+0x244>
 8009976:	e727      	b.n	80097c8 <LoRaMacMibSetRequestConfirm+0x94>
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8009978:	4b27      	ldr	r3, [pc, #156]	; (8009a18 <LoRaMacMibSetRequestConfirm+0x2e4>)
 800997a:	3360      	adds	r3, #96	; 0x60
 800997c:	e72d      	b.n	80097da <LoRaMacMibSetRequestConfirm+0xa6>
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800997e:	6862      	ldr	r2, [r4, #4]
 8009980:	4b25      	ldr	r3, [pc, #148]	; (8009a18 <LoRaMacMibSetRequestConfirm+0x2e4>)
 8009982:	64da      	str	r2, [r3, #76]	; 0x4c
            break;
 8009984:	e719      	b.n	80097ba <LoRaMacMibSetRequestConfirm+0x86>
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8009986:	6862      	ldr	r2, [r4, #4]
 8009988:	4b23      	ldr	r3, [pc, #140]	; (8009a18 <LoRaMacMibSetRequestConfirm+0x2e4>)
 800998a:	651a      	str	r2, [r3, #80]	; 0x50
            break;
 800998c:	e715      	b.n	80097ba <LoRaMacMibSetRequestConfirm+0x86>
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 800998e:	6862      	ldr	r2, [r4, #4]
 8009990:	4b21      	ldr	r3, [pc, #132]	; (8009a18 <LoRaMacMibSetRequestConfirm+0x2e4>)
 8009992:	655a      	str	r2, [r3, #84]	; 0x54
            break;
 8009994:	e711      	b.n	80097ba <LoRaMacMibSetRequestConfirm+0x86>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8009996:	6862      	ldr	r2, [r4, #4]
 8009998:	4b1f      	ldr	r3, [pc, #124]	; (8009a18 <LoRaMacMibSetRequestConfirm+0x2e4>)
 800999a:	659a      	str	r2, [r3, #88]	; 0x58
            break;
 800999c:	e70d      	b.n	80097ba <LoRaMacMibSetRequestConfirm+0x86>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800999e:	6862      	ldr	r2, [r4, #4]
 80099a0:	4b1d      	ldr	r3, [pc, #116]	; (8009a18 <LoRaMacMibSetRequestConfirm+0x2e4>)
 80099a2:	65da      	str	r2, [r3, #92]	; 0x5c
            break;
 80099a4:	e709      	b.n	80097ba <LoRaMacMibSetRequestConfirm+0x86>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 80099a6:	7923      	ldrb	r3, [r4, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 80099a8:	4c1b      	ldr	r4, [pc, #108]	; (8009a18 <LoRaMacMibSetRequestConfirm+0x2e4>)
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 80099aa:	aa02      	add	r2, sp, #8
 80099ac:	7013      	strb	r3, [r2, #0]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 80099ae:	0023      	movs	r3, r4
 80099b0:	3340      	adds	r3, #64	; 0x40
 80099b2:	2206      	movs	r2, #6
 80099b4:	7818      	ldrb	r0, [r3, #0]
 80099b6:	a902      	add	r1, sp, #8
 80099b8:	f001 fac0 	bl	800af3c <RegionVerify>
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 80099bc:	34c5      	adds	r4, #197	; 0xc5
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 80099be:	2800      	cmp	r0, #0
 80099c0:	d100      	bne.n	80099c4 <LoRaMacMibSetRequestConfirm+0x290>
 80099c2:	e701      	b.n	80097c8 <LoRaMacMibSetRequestConfirm+0x94>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 80099c4:	ab02      	add	r3, sp, #8
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	7023      	strb	r3, [r4, #0]
 80099ca:	e6f6      	b.n	80097ba <LoRaMacMibSetRequestConfirm+0x86>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 80099cc:	7923      	ldrb	r3, [r4, #4]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80099ce:	4c12      	ldr	r4, [pc, #72]	; (8009a18 <LoRaMacMibSetRequestConfirm+0x2e4>)
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 80099d0:	aa02      	add	r2, sp, #8
 80099d2:	7013      	strb	r3, [r2, #0]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80099d4:	0023      	movs	r3, r4
 80099d6:	3374      	adds	r3, #116	; 0x74
 80099d8:	781b      	ldrb	r3, [r3, #0]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 80099da:	a902      	add	r1, sp, #8
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80099dc:	7093      	strb	r3, [r2, #2]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 80099de:	0023      	movs	r3, r4
 80099e0:	3340      	adds	r3, #64	; 0x40
 80099e2:	2205      	movs	r2, #5
 80099e4:	7818      	ldrb	r0, [r3, #0]
 80099e6:	f001 faa9 	bl	800af3c <RegionVerify>
 80099ea:	2800      	cmp	r0, #0
 80099ec:	d100      	bne.n	80099f0 <LoRaMacMibSetRequestConfirm+0x2bc>
 80099ee:	e6eb      	b.n	80097c8 <LoRaMacMibSetRequestConfirm+0x94>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 80099f0:	3439      	adds	r4, #57	; 0x39
 80099f2:	e7e7      	b.n	80099c4 <LoRaMacMibSetRequestConfirm+0x290>
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 80099f4:	7923      	ldrb	r3, [r4, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 80099f6:	4c08      	ldr	r4, [pc, #32]	; (8009a18 <LoRaMacMibSetRequestConfirm+0x2e4>)
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 80099f8:	aa02      	add	r2, sp, #8
 80099fa:	7013      	strb	r3, [r2, #0]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 80099fc:	0023      	movs	r3, r4
 80099fe:	3340      	adds	r3, #64	; 0x40
 8009a00:	220a      	movs	r2, #10
 8009a02:	7818      	ldrb	r0, [r3, #0]
 8009a04:	a902      	add	r1, sp, #8
 8009a06:	f001 fa99 	bl	800af3c <RegionVerify>
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8009a0a:	34c4      	adds	r4, #196	; 0xc4
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8009a0c:	2800      	cmp	r0, #0
 8009a0e:	d1d9      	bne.n	80099c4 <LoRaMacMibSetRequestConfirm+0x290>
 8009a10:	e6da      	b.n	80097c8 <LoRaMacMibSetRequestConfirm+0x94>
 8009a12:	46c0      	nop			; (mov r8, r8)
 8009a14:	200009d0 	.word	0x200009d0
 8009a18:	20000684 	.word	0x20000684
 8009a1c:	0800eb54 	.word	0x0800eb54
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8009a20:	7923      	ldrb	r3, [r4, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8009a22:	4c56      	ldr	r4, [pc, #344]	; (8009b7c <LoRaMacMibSetRequestConfirm+0x448>)
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8009a24:	aa02      	add	r2, sp, #8
 8009a26:	7013      	strb	r3, [r2, #0]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8009a28:	0023      	movs	r3, r4
 8009a2a:	3340      	adds	r3, #64	; 0x40
 8009a2c:	2209      	movs	r2, #9
 8009a2e:	7818      	ldrb	r0, [r3, #0]
 8009a30:	a902      	add	r1, sp, #8
 8009a32:	f001 fa83 	bl	800af3c <RegionVerify>
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8009a36:	3438      	adds	r4, #56	; 0x38
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8009a38:	2800      	cmp	r0, #0
 8009a3a:	d1c3      	bne.n	80099c4 <LoRaMacMibSetRequestConfirm+0x290>
 8009a3c:	e6c4      	b.n	80097c8 <LoRaMacMibSetRequestConfirm+0x94>
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8009a3e:	4b4f      	ldr	r3, [pc, #316]	; (8009b7c <LoRaMacMibSetRequestConfirm+0x448>)
 8009a40:	6862      	ldr	r2, [r4, #4]
 8009a42:	0019      	movs	r1, r3
 8009a44:	3108      	adds	r1, #8
 8009a46:	67ca      	str	r2, [r1, #124]	; 0x7c
 8009a48:	645a      	str	r2, [r3, #68]	; 0x44
            break;
 8009a4a:	e6b6      	b.n	80097ba <LoRaMacMibSetRequestConfirm+0x86>
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8009a4c:	4b4b      	ldr	r3, [pc, #300]	; (8009b7c <LoRaMacMibSetRequestConfirm+0x448>)
 8009a4e:	7922      	ldrb	r2, [r4, #4]
 8009a50:	0019      	movs	r1, r3
 8009a52:	3188      	adds	r1, #136	; 0x88
 8009a54:	700a      	strb	r2, [r1, #0]
 8009a56:	3348      	adds	r3, #72	; 0x48
 8009a58:	e6bf      	b.n	80097da <LoRaMacMibSetRequestConfirm+0xa6>
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8009a5a:	6862      	ldr	r2, [r4, #4]
 8009a5c:	4b47      	ldr	r3, [pc, #284]	; (8009b7c <LoRaMacMibSetRequestConfirm+0x448>)
 8009a5e:	67da      	str	r2, [r3, #124]	; 0x7c
            break;
 8009a60:	e6ab      	b.n	80097ba <LoRaMacMibSetRequestConfirm+0x86>
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8009a62:	4b46      	ldr	r3, [pc, #280]	; (8009b7c <LoRaMacMibSetRequestConfirm+0x448>)
 8009a64:	6862      	ldr	r2, [r4, #4]
 8009a66:	33bc      	adds	r3, #188	; 0xbc
 8009a68:	601a      	str	r2, [r3, #0]
            break;
 8009a6a:	e6a6      	b.n	80097ba <LoRaMacMibSetRequestConfirm+0x86>
            if( mibSet->Param.Contexts != 0 )
 8009a6c:	6864      	ldr	r4, [r4, #4]
 8009a6e:	2c00      	cmp	r4, #0
 8009a70:	d100      	bne.n	8009a74 <LoRaMacMibSetRequestConfirm+0x340>
 8009a72:	e6a9      	b.n	80097c8 <LoRaMacMibSetRequestConfirm+0x94>
        return LORAMAC_STATUS_BUSY;
 8009a74:	2001      	movs	r0, #1
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8009a76:	4283      	cmp	r3, r0
 8009a78:	d000      	beq.n	8009a7c <LoRaMacMibSetRequestConfirm+0x348>
 8009a7a:	e696      	b.n	80097aa <LoRaMacMibSetRequestConfirm+0x76>
    crc = Crc32( ( uint8_t* ) &nvm->Crypto, sizeof( nvm->Crypto ) -
 8009a7c:	2124      	movs	r1, #36	; 0x24
 8009a7e:	0020      	movs	r0, r4
 8009a80:	f002 fc18 	bl	800c2b4 <Crc32>
    if( crc == nvm->Crypto.Crc32 )
 8009a84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a86:	4298      	cmp	r0, r3
 8009a88:	d104      	bne.n	8009a94 <LoRaMacMibSetRequestConfirm+0x360>
        memcpy1( ( uint8_t* ) &Nvm.Crypto, ( uint8_t* ) &nvm->Crypto,
 8009a8a:	2228      	movs	r2, #40	; 0x28
 8009a8c:	0021      	movs	r1, r4
 8009a8e:	483b      	ldr	r0, [pc, #236]	; (8009b7c <LoRaMacMibSetRequestConfirm+0x448>)
 8009a90:	f002 fbf6 	bl	800c280 <memcpy1>
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup1, sizeof( nvm->MacGroup1 ) -
 8009a94:	0026      	movs	r6, r4
 8009a96:	3628      	adds	r6, #40	; 0x28
 8009a98:	2114      	movs	r1, #20
 8009a9a:	0030      	movs	r0, r6
 8009a9c:	f002 fc0a 	bl	800c2b4 <Crc32>
    if( crc == nvm->MacGroup1.Crc32 )
 8009aa0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009aa2:	4298      	cmp	r0, r3
 8009aa4:	d104      	bne.n	8009ab0 <LoRaMacMibSetRequestConfirm+0x37c>
        memcpy1( ( uint8_t* ) &Nvm.MacGroup1, ( uint8_t* ) &nvm->MacGroup1,
 8009aa6:	2218      	movs	r2, #24
 8009aa8:	0031      	movs	r1, r6
 8009aaa:	4835      	ldr	r0, [pc, #212]	; (8009b80 <LoRaMacMibSetRequestConfirm+0x44c>)
 8009aac:	f002 fbe8 	bl	800c280 <memcpy1>
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup2, sizeof( nvm->MacGroup2 ) -
 8009ab0:	0026      	movs	r6, r4
 8009ab2:	3640      	adds	r6, #64	; 0x40
 8009ab4:	21d4      	movs	r1, #212	; 0xd4
 8009ab6:	0030      	movs	r0, r6
 8009ab8:	f002 fbfc 	bl	800c2b4 <Crc32>
    if( crc == nvm->MacGroup2.Crc32 )
 8009abc:	0023      	movs	r3, r4
 8009abe:	33fc      	adds	r3, #252	; 0xfc
 8009ac0:	699b      	ldr	r3, [r3, #24]
 8009ac2:	4298      	cmp	r0, r3
 8009ac4:	d115      	bne.n	8009af2 <LoRaMacMibSetRequestConfirm+0x3be>
        memcpy1( ( uint8_t* ) &Nvm.MacGroup2, ( uint8_t* ) &nvm->MacGroup2,
 8009ac6:	22d8      	movs	r2, #216	; 0xd8
 8009ac8:	0031      	movs	r1, r6
 8009aca:	482e      	ldr	r0, [pc, #184]	; (8009b84 <LoRaMacMibSetRequestConfirm+0x450>)
 8009acc:	f002 fbd8 	bl	800c280 <memcpy1>
        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8009ad0:	4b2d      	ldr	r3, [pc, #180]	; (8009b88 <LoRaMacMibSetRequestConfirm+0x454>)
 8009ad2:	5cea      	ldrb	r2, [r5, r3]
 8009ad4:	3b35      	subs	r3, #53	; 0x35
 8009ad6:	54ea      	strb	r2, [r5, r3]
        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8009ad8:	22f9      	movs	r2, #249	; 0xf9
 8009ada:	4b28      	ldr	r3, [pc, #160]	; (8009b7c <LoRaMacMibSetRequestConfirm+0x448>)
 8009adc:	0092      	lsls	r2, r2, #2
 8009ade:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009ae0:	3375      	adds	r3, #117	; 0x75
        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8009ae2:	50a9      	str	r1, [r5, r2]
        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009ae4:	781a      	ldrb	r2, [r3, #0]
 8009ae6:	23fc      	movs	r3, #252	; 0xfc
 8009ae8:	009b      	lsls	r3, r3, #2
 8009aea:	54ea      	strb	r2, [r5, r3]
        MacCtx.RxWindowCConfig.RxContinuous = true;
 8009aec:	4b27      	ldr	r3, [pc, #156]	; (8009b8c <LoRaMacMibSetRequestConfirm+0x458>)
 8009aee:	4a28      	ldr	r2, [pc, #160]	; (8009b90 <LoRaMacMibSetRequestConfirm+0x45c>)
 8009af0:	52ea      	strh	r2, [r5, r3]
    crc = Crc32( ( uint8_t* ) &nvm->SecureElement, sizeof( nvm->SecureElement ) -
 8009af2:	0025      	movs	r5, r4
 8009af4:	3519      	adds	r5, #25
 8009af6:	35ff      	adds	r5, #255	; 0xff
 8009af8:	21bc      	movs	r1, #188	; 0xbc
 8009afa:	0028      	movs	r0, r5
 8009afc:	f002 fbda 	bl	800c2b4 <Crc32>
    if( crc == nvm->SecureElement.Crc32 )
 8009b00:	23ea      	movs	r3, #234	; 0xea
 8009b02:	005b      	lsls	r3, r3, #1
 8009b04:	58e3      	ldr	r3, [r4, r3]
 8009b06:	4298      	cmp	r0, r3
 8009b08:	d104      	bne.n	8009b14 <LoRaMacMibSetRequestConfirm+0x3e0>
        memcpy1( ( uint8_t* ) &Nvm.SecureElement,( uint8_t* ) &nvm->SecureElement,
 8009b0a:	22c0      	movs	r2, #192	; 0xc0
 8009b0c:	0029      	movs	r1, r5
 8009b0e:	4821      	ldr	r0, [pc, #132]	; (8009b94 <LoRaMacMibSetRequestConfirm+0x460>)
 8009b10:	f002 fbb6 	bl	800c280 <memcpy1>
    crc = Crc32( ( uint8_t* ) &nvm->RegionGroup1, sizeof( nvm->RegionGroup1 ) -
 8009b14:	0025      	movs	r5, r4
 8009b16:	35d9      	adds	r5, #217	; 0xd9
 8009b18:	35ff      	adds	r5, #255	; 0xff
 8009b1a:	2190      	movs	r1, #144	; 0x90
 8009b1c:	0028      	movs	r0, r5
 8009b1e:	f002 fbc9 	bl	800c2b4 <Crc32>
    if( crc == nvm->RegionGroup1.Crc32 )
 8009b22:	239a      	movs	r3, #154	; 0x9a
 8009b24:	009b      	lsls	r3, r3, #2
 8009b26:	58e3      	ldr	r3, [r4, r3]
 8009b28:	4298      	cmp	r0, r3
 8009b2a:	d104      	bne.n	8009b36 <LoRaMacMibSetRequestConfirm+0x402>
        memcpy1( ( uint8_t* ) &Nvm.RegionGroup1,( uint8_t* ) &nvm->RegionGroup1,
 8009b2c:	2294      	movs	r2, #148	; 0x94
 8009b2e:	0029      	movs	r1, r5
 8009b30:	4819      	ldr	r0, [pc, #100]	; (8009b98 <LoRaMacMibSetRequestConfirm+0x464>)
 8009b32:	f002 fba5 	bl	800c280 <memcpy1>
    crc = Crc32( ( uint8_t* ) &nvm->ClassB, sizeof( nvm->ClassB ) -
 8009b36:	23cd      	movs	r3, #205	; 0xcd
 8009b38:	009b      	lsls	r3, r3, #2
 8009b3a:	18e5      	adds	r5, r4, r3
 8009b3c:	2114      	movs	r1, #20
 8009b3e:	0028      	movs	r0, r5
 8009b40:	f002 fbb8 	bl	800c2b4 <Crc32>
    if( crc == nvm->ClassB.Crc32 )
 8009b44:	23d2      	movs	r3, #210	; 0xd2
 8009b46:	009b      	lsls	r3, r3, #2
 8009b48:	58e3      	ldr	r3, [r4, r3]
 8009b4a:	4298      	cmp	r0, r3
 8009b4c:	d000      	beq.n	8009b50 <LoRaMacMibSetRequestConfirm+0x41c>
 8009b4e:	e634      	b.n	80097ba <LoRaMacMibSetRequestConfirm+0x86>
        memcpy1( ( uint8_t* ) &Nvm.ClassB,( uint8_t* ) &nvm->ClassB,
 8009b50:	2218      	movs	r2, #24
 8009b52:	0029      	movs	r1, r5
 8009b54:	4811      	ldr	r0, [pc, #68]	; (8009b9c <LoRaMacMibSetRequestConfirm+0x468>)
 8009b56:	f002 fb93 	bl	800c280 <memcpy1>
 8009b5a:	e62e      	b.n	80097ba <LoRaMacMibSetRequestConfirm+0x86>
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8009b5c:	79a3      	ldrb	r3, [r4, #6]
 8009b5e:	2b01      	cmp	r3, #1
 8009b60:	d900      	bls.n	8009b64 <LoRaMacMibSetRequestConfirm+0x430>
 8009b62:	e631      	b.n	80097c8 <LoRaMacMibSetRequestConfirm+0x94>
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8009b64:	4b05      	ldr	r3, [pc, #20]	; (8009b7c <LoRaMacMibSetRequestConfirm+0x448>)
 8009b66:	6862      	ldr	r2, [r4, #4]
 8009b68:	33fc      	adds	r3, #252	; 0xfc
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8009b6a:	6860      	ldr	r0, [r4, #4]
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8009b6c:	611a      	str	r2, [r3, #16]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8009b6e:	f000 fe7f 	bl	800a870 <LoRaMacCryptoSetLrWanVersion>
 8009b72:	e643      	b.n	80097fc <LoRaMacMibSetRequestConfirm+0xc8>
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8009b74:	0020      	movs	r0, r4
 8009b76:	f000 fb5e 	bl	800a236 <LoRaMacMibClassBSetRequestConfirm>
            break;
 8009b7a:	e616      	b.n	80097aa <LoRaMacMibSetRequestConfirm+0x76>
 8009b7c:	20000684 	.word	0x20000684
 8009b80:	200006ac 	.word	0x200006ac
 8009b84:	200006c4 	.word	0x200006c4
 8009b88:	00000415 	.word	0x00000415
 8009b8c:	000003f2 	.word	0x000003f2
 8009b90:	00000201 	.word	0x00000201
 8009b94:	2000079c 	.word	0x2000079c
 8009b98:	2000085c 	.word	0x2000085c
 8009b9c:	200009b8 	.word	0x200009b8

08009ba0 <LoRaMacMlmeRequest>:

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8009ba0:	2300      	movs	r3, #0
{
 8009ba2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ba4:	b089      	sub	sp, #36	; 0x24
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8009ba6:	aa02      	add	r2, sp, #8
{
 8009ba8:	0006      	movs	r6, r0

    if( mlmeRequest == NULL )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8009baa:	2503      	movs	r5, #3
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8009bac:	8013      	strh	r3, [r2, #0]
    if( mlmeRequest == NULL )
 8009bae:	4298      	cmp	r0, r3
 8009bb0:	d004      	beq.n	8009bbc <LoRaMacMlmeRequest+0x1c>
    }
    if( LoRaMacIsBusy( ) == true )
 8009bb2:	f7fe fd63 	bl	800867c <LoRaMacIsBusy>
 8009bb6:	2800      	cmp	r0, #0
 8009bb8:	d003      	beq.n	8009bc2 <LoRaMacMlmeRequest+0x22>
    {
        return LORAMAC_STATUS_BUSY;
 8009bba:	2501      	movs	r5, #1
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
    }
    return status;
}
 8009bbc:	0028      	movs	r0, r5
 8009bbe:	b009      	add	sp, #36	; 0x24
 8009bc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8009bc2:	f000 fd33 	bl	800a62c <LoRaMacConfirmQueueIsFull>
 8009bc6:	2800      	cmp	r0, #0
 8009bc8:	d1f7      	bne.n	8009bba <LoRaMacMlmeRequest+0x1a>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8009bca:	f000 fd29 	bl	800a620 <LoRaMacConfirmQueueGetCnt>
 8009bce:	1e01      	subs	r1, r0, #0
 8009bd0:	d103      	bne.n	8009bda <LoRaMacMlmeRequest+0x3a>
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8009bd2:	2214      	movs	r2, #20
 8009bd4:	4866      	ldr	r0, [pc, #408]	; (8009d70 <LoRaMacMlmeRequest+0x1d0>)
 8009bd6:	f002 fb68 	bl	800c2aa <memset1>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009bda:	2201      	movs	r2, #1
 8009bdc:	4c65      	ldr	r4, [pc, #404]	; (8009d74 <LoRaMacMlmeRequest+0x1d4>)
 8009bde:	4b66      	ldr	r3, [pc, #408]	; (8009d78 <LoRaMacMlmeRequest+0x1d8>)
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8009be0:	4866      	ldr	r0, [pc, #408]	; (8009d7c <LoRaMacMlmeRequest+0x1dc>)
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009be2:	54e2      	strb	r2, [r4, r3]
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8009be4:	2304      	movs	r3, #4
 8009be6:	5c21      	ldrb	r1, [r4, r0]
 8009be8:	430b      	orrs	r3, r1
    queueElement.RestrictCommonReadyToHandle = false;
 8009bea:	2100      	movs	r1, #0
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8009bec:	5423      	strb	r3, [r4, r0]
    queueElement.Request = mlmeRequest->Type;
 8009bee:	7830      	ldrb	r0, [r6, #0]
 8009bf0:	ab03      	add	r3, sp, #12
 8009bf2:	7018      	strb	r0, [r3, #0]
    switch( mlmeRequest->Type )
 8009bf4:	3801      	subs	r0, #1
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009bf6:	705a      	strb	r2, [r3, #1]
    queueElement.RestrictCommonReadyToHandle = false;
 8009bf8:	70d9      	strb	r1, [r3, #3]
    switch( mlmeRequest->Type )
 8009bfa:	280d      	cmp	r0, #13
 8009bfc:	d900      	bls.n	8009c00 <LoRaMacMlmeRequest+0x60>
 8009bfe:	e0b0      	b.n	8009d62 <LoRaMacMlmeRequest+0x1c2>
 8009c00:	f7f6 fa94 	bl	800012c <__gnu_thumb1_case_uqi>
 8009c04:	59afaf07 	.word	0x59afaf07
 8009c08:	afaf8163 	.word	0xafaf8163
 8009c0c:	a3af8aaf 	.word	0xa3af8aaf
 8009c10:	9f8e      	.short	0x9f8e
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8009c12:	23d0      	movs	r3, #208	; 0xd0
 8009c14:	009b      	lsls	r3, r3, #2
 8009c16:	58e2      	ldr	r2, [r4, r3]
 8009c18:	2320      	movs	r3, #32
 8009c1a:	0015      	movs	r5, r2
 8009c1c:	401d      	ands	r5, r3
 8009c1e:	421a      	tst	r2, r3
 8009c20:	d1cb      	bne.n	8009bba <LoRaMacMlmeRequest+0x1a>
            ResetMacParameters( );
 8009c22:	f7fd fe89 	bl	8007938 <ResetMacParameters>
            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8009c26:	2104      	movs	r1, #4
 8009c28:	4b55      	ldr	r3, [pc, #340]	; (8009d80 <LoRaMacMlmeRequest+0x1e0>)
 8009c2a:	5671      	ldrsb	r1, [r6, r1]
 8009c2c:	002a      	movs	r2, r5
 8009c2e:	7818      	ldrb	r0, [r3, #0]
 8009c30:	4f54      	ldr	r7, [pc, #336]	; (8009d84 <LoRaMacMlmeRequest+0x1e4>)
 8009c32:	f001 f9fc 	bl	800b02e <RegionAlternateDr>
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8009c36:	2207      	movs	r2, #7
            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8009c38:	3739      	adds	r7, #57	; 0x39
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8009c3a:	ab03      	add	r3, sp, #12
            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8009c3c:	7038      	strb	r0, [r7, #0]
            SwitchClass( CLASS_A );
 8009c3e:	0028      	movs	r0, r5
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8009c40:	705a      	strb	r2, [r3, #1]
            SwitchClass( CLASS_A );
 8009c42:	f7fe f911 	bl	8007e68 <SwitchClass>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8009c46:	0023      	movs	r3, r4
 8009c48:	33ff      	adds	r3, #255	; 0xff
 8009c4a:	715d      	strb	r5, [r3, #5]
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8009c4c:	0023      	movs	r3, r4
 8009c4e:	4a4e      	ldr	r2, [pc, #312]	; (8009d88 <LoRaMacMlmeRequest+0x1e8>)
 8009c50:	33fc      	adds	r3, #252	; 0xfc
 8009c52:	60da      	str	r2, [r3, #12]
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8009c54:	0023      	movs	r3, r4
 8009c56:	22ff      	movs	r2, #255	; 0xff
 8009c58:	33fe      	adds	r3, #254	; 0xfe
 8009c5a:	81da      	strh	r2, [r3, #14]
            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 8009c5c:	f7fc ffbc 	bl	8006bd8 <SecureElementGetJoinEui>
 8009c60:	2208      	movs	r2, #8
 8009c62:	0001      	movs	r1, r0
 8009c64:	4849      	ldr	r0, [pc, #292]	; (8009d8c <LoRaMacMlmeRequest+0x1ec>)
 8009c66:	f002 fb0b 	bl	800c280 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 8009c6a:	f7fc ff9f 	bl	8006bac <SecureElementGetDevEui>
 8009c6e:	2208      	movs	r2, #8
 8009c70:	0001      	movs	r1, r0
 8009c72:	4847      	ldr	r0, [pc, #284]	; (8009d90 <LoRaMacMlmeRequest+0x1f0>)
 8009c74:	f002 fb04 	bl	800c280 <memcpy1>
    status = ScheduleTx( allowDelayedTx );
 8009c78:	0028      	movs	r0, r5
 8009c7a:	f7fd ff0f 	bl	8007a9c <ScheduleTx>
 8009c7e:	1e05      	subs	r5, r0, #0
            if( status != LORAMAC_STATUS_OK )
 8009c80:	d007      	beq.n	8009c92 <LoRaMacMlmeRequest+0xf2>
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8009c82:	2104      	movs	r1, #4
 8009c84:	4b3e      	ldr	r3, [pc, #248]	; (8009d80 <LoRaMacMlmeRequest+0x1e0>)
 8009c86:	2201      	movs	r2, #1
 8009c88:	5671      	ldrsb	r1, [r6, r1]
 8009c8a:	7818      	ldrb	r0, [r3, #0]
 8009c8c:	f001 f9cf 	bl	800b02e <RegionAlternateDr>
 8009c90:	7038      	strb	r0, [r7, #0]
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8009c92:	4b40      	ldr	r3, [pc, #256]	; (8009d94 <LoRaMacMlmeRequest+0x1f4>)
 8009c94:	58e3      	ldr	r3, [r4, r3]
 8009c96:	6133      	str	r3, [r6, #16]
    if( status != LORAMAC_STATUS_OK )
 8009c98:	2d00      	cmp	r5, #0
 8009c9a:	d064      	beq.n	8009d66 <LoRaMacMlmeRequest+0x1c6>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8009c9c:	f000 fcc0 	bl	800a620 <LoRaMacConfirmQueueGetCnt>
 8009ca0:	2800      	cmp	r0, #0
 8009ca2:	d000      	beq.n	8009ca6 <LoRaMacMlmeRequest+0x106>
 8009ca4:	e78a      	b.n	8009bbc <LoRaMacMlmeRequest+0x1c>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8009ca6:	2204      	movs	r2, #4
            MacCtx.NodeAckRequested = false;
 8009ca8:	4b3b      	ldr	r3, [pc, #236]	; (8009d98 <LoRaMacMlmeRequest+0x1f8>)
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8009caa:	4934      	ldr	r1, [pc, #208]	; (8009d7c <LoRaMacMlmeRequest+0x1dc>)
            MacCtx.NodeAckRequested = false;
 8009cac:	54e0      	strb	r0, [r4, r3]
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8009cae:	5c63      	ldrb	r3, [r4, r1]
 8009cb0:	4393      	bics	r3, r2
 8009cb2:	5463      	strb	r3, [r4, r1]
 8009cb4:	e782      	b.n	8009bbc <LoRaMacMlmeRequest+0x1c>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	2002      	movs	r0, #2
 8009cba:	a902      	add	r1, sp, #8
 8009cbc:	f000 fad6 	bl	800a26c <LoRaMacCommandsAddCmd>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009cc0:	2513      	movs	r5, #19
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8009cc2:	2800      	cmp	r0, #0
 8009cc4:	d1e5      	bne.n	8009c92 <LoRaMacMlmeRequest+0xf2>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 8009cc6:	2500      	movs	r5, #0
            break;
 8009cc8:	e7e3      	b.n	8009c92 <LoRaMacMlmeRequest+0xf2>
    continuousWave.Channel = MacCtx.Channel;
 8009cca:	4b34      	ldr	r3, [pc, #208]	; (8009d9c <LoRaMacMlmeRequest+0x1fc>)
 8009ccc:	a904      	add	r1, sp, #16
 8009cce:	5ce3      	ldrb	r3, [r4, r3]
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 8009cd0:	88b2      	ldrh	r2, [r6, #4]
    continuousWave.Channel = MacCtx.Channel;
 8009cd2:	700b      	strb	r3, [r1, #0]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009cd4:	4b2b      	ldr	r3, [pc, #172]	; (8009d84 <LoRaMacMlmeRequest+0x1e4>)
 8009cd6:	0018      	movs	r0, r3
 8009cd8:	3039      	adds	r0, #57	; 0x39
 8009cda:	7800      	ldrb	r0, [r0, #0]
 8009cdc:	7048      	strb	r0, [r1, #1]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8009cde:	0018      	movs	r0, r3
 8009ce0:	3038      	adds	r0, #56	; 0x38
 8009ce2:	7800      	ldrb	r0, [r0, #0]
    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 8009ce4:	3340      	adds	r3, #64	; 0x40
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8009ce6:	7088      	strb	r0, [r1, #2]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8009ce8:	6b98      	ldr	r0, [r3, #56]	; 0x38
    continuousWave.Timeout = timeout;
 8009cea:	818a      	strh	r2, [r1, #12]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8009cec:	6048      	str	r0, [r1, #4]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8009cee:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8009cf0:	6088      	str	r0, [r1, #8]
    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 8009cf2:	7818      	ldrb	r0, [r3, #0]
 8009cf4:	f001 f9b5 	bl	800b062 <RegionSetContinuousWave>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8009cf8:	22d0      	movs	r2, #208	; 0xd0
 8009cfa:	2302      	movs	r3, #2
 8009cfc:	0092      	lsls	r2, r2, #2
 8009cfe:	58a1      	ldr	r1, [r4, r2]
 8009d00:	430b      	orrs	r3, r1
 8009d02:	50a3      	str	r3, [r4, r2]
 8009d04:	e7df      	b.n	8009cc6 <LoRaMacMlmeRequest+0x126>
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8009d06:	210c      	movs	r1, #12
 8009d08:	4b25      	ldr	r3, [pc, #148]	; (8009da0 <LoRaMacMlmeRequest+0x200>)
 8009d0a:	88b2      	ldrh	r2, [r6, #4]
 8009d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d0e:	5671      	ldrsb	r1, [r6, r1]
 8009d10:	68b0      	ldr	r0, [r6, #8]
 8009d12:	9301      	str	r3, [sp, #4]
 8009d14:	4798      	blx	r3
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8009d16:	e7ef      	b.n	8009cf8 <LoRaMacMlmeRequest+0x158>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8009d18:	2200      	movs	r2, #0
 8009d1a:	200d      	movs	r0, #13
 8009d1c:	a902      	add	r1, sp, #8
 8009d1e:	e7cd      	b.n	8009cbc <LoRaMacMlmeRequest+0x11c>
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8009d20:	4b18      	ldr	r3, [pc, #96]	; (8009d84 <LoRaMacMlmeRequest+0x1e4>)
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8009d22:	2502      	movs	r5, #2
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8009d24:	33fc      	adds	r3, #252	; 0xfc
 8009d26:	781b      	ldrb	r3, [r3, #0]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d1b2      	bne.n	8009c92 <LoRaMacMlmeRequest+0xf2>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8009d2c:	7935      	ldrb	r5, [r6, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8009d2e:	0768      	lsls	r0, r5, #29
 8009d30:	0f40      	lsrs	r0, r0, #29
 8009d32:	f000 fa79 	bl	800a228 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8009d36:	ab02      	add	r3, sp, #8
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8009d38:	2201      	movs	r2, #1
 8009d3a:	0019      	movs	r1, r3
 8009d3c:	2010      	movs	r0, #16
                macCmdPayload[0] = value;
 8009d3e:	701d      	strb	r5, [r3, #0]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8009d40:	e7bc      	b.n	8009cbc <LoRaMacMlmeRequest+0x11c>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8009d42:	2200      	movs	r2, #0
 8009d44:	2012      	movs	r0, #18
 8009d46:	a902      	add	r1, sp, #8
 8009d48:	e7b8      	b.n	8009cbc <LoRaMacMlmeRequest+0x11c>
            queueElement.RestrictCommonReadyToHandle = true;
 8009d4a:	70da      	strb	r2, [r3, #3]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8009d4c:	f000 fa5d 	bl	800a20a <LoRaMacClassBIsAcquisitionInProgress>
                status = LORAMAC_STATUS_BUSY;
 8009d50:	2501      	movs	r5, #1
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8009d52:	1e07      	subs	r7, r0, #0
 8009d54:	d19d      	bne.n	8009c92 <LoRaMacMlmeRequest+0xf2>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8009d56:	f000 fa55 	bl	800a204 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8009d5a:	0038      	movs	r0, r7
 8009d5c:	f000 fa57 	bl	800a20e <LoRaMacClassBBeaconTimerEvent>
                status = LORAMAC_STATUS_OK;
 8009d60:	e7b1      	b.n	8009cc6 <LoRaMacMlmeRequest+0x126>
    switch( mlmeRequest->Type )
 8009d62:	2502      	movs	r5, #2
 8009d64:	e795      	b.n	8009c92 <LoRaMacMlmeRequest+0xf2>
        LoRaMacConfirmQueueAdd( &queueElement );
 8009d66:	a803      	add	r0, sp, #12
 8009d68:	f000 fbaa 	bl	800a4c0 <LoRaMacConfirmQueueAdd>
 8009d6c:	e726      	b.n	8009bbc <LoRaMacMlmeRequest+0x1c>
 8009d6e:	46c0      	nop			; (mov r8, r8)
 8009d70:	20000e1c 	.word	0x20000e1c
 8009d74:	200009d0 	.word	0x200009d0
 8009d78:	0000044d 	.word	0x0000044d
 8009d7c:	00000481 	.word	0x00000481
 8009d80:	200006c4 	.word	0x200006c4
 8009d84:	20000684 	.word	0x20000684
 8009d88:	200009d2 	.word	0x200009d2
 8009d8c:	20000ade 	.word	0x20000ade
 8009d90:	20000ae6 	.word	0x20000ae6
 8009d94:	00000484 	.word	0x00000484
 8009d98:	00000414 	.word	0x00000414
 8009d9c:	00000415 	.word	0x00000415
 8009da0:	0800eb54 	.word	0x0800eb54

08009da4 <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8009da4:	2300      	movs	r3, #0
 8009da6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009da8:	b095      	sub	sp, #84	; 0x54
 8009daa:	9000      	str	r0, [sp, #0]
 8009dac:	9107      	str	r1, [sp, #28]
 8009dae:	9301      	str	r3, [sp, #4]
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 8009db0:	2800      	cmp	r0, #0
 8009db2:	d103      	bne.n	8009dbc <LoRaMacMcpsRequest+0x18>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8009db4:	2403      	movs	r4, #3

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;

    return status;
}
 8009db6:	0020      	movs	r0, r4
 8009db8:	b015      	add	sp, #84	; 0x54
 8009dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( LoRaMacIsBusy( ) == true )
 8009dbc:	f7fe fc5e 	bl	800867c <LoRaMacIsBusy>
        return LORAMAC_STATUS_BUSY;
 8009dc0:	2401      	movs	r4, #1
    if( LoRaMacIsBusy( ) == true )
 8009dc2:	1e05      	subs	r5, r0, #0
 8009dc4:	d1f7      	bne.n	8009db6 <LoRaMacMcpsRequest+0x12>
    macHdr.Value = 0;
 8009dc6:	466b      	mov	r3, sp
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8009dc8:	2214      	movs	r2, #20
    macHdr.Value = 0;
 8009dca:	7318      	strb	r0, [r3, #12]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8009dcc:	0001      	movs	r1, r0
 8009dce:	48bc      	ldr	r0, [pc, #752]	; (800a0c0 <LoRaMacMcpsRequest+0x31c>)
 8009dd0:	f002 fa6b 	bl	800c2aa <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009dd4:	4bbb      	ldr	r3, [pc, #748]	; (800a0c4 <LoRaMacMcpsRequest+0x320>)
 8009dd6:	4abc      	ldr	r2, [pc, #752]	; (800a0c8 <LoRaMacMcpsRequest+0x324>)
 8009dd8:	549c      	strb	r4, [r3, r2]
    MacCtx.AckTimeoutRetriesCounter = 1;
 8009dda:	4abc      	ldr	r2, [pc, #752]	; (800a0cc <LoRaMacMcpsRequest+0x328>)
 8009ddc:	549c      	strb	r4, [r3, r2]
    switch( mcpsRequest->Type )
 8009dde:	9a00      	ldr	r2, [sp, #0]
 8009de0:	7812      	ldrb	r2, [r2, #0]
 8009de2:	42a2      	cmp	r2, r4
 8009de4:	d100      	bne.n	8009de8 <LoRaMacMcpsRequest+0x44>
 8009de6:	e0bc      	b.n	8009f62 <LoRaMacMcpsRequest+0x1be>
 8009de8:	2a03      	cmp	r2, #3
 8009dea:	d100      	bne.n	8009dee <LoRaMacMcpsRequest+0x4a>
 8009dec:	e0c3      	b.n	8009f76 <LoRaMacMcpsRequest+0x1d2>
 8009dee:	002e      	movs	r6, r5
 8009df0:	9502      	str	r5, [sp, #8]
 8009df2:	9504      	str	r5, [sp, #16]
 8009df4:	2a00      	cmp	r2, #0
 8009df6:	d111      	bne.n	8009e1c <LoRaMacMcpsRequest+0x78>
            MacCtx.AckTimeoutRetries = 1;
 8009df8:	4ab5      	ldr	r2, [pc, #724]	; (800a0d0 <LoRaMacMcpsRequest+0x32c>)
 8009dfa:	549c      	strb	r4, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8009dfc:	2340      	movs	r3, #64	; 0x40
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8009dfe:	466a      	mov	r2, sp
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 8009e00:	260e      	movs	r6, #14
            readyToSend = true;
 8009e02:	2501      	movs	r5, #1
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8009e04:	7313      	strb	r3, [r2, #12]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 8009e06:	9b00      	ldr	r3, [sp, #0]
 8009e08:	791b      	ldrb	r3, [r3, #4]
 8009e0a:	9304      	str	r3, [sp, #16]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 8009e0c:	9b00      	ldr	r3, [sp, #0]
 8009e0e:	689b      	ldr	r3, [r3, #8]
 8009e10:	9302      	str	r3, [sp, #8]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 8009e12:	9b00      	ldr	r3, [sp, #0]
 8009e14:	899b      	ldrh	r3, [r3, #12]
 8009e16:	9301      	str	r3, [sp, #4]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 8009e18:	9b00      	ldr	r3, [sp, #0]
 8009e1a:	579e      	ldrsb	r6, [r3, r6]
    getPhy.Attribute = PHY_MIN_TX_DR;
 8009e1c:	2402      	movs	r4, #2
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009e1e:	4fad      	ldr	r7, [pc, #692]	; (800a0d4 <LoRaMacMcpsRequest+0x330>)
    getPhy.Attribute = PHY_MIN_TX_DR;
 8009e20:	ab08      	add	r3, sp, #32
 8009e22:	751c      	strb	r4, [r3, #20]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009e24:	003b      	movs	r3, r7
 8009e26:	3374      	adds	r3, #116	; 0x74
 8009e28:	781b      	ldrb	r3, [r3, #0]
 8009e2a:	aa08      	add	r2, sp, #32
 8009e2c:	7593      	strb	r3, [r2, #22]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009e2e:	003b      	movs	r3, r7
 8009e30:	3340      	adds	r3, #64	; 0x40
 8009e32:	7818      	ldrb	r0, [r3, #0]
 8009e34:	a90d      	add	r1, sp, #52	; 0x34
 8009e36:	f001 f867 	bl	800af08 <RegionGetPhyParam>
    if( readyToSend == true )
 8009e3a:	2d00      	cmp	r5, #0
 8009e3c:	d100      	bne.n	8009e40 <LoRaMacMcpsRequest+0x9c>
 8009e3e:	e088      	b.n	8009f52 <LoRaMacMcpsRequest+0x1ae>
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 8009e40:	37fe      	adds	r7, #254	; 0xfe
 8009e42:	783b      	ldrb	r3, [r7, #0]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d117      	bne.n	8009e78 <LoRaMacMcpsRequest+0xd4>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8009e48:	1c03      	adds	r3, r0, #0
 8009e4a:	b240      	sxtb	r0, r0
            verify.DatarateParams.Datarate = datarate;
 8009e4c:	ac09      	add	r4, sp, #36	; 0x24
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8009e4e:	42b0      	cmp	r0, r6
 8009e50:	da00      	bge.n	8009e54 <LoRaMacMcpsRequest+0xb0>
 8009e52:	1c33      	adds	r3, r6, #0
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009e54:	4d9f      	ldr	r5, [pc, #636]	; (800a0d4 <LoRaMacMcpsRequest+0x330>)
            verify.DatarateParams.Datarate = datarate;
 8009e56:	7023      	strb	r3, [r4, #0]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009e58:	002b      	movs	r3, r5
 8009e5a:	3374      	adds	r3, #116	; 0x74
 8009e5c:	781b      	ldrb	r3, [r3, #0]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8009e5e:	2205      	movs	r2, #5
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009e60:	70a3      	strb	r3, [r4, #2]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8009e62:	002b      	movs	r3, r5
 8009e64:	3340      	adds	r3, #64	; 0x40
 8009e66:	0021      	movs	r1, r4
 8009e68:	7818      	ldrb	r0, [r3, #0]
 8009e6a:	f001 f867 	bl	800af3c <RegionVerify>
 8009e6e:	2800      	cmp	r0, #0
 8009e70:	d0a0      	beq.n	8009db4 <LoRaMacMcpsRequest+0x10>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8009e72:	7823      	ldrb	r3, [r4, #0]
 8009e74:	3539      	adds	r5, #57	; 0x39
 8009e76:	702b      	strb	r3, [r5, #0]
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009e78:	4b96      	ldr	r3, [pc, #600]	; (800a0d4 <LoRaMacMcpsRequest+0x330>)
 8009e7a:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8009e7c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8009e7e:	9205      	str	r2, [sp, #20]
 8009e80:	ba52      	rev16	r2, r2
 8009e82:	4694      	mov	ip, r2
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8009e84:	001a      	movs	r2, r3
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8009e86:	910a      	str	r1, [sp, #40]	; 0x28
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8009e88:	32ff      	adds	r2, #255	; 0xff
 8009e8a:	7c50      	ldrb	r0, [r2, #17]
 8009e8c:	2800      	cmp	r0, #0
 8009e8e:	d100      	bne.n	8009e92 <LoRaMacMcpsRequest+0xee>
 8009e90:	e108      	b.n	800a0a4 <LoRaMacMcpsRequest+0x300>
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 8009e92:	7812      	ldrb	r2, [r2, #0]
 8009e94:	2a00      	cmp	r2, #0
 8009e96:	d100      	bne.n	8009e9a <LoRaMacMcpsRequest+0xf6>
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 8009e98:	631a      	str	r2, [r3, #48]	; 0x30
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8009e9a:	4b8e      	ldr	r3, [pc, #568]	; (800a0d4 <LoRaMacMcpsRequest+0x330>)
    fCtrl.Value = 0;
 8009e9c:	2500      	movs	r5, #0
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8009e9e:	001a      	movs	r2, r3
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8009ea0:	001c      	movs	r4, r3
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8009ea2:	32fe      	adds	r2, #254	; 0xfe
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8009ea4:	34fc      	adds	r4, #252	; 0xfc
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8009ea6:	7816      	ldrb	r6, [r2, #0]
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8009ea8:	7822      	ldrb	r2, [r4, #0]
 8009eaa:	3a01      	subs	r2, #1
 8009eac:	4250      	negs	r0, r2
 8009eae:	4142      	adcs	r2, r0
 8009eb0:	b2d2      	uxtb	r2, r2
 8009eb2:	9206      	str	r2, [sp, #24]
    if( Nvm.MacGroup1.SrvAckRequested == true )
 8009eb4:	001a      	movs	r2, r3
 8009eb6:	323a      	adds	r2, #58	; 0x3a
 8009eb8:	7817      	ldrb	r7, [r2, #0]
    adrNext.Version = Nvm.MacGroup2.Version;
 8009eba:	6922      	ldr	r2, [r4, #16]
 8009ebc:	a80f      	add	r0, sp, #60	; 0x3c
 8009ebe:	920f      	str	r2, [sp, #60]	; 0x3c
    adrNext.UpdateChanMask = true;
 8009ec0:	2201      	movs	r2, #1
 8009ec2:	7102      	strb	r2, [r0, #4]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8009ec4:	22fd      	movs	r2, #253	; 0xfd
 8009ec6:	4c7f      	ldr	r4, [pc, #508]	; (800a0c4 <LoRaMacMcpsRequest+0x320>)
 8009ec8:	0092      	lsls	r2, r2, #2
 8009eca:	58a2      	ldr	r2, [r4, r2]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8009ecc:	7146      	strb	r6, [r0, #5]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8009ece:	9212      	str	r2, [sp, #72]	; 0x48
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009ed0:	4662      	mov	r2, ip
 8009ed2:	8202      	strh	r2, [r0, #16]
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009ed4:	001a      	movs	r2, r3
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8009ed6:	6081      	str	r1, [r0, #8]
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009ed8:	3274      	adds	r2, #116	; 0x74
 8009eda:	7812      	ldrb	r2, [r2, #0]
    adrNext.Region = Nvm.MacGroup2.Region;
 8009edc:	3340      	adds	r3, #64	; 0x40
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009ede:	7482      	strb	r2, [r0, #18]
    adrNext.Region = Nvm.MacGroup2.Region;
 8009ee0:	781b      	ldrb	r3, [r3, #0]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8009ee2:	4a7d      	ldr	r2, [pc, #500]	; (800a0d8 <LoRaMacMcpsRequest+0x334>)
 8009ee4:	497d      	ldr	r1, [pc, #500]	; (800a0dc <LoRaMacMcpsRequest+0x338>)
    adrNext.Region = Nvm.MacGroup2.Region;
 8009ee6:	74c3      	strb	r3, [r0, #19]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8009ee8:	ab0a      	add	r3, sp, #40	; 0x28
 8009eea:	f000 f921 	bl	800a130 <LoRaMacAdrCalcNext>
 8009eee:	9b06      	ldr	r3, [sp, #24]
 8009ef0:	017f      	lsls	r7, r7, #5
 8009ef2:	011b      	lsls	r3, r3, #4
 8009ef4:	431f      	orrs	r7, r3
    MacCtx.NodeAckRequested = false;
 8009ef6:	4b7a      	ldr	r3, [pc, #488]	; (800a0e0 <LoRaMacMcpsRequest+0x33c>)
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8009ef8:	0180      	lsls	r0, r0, #6
    MacCtx.NodeAckRequested = false;
 8009efa:	54e5      	strb	r5, [r4, r3]
        fBufferSize = 0;
 8009efc:	9b02      	ldr	r3, [sp, #8]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8009efe:	4307      	orrs	r7, r0
        fBufferSize = 0;
 8009f00:	1e5a      	subs	r2, r3, #1
 8009f02:	4193      	sbcs	r3, r2
 8009f04:	9a01      	ldr	r2, [sp, #4]
 8009f06:	425b      	negs	r3, r3
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8009f08:	01f6      	lsls	r6, r6, #7
        fBufferSize = 0;
 8009f0a:	401a      	ands	r2, r3
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8009f0c:	9902      	ldr	r1, [sp, #8]
 8009f0e:	4875      	ldr	r0, [pc, #468]	; (800a0e4 <LoRaMacMcpsRequest+0x340>)
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8009f10:	4337      	orrs	r7, r6
        fBufferSize = 0;
 8009f12:	9201      	str	r2, [sp, #4]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8009f14:	9706      	str	r7, [sp, #24]
    MacCtx.PktBufferLen = 0;
 8009f16:	8025      	strh	r5, [r4, #0]
    uint32_t fCntUp = 0;
 8009f18:	950b      	str	r5, [sp, #44]	; 0x2c
    size_t macCmdsSize = 0;
 8009f1a:	950c      	str	r5, [sp, #48]	; 0x30
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8009f1c:	f002 f9b0 	bl	800c280 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8009f20:	466b      	mov	r3, sp
 8009f22:	791a      	ldrb	r2, [r3, #4]
 8009f24:	4b70      	ldr	r3, [pc, #448]	; (800a0e8 <LoRaMacMcpsRequest+0x344>)
 8009f26:	54e2      	strb	r2, [r4, r3]
    MacCtx.PktBuffer[0] = macHdr->Value;
 8009f28:	466b      	mov	r3, sp
 8009f2a:	7b19      	ldrb	r1, [r3, #12]
    switch( macHdr->Bits.MType )
 8009f2c:	9b03      	ldr	r3, [sp, #12]
    MacCtx.PktBuffer[0] = macHdr->Value;
 8009f2e:	70a1      	strb	r1, [r4, #2]
    switch( macHdr->Bits.MType )
 8009f30:	061b      	lsls	r3, r3, #24
 8009f32:	0f5b      	lsrs	r3, r3, #29
 8009f34:	2b04      	cmp	r3, #4
 8009f36:	d030      	beq.n	8009f9a <LoRaMacMcpsRequest+0x1f6>
 8009f38:	2b07      	cmp	r3, #7
 8009f3a:	d100      	bne.n	8009f3e <LoRaMacMcpsRequest+0x19a>
 8009f3c:	e0a0      	b.n	800a080 <LoRaMacMcpsRequest+0x2dc>
 8009f3e:	2b02      	cmp	r3, #2
 8009f40:	d02e      	beq.n	8009fa0 <LoRaMacMcpsRequest+0x1fc>
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8009f42:	2402      	movs	r4, #2
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 8009f44:	4b63      	ldr	r3, [pc, #396]	; (800a0d4 <LoRaMacMcpsRequest+0x330>)
 8009f46:	9a05      	ldr	r2, [sp, #20]
 8009f48:	871a      	strh	r2, [r3, #56]	; 0x38
            MacCtx.NodeAckRequested = false;
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	4b5d      	ldr	r3, [pc, #372]	; (800a0c4 <LoRaMacMcpsRequest+0x320>)
 8009f4e:	4964      	ldr	r1, [pc, #400]	; (800a0e0 <LoRaMacMcpsRequest+0x33c>)
 8009f50:	545a      	strb	r2, [r3, r1]
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8009f52:	4a5c      	ldr	r2, [pc, #368]	; (800a0c4 <LoRaMacMcpsRequest+0x320>)
 8009f54:	4b65      	ldr	r3, [pc, #404]	; (800a0ec <LoRaMacMcpsRequest+0x348>)
 8009f56:	58d3      	ldr	r3, [r2, r3]
 8009f58:	9301      	str	r3, [sp, #4]
 8009f5a:	9a01      	ldr	r2, [sp, #4]
 8009f5c:	9b00      	ldr	r3, [sp, #0]
 8009f5e:	611a      	str	r2, [r3, #16]
    return status;
 8009f60:	e729      	b.n	8009db6 <LoRaMacMcpsRequest+0x12>
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 8009f62:	9a00      	ldr	r2, [sp, #0]
 8009f64:	7bd1      	ldrb	r1, [r2, #15]
 8009f66:	1c0a      	adds	r2, r1, #0
 8009f68:	2908      	cmp	r1, #8
 8009f6a:	d900      	bls.n	8009f6e <LoRaMacMcpsRequest+0x1ca>
 8009f6c:	2208      	movs	r2, #8
 8009f6e:	4958      	ldr	r1, [pc, #352]	; (800a0d0 <LoRaMacMcpsRequest+0x32c>)
 8009f70:	545a      	strb	r2, [r3, r1]
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8009f72:	2380      	movs	r3, #128	; 0x80
 8009f74:	e743      	b.n	8009dfe <LoRaMacMcpsRequest+0x5a>
            MacCtx.AckTimeoutRetries = 1;
 8009f76:	4a56      	ldr	r2, [pc, #344]	; (800a0d0 <LoRaMacMcpsRequest+0x32c>)
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 8009f78:	260a      	movs	r6, #10
            MacCtx.AckTimeoutRetries = 1;
 8009f7a:	549c      	strb	r4, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8009f7c:	23e0      	movs	r3, #224	; 0xe0
 8009f7e:	466a      	mov	r2, sp
 8009f80:	7313      	strb	r3, [r2, #12]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 8009f82:	9b00      	ldr	r3, [sp, #0]
            readyToSend = true;
 8009f84:	0025      	movs	r5, r4
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 8009f86:	685b      	ldr	r3, [r3, #4]
 8009f88:	9302      	str	r3, [sp, #8]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 8009f8a:	9b00      	ldr	r3, [sp, #0]
 8009f8c:	891b      	ldrh	r3, [r3, #8]
 8009f8e:	9301      	str	r3, [sp, #4]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 8009f90:	9b00      	ldr	r3, [sp, #0]
 8009f92:	579e      	ldrsb	r6, [r3, r6]
    uint8_t fPort = 0;
 8009f94:	2300      	movs	r3, #0
 8009f96:	9304      	str	r3, [sp, #16]
            break;
 8009f98:	e740      	b.n	8009e1c <LoRaMacMcpsRequest+0x78>
            MacCtx.NodeAckRequested = true;
 8009f9a:	2001      	movs	r0, #1
 8009f9c:	4b50      	ldr	r3, [pc, #320]	; (800a0e0 <LoRaMacMcpsRequest+0x33c>)
 8009f9e:	54e0      	strb	r0, [r4, r3]
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8009fa0:	0025      	movs	r5, r4
 8009fa2:	2304      	movs	r3, #4
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8009fa4:	0026      	movs	r6, r4
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8009fa6:	35ff      	adds	r5, #255	; 0xff
 8009fa8:	716b      	strb	r3, [r5, #5]
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8009faa:	4b51      	ldr	r3, [pc, #324]	; (800a0f0 <LoRaMacMcpsRequest+0x34c>)
 8009fac:	36fc      	adds	r6, #252	; 0xfc
 8009fae:	60f3      	str	r3, [r6, #12]
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8009fb0:	23ff      	movs	r3, #255	; 0xff
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8009fb2:	4f48      	ldr	r7, [pc, #288]	; (800a0d4 <LoRaMacMcpsRequest+0x330>)
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8009fb4:	73a9      	strb	r1, [r5, #14]
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8009fb6:	9904      	ldr	r1, [sp, #16]
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8009fb8:	736b      	strb	r3, [r5, #13]
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8009fba:	3329      	adds	r3, #41	; 0x29
 8009fbc:	54e1      	strb	r1, [r4, r3]
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8009fbe:	003b      	movs	r3, r7
 8009fc0:	33cc      	adds	r3, #204	; 0xcc
 8009fc2:	681b      	ldr	r3, [r3, #0]
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8009fc4:	a80b      	add	r0, sp, #44	; 0x2c
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8009fc6:	6173      	str	r3, [r6, #20]
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8009fc8:	9b06      	ldr	r3, [sp, #24]
 8009fca:	756b      	strb	r3, [r5, #21]
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8009fcc:	2398      	movs	r3, #152	; 0x98
 8009fce:	005b      	lsls	r3, r3, #1
 8009fd0:	54e2      	strb	r2, [r4, r3]
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8009fd2:	4b44      	ldr	r3, [pc, #272]	; (800a0e4 <LoRaMacMcpsRequest+0x340>)
 8009fd4:	6333      	str	r3, [r6, #48]	; 0x30
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8009fd6:	f000 fc53 	bl	800a880 <LoRaMacCryptoGetFCntUp>
 8009fda:	2800      	cmp	r0, #0
 8009fdc:	d160      	bne.n	800a0a0 <LoRaMacMcpsRequest+0x2fc>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8009fde:	0022      	movs	r2, r4
 8009fe0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fe2:	32fe      	adds	r2, #254	; 0xfe
 8009fe4:	8313      	strh	r3, [r2, #24]
            MacCtx.McpsConfirm.AckReceived = false;
 8009fe6:	4a43      	ldr	r2, [pc, #268]	; (800a0f4 <LoRaMacMcpsRequest+0x350>)
 8009fe8:	52a0      	strh	r0, [r4, r2]
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8009fea:	4a43      	ldr	r2, [pc, #268]	; (800a0f8 <LoRaMacMcpsRequest+0x354>)
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8009fec:	a80c      	add	r0, sp, #48	; 0x30
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8009fee:	50a3      	str	r3, [r4, r2]
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8009ff0:	f000 f9d6 	bl	800a3a0 <LoRaMacCommandsGetSizeSerializedCmds>
 8009ff4:	2800      	cmp	r0, #0
 8009ff6:	d131      	bne.n	800a05c <LoRaMacMcpsRequest+0x2b8>
            if( macCmdsSize > 0 )
 8009ff8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d017      	beq.n	800a02e <LoRaMacMcpsRequest+0x28a>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 8009ffe:	2039      	movs	r0, #57	; 0x39
 800a000:	5638      	ldrsb	r0, [r7, r0]
 800a002:	f7fd fb35 	bl	8007670 <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800a006:	4b38      	ldr	r3, [pc, #224]	; (800a0e8 <LoRaMacMcpsRequest+0x344>)
 800a008:	5ce3      	ldrb	r3, [r4, r3]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d028      	beq.n	800a060 <LoRaMacMcpsRequest+0x2bc>
 800a00e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a010:	2b0f      	cmp	r3, #15
 800a012:	d81d      	bhi.n	800a050 <LoRaMacMcpsRequest+0x2ac>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800a014:	200f      	movs	r0, #15
 800a016:	4a39      	ldr	r2, [pc, #228]	; (800a0fc <LoRaMacMcpsRequest+0x358>)
 800a018:	a90c      	add	r1, sp, #48	; 0x30
 800a01a:	f000 f9cd 	bl	800a3b8 <LoRaMacCommandsSerializeCmds>
 800a01e:	2800      	cmp	r0, #0
 800a020:	d11c      	bne.n	800a05c <LoRaMacMcpsRequest+0x2b8>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 800a022:	260f      	movs	r6, #15
 800a024:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a026:	401e      	ands	r6, r3
 800a028:	9b06      	ldr	r3, [sp, #24]
 800a02a:	4333      	orrs	r3, r6
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800a02c:	756b      	strb	r3, [r5, #21]
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 800a02e:	9807      	ldr	r0, [sp, #28]
 800a030:	f7fd fd34 	bl	8007a9c <ScheduleTx>
 800a034:	1e04      	subs	r4, r0, #0
    if( status != LORAMAC_STATUS_OK )
 800a036:	d185      	bne.n	8009f44 <LoRaMacMcpsRequest+0x1a0>
        Nvm.MacGroup1.SrvAckRequested = false;
 800a038:	4b26      	ldr	r3, [pc, #152]	; (800a0d4 <LoRaMacMcpsRequest+0x330>)
 800a03a:	001a      	movs	r2, r3
 800a03c:	323a      	adds	r2, #58	; 0x3a
 800a03e:	7010      	strb	r0, [r2, #0]
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800a040:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a042:	629a      	str	r2, [r3, #40]	; 0x28
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800a044:	f000 f988 	bl	800a358 <LoRaMacCommandsRemoveNoneStickyCmds>
 800a048:	1e04      	subs	r4, r0, #0
 800a04a:	d02d      	beq.n	800a0a8 <LoRaMacMcpsRequest+0x304>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a04c:	2413      	movs	r4, #19
 800a04e:	e77c      	b.n	8009f4a <LoRaMacMcpsRequest+0x1a6>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800a050:	4a2b      	ldr	r2, [pc, #172]	; (800a100 <LoRaMacMcpsRequest+0x35c>)
 800a052:	a90c      	add	r1, sp, #48	; 0x30
 800a054:	f000 f9b0 	bl	800a3b8 <LoRaMacCommandsSerializeCmds>
 800a058:	2800      	cmp	r0, #0
 800a05a:	d0e8      	beq.n	800a02e <LoRaMacMcpsRequest+0x28a>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a05c:	2413      	movs	r4, #19
 800a05e:	e771      	b.n	8009f44 <LoRaMacMcpsRequest+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800a060:	4d27      	ldr	r5, [pc, #156]	; (800a100 <LoRaMacMcpsRequest+0x35c>)
 800a062:	a90c      	add	r1, sp, #48	; 0x30
 800a064:	002a      	movs	r2, r5
 800a066:	f000 f9a7 	bl	800a3b8 <LoRaMacCommandsSerializeCmds>
 800a06a:	2800      	cmp	r0, #0
 800a06c:	d1f6      	bne.n	800a05c <LoRaMacMcpsRequest+0x2b8>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800a06e:	2394      	movs	r3, #148	; 0x94
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800a070:	2298      	movs	r2, #152	; 0x98
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800a072:	005b      	lsls	r3, r3, #1
 800a074:	54e0      	strb	r0, [r4, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800a076:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a078:	0052      	lsls	r2, r2, #1
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 800a07a:	6335      	str	r5, [r6, #48]	; 0x30
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800a07c:	54a3      	strb	r3, [r4, r2]
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800a07e:	e7d6      	b.n	800a02e <LoRaMacMcpsRequest+0x28a>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800a080:	9b02      	ldr	r3, [sp, #8]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d0d3      	beq.n	800a02e <LoRaMacMcpsRequest+0x28a>
 800a086:	2a00      	cmp	r2, #0
 800a088:	d0d1      	beq.n	800a02e <LoRaMacMcpsRequest+0x28a>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800a08a:	466b      	mov	r3, sp
 800a08c:	9902      	ldr	r1, [sp, #8]
 800a08e:	791a      	ldrb	r2, [r3, #4]
 800a090:	481c      	ldr	r0, [pc, #112]	; (800a104 <LoRaMacMcpsRequest+0x360>)
 800a092:	f002 f8f5 	bl	800c280 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800a096:	4b14      	ldr	r3, [pc, #80]	; (800a0e8 <LoRaMacMcpsRequest+0x344>)
 800a098:	5ce3      	ldrb	r3, [r4, r3]
 800a09a:	3301      	adds	r3, #1
 800a09c:	8023      	strh	r3, [r4, #0]
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800a09e:	e7c6      	b.n	800a02e <LoRaMacMcpsRequest+0x28a>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800a0a0:	2412      	movs	r4, #18
 800a0a2:	e74f      	b.n	8009f44 <LoRaMacMcpsRequest+0x1a0>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800a0a4:	2407      	movs	r4, #7
 800a0a6:	e750      	b.n	8009f4a <LoRaMacMcpsRequest+0x1a6>
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 800a0a8:	9a00      	ldr	r2, [sp, #0]
 800a0aa:	4b06      	ldr	r3, [pc, #24]	; (800a0c4 <LoRaMacMcpsRequest+0x320>)
 800a0ac:	7811      	ldrb	r1, [r2, #0]
 800a0ae:	2287      	movs	r2, #135	; 0x87
 800a0b0:	00d2      	lsls	r2, r2, #3
 800a0b2:	5499      	strb	r1, [r3, r2]
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800a0b4:	2201      	movs	r2, #1
 800a0b6:	4914      	ldr	r1, [pc, #80]	; (800a108 <LoRaMacMcpsRequest+0x364>)
 800a0b8:	5c58      	ldrb	r0, [r3, r1]
 800a0ba:	4302      	orrs	r2, r0
 800a0bc:	e748      	b.n	8009f50 <LoRaMacMcpsRequest+0x1ac>
 800a0be:	46c0      	nop			; (mov r8, r8)
 800a0c0:	20000e08 	.word	0x20000e08
 800a0c4:	200009d0 	.word	0x200009d0
 800a0c8:	00000439 	.word	0x00000439
 800a0cc:	00000412 	.word	0x00000412
 800a0d0:	00000411 	.word	0x00000411
 800a0d4:	20000684 	.word	0x20000684
 800a0d8:	200006bc 	.word	0x200006bc
 800a0dc:	200006bd 	.word	0x200006bd
 800a0e0:	00000414 	.word	0x00000414
 800a0e4:	20000b08 	.word	0x20000b08
 800a0e8:	00000237 	.word	0x00000237
 800a0ec:	00000484 	.word	0x00000484
 800a0f0:	200009d2 	.word	0x200009d2
 800a0f4:	0000043c 	.word	0x0000043c
 800a0f8:	00000444 	.word	0x00000444
 800a0fc:	20000ae8 	.word	0x20000ae8
 800a100:	20000e58 	.word	0x20000e58
 800a104:	200009d3 	.word	0x200009d3
 800a108:	00000481 	.word	0x00000481

0800a10c <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 800a10c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    VerifyParams_t verify;

    verify.DutyCycle = enable;

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 800a10e:	4c07      	ldr	r4, [pc, #28]	; (800a12c <LoRaMacTestSetDutyCycleOn+0x20>)
    verify.DutyCycle = enable;
 800a110:	a901      	add	r1, sp, #4
    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 800a112:	0023      	movs	r3, r4
    verify.DutyCycle = enable;
 800a114:	7008      	strb	r0, [r1, #0]
    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 800a116:	3340      	adds	r3, #64	; 0x40
{
 800a118:	0005      	movs	r5, r0
    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 800a11a:	220f      	movs	r2, #15
 800a11c:	7818      	ldrb	r0, [r3, #0]
 800a11e:	f000 ff0d 	bl	800af3c <RegionVerify>
 800a122:	2800      	cmp	r0, #0
 800a124:	d001      	beq.n	800a12a <LoRaMacTestSetDutyCycleOn+0x1e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 800a126:	34ff      	adds	r4, #255	; 0xff
 800a128:	7065      	strb	r5, [r4, #1]
    }
}
 800a12a:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 800a12c:	20000684 	.word	0x20000684

0800a130 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 800a130:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( adrNext->Version.Fields.Minor == 0 )
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
    }
    return false;
 800a132:	2500      	movs	r5, #0
{
 800a134:	b08d      	sub	sp, #52	; 0x34
 800a136:	9104      	str	r1, [sp, #16]
 800a138:	9205      	str	r2, [sp, #20]
 800a13a:	001e      	movs	r6, r3
    if( adrNext->Version.Fields.Minor == 0 )
 800a13c:	7883      	ldrb	r3, [r0, #2]
{
 800a13e:	0004      	movs	r4, r0
    if( adrNext->Version.Fields.Minor == 0 )
 800a140:	42ab      	cmp	r3, r5
 800a142:	d12b      	bne.n	800a19c <LoRaMacAdrCalcNext+0x6c>
    int8_t datarate = adrNext->Datarate;
 800a144:	2310      	movs	r3, #16
 800a146:	56c3      	ldrsb	r3, [r0, r3]
 800a148:	9301      	str	r3, [sp, #4]
    int8_t txPower = adrNext->TxPower;
 800a14a:	2311      	movs	r3, #17
 800a14c:	56c3      	ldrsb	r3, [r0, r3]
    int8_t datarate = adrNext->Datarate;
 800a14e:	9f01      	ldr	r7, [sp, #4]
    int8_t txPower = adrNext->TxPower;
 800a150:	9303      	str	r3, [sp, #12]
    *adrAckCounter = adrNext->AdrAckCounter;
 800a152:	6883      	ldr	r3, [r0, #8]
 800a154:	6033      	str	r3, [r6, #0]
    if( adrNext->AdrEnabled == true )
 800a156:	7945      	ldrb	r5, [r0, #5]
 800a158:	2d00      	cmp	r5, #0
 800a15a:	d01a      	beq.n	800a192 <LoRaMacAdrCalcNext+0x62>
        getPhy.Attribute = PHY_MIN_TX_DR;
 800a15c:	2302      	movs	r3, #2
 800a15e:	aa06      	add	r2, sp, #24
 800a160:	7113      	strb	r3, [r2, #4]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800a162:	7c83      	ldrb	r3, [r0, #18]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800a164:	a907      	add	r1, sp, #28
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800a166:	7193      	strb	r3, [r2, #6]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800a168:	7cc0      	ldrb	r0, [r0, #19]
 800a16a:	f000 fecd 	bl	800af08 <RegionGetPhyParam>
        minTxDatarate = phyParam.Value;
 800a16e:	b243      	sxtb	r3, r0
 800a170:	9302      	str	r3, [sp, #8]
        datarate = MAX( datarate, minTxDatarate );
 800a172:	466b      	mov	r3, sp
 800a174:	9a02      	ldr	r2, [sp, #8]
 800a176:	791f      	ldrb	r7, [r3, #4]
 800a178:	9b01      	ldr	r3, [sp, #4]
 800a17a:	4293      	cmp	r3, r2
 800a17c:	da01      	bge.n	800a182 <LoRaMacAdrCalcNext+0x52>
 800a17e:	466b      	mov	r3, sp
 800a180:	7a1f      	ldrb	r7, [r3, #8]
        if( datarate == minTxDatarate )
 800a182:	9b01      	ldr	r3, [sp, #4]
 800a184:	9a02      	ldr	r2, [sp, #8]
        datarate = MAX( datarate, minTxDatarate );
 800a186:	b27f      	sxtb	r7, r7
        if( datarate == minTxDatarate )
 800a188:	4293      	cmp	r3, r2
 800a18a:	dc0a      	bgt.n	800a1a2 <LoRaMacAdrCalcNext+0x72>
            *adrAckCounter = 0;
 800a18c:	2300      	movs	r3, #0
 800a18e:	6033      	str	r3, [r6, #0]
                        adrAckReq = false;
 800a190:	2500      	movs	r5, #0
    *drOut = datarate;
 800a192:	9b04      	ldr	r3, [sp, #16]
    *txPowOut = txPower;
 800a194:	9a03      	ldr	r2, [sp, #12]
    *drOut = datarate;
 800a196:	701f      	strb	r7, [r3, #0]
    *txPowOut = txPower;
 800a198:	9b05      	ldr	r3, [sp, #20]
 800a19a:	701a      	strb	r2, [r3, #0]
}
 800a19c:	0028      	movs	r0, r5
 800a19e:	b00d      	add	sp, #52	; 0x34
 800a1a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 800a1a2:	2500      	movs	r5, #0
 800a1a4:	89a1      	ldrh	r1, [r4, #12]
 800a1a6:	68a2      	ldr	r2, [r4, #8]
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800a1a8:	89e3      	ldrh	r3, [r4, #14]
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 800a1aa:	428a      	cmp	r2, r1
 800a1ac:	416d      	adcs	r5, r5
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800a1ae:	185b      	adds	r3, r3, r1
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 800a1b0:	b2ed      	uxtb	r5, r5
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800a1b2:	429a      	cmp	r2, r3
 800a1b4:	d3ed      	bcc.n	800a192 <LoRaMacAdrCalcNext+0x62>
                getPhy.Attribute = PHY_MAX_TX_POWER;
 800a1b6:	2308      	movs	r3, #8
 800a1b8:	ae07      	add	r6, sp, #28
 800a1ba:	7033      	strb	r3, [r6, #0]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800a1bc:	0031      	movs	r1, r6
 800a1be:	7ce0      	ldrb	r0, [r4, #19]
 800a1c0:	f000 fea2 	bl	800af08 <RegionGetPhyParam>
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 800a1c4:	89e1      	ldrh	r1, [r4, #14]
                txPower = phyParam.Value;
 800a1c6:	b243      	sxtb	r3, r0
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 800a1c8:	68a0      	ldr	r0, [r4, #8]
                txPower = phyParam.Value;
 800a1ca:	9303      	str	r3, [sp, #12]
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 800a1cc:	f7f6 f852 	bl	8000274 <__aeabi_uidivmod>
 800a1d0:	2901      	cmp	r1, #1
 800a1d2:	d1de      	bne.n	800a192 <LoRaMacAdrCalcNext+0x62>
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800a1d4:	2322      	movs	r3, #34	; 0x22
                    getPhy.Datarate = datarate;
 800a1d6:	7077      	strb	r7, [r6, #1]
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800a1d8:	7033      	strb	r3, [r6, #0]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800a1da:	7ca3      	ldrb	r3, [r4, #18]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800a1dc:	0031      	movs	r1, r6
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800a1de:	70b3      	strb	r3, [r6, #2]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800a1e0:	7ce0      	ldrb	r0, [r4, #19]
 800a1e2:	f000 fe91 	bl	800af08 <RegionGetPhyParam>
                    if( datarate == minTxDatarate )
 800a1e6:	9b02      	ldr	r3, [sp, #8]
                    datarate = phyParam.Value;
 800a1e8:	b247      	sxtb	r7, r0
                    if( datarate == minTxDatarate )
 800a1ea:	42bb      	cmp	r3, r7
 800a1ec:	d1d1      	bne.n	800a192 <LoRaMacAdrCalcNext+0x62>
                        if( adrNext->UpdateChanMask == true )
 800a1ee:	7925      	ldrb	r5, [r4, #4]
 800a1f0:	2d00      	cmp	r5, #0
 800a1f2:	d0ce      	beq.n	800a192 <LoRaMacAdrCalcNext+0x62>
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800a1f4:	2302      	movs	r3, #2
 800a1f6:	a909      	add	r1, sp, #36	; 0x24
 800a1f8:	720b      	strb	r3, [r1, #8]
                            RegionInitDefaults( adrNext->Region, &params );
 800a1fa:	7ce0      	ldrb	r0, [r4, #19]
 800a1fc:	f000 fe97 	bl	800af2e <RegionInitDefaults>
 800a200:	e7c6      	b.n	800a190 <LoRaMacAdrCalcNext+0x60>

0800a202 <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a202:	4770      	bx	lr

0800a204 <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a204:	4770      	bx	lr

0800a206 <LoRaMacClassBSetPingSlotState>:
 800a206:	4770      	bx	lr

0800a208 <LoRaMacClassBSetMulticastSlotState>:
 800a208:	4770      	bx	lr

0800a20a <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a20a:	2000      	movs	r0, #0
 800a20c:	4770      	bx	lr

0800a20e <LoRaMacClassBBeaconTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a20e:	4770      	bx	lr

0800a210 <LoRaMacClassBPingSlotTimerEvent>:
 800a210:	4770      	bx	lr

0800a212 <LoRaMacClassBMulticastSlotTimerEvent>:
 800a212:	4770      	bx	lr

0800a214 <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a214:	2000      	movs	r0, #0
 800a216:	4770      	bx	lr

0800a218 <LoRaMacClassBIsBeaconExpected>:
 800a218:	2000      	movs	r0, #0
 800a21a:	4770      	bx	lr

0800a21c <LoRaMacClassBIsPingExpected>:
 800a21c:	2000      	movs	r0, #0
 800a21e:	4770      	bx	lr

0800a220 <LoRaMacClassBIsMulticastExpected>:
 800a220:	2000      	movs	r0, #0
 800a222:	4770      	bx	lr

0800a224 <LoRaMacClassBIsBeaconModeActive>:
 800a224:	2000      	movs	r0, #0
 800a226:	4770      	bx	lr

0800a228 <LoRaMacClassBSetPingSlotInfo>:
 800a228:	4770      	bx	lr

0800a22a <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a22a:	4770      	bx	lr

0800a22c <LoRaMacClassBResumeBeaconing>:
 800a22c:	4770      	bx	lr

0800a22e <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a22e:	2002      	movs	r0, #2
 800a230:	4770      	bx	lr

0800a232 <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a232:	2002      	movs	r0, #2
 800a234:	4770      	bx	lr

0800a236 <LoRaMacMibClassBSetRequestConfirm>:
 800a236:	2002      	movs	r0, #2
 800a238:	4770      	bx	lr

0800a23a <LoRaMacClassBPingSlotInfoAns>:
 800a23a:	4770      	bx	lr

0800a23c <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a23c:	2000      	movs	r0, #0
 800a23e:	4770      	bx	lr

0800a240 <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a240:	4770      	bx	lr

0800a242 <LoRaMacClassBDeviceTimeAns>:
 800a242:	4770      	bx	lr

0800a244 <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a244:	2000      	movs	r0, #0
 800a246:	4770      	bx	lr

0800a248 <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a248:	2000      	movs	r0, #0
 800a24a:	4770      	bx	lr

0800a24c <LoRaMacClassBStopRxSlots>:
 800a24c:	4770      	bx	lr

0800a24e <LoRaMacClassBProcess>:
 800a24e:	4770      	bx	lr

0800a250 <LoRaMacCommandsInit>:
            return false;
    }
}

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 800a250:	b510      	push	{r4, lr}
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 800a252:	4c05      	ldr	r4, [pc, #20]	; (800a268 <LoRaMacCommandsInit+0x18>)
 800a254:	22fc      	movs	r2, #252	; 0xfc
 800a256:	0020      	movs	r0, r4
 800a258:	2100      	movs	r1, #0
 800a25a:	f002 f826 	bl	800c2aa <memset1>
    list->First = NULL;
 800a25e:	2000      	movs	r0, #0
 800a260:	6020      	str	r0, [r4, #0]
    list->Last = NULL;
 800a262:	6060      	str	r0, [r4, #4]

    LinkedListInit( &CommandsCtx.MacCommandList );

    return LORAMAC_COMMANDS_SUCCESS;
}
 800a264:	bd10      	pop	{r4, pc}
 800a266:	46c0      	nop			; (mov r8, r8)
 800a268:	20000ed8 	.word	0x20000ed8

0800a26c <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 800a26c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a26e:	0015      	movs	r5, r2
    if( payload == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800a270:	2701      	movs	r7, #1
{
 800a272:	9001      	str	r0, [sp, #4]
    if( payload == NULL )
 800a274:	2900      	cmp	r1, #0
 800a276:	d039      	beq.n	800a2ec <LoRaMacCommandsAddCmd+0x80>
 800a278:	2400      	movs	r4, #0
 800a27a:	4b20      	ldr	r3, [pc, #128]	; (800a2fc <LoRaMacCommandsAddCmd+0x90>)
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 800a27c:	0122      	lsls	r2, r4, #4
 800a27e:	0018      	movs	r0, r3
 800a280:	4694      	mov	ip, r2
 800a282:	001a      	movs	r2, r3
 800a284:	3010      	adds	r0, #16
        if( mem[size] != 0x00 )
 800a286:	7817      	ldrb	r7, [r2, #0]
 800a288:	2f00      	cmp	r7, #0
 800a28a:	d131      	bne.n	800a2f0 <LoRaMacCommandsAddCmd+0x84>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800a28c:	3201      	adds	r2, #1
 800a28e:	4282      	cmp	r2, r0
 800a290:	d1f9      	bne.n	800a286 <LoRaMacCommandsAddCmd+0x1a>
    if( list->First == NULL )
 800a292:	481b      	ldr	r0, [pc, #108]	; (800a300 <LoRaMacCommandsAddCmd+0x94>)
 800a294:	6802      	ldr	r2, [r0, #0]
 800a296:	2a00      	cmp	r2, #0
 800a298:	d100      	bne.n	800a29c <LoRaMacCommandsAddCmd+0x30>
        list->First = element;
 800a29a:	6003      	str	r3, [r0, #0]
    if( list->Last )
 800a29c:	6842      	ldr	r2, [r0, #4]
 800a29e:	2a00      	cmp	r2, #0
 800a2a0:	d000      	beq.n	800a2a4 <LoRaMacCommandsAddCmd+0x38>
        list->Last->Next = element;
 800a2a2:	6013      	str	r3, [r2, #0]
    list->Last = element;
 800a2a4:	6043      	str	r3, [r0, #4]
    element->Next = NULL;
 800a2a6:	0122      	lsls	r2, r4, #4
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
 800a2a8:	9b01      	ldr	r3, [sp, #4]
    element->Next = NULL;
 800a2aa:	1882      	adds	r2, r0, r2
    newCmd->PayloadSize = payloadSize;
 800a2ac:	3401      	adds	r4, #1
    newCmd->CID = cid;
 800a2ae:	7313      	strb	r3, [r2, #12]
    newCmd->PayloadSize = payloadSize;
 800a2b0:	0123      	lsls	r3, r4, #4
 800a2b2:	50c5      	str	r5, [r0, r3]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800a2b4:	4663      	mov	r3, ip
    element->Next = NULL;
 800a2b6:	2600      	movs	r6, #0
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800a2b8:	330d      	adds	r3, #13
    element->Next = NULL;
 800a2ba:	6096      	str	r6, [r2, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800a2bc:	18c0      	adds	r0, r0, r3
 800a2be:	b2aa      	uxth	r2, r5
 800a2c0:	f001 ffde 	bl	800c280 <memcpy1>
    switch( cid )
 800a2c4:	9b01      	ldr	r3, [sp, #4]
            return true;
 800a2c6:	2201      	movs	r2, #1
    switch( cid )
 800a2c8:	2b05      	cmp	r3, #5
 800a2ca:	d006      	beq.n	800a2da <LoRaMacCommandsAddCmd+0x6e>
 800a2cc:	0018      	movs	r0, r3
 800a2ce:	2302      	movs	r3, #2
 800a2d0:	3808      	subs	r0, #8
 800a2d2:	b2c0      	uxtb	r0, r0
 800a2d4:	4283      	cmp	r3, r0
 800a2d6:	4176      	adcs	r6, r6
 800a2d8:	b2f2      	uxtb	r2, r6
    newCmd->IsSticky = IsSticky( cid );
 800a2da:	4b09      	ldr	r3, [pc, #36]	; (800a300 <LoRaMacCommandsAddCmd+0x94>)
 800a2dc:	0124      	lsls	r4, r4, #4
 800a2de:	191c      	adds	r4, r3, r4

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800a2e0:	33f8      	adds	r3, #248	; 0xf8
    newCmd->IsSticky = IsSticky( cid );
 800a2e2:	7122      	strb	r2, [r4, #4]
    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800a2e4:	681a      	ldr	r2, [r3, #0]
 800a2e6:	3201      	adds	r2, #1
 800a2e8:	1955      	adds	r5, r2, r5
 800a2ea:	601d      	str	r5, [r3, #0]

    return LORAMAC_COMMANDS_SUCCESS;
}
 800a2ec:	0038      	movs	r0, r7
 800a2ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if( itr == NUM_OF_MAC_COMMANDS )
 800a2f0:	3401      	adds	r4, #1
 800a2f2:	0003      	movs	r3, r0
 800a2f4:	2c0f      	cmp	r4, #15
 800a2f6:	d1c1      	bne.n	800a27c <LoRaMacCommandsAddCmd+0x10>
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800a2f8:	2702      	movs	r7, #2
 800a2fa:	e7f7      	b.n	800a2ec <LoRaMacCommandsAddCmd+0x80>
 800a2fc:	20000ee0 	.word	0x20000ee0
 800a300:	20000ed8 	.word	0x20000ed8

0800a304 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 800a304:	b510      	push	{r4, lr}
    if( macCmd == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800a306:	2401      	movs	r4, #1
    if( macCmd == NULL )
 800a308:	2800      	cmp	r0, #0
 800a30a:	d021      	beq.n	800a350 <LoRaMacCommandsRemoveCmd+0x4c>
    curElement = list->First;
 800a30c:	4b11      	ldr	r3, [pc, #68]	; (800a354 <LoRaMacCommandsRemoveCmd+0x50>)
 800a30e:	681a      	ldr	r2, [r3, #0]
    if( element != curElement )
 800a310:	4290      	cmp	r0, r2
 800a312:	d104      	bne.n	800a31e <LoRaMacCommandsRemoveCmd+0x1a>
        list->First = element->Next;
 800a314:	6802      	ldr	r2, [r0, #0]
 800a316:	601a      	str	r2, [r3, #0]
 800a318:	2200      	movs	r2, #0
 800a31a:	e005      	b.n	800a328 <LoRaMacCommandsRemoveCmd+0x24>
 800a31c:	000a      	movs	r2, r1
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800a31e:	2a00      	cmp	r2, #0
 800a320:	d002      	beq.n	800a328 <LoRaMacCommandsRemoveCmd+0x24>
 800a322:	6811      	ldr	r1, [r2, #0]
 800a324:	4288      	cmp	r0, r1
 800a326:	d1f9      	bne.n	800a31c <LoRaMacCommandsRemoveCmd+0x18>
    if( list->Last == element )
 800a328:	6859      	ldr	r1, [r3, #4]
 800a32a:	4288      	cmp	r0, r1
 800a32c:	d100      	bne.n	800a330 <LoRaMacCommandsRemoveCmd+0x2c>
        list->Last = PrevElement;
 800a32e:	605a      	str	r2, [r3, #4]
    if( PrevElement != NULL )
 800a330:	2a00      	cmp	r2, #0
 800a332:	d001      	beq.n	800a338 <LoRaMacCommandsRemoveCmd+0x34>
        PrevElement->Next = element->Next;
 800a334:	6801      	ldr	r1, [r0, #0]
 800a336:	6011      	str	r1, [r2, #0]
    element->Next = NULL;
 800a338:	2400      	movs	r4, #0
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800a33a:	33f8      	adds	r3, #248	; 0xf8
 800a33c:	681a      	ldr	r2, [r3, #0]
 800a33e:	6881      	ldr	r1, [r0, #8]
 800a340:	3a01      	subs	r2, #1
 800a342:	1a52      	subs	r2, r2, r1
    element->Next = NULL;
 800a344:	6004      	str	r4, [r0, #0]
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800a346:	0021      	movs	r1, r4
    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800a348:	601a      	str	r2, [r3, #0]
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800a34a:	2210      	movs	r2, #16
 800a34c:	f001 ffad 	bl	800c2aa <memset1>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800a350:	0020      	movs	r0, r4
 800a352:	bd10      	pop	{r4, pc}
 800a354:	20000ed8 	.word	0x20000ed8

0800a358 <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 800a358:	b510      	push	{r4, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800a35a:	4b06      	ldr	r3, [pc, #24]	; (800a374 <LoRaMacCommandsRemoveNoneStickyCmds+0x1c>)
 800a35c:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800a35e:	2800      	cmp	r0, #0
 800a360:	d100      	bne.n	800a364 <LoRaMacCommandsRemoveNoneStickyCmds+0xc>
            curElement = curElement->Next;
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800a362:	bd10      	pop	{r4, pc}
        if( curElement->IsSticky == false )
 800a364:	7b03      	ldrb	r3, [r0, #12]
            nexElement = curElement->Next;
 800a366:	6804      	ldr	r4, [r0, #0]
        if( curElement->IsSticky == false )
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d101      	bne.n	800a370 <LoRaMacCommandsRemoveNoneStickyCmds+0x18>
            LoRaMacCommandsRemoveCmd( curElement );
 800a36c:	f7ff ffca 	bl	800a304 <LoRaMacCommandsRemoveCmd>
{
 800a370:	0020      	movs	r0, r4
 800a372:	e7f4      	b.n	800a35e <LoRaMacCommandsRemoveNoneStickyCmds+0x6>
 800a374:	20000ed8 	.word	0x20000ed8

0800a378 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 800a378:	b510      	push	{r4, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800a37a:	4b08      	ldr	r3, [pc, #32]	; (800a39c <LoRaMacCommandsRemoveStickyAnsCmds+0x24>)
 800a37c:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800a37e:	2800      	cmp	r0, #0
 800a380:	d100      	bne.n	800a384 <LoRaMacCommandsRemoveStickyAnsCmds+0xc>
        }
        curElement = nexElement;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800a382:	bd10      	pop	{r4, pc}
        if( IsSticky( curElement->CID ) == true )
 800a384:	7903      	ldrb	r3, [r0, #4]
        nexElement = curElement->Next;
 800a386:	6804      	ldr	r4, [r0, #0]
    switch( cid )
 800a388:	2b05      	cmp	r3, #5
 800a38a:	d002      	beq.n	800a392 <LoRaMacCommandsRemoveStickyAnsCmds+0x1a>
 800a38c:	3b08      	subs	r3, #8
 800a38e:	2b02      	cmp	r3, #2
 800a390:	d801      	bhi.n	800a396 <LoRaMacCommandsRemoveStickyAnsCmds+0x1e>
            LoRaMacCommandsRemoveCmd( curElement );
 800a392:	f7ff ffb7 	bl	800a304 <LoRaMacCommandsRemoveCmd>
{
 800a396:	0020      	movs	r0, r4
 800a398:	e7f1      	b.n	800a37e <LoRaMacCommandsRemoveStickyAnsCmds+0x6>
 800a39a:	46c0      	nop			; (mov r8, r8)
 800a39c:	20000ed8 	.word	0x20000ed8

0800a3a0 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 800a3a0:	0003      	movs	r3, r0
    if( size == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800a3a2:	2001      	movs	r0, #1
    if( size == NULL )
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d004      	beq.n	800a3b2 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    }
    *size = CommandsCtx.SerializedCmdsSize;
    return LORAMAC_COMMANDS_SUCCESS;
 800a3a8:	2000      	movs	r0, #0
    *size = CommandsCtx.SerializedCmdsSize;
 800a3aa:	4a02      	ldr	r2, [pc, #8]	; (800a3b4 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 800a3ac:	32f8      	adds	r2, #248	; 0xf8
 800a3ae:	6812      	ldr	r2, [r2, #0]
 800a3b0:	601a      	str	r2, [r3, #0]
}
 800a3b2:	4770      	bx	lr
 800a3b4:	20000ed8 	.word	0x20000ed8

0800a3b8 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 800a3b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a3ba:	000f      	movs	r7, r1
 800a3bc:	9001      	str	r0, [sp, #4]
 800a3be:	0016      	movs	r6, r2
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800a3c0:	2001      	movs	r0, #1
    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800a3c2:	2a00      	cmp	r2, #0
 800a3c4:	d00a      	beq.n	800a3dc <LoRaMacCommandsSerializeCmds+0x24>
 800a3c6:	2900      	cmp	r1, #0
 800a3c8:	d008      	beq.n	800a3dc <LoRaMacCommandsSerializeCmds+0x24>
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 800a3ca:	4b13      	ldr	r3, [pc, #76]	; (800a418 <LoRaMacCommandsSerializeCmds+0x60>)
 800a3cc:	681c      	ldr	r4, [r3, #0]
    uint8_t itr = 0;
 800a3ce:	2300      	movs	r3, #0
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
 800a3d0:	2c00      	cmp	r4, #0
 800a3d2:	d104      	bne.n	800a3de <LoRaMacCommandsSerializeCmds+0x26>
        LoRaMacCommandsRemoveCmd( curElement );
        curElement = nextElement;
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 800a3d4:	0038      	movs	r0, r7
 800a3d6:	f7ff ffe3 	bl	800a3a0 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 800a3da:	2000      	movs	r0, #0
}
 800a3dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800a3de:	9a01      	ldr	r2, [sp, #4]
 800a3e0:	1ad1      	subs	r1, r2, r3
 800a3e2:	68a2      	ldr	r2, [r4, #8]
 800a3e4:	3201      	adds	r2, #1
 800a3e6:	4291      	cmp	r1, r2
 800a3e8:	d30e      	bcc.n	800a408 <LoRaMacCommandsSerializeCmds+0x50>
            buffer[itr++] = curElement->CID;
 800a3ea:	7922      	ldrb	r2, [r4, #4]
 800a3ec:	1c5d      	adds	r5, r3, #1
 800a3ee:	54f2      	strb	r2, [r6, r3]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800a3f0:	68a3      	ldr	r3, [r4, #8]
            buffer[itr++] = curElement->CID;
 800a3f2:	b2ed      	uxtb	r5, r5
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800a3f4:	b29a      	uxth	r2, r3
 800a3f6:	1d61      	adds	r1, r4, #5
 800a3f8:	1970      	adds	r0, r6, r5
 800a3fa:	f001 ff41 	bl	800c280 <memcpy1>
            itr += curElement->PayloadSize;
 800a3fe:	68a3      	ldr	r3, [r4, #8]
        curElement = curElement->Next;
 800a400:	6824      	ldr	r4, [r4, #0]
            itr += curElement->PayloadSize;
 800a402:	18ed      	adds	r5, r5, r3
 800a404:	b2eb      	uxtb	r3, r5
        curElement = curElement->Next;
 800a406:	e7e3      	b.n	800a3d0 <LoRaMacCommandsSerializeCmds+0x18>
        nextElement = curElement->Next;
 800a408:	0020      	movs	r0, r4
 800a40a:	6824      	ldr	r4, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
 800a40c:	f7ff ff7a 	bl	800a304 <LoRaMacCommandsRemoveCmd>
    while( curElement != NULL )
 800a410:	2c00      	cmp	r4, #0
 800a412:	d1f9      	bne.n	800a408 <LoRaMacCommandsSerializeCmds+0x50>
 800a414:	e7de      	b.n	800a3d4 <LoRaMacCommandsSerializeCmds+0x1c>
 800a416:	46c0      	nop			; (mov r8, r8)
 800a418:	20000ed8 	.word	0x20000ed8

0800a41c <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 800a41c:	0003      	movs	r3, r0
    if( cmdsPending == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800a41e:	2001      	movs	r0, #1
    if( cmdsPending == NULL )
 800a420:	2b00      	cmp	r3, #0
 800a422:	d00b      	beq.n	800a43c <LoRaMacCommandsStickyCmdsPending+0x20>
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 800a424:	4a07      	ldr	r2, [pc, #28]	; (800a444 <LoRaMacCommandsStickyCmdsPending+0x28>)
 800a426:	6810      	ldr	r0, [r2, #0]

    *cmdsPending = false;
 800a428:	2200      	movs	r2, #0
 800a42a:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800a42c:	2800      	cmp	r0, #0
 800a42e:	d005      	beq.n	800a43c <LoRaMacCommandsStickyCmdsPending+0x20>
    {
        if( curElement->IsSticky == true )
 800a430:	7b02      	ldrb	r2, [r0, #12]
 800a432:	2a00      	cmp	r2, #0
 800a434:	d003      	beq.n	800a43e <LoRaMacCommandsStickyCmdsPending+0x22>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 800a436:	2201      	movs	r2, #1
            return LORAMAC_COMMANDS_SUCCESS;
 800a438:	2000      	movs	r0, #0
            *cmdsPending = true;
 800a43a:	701a      	strb	r2, [r3, #0]
        }
        curElement = curElement->Next;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800a43c:	4770      	bx	lr
        curElement = curElement->Next;
 800a43e:	6800      	ldr	r0, [r0, #0]
 800a440:	e7f4      	b.n	800a42c <LoRaMacCommandsStickyCmdsPending+0x10>
 800a442:	46c0      	nop			; (mov r8, r8)
 800a444:	20000ed8 	.word	0x20000ed8

0800a448 <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
 800a448:	3802      	subs	r0, #2
 800a44a:	b2c3      	uxtb	r3, r0
{
 800a44c:	2000      	movs	r0, #0
 800a44e:	2b11      	cmp	r3, #17
 800a450:	d801      	bhi.n	800a456 <LoRaMacCommandsGetCmdSize+0xe>
 800a452:	4a01      	ldr	r2, [pc, #4]	; (800a458 <LoRaMacCommandsGetCmdSize+0x10>)
 800a454:	5cd0      	ldrb	r0, [r2, r3]
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
 800a456:	4770      	bx	lr
 800a458:	0800e9d7 	.word	0x0800e9d7

0800a45c <GetElement.constprop.0>:
        return true;
    }
    return false;
}

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
 800a45c:	b570      	push	{r4, r5, r6, lr}
 800a45e:	0004      	movs	r4, r0
 800a460:	0008      	movs	r0, r1
{
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800a462:	490c      	ldr	r1, [pc, #48]	; (800a494 <GetElement.constprop.0+0x38>)
 800a464:	1c4b      	adds	r3, r1, #1
 800a466:	7fda      	ldrb	r2, [r3, #31]
    if( count == 0 )
 800a468:	2a00      	cmp	r2, #0
 800a46a:	d011      	beq.n	800a490 <GetElement.constprop.0+0x34>
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a46c:	000d      	movs	r5, r1
 800a46e:	2300      	movs	r3, #0
 800a470:	351c      	adds	r5, #28
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
    {
        if( element->Request == request )
 800a472:	7806      	ldrb	r6, [r0, #0]
 800a474:	42a6      	cmp	r6, r4
 800a476:	d007      	beq.n	800a488 <GetElement.constprop.0+0x2c>
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a478:	42a8      	cmp	r0, r5
 800a47a:	d006      	beq.n	800a48a <GetElement.constprop.0+0x2e>
        bufferPointer++;
 800a47c:	3004      	adds	r0, #4
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800a47e:	3301      	adds	r3, #1
 800a480:	b2db      	uxtb	r3, r3
 800a482:	429a      	cmp	r2, r3
 800a484:	d1f5      	bne.n	800a472 <GetElement.constprop.0+0x16>
        return NULL;
 800a486:	2000      	movs	r0, #0
        }
        element = IncreaseBufferPointer( element );
    }

    return NULL;
}
 800a488:	bd70      	pop	{r4, r5, r6, pc}
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800a48a:	0008      	movs	r0, r1
 800a48c:	300c      	adds	r0, #12
 800a48e:	e7f6      	b.n	800a47e <GetElement.constprop.0+0x22>
        return NULL;
 800a490:	0010      	movs	r0, r2
 800a492:	e7f9      	b.n	800a488 <GetElement.constprop.0+0x2c>
 800a494:	20000fd4 	.word	0x20000fd4

0800a498 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 800a498:	b510      	push	{r4, lr}
    ConfirmQueueCtx.Primitives = primitives;
 800a49a:	4c08      	ldr	r4, [pc, #32]	; (800a4bc <LoRaMacConfirmQueueInit+0x24>)

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 800a49c:	2200      	movs	r2, #0
    ConfirmQueueCtx.Primitives = primitives;
 800a49e:	6020      	str	r0, [r4, #0]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800a4a0:	0020      	movs	r0, r4
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 800a4a2:	1c63      	adds	r3, r4, #1
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800a4a4:	300c      	adds	r0, #12
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 800a4a6:	77da      	strb	r2, [r3, #31]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 800a4a8:	21ff      	movs	r1, #255	; 0xff
 800a4aa:	3214      	adds	r2, #20
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800a4ac:	6060      	str	r0, [r4, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800a4ae:	60a0      	str	r0, [r4, #8]
    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 800a4b0:	f001 fefb 	bl	800c2aa <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	3402      	adds	r4, #2
 800a4b8:	77e3      	strb	r3, [r4, #31]
}
 800a4ba:	bd10      	pop	{r4, pc}
 800a4bc:	20000fd4 	.word	0x20000fd4

0800a4c0 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 800a4c0:	b530      	push	{r4, r5, lr}
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800a4c2:	4a0e      	ldr	r2, [pc, #56]	; (800a4fc <LoRaMacConfirmQueueAdd+0x3c>)
{
 800a4c4:	0001      	movs	r1, r0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800a4c6:	1c55      	adds	r5, r2, #1
 800a4c8:	7fec      	ldrb	r4, [r5, #31]
    {
        // Protect the buffer against overwrites
        return false;
 800a4ca:	2000      	movs	r0, #0
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800a4cc:	2c04      	cmp	r4, #4
 800a4ce:	d813      	bhi.n	800a4f8 <LoRaMacConfirmQueueAdd+0x38>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800a4d0:	7808      	ldrb	r0, [r1, #0]
 800a4d2:	6893      	ldr	r3, [r2, #8]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 800a4d4:	3401      	adds	r4, #1
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800a4d6:	7018      	strb	r0, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800a4d8:	7848      	ldrb	r0, [r1, #1]
 800a4da:	7058      	strb	r0, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800a4dc:	78c9      	ldrb	r1, [r1, #3]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a4de:	0010      	movs	r0, r2
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800a4e0:	70d9      	strb	r1, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 800a4e2:	2100      	movs	r1, #0
 800a4e4:	7099      	strb	r1, [r3, #2]
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800a4e6:	0011      	movs	r1, r2
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a4e8:	301c      	adds	r0, #28
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 800a4ea:	77ec      	strb	r4, [r5, #31]
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800a4ec:	310c      	adds	r1, #12
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a4ee:	4283      	cmp	r3, r0
 800a4f0:	d000      	beq.n	800a4f4 <LoRaMacConfirmQueueAdd+0x34>
        bufferPointer++;
 800a4f2:	1d19      	adds	r1, r3, #4
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );

    return true;
 800a4f4:	2001      	movs	r0, #1
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800a4f6:	6091      	str	r1, [r2, #8]
}
 800a4f8:	bd30      	pop	{r4, r5, pc}
 800a4fa:	46c0      	nop			; (mov r8, r8)
 800a4fc:	20000fd4 	.word	0x20000fd4

0800a500 <LoRaMacConfirmQueueRemoveFirst>:
    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800a500:	4b08      	ldr	r3, [pc, #32]	; (800a524 <LoRaMacConfirmQueueRemoveFirst+0x24>)
 800a502:	1c59      	adds	r1, r3, #1
 800a504:	7fca      	ldrb	r2, [r1, #31]
    {
        return false;
 800a506:	1e10      	subs	r0, r2, #0
    if( count == 0 )
 800a508:	d00b      	beq.n	800a522 <LoRaMacConfirmQueueRemoveFirst+0x22>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 800a50a:	3a01      	subs	r2, #1
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a50c:	0018      	movs	r0, r3
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 800a50e:	77ca      	strb	r2, [r1, #31]
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800a510:	001a      	movs	r2, r3
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800a512:	6859      	ldr	r1, [r3, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a514:	301c      	adds	r0, #28
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800a516:	320c      	adds	r2, #12
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a518:	4281      	cmp	r1, r0
 800a51a:	d000      	beq.n	800a51e <LoRaMacConfirmQueueRemoveFirst+0x1e>
        bufferPointer++;
 800a51c:	1d0a      	adds	r2, r1, #4

    return true;
 800a51e:	2001      	movs	r0, #1
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800a520:	605a      	str	r2, [r3, #4]
}
 800a522:	4770      	bx	lr
 800a524:	20000fd4 	.word	0x20000fd4

0800a528 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 800a528:	b510      	push	{r4, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800a52a:	4b08      	ldr	r3, [pc, #32]	; (800a54c <LoRaMacConfirmQueueSetStatus+0x24>)
{
 800a52c:	0004      	movs	r4, r0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800a52e:	1c5a      	adds	r2, r3, #1
    if( count == 0 )
 800a530:	7fd2      	ldrb	r2, [r2, #31]
{
 800a532:	0008      	movs	r0, r1
    if( count == 0 )
 800a534:	2a00      	cmp	r2, #0
 800a536:	d007      	beq.n	800a548 <LoRaMacConfirmQueueSetStatus+0x20>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800a538:	6859      	ldr	r1, [r3, #4]
 800a53a:	f7ff ff8f 	bl	800a45c <GetElement.constprop.0>
        if( element != NULL )
 800a53e:	2800      	cmp	r0, #0
 800a540:	d002      	beq.n	800a548 <LoRaMacConfirmQueueSetStatus+0x20>
        {
            element->Status = status;
            element->ReadyToHandle = true;
 800a542:	2301      	movs	r3, #1
            element->Status = status;
 800a544:	7044      	strb	r4, [r0, #1]
            element->ReadyToHandle = true;
 800a546:	7083      	strb	r3, [r0, #2]
        }
    }
}
 800a548:	bd10      	pop	{r4, pc}
 800a54a:	46c0      	nop			; (mov r8, r8)
 800a54c:	20000fd4 	.word	0x20000fd4

0800a550 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 800a550:	b510      	push	{r4, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800a552:	4b07      	ldr	r3, [pc, #28]	; (800a570 <LoRaMacConfirmQueueGetStatus+0x20>)
 800a554:	1c5a      	adds	r2, r3, #1
    if( count == 0 )
 800a556:	7fd1      	ldrb	r1, [r2, #31]
        if( element != NULL )
        {
            return element->Status;
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a558:	2201      	movs	r2, #1
    if( count == 0 )
 800a55a:	2900      	cmp	r1, #0
 800a55c:	d006      	beq.n	800a56c <LoRaMacConfirmQueueGetStatus+0x1c>
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800a55e:	6859      	ldr	r1, [r3, #4]
 800a560:	f7ff ff7c 	bl	800a45c <GetElement.constprop.0>
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a564:	2201      	movs	r2, #1
        if( element != NULL )
 800a566:	2800      	cmp	r0, #0
 800a568:	d000      	beq.n	800a56c <LoRaMacConfirmQueueGetStatus+0x1c>
            return element->Status;
 800a56a:	7842      	ldrb	r2, [r0, #1]
}
 800a56c:	0010      	movs	r0, r2
 800a56e:	bd10      	pop	{r4, pc}
 800a570:	20000fd4 	.word	0x20000fd4

0800a574 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 800a574:	b570      	push	{r4, r5, r6, lr}
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800a576:	4a0d      	ldr	r2, [pc, #52]	; (800a5ac <LoRaMacConfirmQueueSetStatusCmn+0x38>)

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 800a578:	1c91      	adds	r1, r2, #2
 800a57a:	77c8      	strb	r0, [r1, #31]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800a57c:	1c51      	adds	r1, r2, #1
    if( count == 0 )
 800a57e:	7fc9      	ldrb	r1, [r1, #31]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800a580:	6853      	ldr	r3, [r2, #4]
    if( count == 0 )
 800a582:	2900      	cmp	r1, #0
 800a584:	d00d      	beq.n	800a5a2 <LoRaMacConfirmQueueSetStatusCmn+0x2e>
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a586:	0014      	movs	r4, r2
            element->Status = status;
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
            {
                element->ReadyToHandle = true;
 800a588:	2501      	movs	r5, #1
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
 800a58a:	6891      	ldr	r1, [r2, #8]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a58c:	341c      	adds	r4, #28
            if( element->RestrictCommonReadyToHandle == false )
 800a58e:	78de      	ldrb	r6, [r3, #3]
            element->Status = status;
 800a590:	7058      	strb	r0, [r3, #1]
            if( element->RestrictCommonReadyToHandle == false )
 800a592:	2e00      	cmp	r6, #0
 800a594:	d100      	bne.n	800a598 <LoRaMacConfirmQueueSetStatusCmn+0x24>
                element->ReadyToHandle = true;
 800a596:	709d      	strb	r5, [r3, #2]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a598:	42a3      	cmp	r3, r4
 800a59a:	d003      	beq.n	800a5a4 <LoRaMacConfirmQueueSetStatusCmn+0x30>
        bufferPointer++;
 800a59c:	3304      	adds	r3, #4
        }while( element != ConfirmQueueCtx.BufferEnd );
 800a59e:	4299      	cmp	r1, r3
 800a5a0:	d1f5      	bne.n	800a58e <LoRaMacConfirmQueueSetStatusCmn+0x1a>
    }
}
 800a5a2:	bd70      	pop	{r4, r5, r6, pc}
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800a5a4:	0013      	movs	r3, r2
 800a5a6:	330c      	adds	r3, #12
 800a5a8:	e7f9      	b.n	800a59e <LoRaMacConfirmQueueSetStatusCmn+0x2a>
 800a5aa:	46c0      	nop			; (mov r8, r8)
 800a5ac:	20000fd4 	.word	0x20000fd4

0800a5b0 <LoRaMacConfirmQueueIsCmdActive>:
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800a5b0:	4b04      	ldr	r3, [pc, #16]	; (800a5c4 <LoRaMacConfirmQueueIsCmdActive+0x14>)
{
 800a5b2:	b510      	push	{r4, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800a5b4:	6859      	ldr	r1, [r3, #4]
 800a5b6:	f7ff ff51 	bl	800a45c <GetElement.constprop.0>
 800a5ba:	1e43      	subs	r3, r0, #1
 800a5bc:	4198      	sbcs	r0, r3
    {
        return true;
    }
    return false;
}
 800a5be:	b2c0      	uxtb	r0, r0
 800a5c0:	bd10      	pop	{r4, pc}
 800a5c2:	46c0      	nop			; (mov r8, r8)
 800a5c4:	20000fd4 	.word	0x20000fd4

0800a5c8 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 800a5c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5ca:	0005      	movs	r5, r0
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 800a5cc:	2400      	movs	r4, #0
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 800a5ce:	4e13      	ldr	r6, [pc, #76]	; (800a61c <LoRaMacConfirmQueueHandleCb+0x54>)
{
 800a5d0:	b085      	sub	sp, #20
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 800a5d2:	1c73      	adds	r3, r6, #1
 800a5d4:	7fdb      	ldrb	r3, [r3, #31]
 800a5d6:	9301      	str	r3, [sp, #4]
    for( uint8_t i = 0; i < nbElements; i++ )
 800a5d8:	9b01      	ldr	r3, [sp, #4]
 800a5da:	429c      	cmp	r4, r3
 800a5dc:	d101      	bne.n	800a5e2 <LoRaMacConfirmQueueHandleCb+0x1a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
        }
    }
}
 800a5de:	b005      	add	sp, #20
 800a5e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800a5e2:	6873      	ldr	r3, [r6, #4]
 800a5e4:	7818      	ldrb	r0, [r3, #0]
 800a5e6:	7028      	strb	r0, [r5, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 800a5e8:	7859      	ldrb	r1, [r3, #1]
 800a5ea:	7069      	strb	r1, [r5, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 800a5ec:	789f      	ldrb	r7, [r3, #2]
        if( readyToHandle == true )
 800a5ee:	2f00      	cmp	r7, #0
 800a5f0:	d00d      	beq.n	800a60e <LoRaMacConfirmQueueHandleCb+0x46>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 800a5f2:	6833      	ldr	r3, [r6, #0]
 800a5f4:	0028      	movs	r0, r5
 800a5f6:	689b      	ldr	r3, [r3, #8]
 800a5f8:	4798      	blx	r3
        LoRaMacConfirmQueueRemoveFirst( );
 800a5fa:	f7ff ff81 	bl	800a500 <LoRaMacConfirmQueueRemoveFirst>
        if( readyToHandle == false )
 800a5fe:	2f00      	cmp	r7, #0
 800a600:	d102      	bne.n	800a608 <LoRaMacConfirmQueueHandleCb+0x40>
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 800a602:	a803      	add	r0, sp, #12
 800a604:	f7ff ff5c 	bl	800a4c0 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 800a608:	3401      	adds	r4, #1
 800a60a:	b2e4      	uxtb	r4, r4
 800a60c:	e7e4      	b.n	800a5d8 <LoRaMacConfirmQueueHandleCb+0x10>
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 800a60e:	aa03      	add	r2, sp, #12
 800a610:	7010      	strb	r0, [r2, #0]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 800a612:	7051      	strb	r1, [r2, #1]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800a614:	78db      	ldrb	r3, [r3, #3]
 800a616:	70d3      	strb	r3, [r2, #3]
 800a618:	e7ef      	b.n	800a5fa <LoRaMacConfirmQueueHandleCb+0x32>
 800a61a:	46c0      	nop			; (mov r8, r8)
 800a61c:	20000fd4 	.word	0x20000fd4

0800a620 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 800a620:	4b01      	ldr	r3, [pc, #4]	; (800a628 <LoRaMacConfirmQueueGetCnt+0x8>)
 800a622:	3301      	adds	r3, #1
 800a624:	7fd8      	ldrb	r0, [r3, #31]
}
 800a626:	4770      	bx	lr
 800a628:	20000fd4 	.word	0x20000fd4

0800a62c <LoRaMacConfirmQueueIsFull>:
    }
    else
    {
        return false;
    }
}
 800a62c:	2004      	movs	r0, #4
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800a62e:	4b03      	ldr	r3, [pc, #12]	; (800a63c <LoRaMacConfirmQueueIsFull+0x10>)
 800a630:	3301      	adds	r3, #1
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800a632:	7fdb      	ldrb	r3, [r3, #31]
}
 800a634:	4298      	cmp	r0, r3
 800a636:	4180      	sbcs	r0, r0
 800a638:	4240      	negs	r0, r0
 800a63a:	4770      	bx	lr
 800a63c:	20000fd4 	.word	0x20000fd4

0800a640 <DeriveSessionKey10x>:
 * \param[IN]  netID          - Network Identifier
 * \param[IN]  deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 800a640:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a642:	b085      	sub	sp, #20
 800a644:	000d      	movs	r5, r1
 800a646:	0014      	movs	r4, r2
 800a648:	0007      	movs	r7, r0
    uint8_t compBase[16] = { 0 };
 800a64a:	220c      	movs	r2, #12
 800a64c:	2100      	movs	r1, #0
 800a64e:	a801      	add	r0, sp, #4
{
 800a650:	001e      	movs	r6, r3
    uint8_t compBase[16] = { 0 };
 800a652:	f003 ff06 	bl	800e462 <memset>

    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
    switch( keyID )
 800a656:	466a      	mov	r2, sp
 800a658:	1e7b      	subs	r3, r7, #1
 800a65a:	7013      	strb	r3, [r2, #0]
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }
   /* ST_WORKAROUND_END */

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 800a65c:	0a2b      	lsrs	r3, r5, #8
    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 800a65e:	7055      	strb	r5, [r2, #1]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 800a660:	7093      	strb	r3, [r2, #2]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 800a662:	7114      	strb	r4, [r2, #4]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 800a664:	0a23      	lsrs	r3, r4, #8
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 800a666:	71d6      	strb	r6, [r2, #7]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 800a668:	0c2d      	lsrs	r5, r5, #16
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 800a66a:	0c24      	lsrs	r4, r4, #16
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 800a66c:	0a36      	lsrs	r6, r6, #8
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 800a66e:	70d5      	strb	r5, [r2, #3]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 800a670:	7153      	strb	r3, [r2, #5]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 800a672:	7194      	strb	r4, [r2, #6]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 800a674:	7216      	strb	r6, [r2, #8]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 800a676:	2101      	movs	r1, #1
 800a678:	003a      	movs	r2, r7
 800a67a:	4668      	mov	r0, sp
 800a67c:	f7fc fa19 	bl	8006ab2 <SecureElementDeriveAndStoreKey>
 800a680:	2800      	cmp	r0, #0
 800a682:	d000      	beq.n	800a686 <DeriveSessionKey10x+0x46>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800a684:	200f      	movs	r0, #15
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800a686:	b005      	add	sp, #20
 800a688:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a68a <PayloadEncrypt>:
{
 800a68a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a68c:	b08d      	sub	sp, #52	; 0x34
 800a68e:	001d      	movs	r5, r3
 800a690:	ab12      	add	r3, sp, #72	; 0x48
 800a692:	781b      	ldrb	r3, [r3, #0]
 800a694:	9001      	str	r0, [sp, #4]
 800a696:	9302      	str	r3, [sp, #8]
    if( buffer == 0 )
 800a698:	9b01      	ldr	r3, [sp, #4]
{
 800a69a:	000f      	movs	r7, r1
        return LORAMAC_CRYPTO_ERROR_NPE;
 800a69c:	200a      	movs	r0, #10
{
 800a69e:	9203      	str	r2, [sp, #12]
    if( buffer == 0 )
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d02b      	beq.n	800a6fc <PayloadEncrypt+0x72>
    uint8_t sBlock[16] = { 0 };
 800a6a4:	2600      	movs	r6, #0
 800a6a6:	220c      	movs	r2, #12
 800a6a8:	0031      	movs	r1, r6
 800a6aa:	a805      	add	r0, sp, #20
 800a6ac:	9604      	str	r6, [sp, #16]
 800a6ae:	f003 fed8 	bl	800e462 <memset>
    uint8_t aBlock[16] = { 0 };
 800a6b2:	220c      	movs	r2, #12
 800a6b4:	0031      	movs	r1, r6
 800a6b6:	a809      	add	r0, sp, #36	; 0x24
 800a6b8:	9608      	str	r6, [sp, #32]
 800a6ba:	f003 fed2 	bl	800e462 <memset>
    aBlock[0] = 0x01;
 800a6be:	2201      	movs	r2, #1
    aBlock[5] = dir;
 800a6c0:	9b02      	ldr	r3, [sp, #8]
    uint8_t aBlock[16] = { 0 };
 800a6c2:	ac08      	add	r4, sp, #32
    aBlock[5] = dir;
 800a6c4:	7163      	strb	r3, [r4, #5]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 800a6c6:	0a2b      	lsrs	r3, r5, #8
 800a6c8:	71e3      	strb	r3, [r4, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800a6ca:	0c2b      	lsrs	r3, r5, #16
 800a6cc:	7223      	strb	r3, [r4, #8]
    aBlock[10] = frameCounter & 0xFF;
 800a6ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    aBlock[6] = address & 0xFF;
 800a6d0:	71a5      	strb	r5, [r4, #6]
    aBlock[10] = frameCounter & 0xFF;
 800a6d2:	72a3      	strb	r3, [r4, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 800a6d4:	0a1b      	lsrs	r3, r3, #8
 800a6d6:	72e3      	strb	r3, [r4, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800a6d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800a6da:	0e2d      	lsrs	r5, r5, #24
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800a6dc:	0c1b      	lsrs	r3, r3, #16
 800a6de:	7323      	strb	r3, [r4, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800a6e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    aBlock[0] = 0x01;
 800a6e2:	7022      	strb	r2, [r4, #0]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800a6e4:	0e1b      	lsrs	r3, r3, #24
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800a6e6:	7265      	strb	r5, [r4, #9]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800a6e8:	7363      	strb	r3, [r4, #13]
    uint16_t ctr = 1;
 800a6ea:	0014      	movs	r4, r2
 800a6ec:	b2e2      	uxtb	r2, r4
 800a6ee:	0113      	lsls	r3, r2, #4
 800a6f0:	3b10      	subs	r3, #16
 800a6f2:	b2db      	uxtb	r3, r3
 800a6f4:	9302      	str	r3, [sp, #8]
    while( size > 0 )
 800a6f6:	2f00      	cmp	r7, #0
 800a6f8:	dc02      	bgt.n	800a700 <PayloadEncrypt+0x76>
    return LORAMAC_CRYPTO_SUCCESS;
 800a6fa:	2000      	movs	r0, #0
}
 800a6fc:	b00d      	add	sp, #52	; 0x34
 800a6fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
        aBlock[15] = ctr & 0xFF;
 800a700:	a808      	add	r0, sp, #32
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800a702:	ad04      	add	r5, sp, #16
        aBlock[15] = ctr & 0xFF;
 800a704:	73c2      	strb	r2, [r0, #15]
        ctr++;
 800a706:	3401      	adds	r4, #1
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800a708:	002b      	movs	r3, r5
 800a70a:	2110      	movs	r1, #16
 800a70c:	9a03      	ldr	r2, [sp, #12]
        ctr++;
 800a70e:	b2a4      	uxth	r4, r4
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800a710:	f7fc f95f 	bl	80069d2 <SecureElementAesEncrypt>
 800a714:	2800      	cmp	r0, #0
 800a716:	d115      	bne.n	800a744 <PayloadEncrypt+0xba>
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800a718:	1c39      	adds	r1, r7, #0
 800a71a:	1c0b      	adds	r3, r1, #0
 800a71c:	2f10      	cmp	r7, #16
 800a71e:	dd00      	ble.n	800a722 <PayloadEncrypt+0x98>
 800a720:	2310      	movs	r3, #16
 800a722:	b21b      	sxth	r3, r3
 800a724:	4298      	cmp	r0, r3
 800a726:	db02      	blt.n	800a72e <PayloadEncrypt+0xa4>
        size -= 16;
 800a728:	3f10      	subs	r7, #16
 800a72a:	b23f      	sxth	r7, r7
        bufferIndex += 16;
 800a72c:	e7de      	b.n	800a6ec <PayloadEncrypt+0x62>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800a72e:	9b02      	ldr	r3, [sp, #8]
 800a730:	5c2e      	ldrb	r6, [r5, r0]
 800a732:	181a      	adds	r2, r3, r0
 800a734:	9b01      	ldr	r3, [sp, #4]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800a736:	3001      	adds	r0, #1
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800a738:	5c9b      	ldrb	r3, [r3, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800a73a:	b2c0      	uxtb	r0, r0
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800a73c:	4073      	eors	r3, r6
 800a73e:	9e01      	ldr	r6, [sp, #4]
 800a740:	54b3      	strb	r3, [r6, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800a742:	e7ea      	b.n	800a71a <PayloadEncrypt+0x90>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800a744:	200f      	movs	r0, #15
 800a746:	e7d9      	b.n	800a6fc <PayloadEncrypt+0x72>

0800a748 <LoRaMacCryptoDeriveMcKEKey.part.0>:
    }

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
 800a748:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }
    uint8_t compBase[16] = { 0 };
 800a74a:	2100      	movs	r1, #0
 800a74c:	220c      	movs	r2, #12
 800a74e:	a801      	add	r0, sp, #4
 800a750:	9100      	str	r1, [sp, #0]
 800a752:	f003 fe86 	bl	800e462 <memset>

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 800a756:	227f      	movs	r2, #127	; 0x7f
 800a758:	2104      	movs	r1, #4
 800a75a:	4668      	mov	r0, sp
 800a75c:	f7fc f9a9 	bl	8006ab2 <SecureElementDeriveAndStoreKey>
 800a760:	2800      	cmp	r0, #0
 800a762:	d000      	beq.n	800a766 <LoRaMacCryptoDeriveMcKEKey.part.0+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800a764:	200f      	movs	r0, #15
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800a766:	b005      	add	sp, #20
 800a768:	bd00      	pop	{pc}
	...

0800a76c <GetLastFcntDown.constprop.0>:
    switch( fCntID )
 800a76c:	3801      	subs	r0, #1
 800a76e:	2305      	movs	r3, #5
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
 800a770:	b500      	push	{lr}
    switch( fCntID )
 800a772:	2803      	cmp	r0, #3
 800a774:	d80a      	bhi.n	800a78c <GetLastFcntDown.constprop.0+0x20>
 800a776:	4b0c      	ldr	r3, [pc, #48]	; (800a7a8 <GetLastFcntDown.constprop.0+0x3c>)
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 800a778:	681b      	ldr	r3, [r3, #0]
    switch( fCntID )
 800a77a:	f7f5 fcd7 	bl	800012c <__gnu_thumb1_case_uqi>
 800a77e:	0902      	.short	0x0902
 800a780:	110d      	.short	0x110d
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 800a782:	691a      	ldr	r2, [r3, #16]
 800a784:	600a      	str	r2, [r1, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 800a786:	691a      	ldr	r2, [r3, #16]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800a788:	621a      	str	r2, [r3, #32]
    return LORAMAC_CRYPTO_SUCCESS;
 800a78a:	2300      	movs	r3, #0
}
 800a78c:	0018      	movs	r0, r3
 800a78e:	bd00      	pop	{pc}
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 800a790:	695a      	ldr	r2, [r3, #20]
 800a792:	600a      	str	r2, [r1, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 800a794:	695a      	ldr	r2, [r3, #20]
 800a796:	e7f7      	b.n	800a788 <GetLastFcntDown.constprop.0+0x1c>
            *lastDown = CryptoNvm->FCntList.FCntDown;
 800a798:	699a      	ldr	r2, [r3, #24]
 800a79a:	600a      	str	r2, [r1, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800a79c:	699a      	ldr	r2, [r3, #24]
 800a79e:	e7f3      	b.n	800a788 <GetLastFcntDown.constprop.0+0x1c>
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 800a7a0:	69db      	ldr	r3, [r3, #28]
 800a7a2:	600b      	str	r3, [r1, #0]
 800a7a4:	e7f1      	b.n	800a78a <GetLastFcntDown.constprop.0+0x1e>
 800a7a6:	46c0      	nop			; (mov r8, r8)
 800a7a8:	20000ff8 	.word	0x20000ff8

0800a7ac <VerifyCmacB0.constprop.0.isra.0>:
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
 800a7ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7ae:	b0c7      	sub	sp, #284	; 0x11c
 800a7b0:	0007      	movs	r7, r0
 800a7b2:	000c      	movs	r4, r1
 800a7b4:	001d      	movs	r5, r3
        return LORAMAC_CRYPTO_ERROR_NPE;
 800a7b6:	200a      	movs	r0, #10
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
 800a7b8:	9e4c      	ldr	r6, [sp, #304]	; 0x130
 800a7ba:	9201      	str	r2, [sp, #4]
    if( msg == 0 )
 800a7bc:	2f00      	cmp	r7, #0
 800a7be:	d037      	beq.n	800a830 <VerifyCmacB0.constprop.0.isra.0+0x84>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800a7c0:	2380      	movs	r3, #128	; 0x80
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800a7c2:	3004      	adds	r0, #4
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800a7c4:	005b      	lsls	r3, r3, #1
 800a7c6:	4299      	cmp	r1, r3
 800a7c8:	d832      	bhi.n	800a830 <VerifyCmacB0.constprop.0.isra.0+0x84>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800a7ca:	2288      	movs	r2, #136	; 0x88
 800a7cc:	2100      	movs	r1, #0
 800a7ce:	0052      	lsls	r2, r2, #1
 800a7d0:	a802      	add	r0, sp, #8
 800a7d2:	f001 fd6a 	bl	800c2aa <memset1>
    b0[0] = 0x49;
 800a7d6:	2349      	movs	r3, #73	; 0x49
 800a7d8:	aa02      	add	r2, sp, #8
 800a7da:	7013      	strb	r3, [r2, #0]
        b0[1] = 0x00;
 800a7dc:	2300      	movs	r3, #0
 800a7de:	7053      	strb	r3, [r2, #1]
        b0[2] = 0x00;
 800a7e0:	7093      	strb	r3, [r2, #2]
    b0[3] = 0x00;
 800a7e2:	70d3      	strb	r3, [r2, #3]
    b0[4] = 0x00;
 800a7e4:	7113      	strb	r3, [r2, #4]
    b0[5] = dir;
 800a7e6:	2201      	movs	r2, #1
 800a7e8:	a902      	add	r1, sp, #8
 800a7ea:	714a      	strb	r2, [r1, #5]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800a7ec:	0a2a      	lsrs	r2, r5, #8
 800a7ee:	71ca      	strb	r2, [r1, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800a7f0:	0c2a      	lsrs	r2, r5, #16
 800a7f2:	720a      	strb	r2, [r1, #8]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800a7f4:	0a32      	lsrs	r2, r6, #8
    b0[6] = devAddr & 0xFF;
 800a7f6:	718d      	strb	r5, [r1, #6]
    b0[10] = fCnt & 0xFF;
 800a7f8:	728e      	strb	r6, [r1, #10]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800a7fa:	72ca      	strb	r2, [r1, #11]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800a7fc:	0e2d      	lsrs	r5, r5, #24
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800a7fe:	0c32      	lsrs	r2, r6, #16
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800a800:	0e36      	lsrs	r6, r6, #24
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800a802:	730a      	strb	r2, [r1, #12]
    b0[14] = 0x00;
 800a804:	738b      	strb	r3, [r1, #14]
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800a806:	0022      	movs	r2, r4
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800a808:	724d      	strb	r5, [r1, #9]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800a80a:	734e      	strb	r6, [r1, #13]
    b0[15] = msgLen & 0xFF;
 800a80c:	73cc      	strb	r4, [r1, #15]
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800a80e:	a806      	add	r0, sp, #24
 800a810:	0039      	movs	r1, r7
 800a812:	f001 fd35 	bl	800c280 <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 800a816:	0021      	movs	r1, r4
 800a818:	3110      	adds	r1, #16
 800a81a:	9b01      	ldr	r3, [sp, #4]
 800a81c:	9a4d      	ldr	r2, [sp, #308]	; 0x134
 800a81e:	b289      	uxth	r1, r1
 800a820:	a802      	add	r0, sp, #8
 800a822:	f7fc f8be 	bl	80069a2 <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 800a826:	2800      	cmp	r0, #0
 800a828:	d002      	beq.n	800a830 <VerifyCmacB0.constprop.0.isra.0+0x84>
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 800a82a:	2801      	cmp	r0, #1
 800a82c:	d000      	beq.n	800a830 <VerifyCmacB0.constprop.0.isra.0+0x84>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800a82e:	200f      	movs	r0, #15
}
 800a830:	b047      	add	sp, #284	; 0x11c
 800a832:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a834 <LoRaMacCryptoInit>:
        return LORAMAC_CRYPTO_FAIL_PARAM;
 800a834:	2309      	movs	r3, #9
{
 800a836:	b510      	push	{r4, lr}
    if( nvm == NULL )
 800a838:	2800      	cmp	r0, #0
 800a83a:	d012      	beq.n	800a862 <LoRaMacCryptoInit+0x2e>
    CryptoNvm = nvm;
 800a83c:	4c0a      	ldr	r4, [pc, #40]	; (800a868 <LoRaMacCryptoInit+0x34>)
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 800a83e:	2228      	movs	r2, #40	; 0x28
 800a840:	2100      	movs	r1, #0
    CryptoNvm = nvm;
 800a842:	6020      	str	r0, [r4, #0]
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 800a844:	f001 fd31 	bl	800c2aa <memset1>
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 800a848:	6823      	ldr	r3, [r4, #0]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 800a84a:	4a08      	ldr	r2, [pc, #32]	; (800a86c <LoRaMacCryptoInit+0x38>)
    CryptoNvm->FCntList.FCntUp = 0;
 800a84c:	2000      	movs	r0, #0
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 800a84e:	601a      	str	r2, [r3, #0]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800a850:	2201      	movs	r2, #1
 800a852:	4252      	negs	r2, r2
    CryptoNvm->FCntList.FCntUp = 0;
 800a854:	60d8      	str	r0, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800a856:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800a858:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800a85a:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800a85c:	621a      	str	r2, [r3, #32]
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 800a85e:	61da      	str	r2, [r3, #28]
    return LORAMAC_CRYPTO_SUCCESS;
 800a860:	0003      	movs	r3, r0
}
 800a862:	0018      	movs	r0, r3
 800a864:	bd10      	pop	{r4, pc}
 800a866:	46c0      	nop			; (mov r8, r8)
 800a868:	20000ff8 	.word	0x20000ff8
 800a86c:	01010100 	.word	0x01010100

0800a870 <LoRaMacCryptoSetLrWanVersion>:
    CryptoNvm->LrWanVersion = version;
 800a870:	4b02      	ldr	r3, [pc, #8]	; (800a87c <LoRaMacCryptoSetLrWanVersion+0xc>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	6018      	str	r0, [r3, #0]
}
 800a876:	2000      	movs	r0, #0
 800a878:	4770      	bx	lr
 800a87a:	46c0      	nop			; (mov r8, r8)
 800a87c:	20000ff8 	.word	0x20000ff8

0800a880 <LoRaMacCryptoGetFCntUp>:
{
 800a880:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_NPE;
 800a882:	200a      	movs	r0, #10
    if( currentUp == NULL )
 800a884:	2b00      	cmp	r3, #0
 800a886:	d005      	beq.n	800a894 <LoRaMacCryptoGetFCntUp+0x14>
    return LORAMAC_CRYPTO_SUCCESS;
 800a888:	2000      	movs	r0, #0
    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 800a88a:	4a03      	ldr	r2, [pc, #12]	; (800a898 <LoRaMacCryptoGetFCntUp+0x18>)
 800a88c:	6812      	ldr	r2, [r2, #0]
 800a88e:	68d2      	ldr	r2, [r2, #12]
 800a890:	3201      	adds	r2, #1
 800a892:	601a      	str	r2, [r3, #0]
}
 800a894:	4770      	bx	lr
 800a896:	46c0      	nop			; (mov r8, r8)
 800a898:	20000ff8 	.word	0x20000ff8

0800a89c <LoRaMacCryptoGetFCntDown>:
{
 800a89c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a89e:	001c      	movs	r4, r3
    uint32_t lastDown = 0;
 800a8a0:	2300      	movs	r3, #0
{
 800a8a2:	0007      	movs	r7, r0
 800a8a4:	000d      	movs	r5, r1
 800a8a6:	0016      	movs	r6, r2
        return LORAMAC_CRYPTO_ERROR_NPE;
 800a8a8:	200a      	movs	r0, #10
    uint32_t lastDown = 0;
 800a8aa:	9301      	str	r3, [sp, #4]
    if( currentDown == NULL )
 800a8ac:	429c      	cmp	r4, r3
 800a8ae:	d026      	beq.n	800a8fe <LoRaMacCryptoGetFCntDown+0x62>
    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 800a8b0:	0038      	movs	r0, r7
 800a8b2:	a901      	add	r1, sp, #4
 800a8b4:	f7ff ff5a 	bl	800a76c <GetLastFcntDown.constprop.0>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800a8b8:	2800      	cmp	r0, #0
 800a8ba:	d120      	bne.n	800a8fe <LoRaMacCryptoGetFCntDown+0x62>
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 800a8bc:	9f01      	ldr	r7, [sp, #4]
 800a8be:	1c7b      	adds	r3, r7, #1
 800a8c0:	d101      	bne.n	800a8c6 <LoRaMacCryptoGetFCntDown+0x2a>
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 800a8c2:	6026      	str	r6, [r4, #0]
 800a8c4:	e005      	b.n	800a8d2 <LoRaMacCryptoGetFCntDown+0x36>
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 800a8c6:	b2bb      	uxth	r3, r7
 800a8c8:	1af3      	subs	r3, r6, r3
        if( fCntDiff > 0 )
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	dd13      	ble.n	800a8f6 <LoRaMacCryptoGetFCntDown+0x5a>
            *currentDown = lastDown + fCntDiff;
 800a8ce:	18fb      	adds	r3, r7, r3
 800a8d0:	6023      	str	r3, [r4, #0]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800a8d2:	4b10      	ldr	r3, [pc, #64]	; (800a914 <LoRaMacCryptoGetFCntDown+0x78>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	789e      	ldrb	r6, [r3, #2]
 800a8d8:	2e00      	cmp	r6, #0
 800a8da:	d110      	bne.n	800a8fe <LoRaMacCryptoGetFCntDown+0x62>
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 800a8dc:	0033      	movs	r3, r6
 800a8de:	0038      	movs	r0, r7
 800a8e0:	0031      	movs	r1, r6
 800a8e2:	6822      	ldr	r2, [r4, #0]
 800a8e4:	1a12      	subs	r2, r2, r0
 800a8e6:	418b      	sbcs	r3, r1
 800a8e8:	429e      	cmp	r6, r3
 800a8ea:	dc10      	bgt.n	800a90e <LoRaMacCryptoGetFCntDown+0x72>
 800a8ec:	d101      	bne.n	800a8f2 <LoRaMacCryptoGetFCntDown+0x56>
 800a8ee:	4295      	cmp	r5, r2
 800a8f0:	d80d      	bhi.n	800a90e <LoRaMacCryptoGetFCntDown+0x72>
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 800a8f2:	2008      	movs	r0, #8
 800a8f4:	e003      	b.n	800a8fe <LoRaMacCryptoGetFCntDown+0x62>
        else if( fCntDiff == 0 )
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d102      	bne.n	800a900 <LoRaMacCryptoGetFCntDown+0x64>
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 800a8fa:	2007      	movs	r0, #7
            *currentDown = lastDown;
 800a8fc:	6027      	str	r7, [r4, #0]
}
 800a8fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 800a900:	2380      	movs	r3, #128	; 0x80
 800a902:	0c3a      	lsrs	r2, r7, #16
 800a904:	0412      	lsls	r2, r2, #16
 800a906:	025b      	lsls	r3, r3, #9
 800a908:	18d2      	adds	r2, r2, r3
 800a90a:	1996      	adds	r6, r2, r6
 800a90c:	e7d9      	b.n	800a8c2 <LoRaMacCryptoGetFCntDown+0x26>
    return LORAMAC_CRYPTO_SUCCESS;
 800a90e:	2000      	movs	r0, #0
 800a910:	e7f5      	b.n	800a8fe <LoRaMacCryptoGetFCntDown+0x62>
 800a912:	46c0      	nop			; (mov r8, r8)
 800a914:	20000ff8 	.word	0x20000ff8

0800a918 <LoRaMacCryptoSetMulticastReference>:
{
 800a918:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_NPE;
 800a91a:	200a      	movs	r0, #10
    if( multicastList == NULL )
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d004      	beq.n	800a92a <LoRaMacCryptoSetMulticastReference+0x12>
    return LORAMAC_CRYPTO_SUCCESS;
 800a920:	2000      	movs	r0, #0
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 800a922:	4a02      	ldr	r2, [pc, #8]	; (800a92c <LoRaMacCryptoSetMulticastReference+0x14>)
 800a924:	6812      	ldr	r2, [r2, #0]
 800a926:	321c      	adds	r2, #28
 800a928:	621a      	str	r2, [r3, #32]
}
 800a92a:	4770      	bx	lr
 800a92c:	20000ff8 	.word	0x20000ff8

0800a930 <LoRaMacCryptoPrepareJoinRequest>:
{
 800a930:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a932:	0004      	movs	r4, r0
        return LORAMAC_CRYPTO_ERROR_NPE;
 800a934:	200a      	movs	r0, #10
    if( macMsg == 0 )
 800a936:	2c00      	cmp	r4, #0
 800a938:	d021      	beq.n	800a97e <LoRaMacCryptoPrepareJoinRequest+0x4e>
    uint32_t devNonce = 0;
 800a93a:	2300      	movs	r3, #0
    SecureElementRandomNumber( &devNonce );
 800a93c:	a803      	add	r0, sp, #12
    uint32_t devNonce = 0;
 800a93e:	9303      	str	r3, [sp, #12]
    SecureElementRandomNumber( &devNonce );
 800a940:	f7fc f918 	bl	8006b74 <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 800a944:	4a0f      	ldr	r2, [pc, #60]	; (800a984 <LoRaMacCryptoPrepareJoinRequest+0x54>)
 800a946:	9b03      	ldr	r3, [sp, #12]
 800a948:	6812      	ldr	r2, [r2, #0]
 800a94a:	b29b      	uxth	r3, r3
 800a94c:	8093      	strh	r3, [r2, #4]
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800a94e:	0020      	movs	r0, r4
    macMsg->DevNonce = CryptoNvm->DevNonce;
 800a950:	82e3      	strh	r3, [r4, #22]
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800a952:	f000 fa30 	bl	800adb6 <LoRaMacSerializerJoinRequest>
 800a956:	2800      	cmp	r0, #0
 800a958:	d110      	bne.n	800a97c <LoRaMacCryptoPrepareJoinRequest+0x4c>
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800a95a:	0023      	movs	r3, r4
 800a95c:	3318      	adds	r3, #24
 800a95e:	9300      	str	r3, [sp, #0]
 800a960:	2213      	movs	r2, #19
 800a962:	2301      	movs	r3, #1
 800a964:	6821      	ldr	r1, [r4, #0]
 800a966:	f7fc f811 	bl	800698c <SecureElementComputeAesCmac>
 800a96a:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800a96c:	200f      	movs	r0, #15
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d105      	bne.n	800a97e <LoRaMacCryptoPrepareJoinRequest+0x4e>
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800a972:	0020      	movs	r0, r4
 800a974:	f000 fa1f 	bl	800adb6 <LoRaMacSerializerJoinRequest>
 800a978:	2800      	cmp	r0, #0
 800a97a:	d000      	beq.n	800a97e <LoRaMacCryptoPrepareJoinRequest+0x4e>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800a97c:	2011      	movs	r0, #17
}
 800a97e:	b004      	add	sp, #16
 800a980:	bd10      	pop	{r4, pc}
 800a982:	46c0      	nop			; (mov r8, r8)
 800a984:	20000ff8 	.word	0x20000ff8

0800a988 <LoRaMacCryptoSecureMessage>:
{
 800a988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a98a:	0005      	movs	r5, r0
 800a98c:	001c      	movs	r4, r3
        return LORAMAC_CRYPTO_ERROR_NPE;
 800a98e:	200a      	movs	r0, #10
{
 800a990:	b089      	sub	sp, #36	; 0x24
    if( macMsg == NULL )
 800a992:	2b00      	cmp	r3, #0
 800a994:	d01f      	beq.n	800a9d6 <LoRaMacCryptoSecureMessage+0x4e>
    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 800a996:	4b2e      	ldr	r3, [pc, #184]	; (800aa50 <LoRaMacCryptoSecureMessage+0xc8>)
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800a998:	3804      	subs	r0, #4
    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	68db      	ldr	r3, [r3, #12]
 800a99e:	42ab      	cmp	r3, r5
 800a9a0:	d819      	bhi.n	800a9d6 <LoRaMacCryptoSecureMessage+0x4e>
    if( macMsg->FPort == 0 )
 800a9a2:	1c62      	adds	r2, r4, #1
 800a9a4:	7fd2      	ldrb	r2, [r2, #31]
        payloadDecryptionKeyID = NWK_S_KEY;
 800a9a6:	1e51      	subs	r1, r2, #1
 800a9a8:	418a      	sbcs	r2, r1
 800a9aa:	3202      	adds	r2, #2
    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 800a9ac:	42ab      	cmp	r3, r5
 800a9ae:	d306      	bcc.n	800a9be <LoRaMacCryptoSecureMessage+0x36>
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800a9b0:	0020      	movs	r0, r4
 800a9b2:	f000 fa35 	bl	800ae20 <LoRaMacSerializerData>
 800a9b6:	1e03      	subs	r3, r0, #0
 800a9b8:	d00f      	beq.n	800a9da <LoRaMacCryptoSecureMessage+0x52>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800a9ba:	2011      	movs	r0, #17
 800a9bc:	e00b      	b.n	800a9d6 <LoRaMacCryptoSecureMessage+0x4e>
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 800a9be:	0023      	movs	r3, r4
 800a9c0:	3328      	adds	r3, #40	; 0x28
 800a9c2:	7819      	ldrb	r1, [r3, #0]
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a9c8:	9300      	str	r3, [sp, #0]
 800a9ca:	9501      	str	r5, [sp, #4]
 800a9cc:	68a3      	ldr	r3, [r4, #8]
 800a9ce:	f7ff fe5c 	bl	800a68a <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800a9d2:	2800      	cmp	r0, #0
 800a9d4:	d0ec      	beq.n	800a9b0 <LoRaMacCryptoSecureMessage+0x28>
}
 800a9d6:	b009      	add	sp, #36	; 0x24
 800a9d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800a9da:	7927      	ldrb	r7, [r4, #4]
 800a9dc:	6821      	ldr	r1, [r4, #0]
 800a9de:	3f04      	subs	r7, #4
 800a9e0:	b2ba      	uxth	r2, r7
        return LORAMAC_CRYPTO_ERROR_NPE;
 800a9e2:	200a      	movs	r0, #10
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800a9e4:	9203      	str	r2, [sp, #12]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800a9e6:	2900      	cmp	r1, #0
 800a9e8:	d0f5      	beq.n	800a9d6 <LoRaMacCryptoSecureMessage+0x4e>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800a9ea:	2680      	movs	r6, #128	; 0x80
 800a9ec:	b2ba      	uxth	r2, r7
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800a9ee:	200e      	movs	r0, #14
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800a9f0:	0076      	lsls	r6, r6, #1
 800a9f2:	42b2      	cmp	r2, r6
 800a9f4:	d8ef      	bhi.n	800a9d6 <LoRaMacCryptoSecureMessage+0x4e>
    b0[0] = 0x49;
 800a9f6:	2249      	movs	r2, #73	; 0x49
 800a9f8:	a804      	add	r0, sp, #16
        b0[1] = 0x00;
 800a9fa:	7043      	strb	r3, [r0, #1]
        b0[2] = 0x00;
 800a9fc:	7083      	strb	r3, [r0, #2]
    b0[3] = 0x00;
 800a9fe:	70c3      	strb	r3, [r0, #3]
    b0[4] = 0x00;
 800aa00:	7103      	strb	r3, [r0, #4]
    b0[5] = dir;
 800aa02:	7143      	strb	r3, [r0, #5]
    b0[14] = 0x00;
 800aa04:	7383      	strb	r3, [r0, #14]
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800aa06:	0023      	movs	r3, r4
 800aa08:	68a6      	ldr	r6, [r4, #8]
    b0[0] = 0x49;
 800aa0a:	7002      	strb	r2, [r0, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800aa0c:	0a32      	lsrs	r2, r6, #8
    b0[6] = devAddr & 0xFF;
 800aa0e:	7186      	strb	r6, [r0, #6]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800aa10:	71c2      	strb	r2, [r0, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800aa12:	0c32      	lsrs	r2, r6, #16
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800aa14:	0e36      	lsrs	r6, r6, #24
 800aa16:	7246      	strb	r6, [r0, #9]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800aa18:	0a2e      	lsrs	r6, r5, #8
 800aa1a:	72c6      	strb	r6, [r0, #11]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800aa1c:	0c2e      	lsrs	r6, r5, #16
 800aa1e:	7306      	strb	r6, [r0, #12]
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800aa20:	332c      	adds	r3, #44	; 0x2c
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800aa22:	0e2e      	lsrs	r6, r5, #24
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800aa24:	7202      	strb	r2, [r0, #8]
    b0[10] = fCnt & 0xFF;
 800aa26:	7285      	strb	r5, [r0, #10]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800aa28:	7346      	strb	r6, [r0, #13]
    b0[15] = msgLen & 0xFF;
 800aa2a:	73c7      	strb	r7, [r0, #15]
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800aa2c:	9a03      	ldr	r2, [sp, #12]
 800aa2e:	9300      	str	r3, [sp, #0]
 800aa30:	2302      	movs	r3, #2
 800aa32:	f7fb ffab 	bl	800698c <SecureElementComputeAesCmac>
 800aa36:	2800      	cmp	r0, #0
 800aa38:	d001      	beq.n	800aa3e <LoRaMacCryptoSecureMessage+0xb6>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800aa3a:	200f      	movs	r0, #15
 800aa3c:	e7cb      	b.n	800a9d6 <LoRaMacCryptoSecureMessage+0x4e>
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800aa3e:	0020      	movs	r0, r4
 800aa40:	f000 f9ee 	bl	800ae20 <LoRaMacSerializerData>
 800aa44:	2800      	cmp	r0, #0
 800aa46:	d1b8      	bne.n	800a9ba <LoRaMacCryptoSecureMessage+0x32>
    CryptoNvm->FCntList.FCntUp = fCntUp;
 800aa48:	4b01      	ldr	r3, [pc, #4]	; (800aa50 <LoRaMacCryptoSecureMessage+0xc8>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	60dd      	str	r5, [r3, #12]
    return LORAMAC_CRYPTO_SUCCESS;
 800aa4e:	e7c2      	b.n	800a9d6 <LoRaMacCryptoSecureMessage+0x4e>
 800aa50:	20000ff8 	.word	0x20000ff8

0800aa54 <LoRaMacCryptoUnsecureMessage>:
{
 800aa54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa56:	b087      	sub	sp, #28
 800aa58:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aa5a:	001c      	movs	r4, r3
 800aa5c:	0007      	movs	r7, r0
 800aa5e:	000e      	movs	r6, r1
        return LORAMAC_CRYPTO_ERROR_NPE;
 800aa60:	230a      	movs	r3, #10
{
 800aa62:	9203      	str	r2, [sp, #12]
    if( macMsg == 0 )
 800aa64:	2d00      	cmp	r5, #0
 800aa66:	d008      	beq.n	800aa7a <LoRaMacCryptoUnsecureMessage+0x26>
    uint32_t lastDown = 0;
 800aa68:	2300      	movs	r3, #0
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800aa6a:	0010      	movs	r0, r2
 800aa6c:	a905      	add	r1, sp, #20
    uint32_t lastDown = 0;
 800aa6e:	9305      	str	r3, [sp, #20]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800aa70:	f7ff fe7c 	bl	800a76c <GetLastFcntDown.constprop.0>
 800aa74:	2800      	cmp	r0, #0
 800aa76:	d003      	beq.n	800aa80 <LoRaMacCryptoUnsecureMessage+0x2c>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800aa78:	2306      	movs	r3, #6
}
 800aa7a:	0018      	movs	r0, r3
 800aa7c:	b007      	add	sp, #28
 800aa7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( ( currentDown > lastDown ) ||
 800aa80:	9b05      	ldr	r3, [sp, #20]
 800aa82:	429c      	cmp	r4, r3
 800aa84:	d801      	bhi.n	800aa8a <LoRaMacCryptoUnsecureMessage+0x36>
 800aa86:	3301      	adds	r3, #1
 800aa88:	d1f6      	bne.n	800aa78 <LoRaMacCryptoUnsecureMessage+0x24>
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800aa8a:	0028      	movs	r0, r5
 800aa8c:	f000 f938 	bl	800ad00 <LoRaMacParserData>
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800aa90:	2310      	movs	r3, #16
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800aa92:	2800      	cmp	r0, #0
 800aa94:	d1f1      	bne.n	800aa7a <LoRaMacCryptoUnsecureMessage+0x26>
        if( KeyAddrList[i].AddrID == addrID )
 800aa96:	4a20      	ldr	r2, [pc, #128]	; (800ab18 <LoRaMacCryptoUnsecureMessage+0xc4>)
 800aa98:	7813      	ldrb	r3, [r2, #0]
 800aa9a:	42bb      	cmp	r3, r7
 800aa9c:	d004      	beq.n	800aaa8 <LoRaMacCryptoUnsecureMessage+0x54>
 800aa9e:	7911      	ldrb	r1, [r2, #4]
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 800aaa0:	230c      	movs	r3, #12
        if( KeyAddrList[i].AddrID == addrID )
 800aaa2:	42b9      	cmp	r1, r7
 800aaa4:	d1e9      	bne.n	800aa7a <LoRaMacCryptoUnsecureMessage+0x26>
 800aaa6:	3001      	adds	r0, #1
    if( address != macMsg->FHDR.DevAddr )
 800aaa8:	68a9      	ldr	r1, [r5, #8]
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 800aaaa:	2302      	movs	r3, #2
    if( address != macMsg->FHDR.DevAddr )
 800aaac:	42b1      	cmp	r1, r6
 800aaae:	d1e4      	bne.n	800aa7a <LoRaMacCryptoUnsecureMessage+0x26>
    payloadDecryptionKeyID = curItem->AppSkey;
 800aab0:	4098      	lsls	r0, r3
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800aab2:	7929      	ldrb	r1, [r5, #4]
 800aab4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    payloadDecryptionKeyID = curItem->AppSkey;
 800aab6:	1810      	adds	r0, r2, r0
 800aab8:	7847      	ldrb	r7, [r0, #1]
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800aaba:	7882      	ldrb	r2, [r0, #2]
 800aabc:	3904      	subs	r1, #4
 800aabe:	9301      	str	r3, [sp, #4]
 800aac0:	9400      	str	r4, [sp, #0]
 800aac2:	0033      	movs	r3, r6
 800aac4:	6828      	ldr	r0, [r5, #0]
 800aac6:	b289      	uxth	r1, r1
 800aac8:	f7ff fe70 	bl	800a7ac <VerifyCmacB0.constprop.0.isra.0>
 800aacc:	1e03      	subs	r3, r0, #0
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800aace:	d1d4      	bne.n	800aa7a <LoRaMacCryptoUnsecureMessage+0x26>
    if( macMsg->FPort == 0 )
 800aad0:	1c6b      	adds	r3, r5, #1
 800aad2:	7fdb      	ldrb	r3, [r3, #31]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d100      	bne.n	800aada <LoRaMacCryptoUnsecureMessage+0x86>
        payloadDecryptionKeyID = NWK_S_KEY;
 800aad8:	2702      	movs	r7, #2
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 800aada:	002b      	movs	r3, r5
 800aadc:	3328      	adds	r3, #40	; 0x28
 800aade:	7819      	ldrb	r1, [r3, #0]
 800aae0:	2301      	movs	r3, #1
 800aae2:	9401      	str	r4, [sp, #4]
 800aae4:	9300      	str	r3, [sp, #0]
 800aae6:	003a      	movs	r2, r7
 800aae8:	0033      	movs	r3, r6
 800aaea:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800aaec:	f7ff fdcd 	bl	800a68a <PayloadEncrypt>
 800aaf0:	1e03      	subs	r3, r0, #0
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800aaf2:	d1c2      	bne.n	800aa7a <LoRaMacCryptoUnsecureMessage+0x26>
    switch( fCntID )
 800aaf4:	9803      	ldr	r0, [sp, #12]
 800aaf6:	3801      	subs	r0, #1
 800aaf8:	2803      	cmp	r0, #3
 800aafa:	d8be      	bhi.n	800aa7a <LoRaMacCryptoUnsecureMessage+0x26>
 800aafc:	4a07      	ldr	r2, [pc, #28]	; (800ab1c <LoRaMacCryptoUnsecureMessage+0xc8>)
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 800aafe:	6812      	ldr	r2, [r2, #0]
    switch( fCntID )
 800ab00:	f7f5 fb14 	bl	800012c <__gnu_thumb1_case_uqi>
 800ab04:	08060402 	.word	0x08060402
            CryptoNvm->FCntList.NFCntDown = currentDown;
 800ab08:	6114      	str	r4, [r2, #16]
            break;
 800ab0a:	e7b6      	b.n	800aa7a <LoRaMacCryptoUnsecureMessage+0x26>
            CryptoNvm->FCntList.AFCntDown = currentDown;
 800ab0c:	6154      	str	r4, [r2, #20]
            break;
 800ab0e:	e7b4      	b.n	800aa7a <LoRaMacCryptoUnsecureMessage+0x26>
            CryptoNvm->FCntList.FCntDown = currentDown;
 800ab10:	6194      	str	r4, [r2, #24]
            break;
 800ab12:	e7b2      	b.n	800aa7a <LoRaMacCryptoUnsecureMessage+0x26>
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 800ab14:	61d4      	str	r4, [r2, #28]
            break;
 800ab16:	e7b0      	b.n	800aa7a <LoRaMacCryptoUnsecureMessage+0x26>
 800ab18:	200000c4 	.word	0x200000c4
 800ab1c:	20000ff8 	.word	0x20000ff8

0800ab20 <LoRaMacCryptoDeriveMcRootKey>:
{
 800ab20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ab22:	0004      	movs	r4, r0
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800ab24:	200b      	movs	r0, #11
    if( keyID != APP_KEY )
 800ab26:	2900      	cmp	r1, #0
 800ab28:	d111      	bne.n	800ab4e <LoRaMacCryptoDeriveMcRootKey+0x2e>
    uint8_t compBase[16] = { 0 };
 800ab2a:	220c      	movs	r2, #12
 800ab2c:	a801      	add	r0, sp, #4
 800ab2e:	9100      	str	r1, [sp, #0]
 800ab30:	f003 fc97 	bl	800e462 <memset>
    if( versionMinor == 1 )
 800ab34:	2c01      	cmp	r4, #1
 800ab36:	d102      	bne.n	800ab3e <LoRaMacCryptoDeriveMcRootKey+0x1e>
        compBase[0] = 0x20;
 800ab38:	2320      	movs	r3, #32
 800ab3a:	466a      	mov	r2, sp
 800ab3c:	7013      	strb	r3, [r2, #0]
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 800ab3e:	2204      	movs	r2, #4
 800ab40:	2100      	movs	r1, #0
 800ab42:	4668      	mov	r0, sp
 800ab44:	f7fb ffb5 	bl	8006ab2 <SecureElementDeriveAndStoreKey>
 800ab48:	2800      	cmp	r0, #0
 800ab4a:	d000      	beq.n	800ab4e <LoRaMacCryptoDeriveMcRootKey+0x2e>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ab4c:	200f      	movs	r0, #15
}
 800ab4e:	b004      	add	sp, #16
 800ab50:	bd10      	pop	{r4, pc}
	...

0800ab54 <LoRaMacCryptoSetKey>:
{
 800ab54:	b570      	push	{r4, r5, r6, lr}
 800ab56:	0005      	movs	r5, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 800ab58:	f7fb ffa2 	bl	8006aa0 <SecureElementSetKey>
 800ab5c:	1e04      	subs	r4, r0, #0
 800ab5e:	d10d      	bne.n	800ab7c <LoRaMacCryptoSetKey+0x28>
    if( keyID == APP_KEY )
 800ab60:	2d00      	cmp	r5, #0
 800ab62:	d10c      	bne.n	800ab7e <LoRaMacCryptoSetKey+0x2a>
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 800ab64:	4b07      	ldr	r3, [pc, #28]	; (800ab84 <LoRaMacCryptoSetKey+0x30>)
 800ab66:	0021      	movs	r1, r4
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	7898      	ldrb	r0, [r3, #2]
 800ab6c:	f7ff ffd8 	bl	800ab20 <LoRaMacCryptoDeriveMcRootKey>
 800ab70:	2800      	cmp	r0, #0
 800ab72:	d103      	bne.n	800ab7c <LoRaMacCryptoSetKey+0x28>
    if( keyID != MC_ROOT_KEY )
 800ab74:	f7ff fde8 	bl	800a748 <LoRaMacCryptoDeriveMcKEKey.part.0>
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800ab78:	2800      	cmp	r0, #0
 800ab7a:	d000      	beq.n	800ab7e <LoRaMacCryptoSetKey+0x2a>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ab7c:	240f      	movs	r4, #15
}
 800ab7e:	0020      	movs	r0, r4
 800ab80:	bd70      	pop	{r4, r5, r6, pc}
 800ab82:	46c0      	nop			; (mov r8, r8)
 800ab84:	20000ff8 	.word	0x20000ff8

0800ab88 <LoRaMacCryptoHandleJoinAccept>:
{
 800ab88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab8a:	b091      	sub	sp, #68	; 0x44
 800ab8c:	9005      	str	r0, [sp, #20]
 800ab8e:	000e      	movs	r6, r1
 800ab90:	0014      	movs	r4, r2
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ab92:	200a      	movs	r0, #10
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800ab94:	2a00      	cmp	r2, #0
 800ab96:	d063      	beq.n	800ac60 <LoRaMacCryptoHandleJoinAccept+0xd8>
 800ab98:	2900      	cmp	r1, #0
 800ab9a:	d061      	beq.n	800ac60 <LoRaMacCryptoHandleJoinAccept+0xd8>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 800ab9c:	2700      	movs	r7, #0
 800ab9e:	221d      	movs	r2, #29
 800aba0:	0039      	movs	r1, r7
 800aba2:	a808      	add	r0, sp, #32
 800aba4:	9707      	str	r7, [sp, #28]
 800aba6:	f003 fc5c 	bl	800e462 <memset>
    uint8_t versionMinor         = 0;
 800abaa:	ab02      	add	r3, sp, #8
 800abac:	74df      	strb	r7, [r3, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 800abae:	4f2d      	ldr	r7, [pc, #180]	; (800ac64 <LoRaMacCryptoHandleJoinAccept+0xdc>)
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 800abb0:	aa02      	add	r2, sp, #8
    uint16_t nonce               = CryptoNvm->DevNonce;
 800abb2:	683b      	ldr	r3, [r7, #0]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 800abb4:	0031      	movs	r1, r6
    uint16_t nonce               = CryptoNvm->DevNonce;
 800abb6:	889d      	ldrh	r5, [r3, #4]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 800abb8:	2313      	movs	r3, #19
 800abba:	189b      	adds	r3, r3, r2
 800abbc:	9302      	str	r3, [sp, #8]
 800abbe:	ab07      	add	r3, sp, #28
 800abc0:	9301      	str	r3, [sp, #4]
 800abc2:	7923      	ldrb	r3, [r4, #4]
 800abc4:	002a      	movs	r2, r5
 800abc6:	9300      	str	r3, [sp, #0]
 800abc8:	6823      	ldr	r3, [r4, #0]
 800abca:	9805      	ldr	r0, [sp, #20]
 800abcc:	f7fb ff91 	bl	8006af2 <SecureElementProcessJoinAccept>
 800abd0:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800abd2:	200f      	movs	r0, #15
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d143      	bne.n	800ac60 <LoRaMacCryptoHandleJoinAccept+0xd8>
    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 800abd8:	a907      	add	r1, sp, #28
 800abda:	7922      	ldrb	r2, [r4, #4]
 800abdc:	6820      	ldr	r0, [r4, #0]
 800abde:	f001 fb4f 	bl	800c280 <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800abe2:	0020      	movs	r0, r4
 800abe4:	f000 f840 	bl	800ac68 <LoRaMacParserJoinAccept>
 800abe8:	0001      	movs	r1, r0
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800abea:	2010      	movs	r0, #16
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800abec:	2900      	cmp	r1, #0
 800abee:	d137      	bne.n	800ac60 <LoRaMacCryptoHandleJoinAccept+0xd8>
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 800abf0:	7a22      	ldrb	r2, [r4, #8]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 800abf2:	79e6      	ldrb	r6, [r4, #7]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 800abf4:	4082      	lsls	r2, r0
    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 800abf6:	79a3      	ldrb	r3, [r4, #6]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 800abf8:	0236      	lsls	r6, r6, #8
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 800abfa:	4316      	orrs	r6, r2
 800abfc:	431e      	orrs	r6, r3
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 800abfe:	683b      	ldr	r3, [r7, #0]
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 800ac00:	380d      	subs	r0, #13
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 800ac02:	689a      	ldr	r2, [r3, #8]
 800ac04:	42b2      	cmp	r2, r6
 800ac06:	d02b      	beq.n	800ac60 <LoRaMacCryptoHandleJoinAccept+0xd8>
        CryptoNvm->JoinNonce = currentJoinNonce;
 800ac08:	609e      	str	r6, [r3, #8]
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 800ac0a:	ab02      	add	r3, sp, #8
 800ac0c:	7cd8      	ldrb	r0, [r3, #19]
 800ac0e:	f7ff ff87 	bl	800ab20 <LoRaMacCryptoDeriveMcRootKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ac12:	2800      	cmp	r0, #0
 800ac14:	d124      	bne.n	800ac60 <LoRaMacCryptoHandleJoinAccept+0xd8>
    if( keyID != MC_ROOT_KEY )
 800ac16:	f7ff fd97 	bl	800a748 <LoRaMacCryptoDeriveMcKEKey.part.0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ac1a:	2800      	cmp	r0, #0
 800ac1c:	d120      	bne.n	800ac60 <LoRaMacCryptoHandleJoinAccept+0xd8>
        netID = ( uint32_t )macMsg->NetID[0];
 800ac1e:	7a62      	ldrb	r2, [r4, #9]
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 800ac20:	7aa3      	ldrb	r3, [r4, #10]
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 800ac22:	7ae4      	ldrb	r4, [r4, #11]
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 800ac24:	021b      	lsls	r3, r3, #8
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 800ac26:	0424      	lsls	r4, r4, #16
 800ac28:	431c      	orrs	r4, r3
 800ac2a:	4314      	orrs	r4, r2
        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 800ac2c:	002b      	movs	r3, r5
 800ac2e:	0022      	movs	r2, r4
 800ac30:	0031      	movs	r1, r6
 800ac32:	3003      	adds	r0, #3
 800ac34:	f7ff fd04 	bl	800a640 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ac38:	2800      	cmp	r0, #0
 800ac3a:	d111      	bne.n	800ac60 <LoRaMacCryptoHandleJoinAccept+0xd8>
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 800ac3c:	002b      	movs	r3, r5
 800ac3e:	0022      	movs	r2, r4
 800ac40:	0031      	movs	r1, r6
 800ac42:	3002      	adds	r0, #2
 800ac44:	f7ff fcfc 	bl	800a640 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ac48:	2800      	cmp	r0, #0
 800ac4a:	d109      	bne.n	800ac60 <LoRaMacCryptoHandleJoinAccept+0xd8>
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 800ac4c:	aa02      	add	r2, sp, #8
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	7cd2      	ldrb	r2, [r2, #19]
    CryptoNvm->FCntList.FCntUp = 0;
 800ac52:	60d8      	str	r0, [r3, #12]
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 800ac54:	709a      	strb	r2, [r3, #2]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800ac56:	2201      	movs	r2, #1
 800ac58:	4252      	negs	r2, r2
 800ac5a:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800ac5c:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800ac5e:	615a      	str	r2, [r3, #20]
}
 800ac60:	b011      	add	sp, #68	; 0x44
 800ac62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac64:	20000ff8 	.word	0x20000ff8

0800ac68 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 800ac68:	b570      	push	{r4, r5, r6, lr}
 800ac6a:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_PARSER_ERROR_NPE;
 800ac6c:	2002      	movs	r0, #2
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800ac6e:	2c00      	cmp	r4, #0
 800ac70:	d040      	beq.n	800acf4 <LoRaMacParserJoinAccept+0x8c>
 800ac72:	6821      	ldr	r1, [r4, #0]
 800ac74:	2900      	cmp	r1, #0
 800ac76:	d03d      	beq.n	800acf4 <LoRaMacParserJoinAccept+0x8c>
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800ac78:	780b      	ldrb	r3, [r1, #0]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 800ac7a:	2203      	movs	r2, #3
    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800ac7c:	7163      	strb	r3, [r4, #5]
    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 800ac7e:	3101      	adds	r1, #1
 800ac80:	1da0      	adds	r0, r4, #6
 800ac82:	f001 fafd 	bl	800c280 <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 800ac86:	0020      	movs	r0, r4
 800ac88:	6823      	ldr	r3, [r4, #0]
 800ac8a:	2203      	movs	r2, #3
 800ac8c:	1d19      	adds	r1, r3, #4
 800ac8e:	3009      	adds	r0, #9
 800ac90:	f001 faf6 	bl	800c280 <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 800ac94:	6821      	ldr	r1, [r4, #0]
 800ac96:	79c8      	ldrb	r0, [r1, #7]
 800ac98:	60e0      	str	r0, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800ac9a:	7a0a      	ldrb	r2, [r1, #8]
 800ac9c:	0212      	lsls	r2, r2, #8
 800ac9e:	4310      	orrs	r0, r2
 800aca0:	60e0      	str	r0, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800aca2:	7a4b      	ldrb	r3, [r1, #9]
 800aca4:	041b      	lsls	r3, r3, #16
 800aca6:	4303      	orrs	r3, r0
 800aca8:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800acaa:	7a8a      	ldrb	r2, [r1, #10]
 800acac:	0612      	lsls	r2, r2, #24
 800acae:	4313      	orrs	r3, r2
 800acb0:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 800acb2:	7acb      	ldrb	r3, [r1, #11]
 800acb4:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800acb6:	7b0b      	ldrb	r3, [r1, #12]
 800acb8:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 800acba:	7923      	ldrb	r3, [r4, #4]
 800acbc:	2b21      	cmp	r3, #33	; 0x21
 800acbe:	d11a      	bne.n	800acf6 <LoRaMacParserJoinAccept+0x8e>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 800acc0:	0020      	movs	r0, r4
 800acc2:	2210      	movs	r2, #16
 800acc4:	310d      	adds	r1, #13
 800acc6:	3012      	adds	r0, #18
 800acc8:	f001 fada 	bl	800c280 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 800accc:	231d      	movs	r3, #29
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800acce:	6825      	ldr	r5, [r4, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800acd0:	1c5a      	adds	r2, r3, #1
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800acd2:	5ce8      	ldrb	r0, [r5, r3]
 800acd4:	6260      	str	r0, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800acd6:	5ca9      	ldrb	r1, [r5, r2]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800acd8:	1c9a      	adds	r2, r3, #2
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800acda:	0209      	lsls	r1, r1, #8
 800acdc:	4308      	orrs	r0, r1
 800acde:	6260      	str	r0, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800ace0:	5caa      	ldrb	r2, [r5, r2]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800ace2:	3303      	adds	r3, #3
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800ace4:	0412      	lsls	r2, r2, #16
 800ace6:	4302      	orrs	r2, r0

    return LORAMAC_PARSER_SUCCESS;
 800ace8:	2000      	movs	r0, #0
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800acea:	6262      	str	r2, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800acec:	5ceb      	ldrb	r3, [r5, r3]
 800acee:	061b      	lsls	r3, r3, #24
 800acf0:	431a      	orrs	r2, r3
 800acf2:	6262      	str	r2, [r4, #36]	; 0x24
}
 800acf4:	bd70      	pop	{r4, r5, r6, pc}
        return LORAMAC_PARSER_FAIL;
 800acf6:	2001      	movs	r0, #1
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 800acf8:	2b11      	cmp	r3, #17
 800acfa:	dcfb      	bgt.n	800acf4 <LoRaMacParserJoinAccept+0x8c>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800acfc:	230d      	movs	r3, #13
 800acfe:	e7e6      	b.n	800acce <LoRaMacParserJoinAccept+0x66>

0800ad00 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 800ad00:	b570      	push	{r4, r5, r6, lr}
 800ad02:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_PARSER_ERROR_NPE;
 800ad04:	2002      	movs	r0, #2
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800ad06:	2c00      	cmp	r4, #0
 800ad08:	d054      	beq.n	800adb4 <LoRaMacParserData+0xb4>
 800ad0a:	6821      	ldr	r1, [r4, #0]
 800ad0c:	2900      	cmp	r1, #0
 800ad0e:	d051      	beq.n	800adb4 <LoRaMacParserData+0xb4>
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800ad10:	780b      	ldrb	r3, [r1, #0]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 800ad12:	1c65      	adds	r5, r4, #1
    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800ad14:	7163      	strb	r3, [r4, #5]
    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800ad16:	7848      	ldrb	r0, [r1, #1]
 800ad18:	60a0      	str	r0, [r4, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800ad1a:	788a      	ldrb	r2, [r1, #2]
 800ad1c:	0212      	lsls	r2, r2, #8
 800ad1e:	4310      	orrs	r0, r2
 800ad20:	60a0      	str	r0, [r4, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800ad22:	78cb      	ldrb	r3, [r1, #3]
 800ad24:	041b      	lsls	r3, r3, #16
 800ad26:	4303      	orrs	r3, r0
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800ad28:	0020      	movs	r0, r4
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800ad2a:	60a3      	str	r3, [r4, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800ad2c:	790a      	ldrb	r2, [r1, #4]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800ad2e:	3010      	adds	r0, #16
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800ad30:	0612      	lsls	r2, r2, #24
 800ad32:	4313      	orrs	r3, r2
 800ad34:	60a3      	str	r3, [r4, #8]
    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 800ad36:	794b      	ldrb	r3, [r1, #5]
 800ad38:	7323      	strb	r3, [r4, #12]
    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 800ad3a:	798b      	ldrb	r3, [r1, #6]
 800ad3c:	81e3      	strh	r3, [r4, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800ad3e:	79ca      	ldrb	r2, [r1, #7]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800ad40:	3108      	adds	r1, #8
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800ad42:	0212      	lsls	r2, r2, #8
 800ad44:	4313      	orrs	r3, r2
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800ad46:	7b22      	ldrb	r2, [r4, #12]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800ad48:	81e3      	strh	r3, [r4, #14]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800ad4a:	0712      	lsls	r2, r2, #28
 800ad4c:	0f12      	lsrs	r2, r2, #28
 800ad4e:	f001 fa97 	bl	800c280 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800ad52:	7b21      	ldrb	r1, [r4, #12]
    macMsg->FRMPayloadSize = 0;
 800ad54:	0020      	movs	r0, r4
    macMsg->FPort = 0;
 800ad56:	2300      	movs	r3, #0
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800ad58:	0709      	lsls	r1, r1, #28
 800ad5a:	0f09      	lsrs	r1, r1, #28
 800ad5c:	000e      	movs	r6, r1
    macMsg->FRMPayloadSize = 0;
 800ad5e:	3028      	adds	r0, #40	; 0x28
    macMsg->FPort = 0;
 800ad60:	77eb      	strb	r3, [r5, #31]
    macMsg->FRMPayloadSize = 0;
 800ad62:	7003      	strb	r3, [r0, #0]

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800ad64:	7922      	ldrb	r2, [r4, #4]
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800ad66:	3608      	adds	r6, #8
    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800ad68:	1b93      	subs	r3, r2, r6
 800ad6a:	2b04      	cmp	r3, #4
 800ad6c:	dd0c      	ble.n	800ad88 <LoRaMacParserData+0x88>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800ad6e:	6823      	ldr	r3, [r4, #0]
 800ad70:	3109      	adds	r1, #9

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800ad72:	3a04      	subs	r2, #4
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800ad74:	5d9e      	ldrb	r6, [r3, r6]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800ad76:	1a52      	subs	r2, r2, r1
 800ad78:	b2d2      	uxtb	r2, r2
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800ad7a:	77ee      	strb	r6, [r5, #31]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800ad7c:	7002      	strb	r2, [r0, #0]
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 800ad7e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ad80:	b292      	uxth	r2, r2
 800ad82:	1859      	adds	r1, r3, r1
 800ad84:	f001 fa7c 	bl	800c280 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800ad88:	6822      	ldr	r2, [r4, #0]
 800ad8a:	7923      	ldrb	r3, [r4, #4]
 800ad8c:	18d3      	adds	r3, r2, r3
 800ad8e:	1f1a      	subs	r2, r3, #4
 800ad90:	7810      	ldrb	r0, [r2, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800ad92:	1eda      	subs	r2, r3, #3
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800ad94:	62e0      	str	r0, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800ad96:	7811      	ldrb	r1, [r2, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800ad98:	1e9a      	subs	r2, r3, #2
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800ad9a:	0209      	lsls	r1, r1, #8
 800ad9c:	4308      	orrs	r0, r1
 800ad9e:	62e0      	str	r0, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800ada0:	7812      	ldrb	r2, [r2, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800ada2:	3b01      	subs	r3, #1
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800ada4:	0412      	lsls	r2, r2, #16
 800ada6:	4302      	orrs	r2, r0

    return LORAMAC_PARSER_SUCCESS;
 800ada8:	2000      	movs	r0, #0
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800adaa:	62e2      	str	r2, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800adac:	781b      	ldrb	r3, [r3, #0]
 800adae:	061b      	lsls	r3, r3, #24
 800adb0:	431a      	orrs	r2, r3
 800adb2:	62e2      	str	r2, [r4, #44]	; 0x2c
}
 800adb4:	bd70      	pop	{r4, r5, r6, pc}

0800adb6 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 800adb6:	b510      	push	{r4, lr}
 800adb8:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800adba:	2001      	movs	r0, #1
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800adbc:	2c00      	cmp	r4, #0
 800adbe:	d02e      	beq.n	800ae1e <LoRaMacSerializerJoinRequest+0x68>
 800adc0:	6823      	ldr	r3, [r4, #0]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d02b      	beq.n	800ae1e <LoRaMacSerializerJoinRequest+0x68>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800adc6:	7922      	ldrb	r2, [r4, #4]
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800adc8:	1800      	adds	r0, r0, r0
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800adca:	2a16      	cmp	r2, #22
 800adcc:	d927      	bls.n	800ae1e <LoRaMacSerializerJoinRequest+0x68>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800adce:	7962      	ldrb	r2, [r4, #5]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800add0:	1da1      	adds	r1, r4, #6
    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800add2:	701a      	strb	r2, [r3, #0]
    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800add4:	6823      	ldr	r3, [r4, #0]
 800add6:	2208      	movs	r2, #8
 800add8:	1c58      	adds	r0, r3, #1
 800adda:	f001 fa5a 	bl	800c292 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 800adde:	0021      	movs	r1, r4
 800ade0:	6820      	ldr	r0, [r4, #0]
 800ade2:	2208      	movs	r2, #8
 800ade4:	3009      	adds	r0, #9
 800ade6:	310e      	adds	r1, #14
 800ade8:	f001 fa53 	bl	800c292 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800adec:	8ae3      	ldrh	r3, [r4, #22]
 800adee:	6822      	ldr	r2, [r4, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;

    macMsg->BufSize = bufItr;

    return LORAMAC_SERIALIZER_SUCCESS;
 800adf0:	2000      	movs	r0, #0
    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800adf2:	7453      	strb	r3, [r2, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 800adf4:	8ae3      	ldrh	r3, [r4, #22]
 800adf6:	6822      	ldr	r2, [r4, #0]
 800adf8:	0a1b      	lsrs	r3, r3, #8
 800adfa:	7493      	strb	r3, [r2, #18]
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800adfc:	69a3      	ldr	r3, [r4, #24]
 800adfe:	6822      	ldr	r2, [r4, #0]
 800ae00:	74d3      	strb	r3, [r2, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800ae02:	69a3      	ldr	r3, [r4, #24]
 800ae04:	6822      	ldr	r2, [r4, #0]
 800ae06:	0a1b      	lsrs	r3, r3, #8
 800ae08:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800ae0a:	69a3      	ldr	r3, [r4, #24]
 800ae0c:	6822      	ldr	r2, [r4, #0]
 800ae0e:	0c1b      	lsrs	r3, r3, #16
 800ae10:	7553      	strb	r3, [r2, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800ae12:	69a3      	ldr	r3, [r4, #24]
 800ae14:	6822      	ldr	r2, [r4, #0]
 800ae16:	0e1b      	lsrs	r3, r3, #24
 800ae18:	7593      	strb	r3, [r2, #22]
    macMsg->BufSize = bufItr;
 800ae1a:	2317      	movs	r3, #23
 800ae1c:	7123      	strb	r3, [r4, #4]
}
 800ae1e:	bd10      	pop	{r4, pc}

0800ae20 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 800ae20:	b570      	push	{r4, r5, r6, lr}
 800ae22:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800ae24:	2001      	movs	r0, #1
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800ae26:	2c00      	cmp	r4, #0
 800ae28:	d068      	beq.n	800aefc <LoRaMacSerializerData+0xdc>
 800ae2a:	6821      	ldr	r1, [r4, #0]
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800ae2c:	2001      	movs	r0, #1
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800ae2e:	2900      	cmp	r1, #0
 800ae30:	d064      	beq.n	800aefc <LoRaMacSerializerData+0xdc>
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;

    if( macMsg->FRMPayloadSize > 0 )
 800ae32:	0025      	movs	r5, r4
 800ae34:	3528      	adds	r5, #40	; 0x28
 800ae36:	7828      	ldrb	r0, [r5, #0]
    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800ae38:	7b22      	ldrb	r2, [r4, #12]
 800ae3a:	0003      	movs	r3, r0
 800ae3c:	1e5e      	subs	r6, r3, #1
 800ae3e:	41b3      	sbcs	r3, r6
 800ae40:	0712      	lsls	r2, r2, #28
 800ae42:	0f12      	lsrs	r2, r2, #28
 800ae44:	189b      	adds	r3, r3, r2
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
    }

    computedBufSize += macMsg->FRMPayloadSize;
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800ae46:	3004      	adds	r0, #4
    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800ae48:	3308      	adds	r3, #8
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800ae4a:	181b      	adds	r3, r3, r0

    if( macMsg->BufSize < computedBufSize )
 800ae4c:	7922      	ldrb	r2, [r4, #4]
 800ae4e:	b29b      	uxth	r3, r3
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800ae50:	2002      	movs	r0, #2
    if( macMsg->BufSize < computedBufSize )
 800ae52:	429a      	cmp	r2, r3
 800ae54:	d352      	bcc.n	800aefc <LoRaMacSerializerData+0xdc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800ae56:	7963      	ldrb	r3, [r4, #5]
 800ae58:	700b      	strb	r3, [r1, #0]
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800ae5a:	0021      	movs	r1, r4
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800ae5c:	68a3      	ldr	r3, [r4, #8]
 800ae5e:	6822      	ldr	r2, [r4, #0]
    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800ae60:	3110      	adds	r1, #16
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800ae62:	7053      	strb	r3, [r2, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 800ae64:	68a3      	ldr	r3, [r4, #8]
 800ae66:	6822      	ldr	r2, [r4, #0]
 800ae68:	0a1b      	lsrs	r3, r3, #8
 800ae6a:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 800ae6c:	68a3      	ldr	r3, [r4, #8]
 800ae6e:	6822      	ldr	r2, [r4, #0]
 800ae70:	0c1b      	lsrs	r3, r3, #16
 800ae72:	70d3      	strb	r3, [r2, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 800ae74:	68a3      	ldr	r3, [r4, #8]
 800ae76:	6822      	ldr	r2, [r4, #0]
 800ae78:	0e1b      	lsrs	r3, r3, #24
 800ae7a:	7113      	strb	r3, [r2, #4]
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 800ae7c:	7b23      	ldrb	r3, [r4, #12]
 800ae7e:	6822      	ldr	r2, [r4, #0]
 800ae80:	7153      	strb	r3, [r2, #5]
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 800ae82:	89e3      	ldrh	r3, [r4, #14]
 800ae84:	6822      	ldr	r2, [r4, #0]
 800ae86:	7193      	strb	r3, [r2, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 800ae88:	89e3      	ldrh	r3, [r4, #14]
 800ae8a:	6822      	ldr	r2, [r4, #0]
 800ae8c:	0a1b      	lsrs	r3, r3, #8
 800ae8e:	71d3      	strb	r3, [r2, #7]
    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800ae90:	7b22      	ldrb	r2, [r4, #12]
 800ae92:	6820      	ldr	r0, [r4, #0]
 800ae94:	0712      	lsls	r2, r2, #28
 800ae96:	0f12      	lsrs	r2, r2, #28
 800ae98:	3008      	adds	r0, #8
 800ae9a:	f001 f9f1 	bl	800c280 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800ae9e:	7b23      	ldrb	r3, [r4, #12]

    if( macMsg->FRMPayloadSize > 0 )
 800aea0:	782a      	ldrb	r2, [r5, #0]
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800aea2:	071b      	lsls	r3, r3, #28
 800aea4:	0f1b      	lsrs	r3, r3, #28
 800aea6:	001e      	movs	r6, r3
 800aea8:	3608      	adds	r6, #8
    if( macMsg->FRMPayloadSize > 0 )
 800aeaa:	2a00      	cmp	r2, #0
 800aeac:	d005      	beq.n	800aeba <LoRaMacSerializerData+0x9a>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 800aeae:	1c62      	adds	r2, r4, #1
 800aeb0:	7fd2      	ldrb	r2, [r2, #31]
 800aeb2:	6821      	ldr	r1, [r4, #0]
 800aeb4:	3309      	adds	r3, #9
 800aeb6:	558a      	strb	r2, [r1, r6]
 800aeb8:	001e      	movs	r6, r3
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 800aeba:	6823      	ldr	r3, [r4, #0]
 800aebc:	782a      	ldrb	r2, [r5, #0]
 800aebe:	1998      	adds	r0, r3, r6
 800aec0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800aec2:	f001 f9dd 	bl	800c280 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800aec6:	782b      	ldrb	r3, [r5, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800aec8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800aeca:	6821      	ldr	r1, [r4, #0]
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800aecc:	18f3      	adds	r3, r6, r3
 800aece:	b29b      	uxth	r3, r3
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800aed0:	54ca      	strb	r2, [r1, r3]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800aed2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800aed4:	6820      	ldr	r0, [r4, #0]
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800aed6:	1c5a      	adds	r2, r3, #1
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800aed8:	b292      	uxth	r2, r2
 800aeda:	0a09      	lsrs	r1, r1, #8
 800aedc:	5481      	strb	r1, [r0, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800aede:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800aee0:	6820      	ldr	r0, [r4, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800aee2:	1c9a      	adds	r2, r3, #2
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800aee4:	b292      	uxth	r2, r2
 800aee6:	0c09      	lsrs	r1, r1, #16
 800aee8:	5481      	strb	r1, [r0, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800aeea:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800aeec:	6820      	ldr	r0, [r4, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800aeee:	1cda      	adds	r2, r3, #3
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800aef0:	b292      	uxth	r2, r2
 800aef2:	0e09      	lsrs	r1, r1, #24
 800aef4:	5481      	strb	r1, [r0, r2]

    macMsg->BufSize = bufItr;

    return LORAMAC_SERIALIZER_SUCCESS;
 800aef6:	2000      	movs	r0, #0
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800aef8:	3304      	adds	r3, #4
    macMsg->BufSize = bufItr;
 800aefa:	7123      	strb	r3, [r4, #4]
}
 800aefc:	bd70      	pop	{r4, r5, r6, pc}

0800aefe <RegionIsActive>:
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
    switch( region )
 800aefe:	3805      	subs	r0, #5
 800af00:	4243      	negs	r3, r0
 800af02:	4158      	adcs	r0, r3
        default:
        {
            return false;
        }
    }
}
 800af04:	b2c0      	uxtb	r0, r0
 800af06:	4770      	bx	lr

0800af08 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 800af08:	b507      	push	{r0, r1, r2, lr}
    PhyParam_t phyParam = { 0 };
    switch( region )
 800af0a:	2805      	cmp	r0, #5
 800af0c:	d105      	bne.n	800af1a <RegionGetPhyParam+0x12>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 800af0e:	0008      	movs	r0, r1
 800af10:	f000 fcb2 	bl	800b878 <RegionEU868GetPhyParam>
 800af14:	9001      	str	r0, [sp, #4]
        default:
        {
            return phyParam;
        }
    }
}
 800af16:	9801      	ldr	r0, [sp, #4]
 800af18:	bd0e      	pop	{r1, r2, r3, pc}
            return phyParam;
 800af1a:	2300      	movs	r3, #0
 800af1c:	9301      	str	r3, [sp, #4]
 800af1e:	e7fa      	b.n	800af16 <RegionGetPhyParam+0xe>

0800af20 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 800af20:	b510      	push	{r4, lr}
    switch( region )
 800af22:	2805      	cmp	r0, #5
 800af24:	d102      	bne.n	800af2c <RegionSetBandTxDone+0xc>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 800af26:	0008      	movs	r0, r1
 800af28:	f000 fd40 	bl	800b9ac <RegionEU868SetBandTxDone>
        default:
        {
            return;
        }
    }
}
 800af2c:	bd10      	pop	{r4, pc}

0800af2e <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 800af2e:	b510      	push	{r4, lr}
    switch( region )
 800af30:	2805      	cmp	r0, #5
 800af32:	d102      	bne.n	800af3a <RegionInitDefaults+0xc>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 800af34:	0008      	movs	r0, r1
 800af36:	f000 fd51 	bl	800b9dc <RegionEU868InitDefaults>
        default:
        {
            break;
        }
    }
}
 800af3a:	bd10      	pop	{r4, pc}

0800af3c <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800af3c:	b510      	push	{r4, lr}
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 800af3e:	2300      	movs	r3, #0
{
 800af40:	0004      	movs	r4, r0
 800af42:	0008      	movs	r0, r1
 800af44:	0011      	movs	r1, r2
    switch( region )
 800af46:	2c05      	cmp	r4, #5
 800af48:	d102      	bne.n	800af50 <RegionVerify+0x14>
        EU868_VERIFY( );
 800af4a:	f000 fda5 	bl	800ba98 <RegionEU868Verify>
 800af4e:	0003      	movs	r3, r0
        }
    }
}
 800af50:	0018      	movs	r0, r3
 800af52:	bd10      	pop	{r4, pc}

0800af54 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 800af54:	b510      	push	{r4, lr}
    switch( region )
 800af56:	2805      	cmp	r0, #5
 800af58:	d102      	bne.n	800af60 <RegionApplyCFList+0xc>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 800af5a:	0008      	movs	r0, r1
 800af5c:	f001 f8e8 	bl	800c130 <RegionEU868ApplyCFList>
        default:
        {
            break;
        }
    }
}
 800af60:	bd10      	pop	{r4, pc}

0800af62 <RegionChanMaskSet>:
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 800af62:	2300      	movs	r3, #0
{
 800af64:	b510      	push	{r4, lr}
    switch( region )
 800af66:	2805      	cmp	r0, #5
 800af68:	d103      	bne.n	800af72 <RegionChanMaskSet+0x10>
        EU868_CHAN_MASK_SET( );
 800af6a:	0008      	movs	r0, r1
 800af6c:	f000 fdbe 	bl	800baec <RegionEU868ChanMaskSet>
 800af70:	0003      	movs	r3, r0
        }
    }
}
 800af72:	0018      	movs	r0, r3
 800af74:	bd10      	pop	{r4, pc}

0800af76 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800af76:	b510      	push	{r4, lr}
 800af78:	0004      	movs	r4, r0
 800af7a:	0008      	movs	r0, r1
 800af7c:	0011      	movs	r1, r2
 800af7e:	001a      	movs	r2, r3
    switch( region )
 800af80:	2c05      	cmp	r4, #5
 800af82:	d102      	bne.n	800af8a <RegionComputeRxWindowParameters+0x14>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 800af84:	9b02      	ldr	r3, [sp, #8]
 800af86:	f000 fdcd 	bl	800bb24 <RegionEU868ComputeRxWindowParameters>
        default:
        {
            break;
        }
    }
}
 800af8a:	bd10      	pop	{r4, pc}

0800af8c <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800af8c:	b510      	push	{r4, lr}
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 800af8e:	2300      	movs	r3, #0
{
 800af90:	0004      	movs	r4, r0
 800af92:	0008      	movs	r0, r1
 800af94:	0011      	movs	r1, r2
    switch( region )
 800af96:	2c05      	cmp	r4, #5
 800af98:	d102      	bne.n	800afa0 <RegionRxConfig+0x14>
        EU868_RX_CONFIG( );
 800af9a:	f000 fdf9 	bl	800bb90 <RegionEU868RxConfig>
 800af9e:	0003      	movs	r3, r0
        }
    }
}
 800afa0:	0018      	movs	r0, r3
 800afa2:	bd10      	pop	{r4, pc}

0800afa4 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800afa4:	b570      	push	{r4, r5, r6, lr}
 800afa6:	0005      	movs	r5, r0
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 800afa8:	2400      	movs	r4, #0
{
 800afaa:	0008      	movs	r0, r1
 800afac:	0011      	movs	r1, r2
 800afae:	001a      	movs	r2, r3
    switch( region )
 800afb0:	2d05      	cmp	r5, #5
 800afb2:	d102      	bne.n	800afba <RegionTxConfig+0x16>
        EU868_TX_CONFIG( );
 800afb4:	f000 fe64 	bl	800bc80 <RegionEU868TxConfig>
 800afb8:	0004      	movs	r4, r0
        }
    }
}
 800afba:	0020      	movs	r0, r4
 800afbc:	bd70      	pop	{r4, r5, r6, pc}

0800afbe <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800afbe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800afc0:	0005      	movs	r5, r0
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 800afc2:	2400      	movs	r4, #0
{
 800afc4:	0008      	movs	r0, r1
 800afc6:	0011      	movs	r1, r2
 800afc8:	001a      	movs	r2, r3
    switch( region )
 800afca:	2d05      	cmp	r5, #5
 800afcc:	d105      	bne.n	800afda <RegionLinkAdrReq+0x1c>
        EU868_LINK_ADR_REQ( );
 800afce:	9b07      	ldr	r3, [sp, #28]
 800afd0:	9300      	str	r3, [sp, #0]
 800afd2:	9b06      	ldr	r3, [sp, #24]
 800afd4:	f000 fed8 	bl	800bd88 <RegionEU868LinkAdrReq>
 800afd8:	0004      	movs	r4, r0
        }
    }
}
 800afda:	0020      	movs	r0, r4
 800afdc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800afde <RegionRxParamSetupReq>:
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 800afde:	2300      	movs	r3, #0
{
 800afe0:	b510      	push	{r4, lr}
    switch( region )
 800afe2:	2805      	cmp	r0, #5
 800afe4:	d103      	bne.n	800afee <RegionRxParamSetupReq+0x10>
        EU868_RX_PARAM_SETUP_REQ( );
 800afe6:	0008      	movs	r0, r1
 800afe8:	f000 ff70 	bl	800becc <RegionEU868RxParamSetupReq>
 800afec:	0003      	movs	r3, r0
        }
    }
}
 800afee:	0018      	movs	r0, r3
 800aff0:	bd10      	pop	{r4, pc}

0800aff2 <RegionNewChannelReq>:
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 800aff2:	2300      	movs	r3, #0
{
 800aff4:	b510      	push	{r4, lr}
    switch( region )
 800aff6:	2805      	cmp	r0, #5
 800aff8:	d103      	bne.n	800b002 <RegionNewChannelReq+0x10>
        EU868_NEW_CHANNEL_REQ( );
 800affa:	0008      	movs	r0, r1
 800affc:	f001 f8d2 	bl	800c1a4 <RegionEU868NewChannelReq>
 800b000:	0003      	movs	r3, r0
        }
    }
}
 800b002:	0018      	movs	r0, r3
 800b004:	bd10      	pop	{r4, pc}

0800b006 <RegionTxParamSetupReq>:
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 800b006:	2300      	movs	r3, #0
{
 800b008:	b510      	push	{r4, lr}
    switch( region )
 800b00a:	2805      	cmp	r0, #5
 800b00c:	d103      	bne.n	800b016 <RegionTxParamSetupReq+0x10>
        EU868_TX_PARAM_SETUP_REQ( );
 800b00e:	0008      	movs	r0, r1
 800b010:	f000 ff7f 	bl	800bf12 <RegionEU868TxParamSetupReq>
 800b014:	0003      	movs	r3, r0
        }
    }
}
 800b016:	0018      	movs	r0, r3
 800b018:	bd10      	pop	{r4, pc}

0800b01a <RegionDlChannelReq>:
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 800b01a:	2300      	movs	r3, #0
{
 800b01c:	b510      	push	{r4, lr}
    switch( region )
 800b01e:	2805      	cmp	r0, #5
 800b020:	d103      	bne.n	800b02a <RegionDlChannelReq+0x10>
        EU868_DL_CHANNEL_REQ( );
 800b022:	0008      	movs	r0, r1
 800b024:	f000 ff78 	bl	800bf18 <RegionEU868DlChannelReq>
 800b028:	0003      	movs	r3, r0
        }
    }
}
 800b02a:	0018      	movs	r0, r3
 800b02c:	bd10      	pop	{r4, pc}

0800b02e <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 800b02e:	b510      	push	{r4, lr}
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 800b030:	2300      	movs	r3, #0
{
 800b032:	0004      	movs	r4, r0
 800b034:	0008      	movs	r0, r1
 800b036:	0011      	movs	r1, r2
    switch( region )
 800b038:	2c05      	cmp	r4, #5
 800b03a:	d102      	bne.n	800b042 <RegionAlternateDr+0x14>
        EU868_ALTERNATE_DR( );
 800b03c:	f000 ff90 	bl	800bf60 <RegionEU868AlternateDr>
 800b040:	0003      	movs	r3, r0
        }
    }
}
 800b042:	0018      	movs	r0, r3
 800b044:	bd10      	pop	{r4, pc}

0800b046 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800b046:	b570      	push	{r4, r5, r6, lr}
 800b048:	0005      	movs	r5, r0
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800b04a:	2409      	movs	r4, #9
{
 800b04c:	0008      	movs	r0, r1
 800b04e:	0011      	movs	r1, r2
 800b050:	001a      	movs	r2, r3
    switch( region )
 800b052:	2d05      	cmp	r5, #5
 800b054:	d103      	bne.n	800b05e <RegionNextChannel+0x18>
        EU868_NEXT_CHANNEL( );
 800b056:	9b04      	ldr	r3, [sp, #16]
 800b058:	f000 ff84 	bl	800bf64 <RegionEU868NextChannel>
 800b05c:	0004      	movs	r4, r0
        }
    }
}
 800b05e:	0020      	movs	r0, r4
 800b060:	bd70      	pop	{r4, r5, r6, pc}

0800b062 <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 800b062:	b510      	push	{r4, lr}
    switch( region )
 800b064:	2805      	cmp	r0, #5
 800b066:	d102      	bne.n	800b06e <RegionSetContinuousWave+0xc>
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
 800b068:	0008      	movs	r0, r1
 800b06a:	f001 f8b9 	bl	800c1e0 <RegionEU868SetContinuousWave>
        default:
        {
            break;
        }
    }
}
 800b06e:	bd10      	pop	{r4, pc}

0800b070 <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800b070:	b570      	push	{r4, r5, r6, lr}
 800b072:	0005      	movs	r5, r0
 800b074:	0008      	movs	r0, r1
 800b076:	0011      	movs	r1, r2
 800b078:	001a      	movs	r2, r3
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 800b07a:	b2cc      	uxtb	r4, r1
    switch( region )
 800b07c:	2d05      	cmp	r5, #5
 800b07e:	d102      	bne.n	800b086 <RegionApplyDrOffset+0x16>
        EU868_APPLY_DR_OFFSET( );
 800b080:	f001 f8d4 	bl	800c22c <RegionEU868ApplyDrOffset>
 800b084:	0004      	movs	r4, r0
        }
    }
}
 800b086:	0020      	movs	r0, r4
 800b088:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b08c <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
 800b08c:	4800      	ldr	r0, [pc, #0]	; (800b090 <RegionGetVersion+0x4>)
 800b08e:	4770      	bx	lr
 800b090:	01000300 	.word	0x01000300

0800b094 <RegionCommonChanVerifyDr>:
    }
    return nbActiveBits;
}

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 800b094:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b096:	9101      	str	r1, [sp, #4]
 800b098:	a908      	add	r1, sp, #32
 800b09a:	7809      	ldrb	r1, [r1, #0]
 800b09c:	9000      	str	r0, [sp, #0]
 800b09e:	b249      	sxtb	r1, r1
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
    {
        return false;
 800b0a0:	2000      	movs	r0, #0
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 800b0a2:	429a      	cmp	r2, r3
 800b0a4:	db29      	blt.n	800b0fa <RegionCommonChanVerifyDr+0x66>
 800b0a6:	428a      	cmp	r2, r1
 800b0a8:	dc27      	bgt.n	800b0fa <RegionCommonChanVerifyDr+0x66>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800b0aa:	2701      	movs	r7, #1
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800b0ac:	260f      	movs	r6, #15
 800b0ae:	e01e      	b.n	800b0ee <RegionCommonChanVerifyDr+0x5a>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800b0b0:	9c01      	ldr	r4, [sp, #4]
 800b0b2:	0041      	lsls	r1, r0, #1
 800b0b4:	5b09      	ldrh	r1, [r1, r4]
 800b0b6:	2500      	movs	r5, #0
 800b0b8:	468c      	mov	ip, r1
 800b0ba:	210c      	movs	r1, #12
 800b0bc:	434b      	muls	r3, r1
 800b0be:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b0c0:	18cb      	adds	r3, r1, r3
 800b0c2:	4661      	mov	r1, ip
 800b0c4:	4129      	asrs	r1, r5
 800b0c6:	4239      	tst	r1, r7
 800b0c8:	d00b      	beq.n	800b0e2 <RegionCommonChanVerifyDr+0x4e>
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 800b0ca:	2408      	movs	r4, #8
 800b0cc:	7a19      	ldrb	r1, [r3, #8]
 800b0ce:	571c      	ldrsb	r4, [r3, r4]
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800b0d0:	0709      	lsls	r1, r1, #28
 800b0d2:	1709      	asrs	r1, r1, #28
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 800b0d4:	1124      	asrs	r4, r4, #4
    if( ( value >= min ) && ( value <= max ) )
 800b0d6:	4031      	ands	r1, r6
 800b0d8:	428a      	cmp	r2, r1
 800b0da:	db02      	blt.n	800b0e2 <RegionCommonChanVerifyDr+0x4e>
 800b0dc:	4034      	ands	r4, r6
 800b0de:	42a2      	cmp	r2, r4
 800b0e0:	dd0c      	ble.n	800b0fc <RegionCommonChanVerifyDr+0x68>
        for( uint8_t j = 0; j < 16; j++ )
 800b0e2:	3501      	adds	r5, #1
 800b0e4:	330c      	adds	r3, #12
 800b0e6:	2d10      	cmp	r5, #16
 800b0e8:	d1eb      	bne.n	800b0c2 <RegionCommonChanVerifyDr+0x2e>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800b0ea:	3001      	adds	r0, #1
 800b0ec:	b2c0      	uxtb	r0, r0
 800b0ee:	0103      	lsls	r3, r0, #4
 800b0f0:	9900      	ldr	r1, [sp, #0]
 800b0f2:	b2db      	uxtb	r3, r3
 800b0f4:	4299      	cmp	r1, r3
 800b0f6:	d8db      	bhi.n	800b0b0 <RegionCommonChanVerifyDr+0x1c>
        return false;
 800b0f8:	2000      	movs	r0, #0
}
 800b0fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
                    return true;
 800b0fc:	2001      	movs	r0, #1
 800b0fe:	e7fc      	b.n	800b0fa <RegionCommonChanVerifyDr+0x66>

0800b100 <RegionCommonValueInRange>:
{
 800b100:	0003      	movs	r3, r0
    {
        return 1;
    }
    return 0;
 800b102:	2000      	movs	r0, #0
    if( ( value >= min ) && ( value <= max ) )
 800b104:	428b      	cmp	r3, r1
 800b106:	db04      	blt.n	800b112 <RegionCommonValueInRange+0x12>
 800b108:	0fd8      	lsrs	r0, r3, #31
 800b10a:	17d1      	asrs	r1, r2, #31
 800b10c:	429a      	cmp	r2, r3
 800b10e:	4148      	adcs	r0, r1
        return 1;
 800b110:	b2c0      	uxtb	r0, r0
}
 800b112:	4770      	bx	lr

0800b114 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 800b114:	b530      	push	{r4, r5, lr}
    uint8_t index = id / 16;
 800b116:	090b      	lsrs	r3, r1, #4
{
 800b118:	0004      	movs	r4, r0

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800b11a:	0915      	lsrs	r5, r2, #4
    {
        return false;
 800b11c:	2000      	movs	r0, #0
    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800b11e:	429d      	cmp	r5, r3
 800b120:	d30b      	bcc.n	800b13a <RegionCommonChanDisable+0x26>
 800b122:	4291      	cmp	r1, r2
 800b124:	d209      	bcs.n	800b13a <RegionCommonChanDisable+0x26>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 800b126:	220f      	movs	r2, #15
 800b128:	3001      	adds	r0, #1
 800b12a:	4011      	ands	r1, r2
 800b12c:	0002      	movs	r2, r0
 800b12e:	408a      	lsls	r2, r1
 800b130:	0011      	movs	r1, r2
 800b132:	005b      	lsls	r3, r3, #1
 800b134:	5ae2      	ldrh	r2, [r4, r3]
 800b136:	438a      	bics	r2, r1
 800b138:	52e2      	strh	r2, [r4, r3]

    return true;
}
 800b13a:	bd30      	pop	{r4, r5, pc}

0800b13c <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 800b13c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b13e:	1e03      	subs	r3, r0, #0
 800b140:	9201      	str	r2, [sp, #4]
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 800b142:	d005      	beq.n	800b150 <RegionCommonCountChannels+0x14>
 800b144:	0048      	lsls	r0, r1, #1
 800b146:	181b      	adds	r3, r3, r0
    uint8_t nbChannels = 0;
 800b148:	2000      	movs	r0, #0
    {
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800b14a:	9a01      	ldr	r2, [sp, #4]
 800b14c:	4291      	cmp	r1, r2
 800b14e:	d300      	bcc.n	800b152 <RegionCommonCountChannels+0x16>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
    }

    return nbChannels;
}
 800b150:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        nbChannels += CountChannels( channelsMask[i], 16 );
 800b152:	2400      	movs	r4, #0
    uint8_t nbActiveBits = 0;
 800b154:	0022      	movs	r2, r4
        nbChannels += CountChannels( channelsMask[i], 16 );
 800b156:	881f      	ldrh	r7, [r3, #0]
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 800b158:	2501      	movs	r5, #1
 800b15a:	40a5      	lsls	r5, r4
 800b15c:	002e      	movs	r6, r5
 800b15e:	403e      	ands	r6, r7
 800b160:	42b5      	cmp	r5, r6
 800b162:	d101      	bne.n	800b168 <RegionCommonCountChannels+0x2c>
            nbActiveBits++;
 800b164:	3201      	adds	r2, #1
 800b166:	b2d2      	uxtb	r2, r2
    for( uint8_t j = 0; j < nbBits; j++ )
 800b168:	3401      	adds	r4, #1
 800b16a:	2c10      	cmp	r4, #16
 800b16c:	d1f4      	bne.n	800b158 <RegionCommonCountChannels+0x1c>
        nbChannels += CountChannels( channelsMask[i], 16 );
 800b16e:	1880      	adds	r0, r0, r2
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800b170:	3101      	adds	r1, #1
        nbChannels += CountChannels( channelsMask[i], 16 );
 800b172:	b2c0      	uxtb	r0, r0
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800b174:	b2c9      	uxtb	r1, r1
 800b176:	3302      	adds	r3, #2
 800b178:	e7e7      	b.n	800b14a <RegionCommonCountChannels+0xe>

0800b17a <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 800b17a:	b510      	push	{r4, lr}
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 800b17c:	2800      	cmp	r0, #0
 800b17e:	d005      	beq.n	800b18c <RegionCommonChanMaskCopy+0x12>
 800b180:	2900      	cmp	r1, #0
 800b182:	d003      	beq.n	800b18c <RegionCommonChanMaskCopy+0x12>
 800b184:	2300      	movs	r3, #0
 800b186:	0052      	lsls	r2, r2, #1
    {
        for( uint8_t i = 0; i < len; i++ )
 800b188:	4293      	cmp	r3, r2
 800b18a:	d100      	bne.n	800b18e <RegionCommonChanMaskCopy+0x14>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
        }
    }
}
 800b18c:	bd10      	pop	{r4, pc}
            channelsMaskDest[i] = channelsMaskSrc[i];
 800b18e:	5acc      	ldrh	r4, [r1, r3]
 800b190:	52c4      	strh	r4, [r0, r3]
        for( uint8_t i = 0; i < len; i++ )
 800b192:	3302      	adds	r3, #2
 800b194:	e7f8      	b.n	800b188 <RegionCommonChanMaskCopy+0xe>
	...

0800b198 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800b198:	b082      	sub	sp, #8
 800b19a:	b570      	push	{r4, r5, r6, lr}
 800b19c:	8805      	ldrh	r5, [r0, #0]
 800b19e:	9305      	str	r3, [sp, #20]
    if( joined == false )
 800b1a0:	2a00      	cmp	r2, #0
 800b1a2:	d111      	bne.n	800b1c8 <RegionCommonSetBandTxDone+0x30>
        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800b1a4:	26e1      	movs	r6, #225	; 0xe1
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 800b1a6:	2464      	movs	r4, #100	; 0x64
        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800b1a8:	0136      	lsls	r6, r6, #4
 800b1aa:	42b3      	cmp	r3, r6
 800b1ac:	d307      	bcc.n	800b1be <RegionCommonSetBandTxDone+0x26>
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 800b1ae:	4c0e      	ldr	r4, [pc, #56]	; (800b1e8 <RegionCommonSetBandTxDone+0x50>)
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 800b1b0:	429c      	cmp	r4, r3
 800b1b2:	4152      	adcs	r2, r2
 800b1b4:	4254      	negs	r4, r2
 800b1b6:	4a0d      	ldr	r2, [pc, #52]	; (800b1ec <RegionCommonSetBandTxDone+0x54>)
 800b1b8:	4b0d      	ldr	r3, [pc, #52]	; (800b1f0 <RegionCommonSetBandTxDone+0x58>)
 800b1ba:	4014      	ands	r4, r2
 800b1bc:	18e4      	adds	r4, r4, r3
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800b1be:	1c2b      	adds	r3, r5, #0
 800b1c0:	42a5      	cmp	r5, r4
 800b1c2:	d200      	bcs.n	800b1c6 <RegionCommonSetBandTxDone+0x2e>
 800b1c4:	1c23      	adds	r3, r4, #0
 800b1c6:	b29d      	uxth	r5, r3
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 800b1c8:	68c2      	ldr	r2, [r0, #12]
 800b1ca:	1c2b      	adds	r3, r5, #0
 800b1cc:	2d00      	cmp	r5, #0
 800b1ce:	d100      	bne.n	800b1d2 <RegionCommonSetBandTxDone+0x3a>
 800b1d0:	2301      	movs	r3, #1
 800b1d2:	b29b      	uxth	r3, r3
 800b1d4:	4359      	muls	r1, r3
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
    }
    else
    {
        band->TimeCredits = 0;
 800b1d6:	2300      	movs	r3, #0
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 800b1d8:	428a      	cmp	r2, r1
 800b1da:	d900      	bls.n	800b1de <RegionCommonSetBandTxDone+0x46>
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 800b1dc:	1a53      	subs	r3, r2, r1
 800b1de:	60c3      	str	r3, [r0, #12]
    }
}
 800b1e0:	bc70      	pop	{r4, r5, r6}
 800b1e2:	bc08      	pop	{r3}
 800b1e4:	b002      	add	sp, #8
 800b1e6:	4718      	bx	r3
 800b1e8:	00009aaf 	.word	0x00009aaf
 800b1ec:	ffffdcd8 	.word	0xffffdcd8
 800b1f0:	00002710 	.word	0x00002710

0800b1f4 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 800b1f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1f6:	b093      	sub	sp, #76	; 0x4c
 800b1f8:	9305      	str	r3, [sp, #20]
 800b1fa:	ab18      	add	r3, sp, #96	; 0x60
 800b1fc:	781b      	ldrb	r3, [r3, #0]
 800b1fe:	0015      	movs	r5, r2
 800b200:	000c      	movs	r4, r1
 800b202:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800b204:	930b      	str	r3, [sp, #44]	; 0x2c
 800b206:	9002      	str	r0, [sp, #8]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800b208:	f002 fe98 	bl	800df3c <UTIL_TIMER_GetCurrentTime>
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 800b20c:	4b70      	ldr	r3, [pc, #448]	; (800b3d0 <RegionCommonUpdateBandTimeOff+0x1dc>)
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800b20e:	9008      	str	r0, [sp, #32]
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 800b210:	4970      	ldr	r1, [pc, #448]	; (800b3d4 <RegionCommonUpdateBandTimeOff+0x1e0>)
 800b212:	18f0      	adds	r0, r6, r3
 800b214:	f7f4 ffa8 	bl	8000168 <__udivsi3>
 800b218:	2218      	movs	r2, #24
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 800b21a:	4b6e      	ldr	r3, [pc, #440]	; (800b3d4 <RegionCommonUpdateBandTimeOff+0x1e0>)
 800b21c:	4355      	muls	r5, r2
 800b21e:	4358      	muls	r0, r3
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800b220:	4b6d      	ldr	r3, [pc, #436]	; (800b3d8 <RegionCommonUpdateBandTimeOff+0x1e4>)
 800b222:	18c3      	adds	r3, r0, r3
 800b224:	9306      	str	r3, [sp, #24]
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 800b226:	4b6b      	ldr	r3, [pc, #428]	; (800b3d4 <RegionCommonUpdateBandTimeOff+0x1e0>)
 800b228:	18c3      	adds	r3, r0, r3
 800b22a:	9307      	str	r3, [sp, #28]
 800b22c:	1963      	adds	r3, r4, r5
 800b22e:	930a      	str	r3, [sp, #40]	; 0x28
    uint8_t validBands = 0;
 800b230:	2300      	movs	r3, #0
 800b232:	9303      	str	r3, [sp, #12]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 800b234:	3b01      	subs	r3, #1
 800b236:	9304      	str	r3, [sp, #16]
    for( uint8_t i = 0; i < nbBands; i++ )
 800b238:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b23a:	42a3      	cmp	r3, r4
 800b23c:	d107      	bne.n	800b24e <RegionCommonUpdateBandTimeOff+0x5a>
            }
        }
    }


    if( validBands == 0 )
 800b23e:	9b03      	ldr	r3, [sp, #12]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d101      	bne.n	800b248 <RegionCommonUpdateBandTimeOff+0x54>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 800b244:	3b01      	subs	r3, #1
 800b246:	9304      	str	r3, [sp, #16]
    }
    return minTimeToWait;
}
 800b248:	9804      	ldr	r0, [sp, #16]
 800b24a:	b013      	add	sp, #76	; 0x4c
 800b24c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 800b24e:	9619      	str	r6, [sp, #100]	; 0x64
 800b250:	ab19      	add	r3, sp, #100	; 0x64
 800b252:	2204      	movs	r2, #4
 800b254:	5e9a      	ldrsh	r2, [r3, r2]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 800b256:	ab0c      	add	r3, sp, #48	; 0x30
 800b258:	809a      	strh	r2, [r3, #4]
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 800b25a:	0030      	movs	r0, r6
 800b25c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b25e:	960c      	str	r6, [sp, #48]	; 0x30
 800b260:	f002 fdf2 	bl	800de48 <SysTimeToMs>
    if( joined == false )
 800b264:	9b02      	ldr	r3, [sp, #8]
 800b266:	8825      	ldrh	r5, [r4, #0]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d112      	bne.n	800b292 <RegionCommonUpdateBandTimeOff+0x9e>
        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800b26c:	22e1      	movs	r2, #225	; 0xe1
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 800b26e:	3364      	adds	r3, #100	; 0x64
        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800b270:	0112      	lsls	r2, r2, #4
 800b272:	4296      	cmp	r6, r2
 800b274:	d308      	bcc.n	800b288 <RegionCommonUpdateBandTimeOff+0x94>
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 800b276:	4b59      	ldr	r3, [pc, #356]	; (800b3dc <RegionCommonUpdateBandTimeOff+0x1e8>)
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 800b278:	9a02      	ldr	r2, [sp, #8]
 800b27a:	42b3      	cmp	r3, r6
 800b27c:	4152      	adcs	r2, r2
 800b27e:	4253      	negs	r3, r2
 800b280:	4a57      	ldr	r2, [pc, #348]	; (800b3e0 <RegionCommonUpdateBandTimeOff+0x1ec>)
 800b282:	4013      	ands	r3, r2
 800b284:	4a57      	ldr	r2, [pc, #348]	; (800b3e4 <RegionCommonUpdateBandTimeOff+0x1f0>)
 800b286:	189b      	adds	r3, r3, r2
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800b288:	1c2a      	adds	r2, r5, #0
 800b28a:	429d      	cmp	r5, r3
 800b28c:	d200      	bcs.n	800b290 <RegionCommonUpdateBandTimeOff+0x9c>
 800b28e:	1c1a      	adds	r2, r3, #0
 800b290:	b295      	uxth	r5, r2
    if( dutyCycle == 0 )
 800b292:	1c2b      	adds	r3, r5, #0
 800b294:	2d00      	cmp	r5, #0
 800b296:	d100      	bne.n	800b29a <RegionCommonUpdateBandTimeOff+0xa6>
 800b298:	2301      	movs	r3, #1
 800b29a:	b29b      	uxth	r3, r3
 800b29c:	9309      	str	r3, [sp, #36]	; 0x24
    if( joined == false )
 800b29e:	9b02      	ldr	r3, [sp, #8]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d15b      	bne.n	800b35c <RegionCommonUpdateBandTimeOff+0x168>
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 800b2a4:	2d64      	cmp	r5, #100	; 0x64
 800b2a6:	d150      	bne.n	800b34a <RegionCommonUpdateBandTimeOff+0x156>
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800b2a8:	4f4f      	ldr	r7, [pc, #316]	; (800b3e8 <RegionCommonUpdateBandTimeOff+0x1f4>)
            band->LastMaxCreditAssignTime = elapsedTime;
 800b2aa:	60a0      	str	r0, [r4, #8]
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 800b2ac:	68a1      	ldr	r1, [r4, #8]
 800b2ae:	a810      	add	r0, sp, #64	; 0x40
 800b2b0:	f002 fdec 	bl	800de8c <SysTimeFromMs>
 800b2b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b2b6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b2b8:	9300      	str	r3, [sp, #0]
 800b2ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b2bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b2be:	a80e      	add	r0, sp, #56	; 0x38
 800b2c0:	f002 fd46 	bl	800dd50 <SysTimeSub>
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800b2c4:	9b05      	ldr	r3, [sp, #20]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d102      	bne.n	800b2d0 <RegionCommonUpdateBandTimeOff+0xdc>
 800b2ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d006      	beq.n	800b2de <RegionCommonUpdateBandTimeOff+0xea>
 800b2d0:	6923      	ldr	r3, [r4, #16]
 800b2d2:	42bb      	cmp	r3, r7
 800b2d4:	d103      	bne.n	800b2de <RegionCommonUpdateBandTimeOff+0xea>
            ( band->MaxTimeCredits != maxCredits ) ||
 800b2d6:	4b45      	ldr	r3, [pc, #276]	; (800b3ec <RegionCommonUpdateBandTimeOff+0x1f8>)
 800b2d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b2da:	429a      	cmp	r2, r3
 800b2dc:	d90d      	bls.n	800b2fa <RegionCommonUpdateBandTimeOff+0x106>
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800b2de:	4b44      	ldr	r3, [pc, #272]	; (800b3f0 <RegionCommonUpdateBandTimeOff+0x1fc>)
            band->TimeCredits = maxCredits;
 800b2e0:	60e7      	str	r7, [r4, #12]
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800b2e2:	429e      	cmp	r6, r3
 800b2e4:	d909      	bls.n	800b2fa <RegionCommonUpdateBandTimeOff+0x106>
                timeDiff.SubSeconds = 0;
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	ab0e      	add	r3, sp, #56	; 0x38
 800b2ea:	809a      	strh	r2, [r3, #4]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 800b2ec:	9a06      	ldr	r2, [sp, #24]
 800b2ee:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b2f0:	0010      	movs	r0, r2
 800b2f2:	920e      	str	r2, [sp, #56]	; 0x38
 800b2f4:	f002 fda8 	bl	800de48 <SysTimeToMs>
 800b2f8:	60a0      	str	r0, [r4, #8]
    if( band->LastBandUpdateTime == 0 )
 800b2fa:	6860      	ldr	r0, [r4, #4]
 800b2fc:	2800      	cmp	r0, #0
 800b2fe:	d100      	bne.n	800b302 <RegionCommonUpdateBandTimeOff+0x10e>
        band->TimeCredits = maxCredits;
 800b300:	60e7      	str	r7, [r4, #12]
    if( joined == true )
 800b302:	9b02      	ldr	r3, [sp, #8]
    band->MaxTimeCredits = maxCredits;
 800b304:	6127      	str	r7, [r4, #16]
    if( joined == true )
 800b306:	2b00      	cmp	r3, #0
 800b308:	d004      	beq.n	800b314 <RegionCommonUpdateBandTimeOff+0x120>
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 800b30a:	f002 fe21 	bl	800df50 <UTIL_TIMER_GetElapsedTime>
 800b30e:	68e3      	ldr	r3, [r4, #12]
 800b310:	1818      	adds	r0, r3, r0
 800b312:	60e0      	str	r0, [r4, #12]
    if( band->TimeCredits > band->MaxTimeCredits )
 800b314:	6922      	ldr	r2, [r4, #16]
 800b316:	68e3      	ldr	r3, [r4, #12]
 800b318:	4293      	cmp	r3, r2
 800b31a:	d900      	bls.n	800b31e <RegionCommonUpdateBandTimeOff+0x12a>
        band->TimeCredits = band->MaxTimeCredits;
 800b31c:	60e2      	str	r2, [r4, #12]
    band->LastBandUpdateTime = currentTime;
 800b31e:	9b08      	ldr	r3, [sp, #32]
        creditCosts = expectedTimeOnAir * dutyCycle;
 800b320:	991b      	ldr	r1, [sp, #108]	; 0x6c
    band->LastBandUpdateTime = currentTime;
 800b322:	6063      	str	r3, [r4, #4]
        creditCosts = expectedTimeOnAir * dutyCycle;
 800b324:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b326:	434b      	muls	r3, r1
        if( ( bands[i].TimeCredits > creditCosts ) ||
 800b328:	68e1      	ldr	r1, [r4, #12]
 800b32a:	4299      	cmp	r1, r3
 800b32c:	d805      	bhi.n	800b33a <RegionCommonUpdateBandTimeOff+0x146>
 800b32e:	9805      	ldr	r0, [sp, #20]
 800b330:	2800      	cmp	r0, #0
 800b332:	d11a      	bne.n	800b36a <RegionCommonUpdateBandTimeOff+0x176>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 800b334:	9802      	ldr	r0, [sp, #8]
 800b336:	2800      	cmp	r0, #0
 800b338:	d017      	beq.n	800b36a <RegionCommonUpdateBandTimeOff+0x176>
            bands[i].ReadyForTransmission = true;
 800b33a:	2301      	movs	r3, #1
 800b33c:	7523      	strb	r3, [r4, #20]
            validBands++;
 800b33e:	9b03      	ldr	r3, [sp, #12]
 800b340:	3301      	adds	r3, #1
 800b342:	b2db      	uxtb	r3, r3
 800b344:	9303      	str	r3, [sp, #12]
    for( uint8_t i = 0; i < nbBands; i++ )
 800b346:	3418      	adds	r4, #24
 800b348:	e776      	b.n	800b238 <RegionCommonUpdateBandTimeOff+0x44>
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800b34a:	23fa      	movs	r3, #250	; 0xfa
 800b34c:	009b      	lsls	r3, r3, #2
 800b34e:	429d      	cmp	r5, r3
 800b350:	d102      	bne.n	800b358 <RegionCommonUpdateBandTimeOff+0x164>
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 800b352:	4f28      	ldr	r7, [pc, #160]	; (800b3f4 <RegionCommonUpdateBandTimeOff+0x200>)
            band->LastMaxCreditAssignTime = elapsedTime;
 800b354:	60a0      	str	r0, [r4, #8]
 800b356:	e7a9      	b.n	800b2ac <RegionCommonUpdateBandTimeOff+0xb8>
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 800b358:	4f27      	ldr	r7, [pc, #156]	; (800b3f8 <RegionCommonUpdateBandTimeOff+0x204>)
 800b35a:	e7a7      	b.n	800b2ac <RegionCommonUpdateBandTimeOff+0xb8>
        if( dutyCycleEnabled == false )
 800b35c:	4b22      	ldr	r3, [pc, #136]	; (800b3e8 <RegionCommonUpdateBandTimeOff+0x1f4>)
 800b35e:	9a05      	ldr	r2, [sp, #20]
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800b360:	001f      	movs	r7, r3
        if( dutyCycleEnabled == false )
 800b362:	2a00      	cmp	r2, #0
 800b364:	d1c9      	bne.n	800b2fa <RegionCommonUpdateBandTimeOff+0x106>
            band->TimeCredits = maxCredits;
 800b366:	60e3      	str	r3, [r4, #12]
 800b368:	e7c7      	b.n	800b2fa <RegionCommonUpdateBandTimeOff+0x106>
            bands[i].ReadyForTransmission = false;
 800b36a:	2000      	movs	r0, #0
 800b36c:	7520      	strb	r0, [r4, #20]
            if( bands[i].MaxTimeCredits > creditCosts )
 800b36e:	4293      	cmp	r3, r2
 800b370:	d208      	bcs.n	800b384 <RegionCommonUpdateBandTimeOff+0x190>
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 800b372:	9a04      	ldr	r2, [sp, #16]
 800b374:	1a5b      	subs	r3, r3, r1
 800b376:	429a      	cmp	r2, r3
 800b378:	d900      	bls.n	800b37c <RegionCommonUpdateBandTimeOff+0x188>
 800b37a:	9304      	str	r3, [sp, #16]
                validBands++;
 800b37c:	9b03      	ldr	r3, [sp, #12]
 800b37e:	3301      	adds	r3, #1
 800b380:	b2db      	uxtb	r3, r3
 800b382:	9303      	str	r3, [sp, #12]
            if( joined == false )
 800b384:	9b02      	ldr	r3, [sp, #8]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d1dd      	bne.n	800b346 <RegionCommonUpdateBandTimeOff+0x152>
                SysTime_t backoffTimeRange = {
 800b38a:	9a02      	ldr	r2, [sp, #8]
 800b38c:	ab0e      	add	r3, sp, #56	; 0x38
 800b38e:	809a      	strh	r2, [r3, #4]
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 800b390:	4b11      	ldr	r3, [pc, #68]	; (800b3d8 <RegionCommonUpdateBandTimeOff+0x1e4>)
 800b392:	2d64      	cmp	r5, #100	; 0x64
 800b394:	d019      	beq.n	800b3ca <RegionCommonUpdateBandTimeOff+0x1d6>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800b396:	4a19      	ldr	r2, [pc, #100]	; (800b3fc <RegionCommonUpdateBandTimeOff+0x208>)
 800b398:	18a9      	adds	r1, r5, r2
 800b39a:	424a      	negs	r2, r1
 800b39c:	4151      	adcs	r1, r2
 800b39e:	4d18      	ldr	r5, [pc, #96]	; (800b400 <RegionCommonUpdateBandTimeOff+0x20c>)
 800b3a0:	4249      	negs	r1, r1
 800b3a2:	4029      	ands	r1, r5
 800b3a4:	18c9      	adds	r1, r1, r3
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800b3a6:	429e      	cmp	r6, r3
 800b3a8:	d901      	bls.n	800b3ae <RegionCommonUpdateBandTimeOff+0x1ba>
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 800b3aa:	9b07      	ldr	r3, [sp, #28]
 800b3ac:	18c9      	adds	r1, r1, r3
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 800b3ae:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b3b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b3b2:	9300      	str	r3, [sp, #0]
 800b3b4:	a80e      	add	r0, sp, #56	; 0x38
 800b3b6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b3b8:	910e      	str	r1, [sp, #56]	; 0x38
 800b3ba:	f002 fcc9 	bl	800dd50 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 800b3be:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b3c0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b3c2:	f002 fd41 	bl	800de48 <SysTimeToMs>
 800b3c6:	9004      	str	r0, [sp, #16]
 800b3c8:	e7bd      	b.n	800b346 <RegionCommonUpdateBandTimeOff+0x152>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 800b3ca:	21e1      	movs	r1, #225	; 0xe1
 800b3cc:	0109      	lsls	r1, r1, #4
 800b3ce:	e7ea      	b.n	800b3a6 <RegionCommonUpdateBandTimeOff+0x1b2>
 800b3d0:	fffe13d0 	.word	0xfffe13d0
 800b3d4:	00015180 	.word	0x00015180
 800b3d8:	0001ec30 	.word	0x0001ec30
 800b3dc:	00009aaf 	.word	0x00009aaf
 800b3e0:	ffffdcd8 	.word	0xffffdcd8
 800b3e4:	00002710 	.word	0x00002710
 800b3e8:	001b7740 	.word	0x001b7740
 800b3ec:	0001517f 	.word	0x0001517f
 800b3f0:	0001ec2f 	.word	0x0001ec2f
 800b3f4:	0112a880 	.word	0x0112a880
 800b3f8:	02932e00 	.word	0x02932e00
 800b3fc:	fffffc18 	.word	0xfffffc18
 800b400:	fffeae80 	.word	0xfffeae80

0800b404 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 800b404:	b510      	push	{r4, lr}
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800b406:	7802      	ldrb	r2, [r0, #0]
{
 800b408:	0003      	movs	r3, r0
    uint8_t retIndex = 0;
 800b40a:	2000      	movs	r0, #0
    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800b40c:	2a03      	cmp	r2, #3
 800b40e:	d113      	bne.n	800b438 <RegionCommonParseLinkAdrReq+0x34>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 800b410:	785a      	ldrb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800b412:	300f      	adds	r0, #15
 800b414:	0014      	movs	r4, r2
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800b416:	0912      	lsrs	r2, r2, #4
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800b418:	4004      	ands	r4, r0
 800b41a:	708c      	strb	r4, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800b41c:	704a      	strb	r2, [r1, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 800b41e:	789a      	ldrb	r2, [r3, #2]
 800b420:	808a      	strh	r2, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 800b422:	78dc      	ldrb	r4, [r3, #3]
 800b424:	0224      	lsls	r4, r4, #8
 800b426:	4322      	orrs	r2, r4
 800b428:	808a      	strh	r2, [r1, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 800b42a:	791b      	ldrb	r3, [r3, #4]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800b42c:	065a      	lsls	r2, r3, #25
 800b42e:	0f52      	lsrs	r2, r2, #29
        linkAdrParams->NbRep &= 0x0F;
 800b430:	4003      	ands	r3, r0
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800b432:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 800b434:	700b      	strb	r3, [r1, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 800b436:	380a      	subs	r0, #10
    }
    return retIndex;
}
 800b438:	bd10      	pop	{r4, pc}

0800b43a <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 800b43a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b43c:	b087      	sub	sp, #28
 800b43e:	9305      	str	r3, [sp, #20]
    uint8_t status = verifyParams->Status;
    int8_t datarate = verifyParams->Datarate;
 800b440:	2306      	movs	r3, #6
    int8_t txPower = verifyParams->TxPower;
 800b442:	2707      	movs	r7, #7
{
 800b444:	9103      	str	r1, [sp, #12]
 800b446:	9204      	str	r2, [sp, #16]
    int8_t datarate = verifyParams->Datarate;
 800b448:	56c3      	ldrsb	r3, [r0, r3]
    uint8_t status = verifyParams->Status;
 800b44a:	7905      	ldrb	r5, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 800b44c:	9302      	str	r3, [sp, #8]
    int8_t nbRepetitions = verifyParams->NbRep;

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 800b44e:	7943      	ldrb	r3, [r0, #5]
{
 800b450:	0004      	movs	r4, r0
    int8_t txPower = verifyParams->TxPower;
 800b452:	57c7      	ldrsb	r7, [r0, r7]
    int8_t nbRepetitions = verifyParams->NbRep;
 800b454:	7a06      	ldrb	r6, [r0, #8]
    if( verifyParams->AdrEnabled == false )
 800b456:	2b00      	cmp	r3, #0
 800b458:	d026      	beq.n	800b4a8 <RegionCommonLinkAdrReqVerifyParams+0x6e>
    int8_t nbRepetitions = verifyParams->NbRep;
 800b45a:	b276      	sxtb	r6, r6
        nbRepetitions = verifyParams->CurrentNbRep;
        datarate =  verifyParams->CurrentDatarate;
        txPower =  verifyParams->CurrentTxPower;
    }

    if( status != 0 )
 800b45c:	2d00      	cmp	r5, #0
 800b45e:	d019      	beq.n	800b494 <RegionCommonLinkAdrReqVerifyParams+0x5a>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 800b460:	69a2      	ldr	r2, [r4, #24]
 800b462:	2314      	movs	r3, #20
 800b464:	9201      	str	r2, [sp, #4]
 800b466:	2215      	movs	r2, #21
 800b468:	56a2      	ldrsb	r2, [r4, r2]
 800b46a:	56e3      	ldrsb	r3, [r4, r3]
 800b46c:	9200      	str	r2, [sp, #0]
 800b46e:	7b20      	ldrb	r0, [r4, #12]
 800b470:	9a02      	ldr	r2, [sp, #8]
 800b472:	6921      	ldr	r1, [r4, #16]
 800b474:	f7ff fe0e 	bl	800b094 <RegionCommonChanVerifyDr>
 800b478:	2800      	cmp	r0, #0
 800b47a:	d101      	bne.n	800b480 <RegionCommonLinkAdrReqVerifyParams+0x46>
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
        {
            status &= 0xFD; // Datarate KO
 800b47c:	2302      	movs	r3, #2
 800b47e:	439d      	bics	r5, r3
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 800b480:	231d      	movs	r3, #29
 800b482:	221c      	movs	r2, #28
 800b484:	56e3      	ldrsb	r3, [r4, r3]
 800b486:	56a2      	ldrsb	r2, [r4, r2]
    if( ( value >= min ) && ( value <= max ) )
 800b488:	42bb      	cmp	r3, r7
 800b48a:	dc15      	bgt.n	800b4b8 <RegionCommonLinkAdrReqVerifyParams+0x7e>
 800b48c:	42ba      	cmp	r2, r7
 800b48e:	da14      	bge.n	800b4ba <RegionCommonLinkAdrReqVerifyParams+0x80>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
            }
            else
            {
                status &= 0xFB; // TxPower KO
 800b490:	2304      	movs	r3, #4
 800b492:	439d      	bics	r5, r3
    *dr = datarate;
    *txPow = txPower;
    *nbRep = nbRepetitions;

    return status;
}
 800b494:	0028      	movs	r0, r5
    *dr = datarate;
 800b496:	9b03      	ldr	r3, [sp, #12]
 800b498:	9a02      	ldr	r2, [sp, #8]
 800b49a:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 800b49c:	9b04      	ldr	r3, [sp, #16]
 800b49e:	701f      	strb	r7, [r3, #0]
    *nbRep = nbRepetitions;
 800b4a0:	9b05      	ldr	r3, [sp, #20]
 800b4a2:	701e      	strb	r6, [r3, #0]
}
 800b4a4:	b007      	add	sp, #28
 800b4a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        datarate =  verifyParams->CurrentDatarate;
 800b4a8:	2309      	movs	r3, #9
        nbRepetitions = verifyParams->CurrentNbRep;
 800b4aa:	260b      	movs	r6, #11
        txPower =  verifyParams->CurrentTxPower;
 800b4ac:	270a      	movs	r7, #10
        datarate =  verifyParams->CurrentDatarate;
 800b4ae:	56c3      	ldrsb	r3, [r0, r3]
        nbRepetitions = verifyParams->CurrentNbRep;
 800b4b0:	5786      	ldrsb	r6, [r0, r6]
        datarate =  verifyParams->CurrentDatarate;
 800b4b2:	9302      	str	r3, [sp, #8]
        txPower =  verifyParams->CurrentTxPower;
 800b4b4:	57c7      	ldrsb	r7, [r0, r7]
 800b4b6:	e7d1      	b.n	800b45c <RegionCommonLinkAdrReqVerifyParams+0x22>
 800b4b8:	001f      	movs	r7, r3
    if( status == 0x07 )
 800b4ba:	2d07      	cmp	r5, #7
 800b4bc:	d1ea      	bne.n	800b494 <RegionCommonLinkAdrReqVerifyParams+0x5a>
        if( nbRepetitions == 0 )
 800b4be:	2e00      	cmp	r6, #0
 800b4c0:	d1e8      	bne.n	800b494 <RegionCommonLinkAdrReqVerifyParams+0x5a>
            nbRepetitions = 1;
 800b4c2:	3601      	adds	r6, #1
 800b4c4:	e7e6      	b.n	800b494 <RegionCommonLinkAdrReqVerifyParams+0x5a>
	...

0800b4c8 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 800b4c8:	4b03      	ldr	r3, [pc, #12]	; (800b4d8 <RegionCommonComputeSymbolTimeLoRa+0x10>)
{
 800b4ca:	b510      	push	{r4, lr}
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 800b4cc:	4083      	lsls	r3, r0
 800b4ce:	0018      	movs	r0, r3
 800b4d0:	f7f4 fe4a 	bl	8000168 <__udivsi3>
}
 800b4d4:	bd10      	pop	{r4, pc}
 800b4d6:	46c0      	nop			; (mov r8, r8)
 800b4d8:	000f4240 	.word	0x000f4240

0800b4dc <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 800b4dc:	0001      	movs	r1, r0
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 800b4de:	20fa      	movs	r0, #250	; 0xfa
{
 800b4e0:	b510      	push	{r4, lr}
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 800b4e2:	0140      	lsls	r0, r0, #5
 800b4e4:	f7f4 fe40 	bl	8000168 <__udivsi3>
}
 800b4e8:	bd10      	pop	{r4, pc}
	...

0800b4ec <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 800b4ec:	b570      	push	{r4, r5, r6, lr}
 800b4ee:	001e      	movs	r6, r3
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800b4f0:	23fa      	movs	r3, #250	; 0xfa
{
 800b4f2:	0004      	movs	r4, r0
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800b4f4:	009b      	lsls	r3, r3, #2
 800b4f6:	1f08      	subs	r0, r1, #4
 800b4f8:	4360      	muls	r0, r4
 800b4fa:	4353      	muls	r3, r2
 800b4fc:	18c0      	adds	r0, r0, r3
{
 800b4fe:	000d      	movs	r5, r1
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800b500:	0040      	lsls	r0, r0, #1
 800b502:	d004      	beq.n	800b50e <RegionCommonComputeRxWindowParameters+0x22>
 800b504:	1e62      	subs	r2, r4, #1
 800b506:	0021      	movs	r1, r4
 800b508:	1810      	adds	r0, r2, r0
 800b50a:	f7f4 fe2d 	bl	8000168 <__udivsi3>
 800b50e:	4285      	cmp	r5, r0
 800b510:	d200      	bcs.n	800b514 <RegionCommonComputeRxWindowParameters+0x28>
 800b512:	0005      	movs	r5, r0
 800b514:	9b04      	ldr	r3, [sp, #16]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800b516:	00a0      	lsls	r0, r4, #2
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800b518:	601d      	str	r5, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800b51a:	436c      	muls	r4, r5
 800b51c:	2500      	movs	r5, #0
 800b51e:	42ac      	cmp	r4, r5
 800b520:	d001      	beq.n	800b526 <RegionCommonComputeRxWindowParameters+0x3a>
 800b522:	3401      	adds	r4, #1
 800b524:	0865      	lsrs	r5, r4, #1
 800b526:	21fa      	movs	r1, #250	; 0xfa
 800b528:	0089      	lsls	r1, r1, #2
 800b52a:	434e      	muls	r6, r1
 800b52c:	1b40      	subs	r0, r0, r5
 800b52e:	1b80      	subs	r0, r0, r6
 800b530:	2800      	cmp	r0, #0
 800b532:	dd01      	ble.n	800b538 <RegionCommonComputeRxWindowParameters+0x4c>
 800b534:	4b03      	ldr	r3, [pc, #12]	; (800b544 <RegionCommonComputeRxWindowParameters+0x58>)
 800b536:	18c0      	adds	r0, r0, r3
 800b538:	f7f4 fea0 	bl	800027c <__divsi3>
 800b53c:	9b05      	ldr	r3, [sp, #20]
 800b53e:	6018      	str	r0, [r3, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 800b540:	bd70      	pop	{r4, r5, r6, pc}
 800b542:	46c0      	nop			; (mov r8, r8)
 800b544:	000003e7 	.word	0x000003e7

0800b548 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 800b548:	b570      	push	{r4, r5, r6, lr}
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800b54a:	0040      	lsls	r0, r0, #1
{
 800b54c:	1c14      	adds	r4, r2, #0
 800b54e:	1c0d      	adds	r5, r1, #0
    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800b550:	f7f5 fde6 	bl	8001120 <__aeabi_ui2f>
 800b554:	1c01      	adds	r1, r0, #0
 800b556:	1c28      	adds	r0, r5, #0
 800b558:	f7f5 fc14 	bl	8000d84 <__aeabi_fsub>
 800b55c:	1c21      	adds	r1, r4, #0
 800b55e:	f7f5 fc11 	bl	8000d84 <__aeabi_fsub>
 800b562:	f7f6 fa9d 	bl	8001aa0 <__aeabi_f2d>
 800b566:	f002 ff85 	bl	800e474 <floor>
 800b56a:	f7f6 fa63 	bl	8001a34 <__aeabi_d2iz>

    return phyTxPower;
 800b56e:	b240      	sxtb	r0, r0
}
 800b570:	bd70      	pop	{r4, r5, r6, pc}

0800b572 <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 800b572:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b574:	b087      	sub	sp, #28
 800b576:	9305      	str	r3, [sp, #20]
    uint8_t nbChannelCount = 0;
    uint8_t nbRestrictedChannelsCount = 0;

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800b578:	2300      	movs	r3, #0
    uint8_t nbRestrictedChannelsCount = 0;
 800b57a:	469c      	mov	ip, r3
    uint8_t nbChannelCount = 0;
 800b57c:	001d      	movs	r5, r3
{
 800b57e:	9103      	str	r1, [sp, #12]
 800b580:	9204      	str	r2, [sp, #16]
 800b582:	011a      	lsls	r2, r3, #4
 800b584:	b2d2      	uxtb	r2, r2
 800b586:	9201      	str	r2, [sp, #4]
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800b588:	9901      	ldr	r1, [sp, #4]
 800b58a:	8a02      	ldrh	r2, [r0, #16]
 800b58c:	428a      	cmp	r2, r1
 800b58e:	d806      	bhi.n	800b59e <RegionCommonCountNbOfEnabledChannels+0x2c>
                enabledChannels[nbChannelCount++] = i + j;
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 800b590:	4662      	mov	r2, ip
    *nbEnabledChannels = nbChannelCount;
 800b592:	9b04      	ldr	r3, [sp, #16]
 800b594:	701d      	strb	r5, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 800b596:	9b05      	ldr	r3, [sp, #20]
 800b598:	701a      	strb	r2, [r3, #0]
}
 800b59a:	b007      	add	sp, #28
 800b59c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b59e:	260c      	movs	r6, #12
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 800b5a0:	005a      	lsls	r2, r3, #1
 800b5a2:	9202      	str	r2, [sp, #8]
 800b5a4:	9a01      	ldr	r2, [sp, #4]
 800b5a6:	4356      	muls	r6, r2
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	9600      	str	r6, [sp, #0]
 800b5ac:	6841      	ldr	r1, [r0, #4]
 800b5ae:	9c02      	ldr	r4, [sp, #8]
 800b5b0:	2701      	movs	r7, #1
 800b5b2:	5b09      	ldrh	r1, [r1, r4]
 800b5b4:	4111      	asrs	r1, r2
 800b5b6:	4239      	tst	r1, r7
 800b5b8:	d028      	beq.n	800b60c <RegionCommonCountNbOfEnabledChannels+0x9a>
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 800b5ba:	6881      	ldr	r1, [r0, #8]
 800b5bc:	9c00      	ldr	r4, [sp, #0]
 800b5be:	190c      	adds	r4, r1, r4
 800b5c0:	6821      	ldr	r1, [r4, #0]
 800b5c2:	2900      	cmp	r1, #0
 800b5c4:	d022      	beq.n	800b60c <RegionCommonCountNbOfEnabledChannels+0x9a>
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800b5c6:	7801      	ldrb	r1, [r0, #0]
 800b5c8:	2900      	cmp	r1, #0
 800b5ca:	d107      	bne.n	800b5dc <RegionCommonCountNbOfEnabledChannels+0x6a>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 800b5cc:	6941      	ldr	r1, [r0, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800b5ce:	2900      	cmp	r1, #0
 800b5d0:	d004      	beq.n	800b5dc <RegionCommonCountNbOfEnabledChannels+0x6a>
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 800b5d2:	9e02      	ldr	r6, [sp, #8]
 800b5d4:	5b89      	ldrh	r1, [r1, r6]
 800b5d6:	4111      	asrs	r1, r2
 800b5d8:	4239      	tst	r1, r7
 800b5da:	d017      	beq.n	800b60c <RegionCommonCountNbOfEnabledChannels+0x9a>
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 800b5dc:	2101      	movs	r1, #1
 800b5de:	5641      	ldrsb	r1, [r0, r1]
 800b5e0:	000e      	movs	r6, r1
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 800b5e2:	7a21      	ldrb	r1, [r4, #8]
 800b5e4:	070f      	lsls	r7, r1, #28
    if( ( value >= min ) && ( value <= max ) )
 800b5e6:	173f      	asrs	r7, r7, #28
 800b5e8:	42be      	cmp	r6, r7
 800b5ea:	db0f      	blt.n	800b60c <RegionCommonCountNbOfEnabledChannels+0x9a>
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 800b5ec:	b249      	sxtb	r1, r1
    if( ( value >= min ) && ( value <= max ) )
 800b5ee:	1109      	asrs	r1, r1, #4
 800b5f0:	428e      	cmp	r6, r1
 800b5f2:	dc0b      	bgt.n	800b60c <RegionCommonCountNbOfEnabledChannels+0x9a>
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 800b5f4:	7a61      	ldrb	r1, [r4, #9]
 800b5f6:	2418      	movs	r4, #24
 800b5f8:	4361      	muls	r1, r4
 800b5fa:	68c4      	ldr	r4, [r0, #12]
 800b5fc:	1861      	adds	r1, r4, r1
 800b5fe:	7d09      	ldrb	r1, [r1, #20]
 800b600:	2900      	cmp	r1, #0
 800b602:	d10c      	bne.n	800b61e <RegionCommonCountNbOfEnabledChannels+0xac>
                    nbRestrictedChannelsCount++;
 800b604:	4661      	mov	r1, ip
 800b606:	3101      	adds	r1, #1
 800b608:	b2c9      	uxtb	r1, r1
 800b60a:	468c      	mov	ip, r1
        for( uint8_t j = 0; j < 16; j++ )
 800b60c:	9900      	ldr	r1, [sp, #0]
 800b60e:	3201      	adds	r2, #1
 800b610:	310c      	adds	r1, #12
 800b612:	9100      	str	r1, [sp, #0]
 800b614:	2a10      	cmp	r2, #16
 800b616:	d1c9      	bne.n	800b5ac <RegionCommonCountNbOfEnabledChannels+0x3a>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800b618:	3301      	adds	r3, #1
 800b61a:	b2db      	uxtb	r3, r3
 800b61c:	e7b1      	b.n	800b582 <RegionCommonCountNbOfEnabledChannels+0x10>
                enabledChannels[nbChannelCount++] = i + j;
 800b61e:	9c01      	ldr	r4, [sp, #4]
 800b620:	9e03      	ldr	r6, [sp, #12]
 800b622:	1c69      	adds	r1, r5, #1
 800b624:	18a4      	adds	r4, r4, r2
 800b626:	5574      	strb	r4, [r6, r5]
 800b628:	b2cd      	uxtb	r5, r1
 800b62a:	e7ef      	b.n	800b60c <RegionCommonCountNbOfEnabledChannels+0x9a>

0800b62c <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 800b62c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b62e:	0004      	movs	r4, r0
 800b630:	b087      	sub	sp, #28
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 800b632:	6840      	ldr	r0, [r0, #4]
{
 800b634:	001d      	movs	r5, r3
 800b636:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800b638:	9204      	str	r2, [sp, #16]
 800b63a:	000e      	movs	r6, r1
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 800b63c:	f002 fc88 	bl	800df50 <UTIL_TIMER_GetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 800b640:	6823      	ldr	r3, [r4, #0]
    *nbRestrictedChannels = 1;
 800b642:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 800b644:	1a1b      	subs	r3, r3, r0
 800b646:	603b      	str	r3, [r7, #0]
    *nbRestrictedChannels = 1;
 800b648:	2301      	movs	r3, #1
 800b64a:	7013      	strb	r3, [r2, #0]
    *nbEnabledChannels = 0;
 800b64c:	2300      	movs	r3, #0
 800b64e:	702b      	strb	r3, [r5, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800b650:	6863      	ldr	r3, [r4, #4]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d002      	beq.n	800b65c <RegionCommonIdentifyChannels+0x30>
 800b656:	6823      	ldr	r3, [r4, #0]
 800b658:	4283      	cmp	r3, r0
 800b65a:	d825      	bhi.n	800b6a8 <RegionCommonIdentifyChannels+0x7c>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 800b65c:	2300      	movs	r3, #0
 800b65e:	6033      	str	r3, [r6, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800b660:	7a62      	ldrb	r2, [r4, #9]
 800b662:	69e1      	ldr	r1, [r4, #28]
 800b664:	4694      	mov	ip, r2
 800b666:	780a      	ldrb	r2, [r1, #0]
 800b668:	69a1      	ldr	r1, [r4, #24]
 800b66a:	9205      	str	r2, [sp, #20]
 800b66c:	9103      	str	r1, [sp, #12]
 800b66e:	0021      	movs	r1, r4
 800b670:	ae01      	add	r6, sp, #4
 800b672:	310c      	adds	r1, #12
 800b674:	7a23      	ldrb	r3, [r4, #8]
 800b676:	c905      	ldmia	r1!, {r0, r2}
 800b678:	c605      	stmia	r6!, {r0, r2}
 800b67a:	7d21      	ldrb	r1, [r4, #20]
 800b67c:	4662      	mov	r2, ip
 800b67e:	9100      	str	r1, [sp, #0]
 800b680:	69e1      	ldr	r1, [r4, #28]
 800b682:	9805      	ldr	r0, [sp, #20]
 800b684:	68c9      	ldr	r1, [r1, #12]
 800b686:	f7ff fdb5 	bl	800b1f4 <RegionCommonUpdateBandTimeOff>
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 800b68a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800b68c:	6038      	str	r0, [r7, #0]
        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 800b68e:	002a      	movs	r2, r5
 800b690:	9904      	ldr	r1, [sp, #16]
 800b692:	69e0      	ldr	r0, [r4, #28]
 800b694:	f7ff ff6d 	bl	800b572 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 800b698:	782b      	ldrb	r3, [r5, #0]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d004      	beq.n	800b6a8 <RegionCommonIdentifyChannels+0x7c>
    {
        *nextTxDelay = 0;
 800b69e:	2300      	movs	r3, #0
        return LORAMAC_STATUS_OK;
 800b6a0:	0018      	movs	r0, r3
        *nextTxDelay = 0;
 800b6a2:	603b      	str	r3, [r7, #0]
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 800b6a4:	b007      	add	sp, #28
 800b6a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if( *nbRestrictedChannels > 0 )
 800b6a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b6aa:	7818      	ldrb	r0, [r3, #0]
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 800b6ac:	4243      	negs	r3, r0
 800b6ae:	4158      	adcs	r0, r3
 800b6b0:	300b      	adds	r0, #11
 800b6b2:	e7f7      	b.n	800b6a4 <RegionCommonIdentifyChannels+0x78>

0800b6b4 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 800b6b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    int8_t drLocal = params->CurrentDr;
 800b6b6:	2400      	movs	r4, #0

    if( params->CurrentDr == params->MinDr )
 800b6b8:	2602      	movs	r6, #2
    int8_t drLocal = params->CurrentDr;
 800b6ba:	5704      	ldrsb	r4, [r0, r4]
    if( params->CurrentDr == params->MinDr )
 800b6bc:	5786      	ldrsb	r6, [r0, r6]
{
 800b6be:	0005      	movs	r5, r0
    if( params->CurrentDr == params->MinDr )
 800b6c0:	42a6      	cmp	r6, r4
 800b6c2:	d010      	beq.n	800b6e6 <RegionCommonGetNextLowerTxDr+0x32>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 800b6c4:	3c01      	subs	r4, #1
 800b6c6:	b264      	sxtb	r4, r4
        } while( ( drLocal != params->MinDr ) &&
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 800b6c8:	42a6      	cmp	r6, r4
 800b6ca:	d00c      	beq.n	800b6e6 <RegionCommonGetNextLowerTxDr+0x32>
 800b6cc:	68ab      	ldr	r3, [r5, #8]
 800b6ce:	0022      	movs	r2, r4
 800b6d0:	9301      	str	r3, [sp, #4]
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	56eb      	ldrsb	r3, [r5, r3]
 800b6d6:	78e8      	ldrb	r0, [r5, #3]
 800b6d8:	9300      	str	r3, [sp, #0]
 800b6da:	6869      	ldr	r1, [r5, #4]
 800b6dc:	0033      	movs	r3, r6
 800b6de:	f7ff fcd9 	bl	800b094 <RegionCommonChanVerifyDr>
        } while( ( drLocal != params->MinDr ) &&
 800b6e2:	2800      	cmp	r0, #0
 800b6e4:	d0ee      	beq.n	800b6c4 <RegionCommonGetNextLowerTxDr+0x10>

        return drLocal;
    }
}
 800b6e6:	0020      	movs	r0, r4
 800b6e8:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

0800b6ea <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 800b6ea:	1c0b      	adds	r3, r1, #0
 800b6ec:	4281      	cmp	r1, r0
 800b6ee:	da00      	bge.n	800b6f2 <RegionCommonLimitTxPower+0x8>
 800b6f0:	1c03      	adds	r3, r0, #0
 800b6f2:	b258      	sxtb	r0, r3
}
 800b6f4:	4770      	bx	lr
	...

0800b6f8 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
    switch( bandwidths[drIndex] )
 800b6f8:	0080      	lsls	r0, r0, #2
 800b6fa:	5843      	ldr	r3, [r0, r1]
 800b6fc:	4a04      	ldr	r2, [pc, #16]	; (800b710 <RegionCommonGetBandwidth+0x18>)
 800b6fe:	2001      	movs	r0, #1
 800b700:	4293      	cmp	r3, r2
 800b702:	d004      	beq.n	800b70e <RegionCommonGetBandwidth+0x16>
        case 125000:
            return 0;
        case 250000:
            return 1;
        case 500000:
            return 2;
 800b704:	4a03      	ldr	r2, [pc, #12]	; (800b714 <RegionCommonGetBandwidth+0x1c>)
 800b706:	189b      	adds	r3, r3, r2
 800b708:	425a      	negs	r2, r3
 800b70a:	4153      	adcs	r3, r2
 800b70c:	0058      	lsls	r0, r3, #1
    }
}
 800b70e:	4770      	bx	lr
 800b710:	0003d090 	.word	0x0003d090
 800b714:	fff85ee0 	.word	0xfff85ee0

0800b718 <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 800b718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b71a:	b08b      	sub	sp, #44	; 0x2c
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 800b71c:	ac04      	add	r4, sp, #16
 800b71e:	0025      	movs	r5, r4
{
 800b720:	4694      	mov	ip, r2
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 800b722:	4b0f      	ldr	r3, [pc, #60]	; (800b760 <RegionCommonRxConfigPrint+0x48>)
 800b724:	cbc4      	ldmia	r3!, {r2, r6, r7}
 800b726:	c5c4      	stmia	r5!, {r2, r6, r7}
 800b728:	cbc4      	ldmia	r3!, {r2, r6, r7}
 800b72a:	c5c4      	stmia	r5!, {r2, r6, r7}

    if ( rxSlot < RX_SLOT_NONE )
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", slotStrings[rxSlot], frequency, dr );
 800b72c:	4663      	mov	r3, ip
    if ( rxSlot < RX_SLOT_NONE )
 800b72e:	2805      	cmp	r0, #5
 800b730:	d80c      	bhi.n	800b74c <RegionCommonRxConfigPrint+0x34>
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", slotStrings[rxSlot], frequency, dr );
 800b732:	9101      	str	r1, [sp, #4]
 800b734:	0080      	lsls	r0, r0, #2
 800b736:	9302      	str	r3, [sp, #8]
 800b738:	5903      	ldr	r3, [r0, r4]
 800b73a:	2201      	movs	r2, #1
 800b73c:	9300      	str	r3, [sp, #0]
 800b73e:	2100      	movs	r1, #0
 800b740:	2002      	movs	r0, #2
 800b742:	4b08      	ldr	r3, [pc, #32]	; (800b764 <RegionCommonRxConfigPrint+0x4c>)
 800b744:	f002 f91e 	bl	800d984 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 800b748:	b00b      	add	sp, #44	; 0x2c
 800b74a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 800b74c:	9301      	str	r3, [sp, #4]
 800b74e:	9100      	str	r1, [sp, #0]
 800b750:	2201      	movs	r2, #1
 800b752:	2100      	movs	r1, #0
 800b754:	4b04      	ldr	r3, [pc, #16]	; (800b768 <RegionCommonRxConfigPrint+0x50>)
 800b756:	2002      	movs	r0, #2
 800b758:	f002 f914 	bl	800d984 <UTIL_ADV_TRACE_COND_FSend>
}
 800b75c:	e7f4      	b.n	800b748 <RegionCommonRxConfigPrint+0x30>
 800b75e:	46c0      	nop			; (mov r8, r8)
 800b760:	0800e9ec 	.word	0x0800e9ec
 800b764:	0800f144 	.word	0x0800f144
 800b768:	0800f163 	.word	0x0800f163

0800b76c <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 800b76c:	b507      	push	{r0, r1, r2, lr}
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 800b76e:	4b04      	ldr	r3, [pc, #16]	; (800b780 <RegionCommonTxConfigPrint+0x14>)
 800b770:	9101      	str	r1, [sp, #4]
 800b772:	9000      	str	r0, [sp, #0]
 800b774:	2201      	movs	r2, #1
 800b776:	2100      	movs	r1, #0
 800b778:	2002      	movs	r0, #2
 800b77a:	f002 f903 	bl	800d984 <UTIL_ADV_TRACE_COND_FSend>
}
 800b77e:	bd07      	pop	{r0, r1, r2, pc}
 800b780:	0800f17f 	.word	0x0800f17f

0800b784 <GetTimeOnAir>:
    }
    return true;
}

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800b784:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b786:	000c      	movs	r4, r1
    int8_t phyDr = DataratesEU868[datarate];
 800b788:	4911      	ldr	r1, [pc, #68]	; (800b7d0 <GetTimeOnAir+0x4c>)
{
 800b78a:	b085      	sub	sp, #20
    int8_t phyDr = DataratesEU868[datarate];
 800b78c:	560f      	ldrsb	r7, [r1, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 800b78e:	3108      	adds	r1, #8
{
 800b790:	0005      	movs	r5, r0
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 800b792:	f7ff ffb1 	bl	800b6f8 <RegionCommonGetBandwidth>
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 800b796:	4b0f      	ldr	r3, [pc, #60]	; (800b7d4 <GetTimeOnAir+0x50>)
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 800b798:	0001      	movs	r1, r0
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 800b79a:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 800b79c:	2001      	movs	r0, #1
 800b79e:	b2e4      	uxtb	r4, r4
    if( datarate == DR_7 )
 800b7a0:	2d07      	cmp	r5, #7
 800b7a2:	d10c      	bne.n	800b7be <GetTimeOnAir+0x3a>
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 800b7a4:	2305      	movs	r3, #5
 800b7a6:	9003      	str	r0, [sp, #12]
 800b7a8:	2000      	movs	r0, #0
 800b7aa:	22fa      	movs	r2, #250	; 0xfa
 800b7ac:	9300      	str	r3, [sp, #0]
 800b7ae:	0003      	movs	r3, r0
 800b7b0:	0092      	lsls	r2, r2, #2
 800b7b2:	437a      	muls	r2, r7
 800b7b4:	9402      	str	r4, [sp, #8]
 800b7b6:	9001      	str	r0, [sp, #4]
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800b7b8:	47b0      	blx	r6
    }
    return timeOnAir;
}
 800b7ba:	b005      	add	sp, #20
 800b7bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800b7be:	2300      	movs	r3, #0
 800b7c0:	9301      	str	r3, [sp, #4]
 800b7c2:	3308      	adds	r3, #8
 800b7c4:	9300      	str	r3, [sp, #0]
 800b7c6:	003a      	movs	r2, r7
 800b7c8:	0003      	movs	r3, r0
 800b7ca:	9003      	str	r0, [sp, #12]
 800b7cc:	9402      	str	r4, [sp, #8]
 800b7ce:	e7f3      	b.n	800b7b8 <GetTimeOnAir+0x34>
 800b7d0:	0800ea04 	.word	0x0800ea04
 800b7d4:	0800eb54 	.word	0x0800eb54

0800b7d8 <VerifyRfFreq>:
{
 800b7d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if( Radio.CheckRfFrequency( freq ) == false )
 800b7da:	4b1a      	ldr	r3, [pc, #104]	; (800b844 <VerifyRfFreq+0x6c>)
{
 800b7dc:	0004      	movs	r4, r0
    if( Radio.CheckRfFrequency( freq ) == false )
 800b7de:	6a1b      	ldr	r3, [r3, #32]
{
 800b7e0:	000d      	movs	r5, r1
    if( Radio.CheckRfFrequency( freq ) == false )
 800b7e2:	9301      	str	r3, [sp, #4]
 800b7e4:	4798      	blx	r3
 800b7e6:	2800      	cmp	r0, #0
 800b7e8:	d006      	beq.n	800b7f8 <VerifyRfFreq+0x20>
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 800b7ea:	4b17      	ldr	r3, [pc, #92]	; (800b848 <VerifyRfFreq+0x70>)
 800b7ec:	4a17      	ldr	r2, [pc, #92]	; (800b84c <VerifyRfFreq+0x74>)
 800b7ee:	18e3      	adds	r3, r4, r3
 800b7f0:	4293      	cmp	r3, r2
 800b7f2:	d802      	bhi.n	800b7fa <VerifyRfFreq+0x22>
        *band = 2;
 800b7f4:	2302      	movs	r3, #2
        *band = 3;
 800b7f6:	702b      	strb	r3, [r5, #0]
}
 800b7f8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 800b7fa:	4b15      	ldr	r3, [pc, #84]	; (800b850 <VerifyRfFreq+0x78>)
 800b7fc:	4a15      	ldr	r2, [pc, #84]	; (800b854 <VerifyRfFreq+0x7c>)
 800b7fe:	18e3      	adds	r3, r4, r3
 800b800:	4293      	cmp	r3, r2
 800b802:	d801      	bhi.n	800b808 <VerifyRfFreq+0x30>
        *band = 0;
 800b804:	2300      	movs	r3, #0
 800b806:	e7f6      	b.n	800b7f6 <VerifyRfFreq+0x1e>
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 800b808:	4b13      	ldr	r3, [pc, #76]	; (800b858 <VerifyRfFreq+0x80>)
 800b80a:	4a14      	ldr	r2, [pc, #80]	; (800b85c <VerifyRfFreq+0x84>)
 800b80c:	18e3      	adds	r3, r4, r3
 800b80e:	4293      	cmp	r3, r2
 800b810:	d801      	bhi.n	800b816 <VerifyRfFreq+0x3e>
        *band = 1;
 800b812:	2301      	movs	r3, #1
 800b814:	e7ef      	b.n	800b7f6 <VerifyRfFreq+0x1e>
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 800b816:	4b12      	ldr	r3, [pc, #72]	; (800b860 <VerifyRfFreq+0x88>)
 800b818:	4a12      	ldr	r2, [pc, #72]	; (800b864 <VerifyRfFreq+0x8c>)
 800b81a:	18e3      	adds	r3, r4, r3
 800b81c:	4293      	cmp	r3, r2
 800b81e:	d801      	bhi.n	800b824 <VerifyRfFreq+0x4c>
        *band = 5;
 800b820:	2305      	movs	r3, #5
 800b822:	e7e8      	b.n	800b7f6 <VerifyRfFreq+0x1e>
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 800b824:	4b10      	ldr	r3, [pc, #64]	; (800b868 <VerifyRfFreq+0x90>)
 800b826:	4a11      	ldr	r2, [pc, #68]	; (800b86c <VerifyRfFreq+0x94>)
 800b828:	18e3      	adds	r3, r4, r3
 800b82a:	4293      	cmp	r3, r2
 800b82c:	d801      	bhi.n	800b832 <VerifyRfFreq+0x5a>
        *band = 3;
 800b82e:	2303      	movs	r3, #3
 800b830:	e7e1      	b.n	800b7f6 <VerifyRfFreq+0x1e>
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 800b832:	4b0f      	ldr	r3, [pc, #60]	; (800b870 <VerifyRfFreq+0x98>)
 800b834:	18e4      	adds	r4, r4, r3
 800b836:	4b0f      	ldr	r3, [pc, #60]	; (800b874 <VerifyRfFreq+0x9c>)
 800b838:	429c      	cmp	r4, r3
 800b83a:	d801      	bhi.n	800b840 <VerifyRfFreq+0x68>
        *band = 4;
 800b83c:	2304      	movs	r3, #4
 800b83e:	e7da      	b.n	800b7f6 <VerifyRfFreq+0x1e>
        return false;
 800b840:	2000      	movs	r0, #0
 800b842:	e7d9      	b.n	800b7f8 <VerifyRfFreq+0x20>
 800b844:	0800eb54 	.word	0x0800eb54
 800b848:	cc8faa40 	.word	0xcc8faa40
 800b84c:	001e847f 	.word	0x001e847f
 800b850:	cc7125c0 	.word	0xcc7125c0
 800b854:	002dc6c0 	.word	0x002dc6c0
 800b858:	cc435eff 	.word	0xcc435eff
 800b85c:	000927bf 	.word	0x000927bf
 800b860:	cc38b0a0 	.word	0xcc38b0a0
 800b864:	0007a120 	.word	0x0007a120
 800b868:	cc2e0240 	.word	0xcc2e0240
 800b86c:	0003d090 	.word	0x0003d090
 800b870:	cc296e60 	.word	0xcc296e60
 800b874:	000493e0 	.word	0x000493e0

0800b878 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 800b878:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    PhyParam_t phyParam = { 0 };
 800b87a:	2200      	movs	r2, #0
{
 800b87c:	0003      	movs	r3, r0

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 800b87e:	7800      	ldrb	r0, [r0, #0]
    PhyParam_t phyParam = { 0 };
 800b880:	9200      	str	r2, [sp, #0]
    switch( getPhy->Attribute )
 800b882:	380b      	subs	r0, #11
 800b884:	282e      	cmp	r0, #46	; 0x2e
 800b886:	d867      	bhi.n	800b958 <RegionEU868GetPhyParam+0xe0>
 800b888:	f7f4 fc50 	bl	800012c <__gnu_thumb1_case_uqi>
 800b88c:	352f2d2a 	.word	0x352f2d2a
 800b890:	413e3c3a 	.word	0x413e3c3a
 800b894:	4b484644 	.word	0x4b484644
 800b898:	56665466 	.word	0x56665466
 800b89c:	66605e5a 	.word	0x66605e5a
 800b8a0:	18696366 	.word	0x18696366
 800b8a4:	66666666 	.word	0x66666666
 800b8a8:	66666666 	.word	0x66666666
 800b8ac:	66666666 	.word	0x66666666
 800b8b0:	6f6b5466 	.word	0x6f6b5466
 800b8b4:	6f546666 	.word	0x6f546666
 800b8b8:	7166      	.short	0x7166
 800b8ba:	76          	.byte	0x76
 800b8bb:	00          	.byte	0x00
            phyParam.Value = EU868_DEFAULT_DATARATE;
            break;
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800b8bc:	785b      	ldrb	r3, [r3, #1]
 800b8be:	a801      	add	r0, sp, #4
 800b8c0:	7003      	strb	r3, [r0, #0]
 800b8c2:	2307      	movs	r3, #7
 800b8c4:	7043      	strb	r3, [r0, #1]
 800b8c6:	2380      	movs	r3, #128	; 0x80
 800b8c8:	015b      	lsls	r3, r3, #5
 800b8ca:	8043      	strh	r3, [r0, #2]
            {
                .CurrentDr = getPhy->Datarate,
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800b8cc:	4b2e      	ldr	r3, [pc, #184]	; (800b988 <RegionEU868GetPhyParam+0x110>)
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	001a      	movs	r2, r3
 800b8d2:	32c0      	adds	r2, #192	; 0xc0
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800b8d4:	6042      	str	r2, [r0, #4]
 800b8d6:	6083      	str	r3, [r0, #8]
                .Channels = RegionNvmGroup2->Channels,
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800b8d8:	f7ff feec 	bl	800b6b4 <RegionCommonGetNextLowerTxDr>
            phyParam.Value = DataratesEU868[getPhy->Datarate];
            break;
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 800b8dc:	9000      	str	r0, [sp, #0]
            break;
 800b8de:	e03b      	b.n	800b958 <RegionEU868GetPhyParam+0xe0>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800b8e0:	2340      	movs	r3, #64	; 0x40
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 800b8e2:	9300      	str	r3, [sp, #0]
            break;
 800b8e4:	e038      	b.n	800b958 <RegionEU868GetPhyParam+0xe0>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800b8e6:	2320      	movs	r3, #32
 800b8e8:	e7fb      	b.n	800b8e2 <RegionEU868GetPhyParam+0x6a>
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 800b8ea:	2101      	movs	r1, #1
 800b8ec:	4a27      	ldr	r2, [pc, #156]	; (800b98c <RegionEU868GetPhyParam+0x114>)
 800b8ee:	5659      	ldrsb	r1, [r3, r1]
 800b8f0:	3228      	adds	r2, #40	; 0x28
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 800b8f2:	5c53      	ldrb	r3, [r2, r1]
 800b8f4:	e7f5      	b.n	800b8e2 <RegionEU868GetPhyParam+0x6a>
 800b8f6:	2101      	movs	r1, #1
 800b8f8:	4a24      	ldr	r2, [pc, #144]	; (800b98c <RegionEU868GetPhyParam+0x114>)
 800b8fa:	5659      	ldrsb	r1, [r3, r1]
 800b8fc:	3230      	adds	r2, #48	; 0x30
 800b8fe:	e7f8      	b.n	800b8f2 <RegionEU868GetPhyParam+0x7a>
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 800b900:	2301      	movs	r3, #1
 800b902:	e7ee      	b.n	800b8e2 <RegionEU868GetPhyParam+0x6a>
            phyParam.Value = EU868_MAX_RX_WINDOW;
 800b904:	4b22      	ldr	r3, [pc, #136]	; (800b990 <RegionEU868GetPhyParam+0x118>)
 800b906:	e7ec      	b.n	800b8e2 <RegionEU868GetPhyParam+0x6a>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800b908:	23fa      	movs	r3, #250	; 0xfa
 800b90a:	009b      	lsls	r3, r3, #2
 800b90c:	e7e9      	b.n	800b8e2 <RegionEU868GetPhyParam+0x6a>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800b90e:	23fa      	movs	r3, #250	; 0xfa
 800b910:	00db      	lsls	r3, r3, #3
 800b912:	e7e6      	b.n	800b8e2 <RegionEU868GetPhyParam+0x6a>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800b914:	4b1f      	ldr	r3, [pc, #124]	; (800b994 <RegionEU868GetPhyParam+0x11c>)
 800b916:	e7e4      	b.n	800b8e2 <RegionEU868GetPhyParam+0x6a>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800b918:	4b1f      	ldr	r3, [pc, #124]	; (800b998 <RegionEU868GetPhyParam+0x120>)
 800b91a:	e7e2      	b.n	800b8e2 <RegionEU868GetPhyParam+0x6a>
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 800b91c:	2380      	movs	r3, #128	; 0x80
 800b91e:	01db      	lsls	r3, r3, #7
 800b920:	e7df      	b.n	800b8e2 <RegionEU868GetPhyParam+0x6a>
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 800b922:	21fa      	movs	r1, #250	; 0xfa
 800b924:	481d      	ldr	r0, [pc, #116]	; (800b99c <RegionEU868GetPhyParam+0x124>)
 800b926:	0089      	lsls	r1, r1, #2
 800b928:	f000 fc8e 	bl	800c248 <randr>
 800b92c:	23fa      	movs	r3, #250	; 0xfa
 800b92e:	00db      	lsls	r3, r3, #3
 800b930:	18c0      	adds	r0, r0, r3
 800b932:	e7d3      	b.n	800b8dc <RegionEU868GetPhyParam+0x64>
            phyParam.Value = EU868_RX_WND_2_FREQ;
 800b934:	4b1a      	ldr	r3, [pc, #104]	; (800b9a0 <RegionEU868GetPhyParam+0x128>)
 800b936:	e7d4      	b.n	800b8e2 <RegionEU868GetPhyParam+0x6a>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800b938:	4b13      	ldr	r3, [pc, #76]	; (800b988 <RegionEU868GetPhyParam+0x110>)
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	33c0      	adds	r3, #192	; 0xc0
 800b93e:	e7d0      	b.n	800b8e2 <RegionEU868GetPhyParam+0x6a>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800b940:	4b11      	ldr	r3, [pc, #68]	; (800b988 <RegionEU868GetPhyParam+0x110>)
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	33c2      	adds	r3, #194	; 0xc2
 800b946:	e7cc      	b.n	800b8e2 <RegionEU868GetPhyParam+0x6a>
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 800b948:	2310      	movs	r3, #16
 800b94a:	e7ca      	b.n	800b8e2 <RegionEU868GetPhyParam+0x6a>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800b94c:	4b0e      	ldr	r3, [pc, #56]	; (800b988 <RegionEU868GetPhyParam+0x110>)
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	e7c7      	b.n	800b8e2 <RegionEU868GetPhyParam+0x6a>
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 800b952:	2383      	movs	r3, #131	; 0x83
 800b954:	05db      	lsls	r3, r3, #23
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 800b956:	9300      	str	r3, [sp, #0]
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
}
 800b958:	9800      	ldr	r0, [sp, #0]
 800b95a:	b005      	add	sp, #20
 800b95c:	bd00      	pop	{pc}
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 800b95e:	4b11      	ldr	r3, [pc, #68]	; (800b9a4 <RegionEU868GetPhyParam+0x12c>)
 800b960:	e7f9      	b.n	800b956 <RegionEU868GetPhyParam+0xde>
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 800b962:	466a      	mov	r2, sp
 800b964:	4b10      	ldr	r3, [pc, #64]	; (800b9a8 <RegionEU868GetPhyParam+0x130>)
 800b966:	8013      	strh	r3, [r2, #0]
            break;
 800b968:	e7f6      	b.n	800b958 <RegionEU868GetPhyParam+0xe0>
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 800b96a:	2303      	movs	r3, #3
 800b96c:	e7b9      	b.n	800b8e2 <RegionEU868GetPhyParam+0x6a>
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 800b96e:	785b      	ldrb	r3, [r3, #1]
 800b970:	4a06      	ldr	r2, [pc, #24]	; (800b98c <RegionEU868GetPhyParam+0x114>)
 800b972:	b25b      	sxtb	r3, r3
 800b974:	5cd3      	ldrb	r3, [r2, r3]
 800b976:	e7b4      	b.n	800b8e2 <RegionEU868GetPhyParam+0x6a>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 800b978:	2001      	movs	r0, #1
 800b97a:	4904      	ldr	r1, [pc, #16]	; (800b98c <RegionEU868GetPhyParam+0x114>)
 800b97c:	5618      	ldrsb	r0, [r3, r0]
 800b97e:	3108      	adds	r1, #8
 800b980:	f7ff feba 	bl	800b6f8 <RegionCommonGetBandwidth>
 800b984:	e7aa      	b.n	800b8dc <RegionEU868GetPhyParam+0x64>
 800b986:	46c0      	nop			; (mov r8, r8)
 800b988:	20000ffc 	.word	0x20000ffc
 800b98c:	0800ea04 	.word	0x0800ea04
 800b990:	00000bb8 	.word	0x00000bb8
 800b994:	00001388 	.word	0x00001388
 800b998:	00001770 	.word	0x00001770
 800b99c:	fffffc18 	.word	0xfffffc18
 800b9a0:	33d3e608 	.word	0x33d3e608
 800b9a4:	4009999a 	.word	0x4009999a
 800b9a8:	00000211 	.word	0x00000211

0800b9ac <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
#if defined( REGION_EU868 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800b9ac:	230c      	movs	r3, #12
{
 800b9ae:	b513      	push	{r0, r1, r4, lr}
 800b9b0:	0001      	movs	r1, r0
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800b9b2:	7842      	ldrb	r2, [r0, #1]
 800b9b4:	7800      	ldrb	r0, [r0, #0]
 800b9b6:	4c08      	ldr	r4, [pc, #32]	; (800b9d8 <RegionEU868SetBandTxDone+0x2c>)
 800b9b8:	4343      	muls	r3, r0
 800b9ba:	6820      	ldr	r0, [r4, #0]
 800b9bc:	18c3      	adds	r3, r0, r3
 800b9be:	2018      	movs	r0, #24
 800b9c0:	7a5b      	ldrb	r3, [r3, #9]
 800b9c2:	4343      	muls	r3, r0
 800b9c4:	6860      	ldr	r0, [r4, #4]
 800b9c6:	18c0      	adds	r0, r0, r3
 800b9c8:	690b      	ldr	r3, [r1, #16]
 800b9ca:	9300      	str	r3, [sp, #0]
 800b9cc:	68cb      	ldr	r3, [r1, #12]
 800b9ce:	6889      	ldr	r1, [r1, #8]
 800b9d0:	f7ff fbe2 	bl	800b198 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_EU868 */
}
 800b9d4:	bd13      	pop	{r0, r1, r4, pc}
 800b9d6:	46c0      	nop			; (mov r8, r8)
 800b9d8:	20000ffc 	.word	0x20000ffc

0800b9dc <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 800b9dc:	b570      	push	{r4, r5, r6, lr}
 800b9de:	b0a4      	sub	sp, #144	; 0x90
 800b9e0:	0004      	movs	r4, r0
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 800b9e2:	2290      	movs	r2, #144	; 0x90
 800b9e4:	2100      	movs	r1, #0
 800b9e6:	4668      	mov	r0, sp
 800b9e8:	f002 fd3b 	bl	800e462 <memset>
 800b9ec:	2364      	movs	r3, #100	; 0x64
 800b9ee:	466a      	mov	r2, sp
 800b9f0:	8013      	strh	r3, [r2, #0]
 800b9f2:	8313      	strh	r3, [r2, #24]
 800b9f4:	22fa      	movs	r2, #250	; 0xfa
 800b9f6:	4669      	mov	r1, sp
 800b9f8:	200a      	movs	r0, #10
 800b9fa:	0092      	lsls	r2, r2, #2
 800b9fc:	860a      	strh	r2, [r1, #48]	; 0x30
 800b9fe:	a912      	add	r1, sp, #72	; 0x48
 800ba00:	8008      	strh	r0, [r1, #0]
 800ba02:	a918      	add	r1, sp, #96	; 0x60
 800ba04:	800b      	strh	r3, [r1, #0]
 800ba06:	ab1e      	add	r3, sp, #120	; 0x78
 800ba08:	801a      	strh	r2, [r3, #0]
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 800ba0a:	7a22      	ldrb	r2, [r4, #8]
 800ba0c:	2a01      	cmp	r2, #1
 800ba0e:	d02a      	beq.n	800ba66 <RegionEU868InitDefaults+0x8a>
 800ba10:	2a02      	cmp	r2, #2
 800ba12:	d032      	beq.n	800ba7a <RegionEU868InitDefaults+0x9e>
 800ba14:	2a00      	cmp	r2, #0
 800ba16:	d124      	bne.n	800ba62 <RegionEU868InitDefaults+0x86>
    {
        case INIT_TYPE_DEFAULTS:
        {
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800ba18:	6820      	ldr	r0, [r4, #0]
 800ba1a:	2800      	cmp	r0, #0
 800ba1c:	d021      	beq.n	800ba62 <RegionEU868InitDefaults+0x86>
 800ba1e:	6863      	ldr	r3, [r4, #4]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d01e      	beq.n	800ba62 <RegionEU868InitDefaults+0x86>
            {
                return;
            }

            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800ba24:	4c1a      	ldr	r4, [pc, #104]	; (800ba90 <RegionEU868InitDefaults+0xb4>)
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;

            // Default bands
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 800ba26:	4669      	mov	r1, sp
 800ba28:	3290      	adds	r2, #144	; 0x90
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800ba2a:	6060      	str	r0, [r4, #4]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800ba2c:	6023      	str	r3, [r4, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 800ba2e:	f000 fc27 	bl	800c280 <memcpy1>

            // Default channels
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 800ba32:	4b18      	ldr	r3, [pc, #96]	; (800ba94 <RegionEU868InitDefaults+0xb8>)
 800ba34:	6820      	ldr	r0, [r4, #0]
 800ba36:	001a      	movs	r2, r3
 800ba38:	0001      	movs	r1, r0
 800ba3a:	3238      	adds	r2, #56	; 0x38
 800ba3c:	ca70      	ldmia	r2!, {r4, r5, r6}
 800ba3e:	c170      	stmia	r1!, {r4, r5, r6}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 800ba40:	001a      	movs	r2, r3
 800ba42:	3244      	adds	r2, #68	; 0x44
 800ba44:	ca70      	ldmia	r2!, {r4, r5, r6}
 800ba46:	c170      	stmia	r1!, {r4, r5, r6}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 800ba48:	0002      	movs	r2, r0
 800ba4a:	3350      	adds	r3, #80	; 0x50
 800ba4c:	3218      	adds	r2, #24
 800ba4e:	cb32      	ldmia	r3!, {r1, r4, r5}
 800ba50:	c232      	stmia	r2!, {r1, r4, r5}

            // Default ChannelsMask
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 800ba52:	0001      	movs	r1, r0
 800ba54:	2307      	movs	r3, #7

            // Update the channels mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800ba56:	2201      	movs	r2, #1
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 800ba58:	31c2      	adds	r1, #194	; 0xc2
 800ba5a:	800b      	strh	r3, [r1, #0]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800ba5c:	30c0      	adds	r0, #192	; 0xc0
            // Reset Channels Rx1Frequency to default 0
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
            // Update the channels mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800ba5e:	f7ff fb8c 	bl	800b17a <RegionCommonChanMaskCopy>
        {
            break;
        }
    }
#endif /* REGION_EU868 */
}
 800ba62:	b024      	add	sp, #144	; 0x90
 800ba64:	bd70      	pop	{r4, r5, r6, pc}
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 800ba66:	4b0a      	ldr	r3, [pc, #40]	; (800ba90 <RegionEU868InitDefaults+0xb4>)
 800ba68:	6818      	ldr	r0, [r3, #0]
 800ba6a:	2300      	movs	r3, #0
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800ba6c:	0001      	movs	r1, r0
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 800ba6e:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 800ba70:	6103      	str	r3, [r0, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 800ba72:	61c3      	str	r3, [r0, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800ba74:	31c2      	adds	r1, #194	; 0xc2
 800ba76:	30c0      	adds	r0, #192	; 0xc0
 800ba78:	e7f1      	b.n	800ba5e <RegionEU868InitDefaults+0x82>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 800ba7a:	4b05      	ldr	r3, [pc, #20]	; (800ba90 <RegionEU868InitDefaults+0xb4>)
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	0019      	movs	r1, r3
 800ba80:	33c2      	adds	r3, #194	; 0xc2
 800ba82:	31c0      	adds	r1, #192	; 0xc0
 800ba84:	880a      	ldrh	r2, [r1, #0]
 800ba86:	881b      	ldrh	r3, [r3, #0]
 800ba88:	4313      	orrs	r3, r2
 800ba8a:	800b      	strh	r3, [r1, #0]
            break;
 800ba8c:	e7e9      	b.n	800ba62 <RegionEU868InitDefaults+0x86>
 800ba8e:	46c0      	nop			; (mov r8, r8)
 800ba90:	20000ffc 	.word	0x20000ffc
 800ba94:	0800ea04 	.word	0x0800ea04

0800ba98 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800ba98:	0003      	movs	r3, r0
 800ba9a:	b507      	push	{r0, r1, r2, lr}
 800ba9c:	0008      	movs	r0, r1
#if defined( REGION_EU868 )
    switch( phyAttribute )
 800ba9e:	290f      	cmp	r1, #15
 800baa0:	d809      	bhi.n	800bab6 <RegionEU868Verify+0x1e>
 800baa2:	f7f4 fb43 	bl	800012c <__gnu_thumb1_case_uqi>
 800baa6:	080a      	.short	0x080a
 800baa8:	1c080808 	.word	0x1c080808
 800baac:	1c081c12 	.word	0x1c081c12
 800bab0:	0808081c 	.word	0x0808081c
 800bab4:	2008      	.short	0x2008
 800bab6:	2000      	movs	r0, #0
            return false;
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 800bab8:	bd0e      	pop	{r1, r2, r3, pc}
            uint8_t band = 0;
 800baba:	466a      	mov	r2, sp
 800babc:	1dd1      	adds	r1, r2, #7
 800babe:	2200      	movs	r2, #0
            return VerifyRfFreq( verify->Frequency, &band );
 800bac0:	6818      	ldr	r0, [r3, #0]
            uint8_t band = 0;
 800bac2:	700a      	strb	r2, [r1, #0]
            return VerifyRfFreq( verify->Frequency, &band );
 800bac4:	f7ff fe88 	bl	800b7d8 <VerifyRfFreq>
 800bac8:	e7f6      	b.n	800bab8 <RegionEU868Verify+0x20>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800baca:	2000      	movs	r0, #0
 800bacc:	2205      	movs	r2, #5
 800bace:	5618      	ldrsb	r0, [r3, r0]
 800bad0:	2100      	movs	r1, #0
 800bad2:	f7ff fb15 	bl	800b100 <RegionCommonValueInRange>
 800bad6:	1e43      	subs	r3, r0, #1
 800bad8:	4198      	sbcs	r0, r3
 800bada:	b2c0      	uxtb	r0, r0
 800badc:	e7ec      	b.n	800bab8 <RegionEU868Verify+0x20>
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 800bade:	2000      	movs	r0, #0
 800bae0:	2207      	movs	r2, #7
 800bae2:	5618      	ldrsb	r0, [r3, r0]
 800bae4:	e7f4      	b.n	800bad0 <RegionEU868Verify+0x38>
            return EU868_DUTY_CYCLE_ENABLED;
 800bae6:	2001      	movs	r0, #1
 800bae8:	e7e6      	b.n	800bab8 <RegionEU868Verify+0x20>
	...

0800baec <RegionEU868ChanMaskSet>:
    }
#endif /* REGION_EU868 */
}

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800baec:	b510      	push	{r4, lr}
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 800baee:	7904      	ldrb	r4, [r0, #4]
{
 800baf0:	0003      	movs	r3, r0
    switch( chanMaskSet->ChannelsMaskType )
 800baf2:	2c00      	cmp	r4, #0
 800baf4:	d00b      	beq.n	800bb0e <RegionEU868ChanMaskSet+0x22>
 800baf6:	2000      	movs	r0, #0
 800baf8:	2c01      	cmp	r4, #1
 800bafa:	d110      	bne.n	800bb1e <RegionEU868ChanMaskSet+0x32>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
            break;
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800bafc:	4a08      	ldr	r2, [pc, #32]	; (800bb20 <RegionEU868ChanMaskSet+0x34>)
 800bafe:	6819      	ldr	r1, [r3, #0]
 800bb00:	6810      	ldr	r0, [r2, #0]
 800bb02:	0022      	movs	r2, r4
 800bb04:	30c2      	adds	r0, #194	; 0xc2
 800bb06:	f7ff fb38 	bl	800b17a <RegionCommonChanMaskCopy>
            break;
        }
        default:
            return false;
    }
    return true;
 800bb0a:	0020      	movs	r0, r4
            break;
 800bb0c:	e007      	b.n	800bb1e <RegionEU868ChanMaskSet+0x32>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800bb0e:	4a04      	ldr	r2, [pc, #16]	; (800bb20 <RegionEU868ChanMaskSet+0x34>)
 800bb10:	6819      	ldr	r1, [r3, #0]
 800bb12:	6810      	ldr	r0, [r2, #0]
 800bb14:	2201      	movs	r2, #1
 800bb16:	30c0      	adds	r0, #192	; 0xc0
 800bb18:	f7ff fb2f 	bl	800b17a <RegionCommonChanMaskCopy>
    return true;
 800bb1c:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 800bb1e:	bd10      	pop	{r4, pc}
 800bb20:	20000ffc 	.word	0x20000ffc

0800bb24 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800bb24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb26:	001c      	movs	r4, r3
 800bb28:	000e      	movs	r6, r1
 800bb2a:	0017      	movs	r7, r2
 800bb2c:	b085      	sub	sp, #20
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 800bb2e:	1c03      	adds	r3, r0, #0
 800bb30:	2807      	cmp	r0, #7
 800bb32:	dd00      	ble.n	800bb36 <RegionEU868ComputeRxWindowParameters+0x12>
 800bb34:	2307      	movs	r3, #7
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 800bb36:	4d14      	ldr	r5, [pc, #80]	; (800bb88 <RegionEU868ComputeRxWindowParameters+0x64>)
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 800bb38:	b258      	sxtb	r0, r3
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 800bb3a:	0029      	movs	r1, r5
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 800bb3c:	7063      	strb	r3, [r4, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 800bb3e:	3108      	adds	r1, #8
 800bb40:	f7ff fdda 	bl	800b6f8 <RegionCommonGetBandwidth>

    if( rxConfigParams->Datarate == DR_7 )
 800bb44:	2201      	movs	r2, #1
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 800bb46:	70a0      	strb	r0, [r4, #2]
    if( rxConfigParams->Datarate == DR_7 )
 800bb48:	56a2      	ldrsb	r2, [r4, r2]
 800bb4a:	2a07      	cmp	r2, #7
 800bb4c:	d114      	bne.n	800bb78 <RegionEU868ComputeRxWindowParameters+0x54>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 800bb4e:	2032      	movs	r0, #50	; 0x32
 800bb50:	f7ff fcc4 	bl	800b4dc <RegionCommonComputeSymbolTimeFsk>
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800bb54:	4b0d      	ldr	r3, [pc, #52]	; (800bb8c <RegionEU868ComputeRxWindowParameters+0x68>)
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 800bb56:	0005      	movs	r5, r0
    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800bb58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb5a:	9303      	str	r3, [sp, #12]
 800bb5c:	4798      	blx	r3
 800bb5e:	0022      	movs	r2, r4
 800bb60:	3408      	adds	r4, #8
 800bb62:	320c      	adds	r2, #12
 800bb64:	0003      	movs	r3, r0
 800bb66:	9201      	str	r2, [sp, #4]
 800bb68:	0031      	movs	r1, r6
 800bb6a:	003a      	movs	r2, r7
 800bb6c:	0028      	movs	r0, r5
 800bb6e:	9400      	str	r4, [sp, #0]
 800bb70:	f7ff fcbc 	bl	800b4ec <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 800bb74:	b005      	add	sp, #20
 800bb76:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 800bb78:	0093      	lsls	r3, r2, #2
 800bb7a:	18eb      	adds	r3, r5, r3
 800bb7c:	5ca8      	ldrb	r0, [r5, r2]
 800bb7e:	6899      	ldr	r1, [r3, #8]
 800bb80:	f7ff fca2 	bl	800b4c8 <RegionCommonComputeSymbolTimeLoRa>
 800bb84:	e7e6      	b.n	800bb54 <RegionEU868ComputeRxWindowParameters+0x30>
 800bb86:	46c0      	nop			; (mov r8, r8)
 800bb88:	0800ea04 	.word	0x0800ea04
 800bb8c:	0800eb54 	.word	0x0800eb54

0800bb90 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800bb90:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 800bb92:	2701      	movs	r7, #1
{
 800bb94:	b08f      	sub	sp, #60	; 0x3c
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800bb96:	6843      	ldr	r3, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 800bb98:	4e34      	ldr	r6, [pc, #208]	; (800bc6c <RegionEU868RxConfig+0xdc>)
{
 800bb9a:	910c      	str	r1, [sp, #48]	; 0x30
    int8_t dr = rxConfig->Datarate;
 800bb9c:	57c7      	ldrsb	r7, [r0, r7]
    uint32_t frequency = rxConfig->Frequency;
 800bb9e:	930a      	str	r3, [sp, #40]	; 0x28
    if( Radio.GetStatus( ) != RF_IDLE )
 800bba0:	6873      	ldr	r3, [r6, #4]
{
 800bba2:	0004      	movs	r4, r0
    if( Radio.GetStatus( ) != RF_IDLE )
 800bba4:	930b      	str	r3, [sp, #44]	; 0x2c
 800bba6:	4798      	blx	r3
 800bba8:	0005      	movs	r5, r0
    {
        return false;
 800bbaa:	2000      	movs	r0, #0
    if( Radio.GetStatus( ) != RF_IDLE )
 800bbac:	4285      	cmp	r5, r0
 800bbae:	d145      	bne.n	800bc3c <RegionEU868RxConfig+0xac>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800bbb0:	7ce3      	ldrb	r3, [r4, #19]
 800bbb2:	4283      	cmp	r3, r0
 800bbb4:	d10b      	bne.n	800bbce <RegionEU868RxConfig+0x3e>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800bbb6:	230c      	movs	r3, #12
 800bbb8:	7822      	ldrb	r2, [r4, #0]
 800bbba:	435a      	muls	r2, r3
 800bbbc:	4b2c      	ldr	r3, [pc, #176]	; (800bc70 <RegionEU868RxConfig+0xe0>)
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	189b      	adds	r3, r3, r2
 800bbc2:	681a      	ldr	r2, [r3, #0]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 800bbc4:	685b      	ldr	r3, [r3, #4]
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800bbc6:	920a      	str	r2, [sp, #40]	; 0x28
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 800bbc8:	4283      	cmp	r3, r0
 800bbca:	d000      	beq.n	800bbce <RegionEU868RxConfig+0x3e>
 800bbcc:	930a      	str	r3, [sp, #40]	; 0x28
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 800bbce:	4b29      	ldr	r3, [pc, #164]	; (800bc74 <RegionEU868RxConfig+0xe4>)

    Radio.SetChannel( frequency );
 800bbd0:	980a      	ldr	r0, [sp, #40]	; 0x28
    phyDr = DataratesEU868[dr];
 800bbd2:	57db      	ldrsb	r3, [r3, r7]
 800bbd4:	930b      	str	r3, [sp, #44]	; 0x2c
    Radio.SetChannel( frequency );
 800bbd6:	68f3      	ldr	r3, [r6, #12]
 800bbd8:	930d      	str	r3, [sp, #52]	; 0x34
 800bbda:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
    {
        modem = MODEM_FSK;
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 800bbdc:	69b6      	ldr	r6, [r6, #24]
 800bbde:	7ca3      	ldrb	r3, [r4, #18]
    if( dr == DR_7 )
 800bbe0:	2f07      	cmp	r7, #7
 800bbe2:	d12d      	bne.n	800bc40 <RegionEU868RxConfig+0xb0>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 800bbe4:	9309      	str	r3, [sp, #36]	; 0x24
 800bbe6:	2301      	movs	r3, #1
 800bbe8:	9305      	str	r3, [sp, #20]
 800bbea:	68a3      	ldr	r3, [r4, #8]
 800bbec:	2000      	movs	r0, #0
 800bbee:	b29b      	uxth	r3, r3
 800bbf0:	9302      	str	r3, [sp, #8]
 800bbf2:	2305      	movs	r3, #5
 800bbf4:	22fa      	movs	r2, #250	; 0xfa
 800bbf6:	9301      	str	r3, [sp, #4]
 800bbf8:	4b1f      	ldr	r3, [pc, #124]	; (800bc78 <RegionEU868RxConfig+0xe8>)
 800bbfa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bbfc:	9300      	str	r3, [sp, #0]
 800bbfe:	0003      	movs	r3, r0
 800bc00:	0092      	lsls	r2, r2, #2
 800bc02:	434a      	muls	r2, r1
 800bc04:	491d      	ldr	r1, [pc, #116]	; (800bc7c <RegionEU868RxConfig+0xec>)
 800bc06:	9008      	str	r0, [sp, #32]
 800bc08:	9007      	str	r0, [sp, #28]
 800bc0a:	9006      	str	r0, [sp, #24]
 800bc0c:	9004      	str	r0, [sp, #16]
 800bc0e:	9003      	str	r0, [sp, #12]
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800bc10:	47b0      	blx	r6
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 800bc12:	7c62      	ldrb	r2, [r4, #17]
 800bc14:	4b17      	ldr	r3, [pc, #92]	; (800bc74 <RegionEU868RxConfig+0xe4>)
 800bc16:	2a00      	cmp	r2, #0
 800bc18:	d026      	beq.n	800bc68 <RegionEU868RxConfig+0xd8>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 800bc1a:	3330      	adds	r3, #48	; 0x30
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 800bc1c:	5dd9      	ldrb	r1, [r3, r7]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800bc1e:	4b13      	ldr	r3, [pc, #76]	; (800bc6c <RegionEU868RxConfig+0xdc>)
 800bc20:	310d      	adds	r1, #13
 800bc22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc24:	0028      	movs	r0, r5
 800bc26:	b2c9      	uxtb	r1, r1
 800bc28:	930b      	str	r3, [sp, #44]	; 0x2c
 800bc2a:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800bc2c:	7ce0      	ldrb	r0, [r4, #19]
 800bc2e:	003a      	movs	r2, r7
 800bc30:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bc32:	f7ff fd71 	bl	800b718 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
    return true;
 800bc36:	2001      	movs	r0, #1
    *datarate = (uint8_t) dr;
 800bc38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bc3a:	701f      	strb	r7, [r3, #0]
#else
    return false;
#endif /* REGION_EU868 */
}
 800bc3c:	b00f      	add	sp, #60	; 0x3c
 800bc3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800bc40:	68a2      	ldr	r2, [r4, #8]
 800bc42:	2501      	movs	r5, #1
 800bc44:	b292      	uxth	r2, r2
 800bc46:	9309      	str	r3, [sp, #36]	; 0x24
 800bc48:	9202      	str	r2, [sp, #8]
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	2208      	movs	r2, #8
 800bc4e:	9307      	str	r3, [sp, #28]
 800bc50:	9306      	str	r3, [sp, #24]
 800bc52:	9305      	str	r3, [sp, #20]
 800bc54:	9304      	str	r3, [sp, #16]
 800bc56:	9303      	str	r3, [sp, #12]
 800bc58:	9201      	str	r2, [sp, #4]
 800bc5a:	9300      	str	r3, [sp, #0]
 800bc5c:	0028      	movs	r0, r5
 800bc5e:	002b      	movs	r3, r5
 800bc60:	78a1      	ldrb	r1, [r4, #2]
 800bc62:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bc64:	9508      	str	r5, [sp, #32]
 800bc66:	e7d3      	b.n	800bc10 <RegionEU868RxConfig+0x80>
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 800bc68:	3328      	adds	r3, #40	; 0x28
 800bc6a:	e7d7      	b.n	800bc1c <RegionEU868RxConfig+0x8c>
 800bc6c:	0800eb54 	.word	0x0800eb54
 800bc70:	20000ffc 	.word	0x20000ffc
 800bc74:	0800ea04 	.word	0x0800ea04
 800bc78:	00014585 	.word	0x00014585
 800bc7c:	0000c350 	.word	0x0000c350

0800bc80 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 800bc80:	2301      	movs	r3, #1
{
 800bc82:	b5f0      	push	{r4, r5, r6, r7, lr}
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800bc84:	250c      	movs	r5, #12
{
 800bc86:	b091      	sub	sp, #68	; 0x44
 800bc88:	910e      	str	r1, [sp, #56]	; 0x38
 800bc8a:	920f      	str	r2, [sp, #60]	; 0x3c
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 800bc8c:	4f3a      	ldr	r7, [pc, #232]	; (800bd78 <RegionEU868TxConfig+0xf8>)
 800bc8e:	56c3      	ldrsb	r3, [r0, r3]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800bc90:	4e3a      	ldr	r6, [pc, #232]	; (800bd7c <RegionEU868TxConfig+0xfc>)
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 800bc92:	56fb      	ldrsb	r3, [r7, r3]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800bc94:	6832      	ldr	r2, [r6, #0]
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 800bc96:	930a      	str	r3, [sp, #40]	; 0x28
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800bc98:	7803      	ldrb	r3, [r0, #0]
{
 800bc9a:	0004      	movs	r4, r0
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800bc9c:	436b      	muls	r3, r5
 800bc9e:	18d3      	adds	r3, r2, r3
 800bca0:	7a5a      	ldrb	r2, [r3, #9]
 800bca2:	2318      	movs	r3, #24
 800bca4:	2102      	movs	r1, #2
 800bca6:	2002      	movs	r0, #2
 800bca8:	4353      	muls	r3, r2
 800bcaa:	6872      	ldr	r2, [r6, #4]
 800bcac:	5620      	ldrsb	r0, [r4, r0]
 800bcae:	18d3      	adds	r3, r2, r3
 800bcb0:	5659      	ldrsb	r1, [r3, r1]
 800bcb2:	f7ff fd1a 	bl	800b6ea <RegionCommonLimitTxPower>
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 800bcb6:	0039      	movs	r1, r7
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800bcb8:	900d      	str	r0, [sp, #52]	; 0x34
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 800bcba:	2001      	movs	r0, #1
 800bcbc:	3108      	adds	r1, #8
 800bcbe:	5620      	ldrsb	r0, [r4, r0]
 800bcc0:	f7ff fd1a 	bl	800b6f8 <RegionCommonGetBandwidth>
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800bcc4:	68a2      	ldr	r2, [r4, #8]
 800bcc6:	6861      	ldr	r1, [r4, #4]
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 800bcc8:	900b      	str	r0, [sp, #44]	; 0x2c
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800bcca:	980d      	ldr	r0, [sp, #52]	; 0x34
 800bccc:	f7ff fc3c 	bl	800b548 <RegionCommonComputeTxPower>

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800bcd0:	7822      	ldrb	r2, [r4, #0]
 800bcd2:	6833      	ldr	r3, [r6, #0]
 800bcd4:	4355      	muls	r5, r2
 800bcd6:	4e2a      	ldr	r6, [pc, #168]	; (800bd80 <RegionEU868TxConfig+0x100>)
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800bcd8:	0007      	movs	r7, r0
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800bcda:	68f2      	ldr	r2, [r6, #12]
 800bcdc:	58e8      	ldr	r0, [r5, r3]
 800bcde:	920c      	str	r2, [sp, #48]	; 0x30
 800bce0:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
    { // High Speed FSK channel
        modem = MODEM_FSK;
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800bce2:	69f3      	ldr	r3, [r6, #28]
    if( txConfig->Datarate == DR_7 )
 800bce4:	2201      	movs	r2, #1
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800bce6:	930c      	str	r3, [sp, #48]	; 0x30
 800bce8:	23fa      	movs	r3, #250	; 0xfa
 800bcea:	2500      	movs	r5, #0
    if( txConfig->Datarate == DR_7 )
 800bcec:	56a2      	ldrsb	r2, [r4, r2]
 800bcee:	011b      	lsls	r3, r3, #4
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800bcf0:	9308      	str	r3, [sp, #32]
 800bcf2:	9507      	str	r5, [sp, #28]
 800bcf4:	9506      	str	r5, [sp, #24]
 800bcf6:	9505      	str	r5, [sp, #20]
    if( txConfig->Datarate == DR_7 )
 800bcf8:	2a07      	cmp	r2, #7
 800bcfa:	d12d      	bne.n	800bd58 <RegionEU868TxConfig+0xd8>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800bcfc:	2301      	movs	r3, #1
 800bcfe:	9304      	str	r3, [sp, #16]
 800bd00:	3304      	adds	r3, #4
 800bd02:	9302      	str	r3, [sp, #8]
 800bd04:	23fa      	movs	r3, #250	; 0xfa
 800bd06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bd08:	009b      	lsls	r3, r3, #2
 800bd0a:	4353      	muls	r3, r2
 800bd0c:	0039      	movs	r1, r7
 800bd0e:	9300      	str	r3, [sp, #0]
 800bd10:	0028      	movs	r0, r5
 800bd12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd14:	4a1b      	ldr	r2, [pc, #108]	; (800bd84 <RegionEU868TxConfig+0x104>)
 800bd16:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800bd18:	9503      	str	r5, [sp, #12]
 800bd1a:	9501      	str	r5, [sp, #4]
 800bd1c:	47b0      	blx	r6
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800bd1e:	4b17      	ldr	r3, [pc, #92]	; (800bd7c <RegionEU868TxConfig+0xfc>)
 800bd20:	2101      	movs	r1, #1
 800bd22:	681a      	ldr	r2, [r3, #0]
 800bd24:	230c      	movs	r3, #12
 800bd26:	7820      	ldrb	r0, [r4, #0]
 800bd28:	5661      	ldrsb	r1, [r4, r1]
 800bd2a:	4343      	muls	r3, r0
 800bd2c:	5898      	ldr	r0, [r3, r2]
 800bd2e:	f7ff fd1d 	bl	800b76c <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800bd32:	2001      	movs	r0, #1
 800bd34:	89a1      	ldrh	r1, [r4, #12]
 800bd36:	5620      	ldrsb	r0, [r4, r0]
 800bd38:	f7ff fd24 	bl	800b784 <GetTimeOnAir>
 800bd3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bd3e:	6018      	str	r0, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 800bd40:	4b0f      	ldr	r3, [pc, #60]	; (800bd80 <RegionEU868TxConfig+0x100>)
 800bd42:	0028      	movs	r0, r5
 800bd44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd46:	7b21      	ldrb	r1, [r4, #12]
 800bd48:	930a      	str	r3, [sp, #40]	; 0x28
 800bd4a:	4798      	blx	r3
    *txPower = txPowerLimited;
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 800bd4c:	2001      	movs	r0, #1
    *txPower = txPowerLimited;
 800bd4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bd50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bd52:	701a      	strb	r2, [r3, #0]
}
 800bd54:	b011      	add	sp, #68	; 0x44
 800bd56:	bdf0      	pop	{r4, r5, r6, r7, pc}
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800bd58:	2308      	movs	r3, #8
 800bd5a:	2601      	movs	r6, #1
 800bd5c:	9302      	str	r3, [sp, #8]
 800bd5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd60:	002a      	movs	r2, r5
 800bd62:	9503      	str	r5, [sp, #12]
 800bd64:	9300      	str	r3, [sp, #0]
 800bd66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bd68:	0039      	movs	r1, r7
 800bd6a:	0030      	movs	r0, r6
 800bd6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd6e:	9604      	str	r6, [sp, #16]
 800bd70:	9601      	str	r6, [sp, #4]
 800bd72:	47a8      	blx	r5
        modem = MODEM_LORA;
 800bd74:	0035      	movs	r5, r6
 800bd76:	e7d2      	b.n	800bd1e <RegionEU868TxConfig+0x9e>
 800bd78:	0800ea04 	.word	0x0800ea04
 800bd7c:	20000ffc 	.word	0x20000ffc
 800bd80:	0800eb54 	.word	0x0800eb54
 800bd84:	000061a8 	.word	0x000061a8

0800bd88 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800bd88:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 800bd8a:	2700      	movs	r7, #0
    uint8_t status = 0x07;
 800bd8c:	2507      	movs	r5, #7
{
 800bd8e:	b093      	sub	sp, #76	; 0x4c
 800bd90:	9103      	str	r1, [sp, #12]
 800bd92:	9204      	str	r2, [sp, #16]
 800bd94:	0004      	movs	r4, r0
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800bd96:	2206      	movs	r2, #6
 800bd98:	2100      	movs	r1, #0
 800bd9a:	a808      	add	r0, sp, #32
{
 800bd9c:	9305      	str	r3, [sp, #20]
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800bd9e:	f002 fb60 	bl	800e462 <memset>
    uint16_t chMask = 0;
 800bda2:	ab06      	add	r3, sp, #24
 800bda4:	80df      	strh	r7, [r3, #6]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800bda6:	7a23      	ldrb	r3, [r4, #8]
 800bda8:	42bb      	cmp	r3, r7
 800bdaa:	d906      	bls.n	800bdba <RegionEU868LinkAdrReq+0x32>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800bdac:	6863      	ldr	r3, [r4, #4]
 800bdae:	a908      	add	r1, sp, #32
 800bdb0:	19d8      	adds	r0, r3, r7
 800bdb2:	f7ff fb27 	bl	800b404 <RegionCommonParseLinkAdrReq>

        if( nextIndex == 0 )
 800bdb6:	2800      	cmp	r0, #0
 800bdb8:	d144      	bne.n	800be44 <RegionEU868LinkAdrReq+0xbc>
    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
    phyParam = RegionEU868GetPhyParam( &getPhy );

    linkAdrVerifyParams.Status = status;
 800bdba:	a80a      	add	r0, sp, #40	; 0x28
 800bdbc:	7105      	strb	r5, [r0, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800bdbe:	7aa3      	ldrb	r3, [r4, #10]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800bdc0:	ad08      	add	r5, sp, #32
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800bdc2:	7143      	strb	r3, [r0, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800bdc4:	786b      	ldrb	r3, [r5, #1]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
    linkAdrVerifyParams.Version = linkAdrReq->Version;

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800bdc6:	220a      	movs	r2, #10
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800bdc8:	7183      	strb	r3, [r0, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800bdca:	78ab      	ldrb	r3, [r5, #2]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800bdcc:	4e3e      	ldr	r6, [pc, #248]	; (800bec8 <RegionEU868LinkAdrReq+0x140>)
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800bdce:	71c3      	strb	r3, [r0, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800bdd0:	782b      	ldrb	r3, [r5, #0]
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800bdd2:	a906      	add	r1, sp, #24
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800bdd4:	7203      	strb	r3, [r0, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800bdd6:	7ae3      	ldrb	r3, [r4, #11]
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800bdd8:	1852      	adds	r2, r2, r1
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800bdda:	7243      	strb	r3, [r0, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800bddc:	7b23      	ldrb	r3, [r4, #12]
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800bdde:	2109      	movs	r1, #9
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800bde0:	7283      	strb	r3, [r0, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800bde2:	7b63      	ldrb	r3, [r4, #13]
 800bde4:	72c3      	strb	r3, [r0, #11]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 800bde6:	2310      	movs	r3, #16
 800bde8:	7303      	strb	r3, [r0, #12]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 800bdea:	ab06      	add	r3, sp, #24
 800bdec:	3306      	adds	r3, #6
 800bdee:	6103      	str	r3, [r0, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800bdf0:	23e0      	movs	r3, #224	; 0xe0
 800bdf2:	00db      	lsls	r3, r3, #3
 800bdf4:	8283      	strh	r3, [r0, #20]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800bdf6:	6833      	ldr	r3, [r6, #0]
 800bdf8:	6183      	str	r3, [r0, #24]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 800bdfa:	2307      	movs	r3, #7
 800bdfc:	8383      	strh	r3, [r0, #28]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800bdfe:	6823      	ldr	r3, [r4, #0]
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800be00:	ac06      	add	r4, sp, #24
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800be02:	930a      	str	r3, [sp, #40]	; 0x28
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800be04:	1909      	adds	r1, r1, r4
 800be06:	002b      	movs	r3, r5
 800be08:	f7ff fb17 	bl	800b43a <RegionCommonLinkAdrReqVerifyParams>
 800be0c:	0004      	movs	r4, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800be0e:	2807      	cmp	r0, #7
 800be10:	d10a      	bne.n	800be28 <RegionEU868LinkAdrReq+0xa0>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 800be12:	6830      	ldr	r0, [r6, #0]
 800be14:	2202      	movs	r2, #2
 800be16:	2100      	movs	r1, #0
 800be18:	30c0      	adds	r0, #192	; 0xc0
 800be1a:	f000 fa46 	bl	800c2aa <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 800be1e:	6833      	ldr	r3, [r6, #0]
 800be20:	aa06      	add	r2, sp, #24
 800be22:	88d2      	ldrh	r2, [r2, #6]
 800be24:	33c0      	adds	r3, #192	; 0xc0
 800be26:	801a      	strh	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
    *nbBytesParsed = bytesProcessed;

#endif /* REGION_EU868 */
    return status;
}
 800be28:	0020      	movs	r0, r4
    *drOut = linkAdrParams.Datarate;
 800be2a:	786b      	ldrb	r3, [r5, #1]
 800be2c:	9a03      	ldr	r2, [sp, #12]
 800be2e:	7013      	strb	r3, [r2, #0]
    *txPowOut = linkAdrParams.TxPower;
 800be30:	78ab      	ldrb	r3, [r5, #2]
 800be32:	9a04      	ldr	r2, [sp, #16]
 800be34:	7013      	strb	r3, [r2, #0]
    *nbRepOut = linkAdrParams.NbRep;
 800be36:	782b      	ldrb	r3, [r5, #0]
 800be38:	9a05      	ldr	r2, [sp, #20]
 800be3a:	7013      	strb	r3, [r2, #0]
    *nbBytesParsed = bytesProcessed;
 800be3c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800be3e:	701f      	strb	r7, [r3, #0]
}
 800be40:	b013      	add	sp, #76	; 0x4c
 800be42:	bdf0      	pop	{r4, r5, r6, r7, pc}
        chMask = linkAdrParams.ChMask;
 800be44:	ab06      	add	r3, sp, #24
 800be46:	899b      	ldrh	r3, [r3, #12]
 800be48:	aa06      	add	r2, sp, #24
 800be4a:	80d3      	strh	r3, [r2, #6]
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800be4c:	aa06      	add	r2, sp, #24
        bytesProcessed += nextIndex;
 800be4e:	183f      	adds	r7, r7, r0
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800be50:	7ad0      	ldrb	r0, [r2, #11]
        bytesProcessed += nextIndex;
 800be52:	b2ff      	uxtb	r7, r7
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800be54:	2800      	cmp	r0, #0
 800be56:	d123      	bne.n	800bea0 <RegionEU868LinkAdrReq+0x118>
            status &= 0xFE; // Channel mask KO
 800be58:	2506      	movs	r5, #6
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d0a3      	beq.n	800bda6 <RegionEU868LinkAdrReq+0x1e>
                        status &= 0xFE; // Channel mask KO
 800be5e:	2606      	movs	r6, #6
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 800be60:	4a19      	ldr	r2, [pc, #100]	; (800bec8 <RegionEU868LinkAdrReq+0x140>)
 800be62:	2507      	movs	r5, #7
 800be64:	6812      	ldr	r2, [r2, #0]
                        status &= 0xFE; // Channel mask KO
 800be66:	46b4      	mov	ip, r6
 800be68:	9201      	str	r2, [sp, #4]
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 800be6a:	2200      	movs	r2, #0
 800be6c:	9202      	str	r2, [sp, #8]
                if( linkAdrParams.ChMaskCtrl == 6 )
 800be6e:	2806      	cmp	r0, #6
 800be70:	d11f      	bne.n	800beb2 <RegionEU868LinkAdrReq+0x12a>
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 800be72:	9901      	ldr	r1, [sp, #4]
 800be74:	680e      	ldr	r6, [r1, #0]
 800be76:	2e00      	cmp	r6, #0
 800be78:	d005      	beq.n	800be86 <RegionEU868LinkAdrReq+0xfe>
                        chMask |= 1 << i;
 800be7a:	2601      	movs	r6, #1
 800be7c:	4096      	lsls	r6, r2
 800be7e:	2101      	movs	r1, #1
 800be80:	4333      	orrs	r3, r6
 800be82:	b29b      	uxth	r3, r3
 800be84:	9102      	str	r1, [sp, #8]
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 800be86:	9901      	ldr	r1, [sp, #4]
 800be88:	3201      	adds	r2, #1
 800be8a:	310c      	adds	r1, #12
 800be8c:	9101      	str	r1, [sp, #4]
 800be8e:	2a10      	cmp	r2, #16
 800be90:	d1ed      	bne.n	800be6e <RegionEU868LinkAdrReq+0xe6>
 800be92:	9a02      	ldr	r2, [sp, #8]
 800be94:	2a00      	cmp	r2, #0
 800be96:	d100      	bne.n	800be9a <RegionEU868LinkAdrReq+0x112>
 800be98:	e785      	b.n	800bda6 <RegionEU868LinkAdrReq+0x1e>
 800be9a:	aa06      	add	r2, sp, #24
 800be9c:	80d3      	strh	r3, [r2, #6]
 800be9e:	e782      	b.n	800bda6 <RegionEU868LinkAdrReq+0x1e>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 800bea0:	1e42      	subs	r2, r0, #1
            status &= 0xFE; // Channel mask KO
 800bea2:	2506      	movs	r5, #6
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 800bea4:	2a04      	cmp	r2, #4
 800bea6:	d800      	bhi.n	800beaa <RegionEU868LinkAdrReq+0x122>
 800bea8:	e77d      	b.n	800bda6 <RegionEU868LinkAdrReq+0x1e>
 800beaa:	42a8      	cmp	r0, r5
 800beac:	d000      	beq.n	800beb0 <RegionEU868LinkAdrReq+0x128>
 800beae:	e77a      	b.n	800bda6 <RegionEU868LinkAdrReq+0x1e>
 800beb0:	e7d5      	b.n	800be5e <RegionEU868LinkAdrReq+0xd6>
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800beb2:	001e      	movs	r6, r3
 800beb4:	2101      	movs	r1, #1
 800beb6:	4116      	asrs	r6, r2
 800beb8:	420e      	tst	r6, r1
 800beba:	d0e4      	beq.n	800be86 <RegionEU868LinkAdrReq+0xfe>
 800bebc:	9901      	ldr	r1, [sp, #4]
 800bebe:	6809      	ldr	r1, [r1, #0]
 800bec0:	2900      	cmp	r1, #0
 800bec2:	d1e0      	bne.n	800be86 <RegionEU868LinkAdrReq+0xfe>
                        status &= 0xFE; // Channel mask KO
 800bec4:	4665      	mov	r5, ip
 800bec6:	e7de      	b.n	800be86 <RegionEU868LinkAdrReq+0xfe>
 800bec8:	20000ffc 	.word	0x20000ffc

0800becc <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800becc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800bece:	466b      	mov	r3, sp
 800bed0:	2600      	movs	r6, #0
 800bed2:	1dd9      	adds	r1, r3, #7
{
 800bed4:	0005      	movs	r5, r0

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 800bed6:	6840      	ldr	r0, [r0, #4]
    uint8_t band = 0;
 800bed8:	700e      	strb	r6, [r1, #0]
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 800beda:	f7ff fc7d 	bl	800b7d8 <VerifyRfFreq>
    {
        status &= 0xFE; // Channel frequency KO
 800bede:	1e43      	subs	r3, r0, #1
 800bee0:	4198      	sbcs	r0, r3
 800bee2:	0004      	movs	r4, r0
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 800bee4:	2000      	movs	r0, #0
 800bee6:	2207      	movs	r2, #7
 800bee8:	0031      	movs	r1, r6
 800beea:	5628      	ldrsb	r0, [r5, r0]
        status &= 0xFE; // Channel frequency KO
 800beec:	3406      	adds	r4, #6
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 800beee:	f7ff f907 	bl	800b100 <RegionCommonValueInRange>
 800bef2:	42b0      	cmp	r0, r6
 800bef4:	d101      	bne.n	800befa <RegionEU868RxParamSetupReq+0x2e>
    {
        status &= 0xFD; // Datarate KO
 800bef6:	2302      	movs	r3, #2
 800bef8:	439c      	bics	r4, r3
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 800befa:	2001      	movs	r0, #1
 800befc:	2205      	movs	r2, #5
 800befe:	2100      	movs	r1, #0
 800bf00:	5628      	ldrsb	r0, [r5, r0]
 800bf02:	f7ff f8fd 	bl	800b100 <RegionCommonValueInRange>
 800bf06:	2800      	cmp	r0, #0
 800bf08:	d101      	bne.n	800bf0e <RegionEU868RxParamSetupReq+0x42>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800bf0a:	2304      	movs	r3, #4
 800bf0c:	439c      	bics	r4, r3
    }

#endif /* REGION_EU868 */
    return status;
}
 800bf0e:	0020      	movs	r0, r4
 800bf10:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

0800bf12 <RegionEU868TxParamSetupReq>:
}

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
 800bf12:	2001      	movs	r0, #1
}
 800bf14:	4240      	negs	r0, r0
 800bf16:	4770      	bx	lr

0800bf18 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 800bf18:	b513      	push	{r0, r1, r4, lr}
    uint8_t status = 0x03;
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800bf1a:	466b      	mov	r3, sp
 800bf1c:	1dd9      	adds	r1, r3, #7
 800bf1e:	2300      	movs	r3, #0
{
 800bf20:	0004      	movs	r4, r0

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 800bf22:	6840      	ldr	r0, [r0, #4]
    uint8_t band = 0;
 800bf24:	700b      	strb	r3, [r1, #0]
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 800bf26:	f7ff fc57 	bl	800b7d8 <VerifyRfFreq>
    {
        status &= 0xFE;
 800bf2a:	0003      	movs	r3, r0
 800bf2c:	1e5a      	subs	r2, r3, #1
 800bf2e:	4193      	sbcs	r3, r2
 800bf30:	220c      	movs	r2, #12
 800bf32:	7821      	ldrb	r1, [r4, #0]
 800bf34:	3302      	adds	r3, #2
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 800bf36:	4351      	muls	r1, r2
 800bf38:	4a08      	ldr	r2, [pc, #32]	; (800bf5c <RegionEU868DlChannelReq+0x44>)
 800bf3a:	6812      	ldr	r2, [r2, #0]
 800bf3c:	1852      	adds	r2, r2, r1
 800bf3e:	6811      	ldr	r1, [r2, #0]
 800bf40:	2900      	cmp	r1, #0
 800bf42:	d103      	bne.n	800bf4c <RegionEU868DlChannelReq+0x34>
    {
        status &= 0xFD;
 800bf44:	2202      	movs	r2, #2
 800bf46:	4393      	bics	r3, r2
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

#endif /* REGION_EU868 */
    return status;
 800bf48:	b258      	sxtb	r0, r3
}
 800bf4a:	bd16      	pop	{r1, r2, r4, pc}
    if( status == 0x03 )
 800bf4c:	2b03      	cmp	r3, #3
 800bf4e:	d102      	bne.n	800bf56 <RegionEU868DlChannelReq+0x3e>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 800bf50:	6861      	ldr	r1, [r4, #4]
 800bf52:	6051      	str	r1, [r2, #4]
 800bf54:	e7f8      	b.n	800bf48 <RegionEU868DlChannelReq+0x30>
 800bf56:	2302      	movs	r3, #2
 800bf58:	e7f6      	b.n	800bf48 <RegionEU868DlChannelReq+0x30>
 800bf5a:	46c0      	nop			; (mov r8, r8)
 800bf5c:	20000ffc 	.word	0x20000ffc

0800bf60 <RegionEU868AlternateDr>:
#if defined( REGION_EU868 )
    return currentDr;
#else
    return -1;
#endif /* REGION_EU868 */
}
 800bf60:	4770      	bx	lr
	...

0800bf64 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800bf64:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 800bf66:	2500      	movs	r5, #0
{
 800bf68:	b09b      	sub	sp, #108	; 0x6c
 800bf6a:	9305      	str	r3, [sp, #20]
    uint8_t nbEnabledChannels = 0;
 800bf6c:	ab07      	add	r3, sp, #28
 800bf6e:	701d      	strb	r5, [r3, #0]
    uint8_t nbRestrictedChannels = 0;
 800bf70:	230d      	movs	r3, #13
{
 800bf72:	9204      	str	r2, [sp, #16]
    uint8_t nbRestrictedChannels = 0;
 800bf74:	aa04      	add	r2, sp, #16
 800bf76:	189b      	adds	r3, r3, r2
{
 800bf78:	9103      	str	r1, [sp, #12]
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 800bf7a:	220c      	movs	r2, #12
 800bf7c:	0029      	movs	r1, r5
{
 800bf7e:	0004      	movs	r4, r0
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 800bf80:	a809      	add	r0, sp, #36	; 0x24
    uint8_t nbRestrictedChannels = 0;
 800bf82:	701d      	strb	r5, [r3, #0]
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 800bf84:	9508      	str	r5, [sp, #32]
 800bf86:	f002 fa6c 	bl	800e462 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 800bf8a:	230e      	movs	r3, #14
 800bf8c:	2607      	movs	r6, #7

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 800bf8e:	4f2f      	ldr	r7, [pc, #188]	; (800c04c <RegionEU868NextChannel+0xe8>)
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 800bf90:	aa04      	add	r2, sp, #16
    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 800bf92:	6838      	ldr	r0, [r7, #0]
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 800bf94:	189b      	adds	r3, r3, r2
    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 800bf96:	0029      	movs	r1, r5
 800bf98:	2201      	movs	r2, #1
 800bf9a:	30c0      	adds	r0, #192	; 0xc0
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 800bf9c:	801e      	strh	r6, [r3, #0]
    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 800bf9e:	f7ff f8cd 	bl	800b13c <RegionCommonCountChannels>
 800bfa2:	42a8      	cmp	r0, r5
 800bfa4:	d104      	bne.n	800bfb0 <RegionEU868NextChannel+0x4c>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	33c0      	adds	r3, #192	; 0xc0
 800bfaa:	881a      	ldrh	r2, [r3, #0]
 800bfac:	4316      	orrs	r6, r2
 800bfae:	801e      	strh	r6, [r3, #0]
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800bfb0:	7a63      	ldrb	r3, [r4, #9]
 800bfb2:	ad0c      	add	r5, sp, #48	; 0x30
 800bfb4:	702b      	strb	r3, [r5, #0]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800bfb6:	2308      	movs	r3, #8
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800bfb8:	4f24      	ldr	r7, [pc, #144]	; (800c04c <RegionEU868NextChannel+0xe8>)
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800bfba:	56e3      	ldrsb	r3, [r4, r3]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
    countChannelsParams.JoinChannels = &joinChannels;

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800bfbc:	ae12      	add	r6, sp, #72	; 0x48
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800bfbe:	706b      	strb	r3, [r5, #1]
 800bfc0:	469c      	mov	ip, r3
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800bfc2:	683b      	ldr	r3, [r7, #0]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800bfc4:	930e      	str	r3, [sp, #56]	; 0x38
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800bfc6:	001a      	movs	r2, r3
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 800bfc8:	687b      	ldr	r3, [r7, #4]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800bfca:	32c0      	adds	r2, #192	; 0xc0
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 800bfcc:	930f      	str	r3, [sp, #60]	; 0x3c
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 800bfce:	2310      	movs	r3, #16
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800bfd0:	920d      	str	r2, [sp, #52]	; 0x34
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 800bfd2:	822b      	strh	r3, [r5, #16]
    countChannelsParams.JoinChannels = &joinChannels;
 800bfd4:	aa04      	add	r2, sp, #16
 800bfd6:	3b02      	subs	r3, #2
 800bfd8:	189b      	adds	r3, r3, r2
 800bfda:	9311      	str	r3, [sp, #68]	; 0x44
    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800bfdc:	6823      	ldr	r3, [r4, #0]
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800bfde:	0022      	movs	r2, r4
    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800bfe0:	9312      	str	r3, [sp, #72]	; 0x48
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800bfe2:	6863      	ldr	r3, [r4, #4]
    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800bfe4:	320c      	adds	r2, #12
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800bfe6:	9313      	str	r3, [sp, #76]	; 0x4c
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800bfe8:	7aa3      	ldrb	r3, [r4, #10]
 800bfea:	7233      	strb	r3, [r6, #8]
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 800bfec:	2306      	movs	r3, #6
 800bfee:	7273      	strb	r3, [r6, #9]
    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800bff0:	ab15      	add	r3, sp, #84	; 0x54
 800bff2:	ca03      	ldmia	r2!, {r0, r1}
 800bff4:	c303      	stmia	r3!, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800bff6:	7d23      	ldrb	r3, [r4, #20]
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800bff8:	4660      	mov	r0, ip
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800bffa:	7533      	strb	r3, [r6, #20]
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800bffc:	8ae1      	ldrh	r1, [r4, #22]
 800bffe:	f7ff fbc1 	bl	800b784 <GetTimeOnAir>

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800c002:	9b04      	ldr	r3, [sp, #16]
 800c004:	aa04      	add	r2, sp, #16
 800c006:	9301      	str	r3, [sp, #4]
 800c008:	230d      	movs	r3, #13
    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800c00a:	9519      	str	r5, [sp, #100]	; 0x64
    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800c00c:	189b      	adds	r3, r3, r2
 800c00e:	ad07      	add	r5, sp, #28
 800c010:	ac08      	add	r4, sp, #32
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800c012:	9018      	str	r0, [sp, #96]	; 0x60
    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800c014:	9300      	str	r3, [sp, #0]
 800c016:	0030      	movs	r0, r6
 800c018:	002b      	movs	r3, r5
 800c01a:	0022      	movs	r2, r4
 800c01c:	9905      	ldr	r1, [sp, #20]
 800c01e:	f7ff fb05 	bl	800b62c <RegionCommonIdentifyChannels>
 800c022:	1e06      	subs	r6, r0, #0
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800c024:	d109      	bne.n	800c03a <RegionEU868NextChannel+0xd6>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800c026:	7829      	ldrb	r1, [r5, #0]
 800c028:	3901      	subs	r1, #1
 800c02a:	f000 f90d 	bl	800c248 <randr>
 800c02e:	9a03      	ldr	r2, [sp, #12]
 800c030:	5c23      	ldrb	r3, [r4, r0]
 800c032:	7013      	strb	r3, [r2, #0]
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 800c034:	0030      	movs	r0, r6
 800c036:	b01b      	add	sp, #108	; 0x6c
 800c038:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 800c03a:	280c      	cmp	r0, #12
 800c03c:	d1fa      	bne.n	800c034 <RegionEU868NextChannel+0xd0>
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800c03e:	2207      	movs	r2, #7
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	33c0      	adds	r3, #192	; 0xc0
 800c044:	8819      	ldrh	r1, [r3, #0]
 800c046:	430a      	orrs	r2, r1
 800c048:	801a      	strh	r2, [r3, #0]
 800c04a:	e7f3      	b.n	800c034 <RegionEU868NextChannel+0xd0>
 800c04c:	20000ffc 	.word	0x20000ffc

0800c050 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 800c050:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800c052:	2500      	movs	r5, #0
{
 800c054:	b085      	sub	sp, #20
    uint8_t band = 0;
 800c056:	ab02      	add	r3, sp, #8
 800c058:	71dd      	strb	r5, [r3, #7]
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 800c05a:	7906      	ldrb	r6, [r0, #4]
{
 800c05c:	0004      	movs	r4, r0

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800c05e:	2e02      	cmp	r6, #2
 800c060:	d802      	bhi.n	800c068 <RegionEU868ChannelAdd+0x18>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800c062:	2006      	movs	r0, #6
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
    return LORAMAC_STATUS_OK;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 800c064:	b005      	add	sp, #20
 800c066:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800c068:	2003      	movs	r0, #3
    if( id >= EU868_MAX_NB_CHANNELS )
 800c06a:	2e0f      	cmp	r6, #15
 800c06c:	d8fa      	bhi.n	800c064 <RegionEU868ChannelAdd+0x14>
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800c06e:	6823      	ldr	r3, [r4, #0]
 800c070:	0029      	movs	r1, r5
 800c072:	7a18      	ldrb	r0, [r3, #8]
 800c074:	2207      	movs	r2, #7
 800c076:	0700      	lsls	r0, r0, #28
 800c078:	1700      	asrs	r0, r0, #28
 800c07a:	f7ff f841 	bl	800b100 <RegionCommonValueInRange>
 800c07e:	0007      	movs	r7, r0
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800c080:	2008      	movs	r0, #8
 800c082:	6823      	ldr	r3, [r4, #0]
 800c084:	0029      	movs	r1, r5
 800c086:	5618      	ldrsb	r0, [r3, r0]
 800c088:	2207      	movs	r2, #7
 800c08a:	1100      	asrs	r0, r0, #4
 800c08c:	f7ff f838 	bl	800b100 <RegionCommonValueInRange>
        drInvalid = true;
 800c090:	2501      	movs	r5, #1
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800c092:	2800      	cmp	r0, #0
 800c094:	d002      	beq.n	800c09c <RegionEU868ChannelAdd+0x4c>
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800c096:	427b      	negs	r3, r7
 800c098:	415f      	adcs	r7, r3
 800c09a:	b2fd      	uxtb	r5, r7
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 800c09c:	6820      	ldr	r0, [r4, #0]
 800c09e:	7a03      	ldrb	r3, [r0, #8]
 800c0a0:	071a      	lsls	r2, r3, #28
 800c0a2:	b25b      	sxtb	r3, r3
 800c0a4:	1712      	asrs	r2, r2, #28
 800c0a6:	111b      	asrs	r3, r3, #4
 800c0a8:	429a      	cmp	r2, r3
 800c0aa:	dd00      	ble.n	800c0ae <RegionEU868ChannelAdd+0x5e>
        drInvalid = true;
 800c0ac:	2501      	movs	r5, #1
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 800c0ae:	ab02      	add	r3, sp, #8
 800c0b0:	6800      	ldr	r0, [r0, #0]
 800c0b2:	1dd9      	adds	r1, r3, #7
 800c0b4:	f7ff fb90 	bl	800b7d8 <VerifyRfFreq>
 800c0b8:	2800      	cmp	r0, #0
 800c0ba:	d103      	bne.n	800c0c4 <RegionEU868ChannelAdd+0x74>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 800c0bc:	2004      	movs	r0, #4
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 800c0be:	2d00      	cmp	r5, #0
 800c0c0:	d0d0      	beq.n	800c064 <RegionEU868ChannelAdd+0x14>
 800c0c2:	e7ce      	b.n	800c062 <RegionEU868ChannelAdd+0x12>
        return LORAMAC_STATUS_DATARATE_INVALID;
 800c0c4:	2005      	movs	r0, #5
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 800c0c6:	2d00      	cmp	r5, #0
 800c0c8:	d1cc      	bne.n	800c064 <RegionEU868ChannelAdd+0x14>
    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 800c0ca:	220c      	movs	r2, #12
 800c0cc:	0013      	movs	r3, r2
 800c0ce:	4373      	muls	r3, r6
 800c0d0:	4f0a      	ldr	r7, [pc, #40]	; (800c0fc <RegionEU868ChannelAdd+0xac>)
 800c0d2:	9301      	str	r3, [sp, #4]
 800c0d4:	9901      	ldr	r1, [sp, #4]
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	1858      	adds	r0, r3, r1
 800c0da:	6821      	ldr	r1, [r4, #0]
 800c0dc:	f000 f8d0 	bl	800c280 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	9a01      	ldr	r2, [sp, #4]
 800c0e4:	a902      	add	r1, sp, #8
 800c0e6:	79c9      	ldrb	r1, [r1, #7]
 800c0e8:	189a      	adds	r2, r3, r2
 800c0ea:	7251      	strb	r1, [r2, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 800c0ec:	2101      	movs	r1, #1
 800c0ee:	40b1      	lsls	r1, r6
 800c0f0:	33c0      	adds	r3, #192	; 0xc0
 800c0f2:	881a      	ldrh	r2, [r3, #0]
    return LORAMAC_STATUS_OK;
 800c0f4:	0028      	movs	r0, r5
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 800c0f6:	430a      	orrs	r2, r1
 800c0f8:	801a      	strh	r2, [r3, #0]
    return LORAMAC_STATUS_OK;
 800c0fa:	e7b3      	b.n	800c064 <RegionEU868ChannelAdd+0x14>
 800c0fc:	20000ffc 	.word	0x20000ffc

0800c100 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 800c100:	b570      	push	{r4, r5, r6, lr}
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 800c102:	7805      	ldrb	r5, [r0, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
    {
        return false;
 800c104:	2100      	movs	r1, #0
    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800c106:	2d02      	cmp	r5, #2
 800c108:	d90e      	bls.n	800c128 <RegionEU868ChannelsRemove+0x28>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 800c10a:	220c      	movs	r2, #12
 800c10c:	0010      	movs	r0, r2
 800c10e:	4b07      	ldr	r3, [pc, #28]	; (800c12c <RegionEU868ChannelsRemove+0x2c>)
 800c110:	4368      	muls	r0, r5
 800c112:	681c      	ldr	r4, [r3, #0]
 800c114:	1820      	adds	r0, r4, r0
 800c116:	f002 f9a4 	bl	800e462 <memset>

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 800c11a:	0020      	movs	r0, r4
 800c11c:	0029      	movs	r1, r5
 800c11e:	2210      	movs	r2, #16
 800c120:	30c0      	adds	r0, #192	; 0xc0
 800c122:	f7fe fff7 	bl	800b114 <RegionCommonChanDisable>
 800c126:	0001      	movs	r1, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 800c128:	0008      	movs	r0, r1
 800c12a:	bd70      	pop	{r4, r5, r6, pc}
 800c12c:	20000ffc 	.word	0x20000ffc

0800c130 <RegionEU868ApplyCFList>:
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800c130:	2350      	movs	r3, #80	; 0x50
{
 800c132:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c134:	b087      	sub	sp, #28
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800c136:	ac03      	add	r4, sp, #12
 800c138:	7223      	strb	r3, [r4, #8]
    if( applyCFList->Size != 16 )
 800c13a:	7903      	ldrb	r3, [r0, #4]
{
 800c13c:	0007      	movs	r7, r0
    if( applyCFList->Size != 16 )
 800c13e:	2b10      	cmp	r3, #16
 800c140:	d12d      	bne.n	800c19e <RegionEU868ApplyCFList+0x6e>
    if( applyCFList->Payload[15] != 0 )
 800c142:	6803      	ldr	r3, [r0, #0]
 800c144:	7bde      	ldrb	r6, [r3, #15]
 800c146:	2e00      	cmp	r6, #0
 800c148:	d129      	bne.n	800c19e <RegionEU868ApplyCFList+0x6e>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800c14a:	2503      	movs	r5, #3
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 800c14c:	2d07      	cmp	r5, #7
 800c14e:	d817      	bhi.n	800c180 <RegionEU868ApplyCFList+0x50>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 800c150:	683a      	ldr	r2, [r7, #0]
 800c152:	5d91      	ldrb	r1, [r2, r6]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800c154:	1990      	adds	r0, r2, r6
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 800c156:	6021      	str	r1, [r4, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800c158:	7842      	ldrb	r2, [r0, #1]
 800c15a:	0212      	lsls	r2, r2, #8
 800c15c:	4311      	orrs	r1, r2
            newChannel.Frequency *= 100;
 800c15e:	2264      	movs	r2, #100	; 0x64
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800c160:	6021      	str	r1, [r4, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 800c162:	7883      	ldrb	r3, [r0, #2]
 800c164:	041b      	lsls	r3, r3, #16
 800c166:	430b      	orrs	r3, r1
            newChannel.Frequency *= 100;
 800c168:	4353      	muls	r3, r2
            newChannel.Rx1Frequency = 0;
 800c16a:	2200      	movs	r2, #0
            newChannel.Frequency *= 100;
 800c16c:	6023      	str	r3, [r4, #0]
            newChannel.Rx1Frequency = 0;
 800c16e:	6062      	str	r2, [r4, #4]
        if( newChannel.Frequency != 0 )
 800c170:	4293      	cmp	r3, r2
 800c172:	d10a      	bne.n	800c18a <RegionEU868ApplyCFList+0x5a>
            channelRemove.ChannelId = chanIdx;
 800c174:	466b      	mov	r3, sp
            RegionEU868ChannelsRemove( &channelRemove );
 800c176:	4668      	mov	r0, sp
            channelRemove.ChannelId = chanIdx;
 800c178:	701d      	strb	r5, [r3, #0]
            RegionEU868ChannelsRemove( &channelRemove );
 800c17a:	f7ff ffc1 	bl	800c100 <RegionEU868ChannelsRemove>
 800c17e:	e009      	b.n	800c194 <RegionEU868ApplyCFList+0x64>
            newChannel.Frequency = 0;
 800c180:	2300      	movs	r3, #0
 800c182:	6023      	str	r3, [r4, #0]
            newChannel.DrRange.Value = 0;
 800c184:	7223      	strb	r3, [r4, #8]
            newChannel.Rx1Frequency = 0;
 800c186:	6063      	str	r3, [r4, #4]
        if( newChannel.Frequency != 0 )
 800c188:	e7f4      	b.n	800c174 <RegionEU868ApplyCFList+0x44>
            channelAdd.NewChannel = &newChannel;
 800c18a:	a801      	add	r0, sp, #4
 800c18c:	9401      	str	r4, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 800c18e:	7105      	strb	r5, [r0, #4]
            RegionEU868ChannelAdd( &channelAdd );
 800c190:	f7ff ff5e 	bl	800c050 <RegionEU868ChannelAdd>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800c194:	3501      	adds	r5, #1
 800c196:	b2ed      	uxtb	r5, r5
 800c198:	3603      	adds	r6, #3
 800c19a:	2d10      	cmp	r5, #16
 800c19c:	d1d6      	bne.n	800c14c <RegionEU868ApplyCFList+0x1c>
}
 800c19e:	b007      	add	sp, #28
 800c1a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800c1a4 <RegionEU868NewChannelReq>:
{
 800c1a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if( newChannelReq->NewChannel->Frequency == 0 )
 800c1a6:	6802      	ldr	r2, [r0, #0]
        channelRemove.ChannelId = newChannelReq->ChannelId;
 800c1a8:	7903      	ldrb	r3, [r0, #4]
    if( newChannelReq->NewChannel->Frequency == 0 )
 800c1aa:	6811      	ldr	r1, [r2, #0]
 800c1ac:	2900      	cmp	r1, #0
 800c1ae:	d10a      	bne.n	800c1c6 <RegionEU868NewChannelReq+0x22>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 800c1b0:	a801      	add	r0, sp, #4
 800c1b2:	7003      	strb	r3, [r0, #0]
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 800c1b4:	f7ff ffa4 	bl	800c100 <RegionEU868ChannelsRemove>
    uint8_t status = 0x03;
 800c1b8:	2303      	movs	r3, #3
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 800c1ba:	2800      	cmp	r0, #0
 800c1bc:	d100      	bne.n	800c1c0 <RegionEU868NewChannelReq+0x1c>
            status &= 0xFC;
 800c1be:	2300      	movs	r3, #0
    return status;
 800c1c0:	b258      	sxtb	r0, r3
}
 800c1c2:	b005      	add	sp, #20
 800c1c4:	bd00      	pop	{pc}
        channelAdd.NewChannel = newChannelReq->NewChannel;
 800c1c6:	a802      	add	r0, sp, #8
 800c1c8:	9202      	str	r2, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 800c1ca:	7103      	strb	r3, [r0, #4]
        switch( RegionEU868ChannelAdd( &channelAdd ) )
 800c1cc:	f7ff ff40 	bl	800c050 <RegionEU868ChannelAdd>
 800c1d0:	2806      	cmp	r0, #6
 800c1d2:	d8f4      	bhi.n	800c1be <RegionEU868NewChannelReq+0x1a>
 800c1d4:	4b01      	ldr	r3, [pc, #4]	; (800c1dc <RegionEU868NewChannelReq+0x38>)
 800c1d6:	335c      	adds	r3, #92	; 0x5c
 800c1d8:	5c1b      	ldrb	r3, [r3, r0]
 800c1da:	e7f1      	b.n	800c1c0 <RegionEU868NewChannelReq+0x1c>
 800c1dc:	0800ea04 	.word	0x0800ea04

0800c1e0 <RegionEU868SetContinuousWave>:

void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 800c1e0:	b570      	push	{r4, r5, r6, lr}
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 800c1e2:	250c      	movs	r5, #12
 800c1e4:	7803      	ldrb	r3, [r0, #0]
 800c1e6:	4e0f      	ldr	r6, [pc, #60]	; (800c224 <RegionEU868SetContinuousWave+0x44>)
 800c1e8:	436b      	muls	r3, r5
 800c1ea:	6832      	ldr	r2, [r6, #0]
{
 800c1ec:	0004      	movs	r4, r0
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 800c1ee:	18d3      	adds	r3, r2, r3
 800c1f0:	7a5a      	ldrb	r2, [r3, #9]
 800c1f2:	2318      	movs	r3, #24
 800c1f4:	2102      	movs	r1, #2
 800c1f6:	2002      	movs	r0, #2
 800c1f8:	4353      	muls	r3, r2
 800c1fa:	6872      	ldr	r2, [r6, #4]
 800c1fc:	5620      	ldrsb	r0, [r4, r0]
 800c1fe:	18d3      	adds	r3, r2, r3
 800c200:	5659      	ldrsb	r1, [r3, r1]
 800c202:	f7ff fa72 	bl	800b6ea <RegionCommonLimitTxPower>
    int8_t phyTxPower = 0;
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 800c206:	7822      	ldrb	r2, [r4, #0]
 800c208:	6833      	ldr	r3, [r6, #0]
 800c20a:	4355      	muls	r5, r2

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 800c20c:	6861      	ldr	r1, [r4, #4]
 800c20e:	68a2      	ldr	r2, [r4, #8]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 800c210:	58ed      	ldr	r5, [r5, r3]
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 800c212:	f7ff f999 	bl	800b548 <RegionCommonComputeTxPower>

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800c216:	4b04      	ldr	r3, [pc, #16]	; (800c228 <RegionEU868SetContinuousWave+0x48>)
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 800c218:	0001      	movs	r1, r0
    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800c21a:	89a2      	ldrh	r2, [r4, #12]
 800c21c:	0028      	movs	r0, r5
 800c21e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c220:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 800c222:	bd70      	pop	{r4, r5, r6, pc}
 800c224:	20000ffc 	.word	0x20000ffc
 800c228:	0800eb54 	.word	0x0800eb54

0800c22c <RegionEU868ApplyDrOffset>:

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 800c22c:	1a8a      	subs	r2, r1, r2
 800c22e:	b252      	sxtb	r2, r2

    if( datarate < 0 )
    {
        datarate = DR_0;
    }
    return datarate;
 800c230:	1c10      	adds	r0, r2, #0
 800c232:	2a00      	cmp	r2, #0
 800c234:	da00      	bge.n	800c238 <RegionEU868ApplyDrOffset+0xc>
 800c236:	2000      	movs	r0, #0
 800c238:	b2c0      	uxtb	r0, r0
#else
    return 0;
#endif /* REGION_EU868 */
}
 800c23a:	4770      	bx	lr

0800c23c <srand1>:
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
}

void srand1( uint32_t seed )
{
    next = seed;
 800c23c:	4b01      	ldr	r3, [pc, #4]	; (800c244 <srand1+0x8>)
 800c23e:	6018      	str	r0, [r3, #0]
}
 800c240:	4770      	bx	lr
 800c242:	46c0      	nop			; (mov r8, r8)
 800c244:	200000cc 	.word	0x200000cc

0800c248 <randr>:
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800c248:	4b09      	ldr	r3, [pc, #36]	; (800c270 <randr+0x28>)
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 800c24a:	b570      	push	{r4, r5, r6, lr}
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800c24c:	681a      	ldr	r2, [r3, #0]
{
 800c24e:	0005      	movs	r5, r0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800c250:	4808      	ldr	r0, [pc, #32]	; (800c274 <randr+0x2c>)
{
 800c252:	000c      	movs	r4, r1
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800c254:	4350      	muls	r0, r2
 800c256:	4a08      	ldr	r2, [pc, #32]	; (800c278 <randr+0x30>)
 800c258:	4908      	ldr	r1, [pc, #32]	; (800c27c <randr+0x34>)
 800c25a:	1880      	adds	r0, r0, r2
 800c25c:	6018      	str	r0, [r3, #0]
 800c25e:	f7f4 f809 	bl	8000274 <__aeabi_uidivmod>
 800c262:	0008      	movs	r0, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 800c264:	1b61      	subs	r1, r4, r5
 800c266:	3101      	adds	r1, #1
 800c268:	f7f4 f8ee 	bl	8000448 <__aeabi_idivmod>
 800c26c:	1948      	adds	r0, r1, r5
}
 800c26e:	bd70      	pop	{r4, r5, r6, pc}
 800c270:	200000cc 	.word	0x200000cc
 800c274:	41c64e6d 	.word	0x41c64e6d
 800c278:	00003039 	.word	0x00003039
 800c27c:	7fffffff 	.word	0x7fffffff

0800c280 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 800c280:	2300      	movs	r3, #0
{
 800c282:	b510      	push	{r4, lr}
    while( size-- )
 800c284:	4293      	cmp	r3, r2
 800c286:	d100      	bne.n	800c28a <memcpy1+0xa>
    {
        *dst++ = *src++;
    }
}
 800c288:	bd10      	pop	{r4, pc}
        *dst++ = *src++;
 800c28a:	5ccc      	ldrb	r4, [r1, r3]
 800c28c:	54c4      	strb	r4, [r0, r3]
 800c28e:	3301      	adds	r3, #1
 800c290:	e7f8      	b.n	800c284 <memcpy1+0x4>

0800c292 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
 800c292:	1e53      	subs	r3, r2, #1
 800c294:	18c0      	adds	r0, r0, r3
    while( size-- )
 800c296:	2300      	movs	r3, #0
{
 800c298:	b530      	push	{r4, r5, lr}
    while( size-- )
 800c29a:	429a      	cmp	r2, r3
 800c29c:	d100      	bne.n	800c2a0 <memcpyr+0xe>
    {
        *dst-- = *src++;
    }
}
 800c29e:	bd30      	pop	{r4, r5, pc}
        *dst-- = *src++;
 800c2a0:	5ccd      	ldrb	r5, [r1, r3]
 800c2a2:	425c      	negs	r4, r3
 800c2a4:	5505      	strb	r5, [r0, r4]
 800c2a6:	3301      	adds	r3, #1
 800c2a8:	e7f7      	b.n	800c29a <memcpyr+0x8>

0800c2aa <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 800c2aa:	b510      	push	{r4, lr}
    while( size-- )
    {
        *dst++ = value;
 800c2ac:	f002 f8d9 	bl	800e462 <memset>
    }
}
 800c2b0:	bd10      	pop	{r4, pc}
	...

0800c2b4 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 800c2b4:	0002      	movs	r2, r0
 800c2b6:	b5f0      	push	{r4, r5, r6, r7, lr}
    const uint32_t reversedPolynom = 0xEDB88320;

    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;

    if( buffer == NULL )
 800c2b8:	2800      	cmp	r0, #0
 800c2ba:	d008      	beq.n	800c2ce <Crc32+0x1a>
    uint32_t crc = 0xFFFFFFFF;
 800c2bc:	2301      	movs	r3, #1
 800c2be:	2500      	movs	r5, #0
        return 0;
    }

    for( uint16_t i = 0; i < length; ++i )
    {
        crc ^= ( uint32_t )buffer[i];
 800c2c0:	2608      	movs	r6, #8
        for( uint16_t i = 0; i < 8; i++ )
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 800c2c2:	2701      	movs	r7, #1
    uint32_t crc = 0xFFFFFFFF;
 800c2c4:	425b      	negs	r3, r3
    for( uint16_t i = 0; i < length; ++i )
 800c2c6:	b2ac      	uxth	r4, r5
 800c2c8:	428c      	cmp	r4, r1
 800c2ca:	d301      	bcc.n	800c2d0 <Crc32+0x1c>
        }
    }

    return ~crc;
 800c2cc:	43d8      	mvns	r0, r3
}
 800c2ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
        crc ^= ( uint32_t )buffer[i];
 800c2d0:	5d54      	ldrb	r4, [r2, r5]
 800c2d2:	4063      	eors	r3, r4
 800c2d4:	0034      	movs	r4, r6
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 800c2d6:	0858      	lsrs	r0, r3, #1
 800c2d8:	4684      	mov	ip, r0
 800c2da:	403b      	ands	r3, r7
 800c2dc:	4805      	ldr	r0, [pc, #20]	; (800c2f4 <Crc32+0x40>)
 800c2de:	425b      	negs	r3, r3
 800c2e0:	4003      	ands	r3, r0
 800c2e2:	4660      	mov	r0, ip
        for( uint16_t i = 0; i < 8; i++ )
 800c2e4:	3c01      	subs	r4, #1
 800c2e6:	b2a4      	uxth	r4, r4
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 800c2e8:	4043      	eors	r3, r0
        for( uint16_t i = 0; i < 8; i++ )
 800c2ea:	2c00      	cmp	r4, #0
 800c2ec:	d1f3      	bne.n	800c2d6 <Crc32+0x22>
    for( uint16_t i = 0; i < length; ++i )
 800c2ee:	3501      	adds	r5, #1
 800c2f0:	e7e9      	b.n	800c2c6 <Crc32+0x12>
 800c2f2:	46c0      	nop			; (mov r8, r8)
 800c2f4:	edb88320 	.word	0xedb88320

0800c2f8 <SX1276GetStatus>:
    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
}

RadioState_t SX1276GetStatus( void )
{
    return SX1276.Settings.State;
 800c2f8:	4b01      	ldr	r3, [pc, #4]	; (800c300 <SX1276GetStatus+0x8>)
 800c2fa:	7918      	ldrb	r0, [r3, #4]
}
 800c2fc:	4770      	bx	lr
 800c2fe:	46c0      	nop			; (mov r8, r8)
 800c300:	20001004 	.word	0x20001004

0800c304 <GetFskBandwidthRegValue>:

static uint8_t GetFskBandwidthRegValue( uint32_t bw )
{
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 800c304:	4a09      	ldr	r2, [pc, #36]	; (800c32c <GetFskBandwidthRegValue+0x28>)
{
 800c306:	2300      	movs	r3, #0
 800c308:	0011      	movs	r1, r2
 800c30a:	b510      	push	{r4, lr}
    {
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 800c30c:	6814      	ldr	r4, [r2, #0]
 800c30e:	4284      	cmp	r4, r0
 800c310:	d802      	bhi.n	800c318 <GetFskBandwidthRegValue+0x14>
 800c312:	6894      	ldr	r4, [r2, #8]
 800c314:	4284      	cmp	r4, r0
 800c316:	d804      	bhi.n	800c322 <GetFskBandwidthRegValue+0x1e>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 800c318:	3301      	adds	r3, #1
 800c31a:	3208      	adds	r2, #8
 800c31c:	2b15      	cmp	r3, #21
 800c31e:	d1f5      	bne.n	800c30c <GetFskBandwidthRegValue+0x8>
        {
            return FskBandwidths[i].RegValue;
        }
    }
    // ERROR: Value not found
    while( 1 );
 800c320:	e7fe      	b.n	800c320 <GetFskBandwidthRegValue+0x1c>
            return FskBandwidths[i].RegValue;
 800c322:	00db      	lsls	r3, r3, #3
 800c324:	18cb      	adds	r3, r1, r3
 800c326:	7918      	ldrb	r0, [r3, #4]
}
 800c328:	bd10      	pop	{r4, pc}
 800c32a:	46c0      	nop			; (mov r8, r8)
 800c32c:	0800eaa4 	.word	0x0800eaa4

0800c330 <SX1276GetTimeOnAir>:
{
 800c330:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c332:	0014      	movs	r4, r2
 800c334:	aa08      	add	r2, sp, #32
 800c336:	8816      	ldrh	r6, [r2, #0]
 800c338:	aa09      	add	r2, sp, #36	; 0x24
 800c33a:	7817      	ldrb	r7, [r2, #0]
 800c33c:	aa0a      	add	r2, sp, #40	; 0x28
 800c33e:	7812      	ldrb	r2, [r2, #0]
 800c340:	000d      	movs	r5, r1
 800c342:	a90b      	add	r1, sp, #44	; 0x2c
 800c344:	4694      	mov	ip, r2
 800c346:	7809      	ldrb	r1, [r1, #0]
    switch( modem )
 800c348:	2800      	cmp	r0, #0
 800c34a:	d009      	beq.n	800c360 <SX1276GetTimeOnAir+0x30>
 800c34c:	2801      	cmp	r0, #1
 800c34e:	d017      	beq.n	800c380 <SX1276GetTimeOnAir+0x50>
 800c350:	2401      	movs	r4, #1
 800c352:	2000      	movs	r0, #0
    return ( numerator + denominator - 1 ) / denominator;
 800c354:	1900      	adds	r0, r0, r4
 800c356:	0021      	movs	r1, r4
 800c358:	3801      	subs	r0, #1
 800c35a:	f7f3 ff05 	bl	8000168 <__udivsi3>
}
 800c35e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    return ( preambleLen << 3 ) +
           ( ( fixLen == false ) ? 8 : 0 ) +
             ( syncWordLength << 3 ) +
             ( ( payloadLen +
               ( 0 ) + // Address filter size
               ( ( crcOn == true ) ? 2 : 0 ) 
 800c360:	1e4b      	subs	r3, r1, #1
 800c362:	4199      	sbcs	r1, r3
           ( ( fixLen == false ) ? 8 : 0 ) +
 800c364:	427b      	negs	r3, r7
 800c366:	415f      	adcs	r7, r3
               ( ( crcOn == true ) ? 2 : 0 ) 
 800c368:	0049      	lsls	r1, r1, #1
               ( 0 ) + // Address filter size
 800c36a:	000a      	movs	r2, r1
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
 800c36c:	20fa      	movs	r0, #250	; 0xfa
           ( ( fixLen == false ) ? 8 : 0 ) +
 800c36e:	19be      	adds	r6, r7, r6
    return ( preambleLen << 3 ) +
 800c370:	00f6      	lsls	r6, r6, #3
               ( 0 ) + // Address filter size
 800c372:	4462      	add	r2, ip
           ( ( fixLen == false ) ? 8 : 0 ) +
 800c374:	3618      	adds	r6, #24
               ) << 3 
 800c376:	00d2      	lsls	r2, r2, #3
             ( syncWordLength << 3 ) +
 800c378:	1996      	adds	r6, r2, r6
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
 800c37a:	0080      	lsls	r0, r0, #2
 800c37c:	4370      	muls	r0, r6
        break;
 800c37e:	e7e9      	b.n	800c354 <SX1276GetTimeOnAir+0x24>
static uint32_t SX1276GetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                              uint32_t datarate, uint8_t coderate,
                              uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                              bool crcOn )
{
    int32_t crDenom           = coderate + 4;
 800c380:	3304      	adds	r3, #4
 800c382:	9301      	str	r3, [sp, #4]
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or
    // SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800c384:	1f63      	subs	r3, r4, #5
 800c386:	2b01      	cmp	r3, #1
 800c388:	d804      	bhi.n	800c394 <SX1276GetTimeOnAir+0x64>
    {
        if( preambleLen < 12 )
 800c38a:	1c33      	adds	r3, r6, #0
 800c38c:	2e0c      	cmp	r6, #12
 800c38e:	d200      	bcs.n	800c392 <SX1276GetTimeOnAir+0x62>
 800c390:	230c      	movs	r3, #12
 800c392:	b29e      	uxth	r6, r3
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800c394:	2d00      	cmp	r5, #0
 800c396:	d136      	bne.n	800c406 <SX1276GetTimeOnAir+0xd6>
 800c398:	0023      	movs	r3, r4
 800c39a:	2001      	movs	r0, #1
 800c39c:	002a      	movs	r2, r5
 800c39e:	3b0b      	subs	r3, #11
 800c3a0:	4298      	cmp	r0, r3
 800c3a2:	416a      	adcs	r2, r5
 800c3a4:	0013      	movs	r3, r2
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800c3a6:	b2db      	uxtb	r3, r3
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
                            ( crcOn ? 16 : 0 ) -
 800c3a8:	1e48      	subs	r0, r1, #1
 800c3aa:	4181      	sbcs	r1, r0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800c3ac:	4662      	mov	r2, ip
                            ( crcOn ? 16 : 0 ) -
 800c3ae:	0108      	lsls	r0, r1, #4
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800c3b0:	00d2      	lsls	r2, r2, #3
 800c3b2:	1810      	adds	r0, r2, r0
                            ( 4 * datarate ) +
                            ( fixLen ? 0 : 20 );
 800c3b4:	2200      	movs	r2, #0
                            ( 4 * datarate ) +
 800c3b6:	00a1      	lsls	r1, r4, #2
                            ( crcOn ? 16 : 0 ) -
 800c3b8:	1a40      	subs	r0, r0, r1
                            ( fixLen ? 0 : 20 );
 800c3ba:	4297      	cmp	r7, r2
 800c3bc:	d100      	bne.n	800c3c0 <SX1276GetTimeOnAir+0x90>
 800c3be:	3214      	adds	r2, #20
                            ( 4 * datarate ) +
 800c3c0:	1880      	adds	r0, r0, r2
    {
        ceilNumerator += 8;

        if( lowDatareOptimize == true )
        {
            ceilDenominator = 4 * ( datarate - 2 );
 800c3c2:	1ea7      	subs	r7, r4, #2
    if( datarate <= 6 )
 800c3c4:	2c06      	cmp	r4, #6
 800c3c6:	d903      	bls.n	800c3d0 <SX1276GetTimeOnAir+0xa0>
        ceilNumerator += 8;
 800c3c8:	3008      	adds	r0, #8
        if( lowDatareOptimize == true )
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d000      	beq.n	800c3d0 <SX1276GetTimeOnAir+0xa0>
            ceilDenominator = 4 * ( datarate - 2 );
 800c3ce:	00b9      	lsls	r1, r7, #2
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800c3d0:	43c3      	mvns	r3, r0
 800c3d2:	17db      	asrs	r3, r3, #31
 800c3d4:	4018      	ands	r0, r3
 800c3d6:	1840      	adds	r0, r0, r1
 800c3d8:	3801      	subs	r0, #1
 800c3da:	f7f3 ff4f 	bl	800027c <__divsi3>
 800c3de:	9b01      	ldr	r3, [sp, #4]
 800c3e0:	4343      	muls	r3, r0
 800c3e2:	199e      	adds	r6, r3, r6

    if( datarate <= 6 )
    {
        intermediate += 2;
 800c3e4:	0032      	movs	r2, r6
 800c3e6:	320e      	adds	r2, #14
    if( datarate <= 6 )
 800c3e8:	2c06      	cmp	r4, #6
 800c3ea:	d900      	bls.n	800c3ee <SX1276GetTimeOnAir+0xbe>
    int32_t intermediate =
 800c3ec:	3a02      	subs	r2, #2
    switch( bw )
 800c3ee:	2d02      	cmp	r5, #2
 800c3f0:	d811      	bhi.n	800c416 <SX1276GetTimeOnAir+0xe6>
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800c3f2:	0092      	lsls	r2, r2, #2
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
 800c3f4:	20fa      	movs	r0, #250	; 0xfa
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800c3f6:	3201      	adds	r2, #1
 800c3f8:	40ba      	lsls	r2, r7
 800c3fa:	4b07      	ldr	r3, [pc, #28]	; (800c418 <SX1276GetTimeOnAir+0xe8>)
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
 800c3fc:	0080      	lsls	r0, r0, #2
 800c3fe:	00ad      	lsls	r5, r5, #2
 800c400:	4350      	muls	r0, r2
 800c402:	58ec      	ldr	r4, [r5, r3]
 800c404:	e7a6      	b.n	800c354 <SX1276GetTimeOnAir+0x24>
    bool    lowDatareOptimize = false;
 800c406:	2300      	movs	r3, #0
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800c408:	2d01      	cmp	r5, #1
 800c40a:	d1cd      	bne.n	800c3a8 <SX1276GetTimeOnAir+0x78>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800c40c:	0023      	movs	r3, r4
 800c40e:	3b0c      	subs	r3, #12
 800c410:	4258      	negs	r0, r3
 800c412:	4143      	adcs	r3, r0
 800c414:	e7c7      	b.n	800c3a6 <SX1276GetTimeOnAir+0x76>
    return ( numerator + denominator - 1 ) / denominator;
 800c416:	deff      	udf	#255	; 0xff
 800c418:	0800ea68 	.word	0x0800ea68

0800c41c <SX1276GetWakeupTime>:
{
 800c41c:	b510      	push	{r4, lr}
    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
 800c41e:	f7f6 fd4d 	bl	8002ebc <SX1276MB1MAS_RADIO_GetWakeUpTime>
 800c422:	3002      	adds	r0, #2
}
 800c424:	bd10      	pop	{r4, pc}

0800c426 <SX1276WriteBuffer>:
{
 800c426:	b570      	push	{r4, r5, r6, lr}
 800c428:	0006      	movs	r6, r0
    Sx_Board_ChipSelect( 0 );
 800c42a:	2000      	movs	r0, #0
{
 800c42c:	000c      	movs	r4, r1
 800c42e:	0015      	movs	r5, r2
    Sx_Board_ChipSelect( 0 );
 800c430:	f7f6 fee8 	bl	8003204 <SX1276MB1MAS_RADIO_ChipSelect>
    Sx_Board_SendRecv( addr | 0x80 );
 800c434:	2080      	movs	r0, #128	; 0x80
 800c436:	4330      	orrs	r0, r6
 800c438:	b280      	uxth	r0, r0
 800c43a:	f7f6 fed4 	bl	80031e6 <SX1276MB1MAS_RADIO_SendRecv>
    for( i = 0; i < size; i++ )
 800c43e:	1965      	adds	r5, r4, r5
 800c440:	42ac      	cmp	r4, r5
 800c442:	d103      	bne.n	800c44c <SX1276WriteBuffer+0x26>
    Sx_Board_ChipSelect( 1 );
 800c444:	2001      	movs	r0, #1
 800c446:	f7f6 fedd 	bl	8003204 <SX1276MB1MAS_RADIO_ChipSelect>
}
 800c44a:	bd70      	pop	{r4, r5, r6, pc}
        Sx_Board_SendRecv( buffer[i] );
 800c44c:	7820      	ldrb	r0, [r4, #0]
 800c44e:	f7f6 feca 	bl	80031e6 <SX1276MB1MAS_RADIO_SendRecv>
    for( i = 0; i < size; i++ )
 800c452:	3401      	adds	r4, #1
 800c454:	e7f4      	b.n	800c440 <SX1276WriteBuffer+0x1a>

0800c456 <SX1276Write>:
{
 800c456:	b507      	push	{r0, r1, r2, lr}
 800c458:	466b      	mov	r3, sp
 800c45a:	71d9      	strb	r1, [r3, #7]
 800c45c:	3307      	adds	r3, #7
    SX1276WriteBuffer( addr, &data, 1 );
 800c45e:	2201      	movs	r2, #1
 800c460:	0019      	movs	r1, r3
 800c462:	f7ff ffe0 	bl	800c426 <SX1276WriteBuffer>
}
 800c466:	bd07      	pop	{r0, r1, r2, pc}

0800c468 <SX1276SetChannel>:
{
 800c468:	b570      	push	{r4, r5, r6, lr}
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 800c46a:	4911      	ldr	r1, [pc, #68]	; (800c4b0 <SX1276SetChannel+0x48>)
{
 800c46c:	0005      	movs	r5, r0
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 800c46e:	f7f3 ff01 	bl	8000274 <__aeabi_uidivmod>
 800c472:	4b10      	ldr	r3, [pc, #64]	; (800c4b4 <SX1276SetChannel+0x4c>)
 800c474:	0208      	lsls	r0, r1, #8
 800c476:	18c0      	adds	r0, r0, r3
 800c478:	490d      	ldr	r1, [pc, #52]	; (800c4b0 <SX1276SetChannel+0x48>)
 800c47a:	f7f3 fe75 	bl	8000168 <__udivsi3>
    stepsInt = freqInHz / SX1276_PLL_STEP_SCALED;
 800c47e:	490c      	ldr	r1, [pc, #48]	; (800c4b0 <SX1276SetChannel+0x48>)
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 800c480:	0004      	movs	r4, r0
    stepsInt = freqInHz / SX1276_PLL_STEP_SCALED;
 800c482:	0028      	movs	r0, r5
 800c484:	f7f3 fe70 	bl	8000168 <__udivsi3>
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
 800c488:	0200      	lsls	r0, r0, #8
 800c48a:	1824      	adds	r4, r4, r0
    SX1276.Settings.Channel = freq;
 800c48c:	4b0a      	ldr	r3, [pc, #40]	; (800c4b8 <SX1276SetChannel+0x50>)
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freqInPllSteps >> 16 ) & 0xFF ) );
 800c48e:	0c21      	lsrs	r1, r4, #16
 800c490:	2006      	movs	r0, #6
 800c492:	b2c9      	uxtb	r1, r1
    SX1276.Settings.Channel = freq;
 800c494:	609d      	str	r5, [r3, #8]
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freqInPllSteps >> 16 ) & 0xFF ) );
 800c496:	f7ff ffde 	bl	800c456 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( freqInPllSteps >> 8 ) & 0xFF ) );
 800c49a:	0a21      	lsrs	r1, r4, #8
 800c49c:	2007      	movs	r0, #7
 800c49e:	b2c9      	uxtb	r1, r1
 800c4a0:	f7ff ffd9 	bl	800c456 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( freqInPllSteps & 0xFF ) );
 800c4a4:	2008      	movs	r0, #8
 800c4a6:	b2e1      	uxtb	r1, r4
 800c4a8:	f7ff ffd5 	bl	800c456 <SX1276Write>
}
 800c4ac:	bd70      	pop	{r4, r5, r6, pc}
 800c4ae:	46c0      	nop			; (mov r8, r8)
 800c4b0:	00003d09 	.word	0x00003d09
 800c4b4:	00001e84 	.word	0x00001e84
 800c4b8:	20001004 	.word	0x20001004

0800c4bc <SX1276ReadBuffer>:
{
 800c4bc:	b570      	push	{r4, r5, r6, lr}
 800c4be:	0005      	movs	r5, r0
    Sx_Board_ChipSelect( 0 );
 800c4c0:	2000      	movs	r0, #0
{
 800c4c2:	000c      	movs	r4, r1
 800c4c4:	0016      	movs	r6, r2
    Sx_Board_ChipSelect( 0 );
 800c4c6:	f7f6 fe9d 	bl	8003204 <SX1276MB1MAS_RADIO_ChipSelect>
    Sx_Board_SendRecv( addr & 0x7F );
 800c4ca:	207f      	movs	r0, #127	; 0x7f
 800c4cc:	4028      	ands	r0, r5
 800c4ce:	f7f6 fe8a 	bl	80031e6 <SX1276MB1MAS_RADIO_SendRecv>
    for( i = 0; i < size; i++ )
 800c4d2:	19a6      	adds	r6, r4, r6
 800c4d4:	42b4      	cmp	r4, r6
 800c4d6:	d103      	bne.n	800c4e0 <SX1276ReadBuffer+0x24>
    Sx_Board_ChipSelect( 1 );
 800c4d8:	2001      	movs	r0, #1
 800c4da:	f7f6 fe93 	bl	8003204 <SX1276MB1MAS_RADIO_ChipSelect>
}
 800c4de:	bd70      	pop	{r4, r5, r6, pc}
        buffer[i] = Sx_Board_SendRecv( 0 );
 800c4e0:	2000      	movs	r0, #0
 800c4e2:	f7f6 fe80 	bl	80031e6 <SX1276MB1MAS_RADIO_SendRecv>
 800c4e6:	7020      	strb	r0, [r4, #0]
    for( i = 0; i < size; i++ )
 800c4e8:	3401      	adds	r4, #1
 800c4ea:	e7f3      	b.n	800c4d4 <SX1276ReadBuffer+0x18>

0800c4ec <SX1276Read>:
{
 800c4ec:	b513      	push	{r0, r1, r4, lr}
    SX1276ReadBuffer( addr, &data, 1 );
 800c4ee:	466b      	mov	r3, sp
 800c4f0:	1ddc      	adds	r4, r3, #7
 800c4f2:	2201      	movs	r2, #1
 800c4f4:	0021      	movs	r1, r4
 800c4f6:	f7ff ffe1 	bl	800c4bc <SX1276ReadBuffer>
    return data;
 800c4fa:	7820      	ldrb	r0, [r4, #0]
}
 800c4fc:	bd16      	pop	{r1, r2, r4, pc}
	...

0800c500 <SX1276OnDio2Irq>:
            break;
    }
}

static void SX1276OnDio2Irq( void )
{
 800c500:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 800c502:	4c2c      	ldr	r4, [pc, #176]	; (800c5b4 <SX1276OnDio2Irq+0xb4>)
 800c504:	7925      	ldrb	r5, [r4, #4]
 800c506:	2d01      	cmp	r5, #1
 800c508:	d002      	beq.n	800c510 <SX1276OnDio2Irq+0x10>
 800c50a:	2d02      	cmp	r5, #2
 800c50c:	d049      	beq.n	800c5a2 <SX1276OnDio2Irq+0xa2>
            }
            break;
        default:
            break;
    }
}
 800c50e:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 800c510:	7963      	ldrb	r3, [r4, #5]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d017      	beq.n	800c546 <SX1276OnDio2Irq+0x46>
 800c516:	2b01      	cmp	r3, #1
 800c518:	d1f9      	bne.n	800c50e <SX1276OnDio2Irq+0xe>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 800c51a:	3453      	adds	r4, #83	; 0x53
 800c51c:	7823      	ldrb	r3, [r4, #0]
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 800c51e:	2102      	movs	r1, #2
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 800c520:	2b00      	cmp	r3, #0
 800c522:	d0f4      	beq.n	800c50e <SX1276OnDio2Irq+0xe>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 800c524:	2012      	movs	r0, #18
 800c526:	f7ff ff96 	bl	800c456 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 800c52a:	4b23      	ldr	r3, [pc, #140]	; (800c5b8 <SX1276OnDio2Irq+0xb8>)
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d0ed      	beq.n	800c50e <SX1276OnDio2Irq+0xe>
 800c532:	695c      	ldr	r4, [r3, #20]
 800c534:	2c00      	cmp	r4, #0
 800c536:	d0ea      	beq.n	800c50e <SX1276OnDio2Irq+0xe>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 800c538:	201c      	movs	r0, #28
 800c53a:	f7ff ffd7 	bl	800c4ec <SX1276Read>
 800c53e:	233f      	movs	r3, #63	; 0x3f
 800c540:	4018      	ands	r0, r3
 800c542:	47a0      	blx	r4
}
 800c544:	e7e3      	b.n	800c50e <SX1276OnDio2Irq+0xe>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 800c546:	0023      	movs	r3, r4
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 800c548:	0026      	movs	r6, r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 800c54a:	3330      	adds	r3, #48	; 0x30
 800c54c:	701d      	strb	r5, [r3, #0]
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 800c54e:	3631      	adds	r6, #49	; 0x31
 800c550:	7833      	ldrb	r3, [r6, #0]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d1db      	bne.n	800c50e <SX1276OnDio2Irq+0xe>
                    TimerStop( &RxTimeoutSyncWord );
 800c556:	0020      	movs	r0, r4
 800c558:	3068      	adds	r0, #104	; 0x68
 800c55a:	f001 fd33 	bl	800dfc4 <UTIL_TIMER_Stop>
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 800c55e:	2011      	movs	r0, #17
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 800c560:	7035      	strb	r5, [r6, #0]
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 800c562:	f7ff ffc3 	bl	800c4ec <SX1276Read>
 800c566:	0023      	movs	r3, r4
 800c568:	0840      	lsrs	r0, r0, #1
 800c56a:	3332      	adds	r3, #50	; 0x32
 800c56c:	4240      	negs	r0, r0
 800c56e:	7018      	strb	r0, [r3, #0]
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 800c570:	201b      	movs	r0, #27
 800c572:	f7ff ffbb 	bl	800c4ec <SX1276Read>
 800c576:	0005      	movs	r5, r0
                                                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) );
 800c578:	201c      	movs	r0, #28
 800c57a:	f7ff ffb7 	bl	800c4ec <SX1276Read>
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 800c57e:	022d      	lsls	r5, r5, #8
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 800c580:	4b0e      	ldr	r3, [pc, #56]	; (800c5bc <SX1276OnDio2Irq+0xbc>)
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 800c582:	4305      	orrs	r5, r0
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 800c584:	b2c0      	uxtb	r0, r0
 800c586:	4358      	muls	r0, r3
    freqInHzInt = pllSteps >> SX1276_PLL_STEP_SHIFT_AMOUNT;
 800c588:	0a2d      	lsrs	r5, r5, #8
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 800c58a:	435d      	muls	r5, r3
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 800c58c:	3080      	adds	r0, #128	; 0x80
 800c58e:	0a00      	lsrs	r0, r0, #8
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 800c590:	1940      	adds	r0, r0, r5
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 800c592:	6360      	str	r0, [r4, #52]	; 0x34
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 800c594:	200c      	movs	r0, #12
 800c596:	f7ff ffa9 	bl	800c4ec <SX1276Read>
 800c59a:	3438      	adds	r4, #56	; 0x38
 800c59c:	0940      	lsrs	r0, r0, #5
 800c59e:	7020      	strb	r0, [r4, #0]
 800c5a0:	e7b5      	b.n	800c50e <SX1276OnDio2Irq+0xe>
            switch( SX1276.Settings.Modem )
 800c5a2:	7963      	ldrb	r3, [r4, #5]
 800c5a4:	2b01      	cmp	r3, #1
 800c5a6:	d1b2      	bne.n	800c50e <SX1276OnDio2Irq+0xe>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 800c5a8:	3453      	adds	r4, #83	; 0x53
 800c5aa:	7823      	ldrb	r3, [r4, #0]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d0ae      	beq.n	800c50e <SX1276OnDio2Irq+0xe>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 800c5b0:	0029      	movs	r1, r5
 800c5b2:	e7b7      	b.n	800c524 <SX1276OnDio2Irq+0x24>
 800c5b4:	20001004 	.word	0x20001004
 800c5b8:	20001084 	.word	0x20001084
 800c5bc:	00003d09 	.word	0x00003d09

0800c5c0 <SX1276OnDio4Irq>:
    }
}

static void SX1276OnDio4Irq( void )
{
    switch( SX1276.Settings.Modem )
 800c5c0:	4b05      	ldr	r3, [pc, #20]	; (800c5d8 <SX1276OnDio4Irq+0x18>)
 800c5c2:	795a      	ldrb	r2, [r3, #5]
 800c5c4:	2a00      	cmp	r2, #0
 800c5c6:	d105      	bne.n	800c5d4 <SX1276OnDio4Irq+0x14>
    {
    case MODEM_FSK:
        {
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 800c5c8:	3330      	adds	r3, #48	; 0x30
 800c5ca:	781a      	ldrb	r2, [r3, #0]
 800c5cc:	2a00      	cmp	r2, #0
 800c5ce:	d101      	bne.n	800c5d4 <SX1276OnDio4Irq+0x14>
            {
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 800c5d0:	3201      	adds	r2, #1
 800c5d2:	701a      	strb	r2, [r3, #0]
    case MODEM_LORA:
        break;
    default:
        break;
    }
}
 800c5d4:	4770      	bx	lr
 800c5d6:	46c0      	nop			; (mov r8, r8)
 800c5d8:	20001004 	.word	0x20001004

0800c5dc <SX1276OnDio3Irq>:
{
 800c5dc:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.Modem )
 800c5de:	4b12      	ldr	r3, [pc, #72]	; (800c628 <SX1276OnDio3Irq+0x4c>)
 800c5e0:	795c      	ldrb	r4, [r3, #5]
 800c5e2:	2c01      	cmp	r4, #1
 800c5e4:	d112      	bne.n	800c60c <SX1276OnDio3Irq+0x30>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 800c5e6:	2012      	movs	r0, #18
 800c5e8:	f7ff ff80 	bl	800c4ec <SX1276Read>
 800c5ec:	0005      	movs	r5, r0
 800c5ee:	4e0f      	ldr	r6, [pc, #60]	; (800c62c <SX1276OnDio3Irq+0x50>)
 800c5f0:	4025      	ands	r5, r4
 800c5f2:	4220      	tst	r0, r4
 800c5f4:	d00b      	beq.n	800c60e <SX1276OnDio3Irq+0x32>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 800c5f6:	2105      	movs	r1, #5
 800c5f8:	2012      	movs	r0, #18
 800c5fa:	f7ff ff2c 	bl	800c456 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800c5fe:	6833      	ldr	r3, [r6, #0]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d003      	beq.n	800c60c <SX1276OnDio3Irq+0x30>
 800c604:	699b      	ldr	r3, [r3, #24]
                RadioEvents->CadDone( true );
 800c606:	0020      	movs	r0, r4
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d10b      	bne.n	800c624 <SX1276OnDio3Irq+0x48>
}
 800c60c:	bd70      	pop	{r4, r5, r6, pc}
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 800c60e:	2104      	movs	r1, #4
 800c610:	2012      	movs	r0, #18
 800c612:	f7ff ff20 	bl	800c456 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800c616:	6833      	ldr	r3, [r6, #0]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d0f7      	beq.n	800c60c <SX1276OnDio3Irq+0x30>
 800c61c:	699b      	ldr	r3, [r3, #24]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d0f4      	beq.n	800c60c <SX1276OnDio3Irq+0x30>
                RadioEvents->CadDone( false );
 800c622:	0028      	movs	r0, r5
 800c624:	4798      	blx	r3
}
 800c626:	e7f1      	b.n	800c60c <SX1276OnDio3Irq+0x30>
 800c628:	20001004 	.word	0x20001004
 800c62c:	20001084 	.word	0x20001084

0800c630 <SX1276SetOpMode.part.0>:
static void SX1276SetOpMode( uint8_t opMode )
 800c630:	b570      	push	{r4, r5, r6, lr}
 800c632:	0004      	movs	r4, r0
    else if ( opMode == RF_OPMODE_RECEIVER )
 800c634:	2805      	cmp	r0, #5
 800c636:	d111      	bne.n	800c65c <SX1276SetOpMode.part.0+0x2c>
      Sx_Board_SetXO( SET ); 
 800c638:	2001      	movs	r0, #1
 800c63a:	f7f6 fc41 	bl	8002ec0 <SX1276MB1MAS_RADIO_SetXO>
      Sx_Board_SetAntSw( RFSW_RX );
 800c63e:	2001      	movs	r0, #1
        Sx_Board_SetAntSw( RFSW_RFO_LP );
 800c640:	f7f6 fd94 	bl	800316c <SX1276MB1MAS_RADIO_SetAntSw>
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 800c644:	2001      	movs	r0, #1
 800c646:	f7ff ff51 	bl	800c4ec <SX1276Read>
 800c64a:	2307      	movs	r3, #7
 800c64c:	0001      	movs	r1, r0
 800c64e:	4399      	bics	r1, r3
 800c650:	4321      	orrs	r1, r4
 800c652:	2001      	movs	r0, #1
 800c654:	b2c9      	uxtb	r1, r1
 800c656:	f7ff fefe 	bl	800c456 <SX1276Write>
}
 800c65a:	bd70      	pop	{r4, r5, r6, pc}
      uint8_t paConfig =  SX1276Read( REG_PACONFIG );
 800c65c:	2009      	movs	r0, #9
 800c65e:	f7ff ff45 	bl	800c4ec <SX1276Read>
 800c662:	0005      	movs	r5, r0
      Sx_Board_SetXO( SET ); 
 800c664:	2001      	movs	r0, #1
 800c666:	f7f6 fc2b 	bl	8002ec0 <SX1276MB1MAS_RADIO_SetXO>
        Sx_Board_SetAntSw( RFSW_RFO_HP );
 800c66a:	2003      	movs	r0, #3
      if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 800c66c:	062b      	lsls	r3, r5, #24
 800c66e:	d4e7      	bmi.n	800c640 <SX1276SetOpMode.part.0+0x10>
        Sx_Board_SetAntSw( RFSW_RFO_LP );
 800c670:	2002      	movs	r0, #2
 800c672:	e7e5      	b.n	800c640 <SX1276SetOpMode.part.0+0x10>

0800c674 <SX1276SetStby>:
{
 800c674:	b510      	push	{r4, lr}
    TimerStop( &RxTimeoutTimer );
 800c676:	4c09      	ldr	r4, [pc, #36]	; (800c69c <SX1276SetStby+0x28>)
 800c678:	1d20      	adds	r0, r4, #4
 800c67a:	f001 fca3 	bl	800dfc4 <UTIL_TIMER_Stop>
    TimerStop( &TxTimeoutTimer );
 800c67e:	0020      	movs	r0, r4
 800c680:	301c      	adds	r0, #28
 800c682:	f001 fc9f 	bl	800dfc4 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutSyncWord );
 800c686:	4c06      	ldr	r4, [pc, #24]	; (800c6a0 <SX1276SetStby+0x2c>)
 800c688:	0020      	movs	r0, r4
 800c68a:	3068      	adds	r0, #104	; 0x68
 800c68c:	f001 fc9a 	bl	800dfc4 <UTIL_TIMER_Stop>
    if( opMode == RF_OPMODE_SLEEP )
 800c690:	2001      	movs	r0, #1
 800c692:	f7ff ffcd 	bl	800c630 <SX1276SetOpMode.part.0>
    SX1276.Settings.State = RF_IDLE;
 800c696:	2300      	movs	r3, #0
 800c698:	7123      	strb	r3, [r4, #4]
}
 800c69a:	bd10      	pop	{r4, pc}
 800c69c:	20001084 	.word	0x20001084
 800c6a0:	20001004 	.word	0x20001004

0800c6a4 <SX1276SetRx>:
{
 800c6a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6a6:	0007      	movs	r7, r0
    TimerStop( &TxTimeoutTimer );
 800c6a8:	4879      	ldr	r0, [pc, #484]	; (800c890 <SX1276SetRx+0x1ec>)
 800c6aa:	301c      	adds	r0, #28
 800c6ac:	f001 fc8a 	bl	800dfc4 <UTIL_TIMER_Stop>
    switch( SX1276.Settings.Modem )
 800c6b0:	4c78      	ldr	r4, [pc, #480]	; (800c894 <SX1276SetRx+0x1f0>)
 800c6b2:	7965      	ldrb	r5, [r4, #5]
 800c6b4:	2d00      	cmp	r5, #0
 800c6b6:	d02f      	beq.n	800c718 <SX1276SetRx+0x74>
 800c6b8:	2600      	movs	r6, #0
 800c6ba:	2d01      	cmp	r5, #1
 800c6bc:	d151      	bne.n	800c762 <SX1276SetRx+0xbe>
            if( SX1276.Settings.LoRa.IqInverted == true )
 800c6be:	0023      	movs	r3, r4
 800c6c0:	3355      	adds	r3, #85	; 0x55
 800c6c2:	781b      	ldrb	r3, [r3, #0]
 800c6c4:	2641      	movs	r6, #65	; 0x41
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 800c6c6:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d100      	bne.n	800c6ce <SX1276SetRx+0x2a>
 800c6cc:	e06f      	b.n	800c7ae <SX1276SetRx+0x10a>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 800c6ce:	f7ff ff0d 	bl	800c4ec <SX1276Read>
 800c6d2:	4306      	orrs	r6, r0
 800c6d4:	b2f1      	uxtb	r1, r6
 800c6d6:	2033      	movs	r0, #51	; 0x33
 800c6d8:	f7ff febd 	bl	800c456 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 800c6dc:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800c6de:	203b      	movs	r0, #59	; 0x3b
 800c6e0:	f7ff feb9 	bl	800c456 <SX1276Write>
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 800c6e4:	6c63      	ldr	r3, [r4, #68]	; 0x44
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 800c6e6:	2031      	movs	r0, #49	; 0x31
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 800c6e8:	2b08      	cmp	r3, #8
 800c6ea:	d900      	bls.n	800c6ee <SX1276SetRx+0x4a>
 800c6ec:	e0b8      	b.n	800c860 <SX1276SetRx+0x1bc>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 800c6ee:	f7ff fefd 	bl	800c4ec <SX1276Read>
 800c6f2:	217f      	movs	r1, #127	; 0x7f
 800c6f4:	4001      	ands	r1, r0
 800c6f6:	2031      	movs	r0, #49	; 0x31
 800c6f8:	f7ff fead 	bl	800c456 <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 800c6fc:	2030      	movs	r0, #48	; 0x30
 800c6fe:	2100      	movs	r1, #0
 800c700:	f7ff fea9 	bl	800c456 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 800c704:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800c706:	2808      	cmp	r0, #8
 800c708:	d865      	bhi.n	800c7d6 <SX1276SetRx+0x132>
 800c70a:	f7f3 fd0f 	bl	800012c <__gnu_thumb1_case_uqi>
 800c70e:	815b      	.short	0x815b
 800c710:	9d968f88 	.word	0x9d968f88
 800c714:	a4a4      	.short	0xa4a4
 800c716:	a4          	.byte	0xa4
 800c717:	00          	.byte	0x00
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 800c718:	1de3      	adds	r3, r4, #7
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800c71a:	2040      	movs	r0, #64	; 0x40
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 800c71c:	7fde      	ldrb	r6, [r3, #31]
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800c71e:	f7ff fee5 	bl	800c4ec <SX1276Read>
                                                                            RF_DIOMAPPING1_DIO0_00 |
 800c722:	2103      	movs	r1, #3
 800c724:	4008      	ands	r0, r1
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800c726:	3109      	adds	r1, #9
 800c728:	4301      	orrs	r1, r0
 800c72a:	2040      	movs	r0, #64	; 0x40
 800c72c:	f7ff fe93 	bl	800c456 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 800c730:	2041      	movs	r0, #65	; 0x41
 800c732:	f7ff fedb 	bl	800c4ec <SX1276Read>
 800c736:	213f      	movs	r1, #63	; 0x3f
 800c738:	4249      	negs	r1, r1
 800c73a:	4301      	orrs	r1, r0
 800c73c:	b2c9      	uxtb	r1, r1
 800c73e:	2041      	movs	r0, #65	; 0x41
 800c740:	f7ff fe89 	bl	800c456 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 800c744:	2035      	movs	r0, #53	; 0x35
 800c746:	f7ff fed1 	bl	800c4ec <SX1276Read>
 800c74a:	233f      	movs	r3, #63	; 0x3f
 800c74c:	4018      	ands	r0, r3
 800c74e:	0023      	movs	r3, r4
 800c750:	333e      	adds	r3, #62	; 0x3e
 800c752:	7018      	strb	r0, [r3, #0]
            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 800c754:	211e      	movs	r1, #30
 800c756:	200d      	movs	r0, #13
 800c758:	f7ff fe7d 	bl	800c456 <SX1276Write>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800c75c:	8625      	strh	r5, [r4, #48]	; 0x30
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800c75e:	87a5      	strh	r5, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 800c760:	8765      	strh	r5, [r4, #58]	; 0x3a
    memset( RxTxBuffer, 0, ( size_t )RX_TX_BUFFER_SIZE );
 800c762:	2280      	movs	r2, #128	; 0x80
 800c764:	2100      	movs	r1, #0
 800c766:	484c      	ldr	r0, [pc, #304]	; (800c898 <SX1276SetRx+0x1f4>)
 800c768:	0052      	lsls	r2, r2, #1
 800c76a:	f001 fe7a 	bl	800e462 <memset>
    SX1276.Settings.State = RF_RX_RUNNING;
 800c76e:	2301      	movs	r3, #1
 800c770:	7123      	strb	r3, [r4, #4]
    if( timeout != 0 )
 800c772:	2f00      	cmp	r7, #0
 800c774:	d008      	beq.n	800c788 <SX1276SetRx+0xe4>
        TimerSetValue( &RxTimeoutTimer, timeout );
 800c776:	4b46      	ldr	r3, [pc, #280]	; (800c890 <SX1276SetRx+0x1ec>)
 800c778:	0039      	movs	r1, r7
 800c77a:	1d1d      	adds	r5, r3, #4
 800c77c:	0028      	movs	r0, r5
 800c77e:	f001 fcb7 	bl	800e0f0 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800c782:	0028      	movs	r0, r5
 800c784:	f001 fc72 	bl	800e06c <UTIL_TIMER_Start>
    if( SX1276.Settings.Modem == MODEM_FSK )
 800c788:	7963      	ldrb	r3, [r4, #5]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d000      	beq.n	800c790 <SX1276SetRx+0xec>
 800c78e:	e078      	b.n	800c882 <SX1276SetRx+0x1de>
    if( opMode == RF_OPMODE_SLEEP )
 800c790:	2005      	movs	r0, #5
 800c792:	f7ff ff4d 	bl	800c630 <SX1276SetOpMode.part.0>
        if( rxContinuous == false )
 800c796:	2e00      	cmp	r6, #0
 800c798:	d108      	bne.n	800c7ac <SX1276SetRx+0x108>
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 800c79a:	0025      	movs	r5, r4
 800c79c:	3568      	adds	r5, #104	; 0x68
 800c79e:	0028      	movs	r0, r5
 800c7a0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c7a2:	f001 fca5 	bl	800e0f0 <UTIL_TIMER_SetPeriod>
            TimerStart( &RxTimeoutSyncWord );
 800c7a6:	0028      	movs	r0, r5
 800c7a8:	f001 fc60 	bl	800e06c <UTIL_TIMER_Start>
}
 800c7ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 800c7ae:	f7ff fe9d 	bl	800c4ec <SX1276Read>
 800c7b2:	0001      	movs	r1, r0
 800c7b4:	43b1      	bics	r1, r6
 800c7b6:	4329      	orrs	r1, r5
 800c7b8:	b2c9      	uxtb	r1, r1
 800c7ba:	2033      	movs	r0, #51	; 0x33
 800c7bc:	f7ff fe4b 	bl	800c456 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800c7c0:	211d      	movs	r1, #29
 800c7c2:	e78c      	b.n	800c6de <SX1276SetRx+0x3a>
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 800c7c4:	2148      	movs	r1, #72	; 0x48
 800c7c6:	202f      	movs	r0, #47	; 0x2f
 800c7c8:	f7ff fe45 	bl	800c456 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 800c7cc:	68a3      	ldr	r3, [r4, #8]
 800c7ce:	4a33      	ldr	r2, [pc, #204]	; (800c89c <SX1276SetRx+0x1f8>)
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 800c7d0:	1898      	adds	r0, r3, r2
 800c7d2:	f7ff fe49 	bl	800c468 <SX1276SetChannel>
            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 800c7d6:	0023      	movs	r3, r4
 800c7d8:	3356      	adds	r3, #86	; 0x56
 800c7da:	781e      	ldrb	r6, [r3, #0]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800c7dc:	0023      	movs	r3, r4
 800c7de:	3353      	adds	r3, #83	; 0x53
 800c7e0:	781b      	ldrb	r3, [r3, #0]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d044      	beq.n	800c870 <SX1276SetRx+0x1cc>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 800c7e6:	211d      	movs	r1, #29
 800c7e8:	2011      	movs	r0, #17
 800c7ea:	f7ff fe34 	bl	800c456 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 800c7ee:	2040      	movs	r0, #64	; 0x40
 800c7f0:	f7ff fe7c 	bl	800c4ec <SX1276Read>
 800c7f4:	2133      	movs	r1, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 800c7f6:	4001      	ands	r1, r0
 800c7f8:	2040      	movs	r0, #64	; 0x40
 800c7fa:	f7ff fe2c 	bl	800c456 <SX1276Write>
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 800c7fe:	2100      	movs	r1, #0
 800c800:	200f      	movs	r0, #15
 800c802:	f7ff fe28 	bl	800c456 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 800c806:	2100      	movs	r1, #0
 800c808:	200d      	movs	r0, #13
 800c80a:	f7ff fe24 	bl	800c456 <SX1276Write>
        break;
 800c80e:	e7a8      	b.n	800c762 <SX1276SetRx+0xbe>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 800c810:	2144      	movs	r1, #68	; 0x44
 800c812:	202f      	movs	r0, #47	; 0x2f
 800c814:	f7ff fe1f 	bl	800c456 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 800c818:	68a3      	ldr	r3, [r4, #8]
 800c81a:	4a21      	ldr	r2, [pc, #132]	; (800c8a0 <SX1276SetRx+0x1fc>)
 800c81c:	e7d8      	b.n	800c7d0 <SX1276SetRx+0x12c>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 800c81e:	2144      	movs	r1, #68	; 0x44
 800c820:	202f      	movs	r0, #47	; 0x2f
 800c822:	f7ff fe18 	bl	800c456 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 800c826:	68a3      	ldr	r3, [r4, #8]
 800c828:	4a1e      	ldr	r2, [pc, #120]	; (800c8a4 <SX1276SetRx+0x200>)
 800c82a:	e7d1      	b.n	800c7d0 <SX1276SetRx+0x12c>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 800c82c:	2144      	movs	r1, #68	; 0x44
 800c82e:	202f      	movs	r0, #47	; 0x2f
 800c830:	f7ff fe11 	bl	800c456 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 800c834:	68a3      	ldr	r3, [r4, #8]
 800c836:	4a1c      	ldr	r2, [pc, #112]	; (800c8a8 <SX1276SetRx+0x204>)
 800c838:	e7ca      	b.n	800c7d0 <SX1276SetRx+0x12c>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 800c83a:	2144      	movs	r1, #68	; 0x44
 800c83c:	202f      	movs	r0, #47	; 0x2f
 800c83e:	f7ff fe0a 	bl	800c456 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 800c842:	68a3      	ldr	r3, [r4, #8]
 800c844:	4a19      	ldr	r2, [pc, #100]	; (800c8ac <SX1276SetRx+0x208>)
 800c846:	e7c3      	b.n	800c7d0 <SX1276SetRx+0x12c>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 800c848:	2144      	movs	r1, #68	; 0x44
 800c84a:	202f      	movs	r0, #47	; 0x2f
 800c84c:	f7ff fe03 	bl	800c456 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 800c850:	68a3      	ldr	r3, [r4, #8]
 800c852:	4a17      	ldr	r2, [pc, #92]	; (800c8b0 <SX1276SetRx+0x20c>)
 800c854:	e7bc      	b.n	800c7d0 <SX1276SetRx+0x12c>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 800c856:	2140      	movs	r1, #64	; 0x40
 800c858:	202f      	movs	r0, #47	; 0x2f
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 800c85a:	f7ff fdfc 	bl	800c456 <SX1276Write>
 800c85e:	e7ba      	b.n	800c7d6 <SX1276SetRx+0x132>
 800c860:	f7ff fe44 	bl	800c4ec <SX1276Read>
 800c864:	2180      	movs	r1, #128	; 0x80
 800c866:	4249      	negs	r1, r1
 800c868:	4301      	orrs	r1, r0
 800c86a:	b2c9      	uxtb	r1, r1
 800c86c:	2031      	movs	r0, #49	; 0x31
 800c86e:	e7f4      	b.n	800c85a <SX1276SetRx+0x1b6>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 800c870:	211f      	movs	r1, #31
 800c872:	2011      	movs	r0, #17
 800c874:	f7ff fdef 	bl	800c456 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 800c878:	2040      	movs	r0, #64	; 0x40
 800c87a:	f7ff fe37 	bl	800c4ec <SX1276Read>
 800c87e:	213f      	movs	r1, #63	; 0x3f
 800c880:	e7b9      	b.n	800c7f6 <SX1276SetRx+0x152>
        if( rxContinuous == true )
 800c882:	2005      	movs	r0, #5
 800c884:	2e00      	cmp	r6, #0
 800c886:	d100      	bne.n	800c88a <SX1276SetRx+0x1e6>
    if( opMode == RF_OPMODE_SLEEP )
 800c888:	2006      	movs	r0, #6
 800c88a:	f7ff fed1 	bl	800c630 <SX1276SetOpMode.part.0>
}
 800c88e:	e78d      	b.n	800c7ac <SX1276SetRx+0x108>
 800c890:	20001084 	.word	0x20001084
 800c894:	20001004 	.word	0x20001004
 800c898:	200010b8 	.word	0x200010b8
 800c89c:	00001e82 	.word	0x00001e82
 800c8a0:	000028b4 	.word	0x000028b4
 800c8a4:	00003d04 	.word	0x00003d04
 800c8a8:	0000515e 	.word	0x0000515e
 800c8ac:	00007a12 	.word	0x00007a12
 800c8b0:	0000a2c6 	.word	0x0000a2c6

0800c8b4 <SX1276StartCad>:
{
 800c8b4:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.Modem )
 800c8b6:	4c0b      	ldr	r4, [pc, #44]	; (800c8e4 <SX1276StartCad+0x30>)
 800c8b8:	7963      	ldrb	r3, [r4, #5]
 800c8ba:	2b01      	cmp	r3, #1
 800c8bc:	d110      	bne.n	800c8e0 <SX1276StartCad+0x2c>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800c8be:	21fa      	movs	r1, #250	; 0xfa
 800c8c0:	2011      	movs	r0, #17
 800c8c2:	f7ff fdc8 	bl	800c456 <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 800c8c6:	2040      	movs	r0, #64	; 0x40
 800c8c8:	f7ff fe10 	bl	800c4ec <SX1276Read>
 800c8cc:	2503      	movs	r5, #3
 800c8ce:	43a8      	bics	r0, r5
 800c8d0:	b2c1      	uxtb	r1, r0
 800c8d2:	2040      	movs	r0, #64	; 0x40
 800c8d4:	f7ff fdbf 	bl	800c456 <SX1276Write>
            SX1276.Settings.State = RF_CAD;
 800c8d8:	2007      	movs	r0, #7
 800c8da:	7125      	strb	r5, [r4, #4]
    if( opMode == RF_OPMODE_SLEEP )
 800c8dc:	f7ff fea8 	bl	800c630 <SX1276SetOpMode.part.0>
}
 800c8e0:	bd70      	pop	{r4, r5, r6, pc}
 800c8e2:	46c0      	nop			; (mov r8, r8)
 800c8e4:	20001004 	.word	0x20001004

0800c8e8 <SX1276ReadRssi>:
{
 800c8e8:	b510      	push	{r4, lr}
    switch( modem )
 800c8ea:	2800      	cmp	r0, #0
 800c8ec:	d004      	beq.n	800c8f8 <SX1276ReadRssi+0x10>
 800c8ee:	2801      	cmp	r0, #1
 800c8f0:	d00a      	beq.n	800c908 <SX1276ReadRssi+0x20>
 800c8f2:	2001      	movs	r0, #1
 800c8f4:	4240      	negs	r0, r0
}
 800c8f6:	bd10      	pop	{r4, pc}
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 800c8f8:	2011      	movs	r0, #17
 800c8fa:	f7ff fdf7 	bl	800c4ec <SX1276Read>
 800c8fe:	0840      	lsrs	r0, r0, #1
 800c900:	b2c0      	uxtb	r0, r0
 800c902:	4240      	negs	r0, r0
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 800c904:	b200      	sxth	r0, r0
 800c906:	e7f6      	b.n	800c8f6 <SX1276ReadRssi+0xe>
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800c908:	4a06      	ldr	r2, [pc, #24]	; (800c924 <SX1276ReadRssi+0x3c>)
 800c90a:	4b07      	ldr	r3, [pc, #28]	; (800c928 <SX1276ReadRssi+0x40>)
 800c90c:	6892      	ldr	r2, [r2, #8]
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 800c90e:	201b      	movs	r0, #27
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800c910:	429a      	cmp	r2, r3
 800c912:	d903      	bls.n	800c91c <SX1276ReadRssi+0x34>
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 800c914:	f7ff fdea 	bl	800c4ec <SX1276Read>
 800c918:	389d      	subs	r0, #157	; 0x9d
 800c91a:	e7f3      	b.n	800c904 <SX1276ReadRssi+0x1c>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 800c91c:	f7ff fde6 	bl	800c4ec <SX1276Read>
 800c920:	38a4      	subs	r0, #164	; 0xa4
 800c922:	e7ef      	b.n	800c904 <SX1276ReadRssi+0x1c>
 800c924:	20001004 	.word	0x20001004
 800c928:	1f4add40 	.word	0x1f4add40

0800c92c <SX1276SetOpMode.constprop.0>:
static void SX1276SetOpMode( uint8_t opMode )
 800c92c:	b510      	push	{r4, lr}
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 800c92e:	2001      	movs	r0, #1
 800c930:	f7ff fddc 	bl	800c4ec <SX1276Read>
 800c934:	21f8      	movs	r1, #248	; 0xf8
 800c936:	4001      	ands	r1, r0
 800c938:	2001      	movs	r0, #1
 800c93a:	f7ff fd8c 	bl	800c456 <SX1276Write>
      Sx_Board_SetAntSw( RFSW_OFF );
 800c93e:	2000      	movs	r0, #0
 800c940:	f7f6 fc14 	bl	800316c <SX1276MB1MAS_RADIO_SetAntSw>
      Sx_Board_SetXO( RESET ); 
 800c944:	2000      	movs	r0, #0
 800c946:	f7f6 fabb 	bl	8002ec0 <SX1276MB1MAS_RADIO_SetXO>
}
 800c94a:	bd10      	pop	{r4, pc}

0800c94c <SX1276SetModem>:
{
 800c94c:	b510      	push	{r4, lr}
 800c94e:	0004      	movs	r4, r0
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 800c950:	2001      	movs	r0, #1
 800c952:	f7ff fdcb 	bl	800c4ec <SX1276Read>
 800c956:	b2c0      	uxtb	r0, r0
 800c958:	4b16      	ldr	r3, [pc, #88]	; (800c9b4 <SX1276SetModem+0x68>)
        SX1276.Settings.Modem = MODEM_LORA;
 800c95a:	09c0      	lsrs	r0, r0, #7
    if( SX1276.Settings.Modem == modem )
 800c95c:	42a0      	cmp	r0, r4
 800c95e:	d101      	bne.n	800c964 <SX1276SetModem+0x18>
 800c960:	7158      	strb	r0, [r3, #5]
}
 800c962:	bd10      	pop	{r4, pc}
    SX1276.Settings.Modem = modem;
 800c964:	715c      	strb	r4, [r3, #5]
    switch( SX1276.Settings.Modem )
 800c966:	2c01      	cmp	r4, #1
 800c968:	d012      	beq.n	800c990 <SX1276SetModem+0x44>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 800c96a:	f7ff ffdf 	bl	800c92c <SX1276SetOpMode.constprop.0>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 800c96e:	2001      	movs	r0, #1
 800c970:	f7ff fdbc 	bl	800c4ec <SX1276Read>
 800c974:	217f      	movs	r1, #127	; 0x7f
 800c976:	4001      	ands	r1, r0
 800c978:	2001      	movs	r0, #1
 800c97a:	f7ff fd6c 	bl	800c456 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 800c97e:	2100      	movs	r1, #0
 800c980:	2040      	movs	r0, #64	; 0x40
 800c982:	f7ff fd68 	bl	800c456 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 800c986:	2130      	movs	r1, #48	; 0x30
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 800c988:	2041      	movs	r0, #65	; 0x41
 800c98a:	f7ff fd64 	bl	800c456 <SX1276Write>
        break;
 800c98e:	e7e8      	b.n	800c962 <SX1276SetModem+0x16>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 800c990:	f7ff ffcc 	bl	800c92c <SX1276SetOpMode.constprop.0>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 800c994:	0020      	movs	r0, r4
 800c996:	f7ff fda9 	bl	800c4ec <SX1276Read>
 800c99a:	2180      	movs	r1, #128	; 0x80
 800c99c:	4249      	negs	r1, r1
 800c99e:	4301      	orrs	r1, r0
 800c9a0:	b2c9      	uxtb	r1, r1
 800c9a2:	0020      	movs	r0, r4
 800c9a4:	f7ff fd57 	bl	800c456 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 800c9a8:	2100      	movs	r1, #0
 800c9aa:	2040      	movs	r0, #64	; 0x40
 800c9ac:	f7ff fd53 	bl	800c456 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 800c9b0:	2100      	movs	r1, #0
 800c9b2:	e7e9      	b.n	800c988 <SX1276SetModem+0x3c>
 800c9b4:	20001004 	.word	0x20001004

0800c9b8 <SX1276SetMaxPayloadLength>:
{
 800c9b8:	b570      	push	{r4, r5, r6, lr}
 800c9ba:	0004      	movs	r4, r0
 800c9bc:	000d      	movs	r5, r1
    SX1276SetModem( modem );
 800c9be:	f7ff ffc5 	bl	800c94c <SX1276SetModem>
    switch( modem )
 800c9c2:	2c00      	cmp	r4, #0
 800c9c4:	d002      	beq.n	800c9cc <SX1276SetMaxPayloadLength+0x14>
 800c9c6:	2c01      	cmp	r4, #1
 800c9c8:	d00a      	beq.n	800c9e0 <SX1276SetMaxPayloadLength+0x28>
}
 800c9ca:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1276.Settings.Fsk.FixLen == false )
 800c9cc:	4b06      	ldr	r3, [pc, #24]	; (800c9e8 <SX1276SetMaxPayloadLength+0x30>)
 800c9ce:	3303      	adds	r3, #3
 800c9d0:	7fdb      	ldrb	r3, [r3, #31]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d1f9      	bne.n	800c9ca <SX1276SetMaxPayloadLength+0x12>
            SX1276Write( REG_PAYLOADLENGTH, max );
 800c9d6:	0029      	movs	r1, r5
 800c9d8:	2032      	movs	r0, #50	; 0x32
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 800c9da:	f7ff fd3c 	bl	800c456 <SX1276Write>
}
 800c9de:	e7f4      	b.n	800c9ca <SX1276SetMaxPayloadLength+0x12>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 800c9e0:	0029      	movs	r1, r5
 800c9e2:	2023      	movs	r0, #35	; 0x23
 800c9e4:	e7f9      	b.n	800c9da <SX1276SetMaxPayloadLength+0x22>
 800c9e6:	46c0      	nop			; (mov r8, r8)
 800c9e8:	20001004 	.word	0x20001004

0800c9ec <SX1276SetPublicNetwork>:
{
 800c9ec:	b510      	push	{r4, lr}
 800c9ee:	0004      	movs	r4, r0
    SX1276SetModem( MODEM_LORA );
 800c9f0:	2001      	movs	r0, #1
 800c9f2:	f7ff ffab 	bl	800c94c <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 800c9f6:	4b05      	ldr	r3, [pc, #20]	; (800ca0c <SX1276SetPublicNetwork+0x20>)
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 800c9f8:	2134      	movs	r1, #52	; 0x34
    SX1276.Settings.LoRa.PublicNetwork = enable;
 800c9fa:	335c      	adds	r3, #92	; 0x5c
 800c9fc:	701c      	strb	r4, [r3, #0]
    if( enable == true )
 800c9fe:	2c00      	cmp	r4, #0
 800ca00:	d100      	bne.n	800ca04 <SX1276SetPublicNetwork+0x18>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 800ca02:	2112      	movs	r1, #18
 800ca04:	2039      	movs	r0, #57	; 0x39
 800ca06:	f7ff fd26 	bl	800c456 <SX1276Write>
}
 800ca0a:	bd10      	pop	{r4, pc}
 800ca0c:	20001004 	.word	0x20001004

0800ca10 <SX1276SetRxConfig>:
{
 800ca10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca12:	b08b      	sub	sp, #44	; 0x2c
 800ca14:	9305      	str	r3, [sp, #20]
 800ca16:	ab10      	add	r3, sp, #64	; 0x40
 800ca18:	cb80      	ldmia	r3!, {r7}
 800ca1a:	0014      	movs	r4, r2
 800ca1c:	881b      	ldrh	r3, [r3, #0]
 800ca1e:	aa0a      	add	r2, sp, #40	; 0x28
 800ca20:	9300      	str	r3, [sp, #0]
 800ca22:	ab12      	add	r3, sp, #72	; 0x48
 800ca24:	881b      	ldrh	r3, [r3, #0]
 800ca26:	0005      	movs	r5, r0
 800ca28:	9304      	str	r3, [sp, #16]
 800ca2a:	ab13      	add	r3, sp, #76	; 0x4c
 800ca2c:	781b      	ldrb	r3, [r3, #0]
 800ca2e:	000e      	movs	r6, r1
 800ca30:	9301      	str	r3, [sp, #4]
 800ca32:	ab14      	add	r3, sp, #80	; 0x50
 800ca34:	781b      	ldrb	r3, [r3, #0]
 800ca36:	9302      	str	r3, [sp, #8]
 800ca38:	ab15      	add	r3, sp, #84	; 0x54
 800ca3a:	781b      	ldrb	r3, [r3, #0]
 800ca3c:	9303      	str	r3, [sp, #12]
 800ca3e:	ab16      	add	r3, sp, #88	; 0x58
 800ca40:	781b      	ldrb	r3, [r3, #0]
 800ca42:	9308      	str	r3, [sp, #32]
 800ca44:	ab17      	add	r3, sp, #92	; 0x5c
 800ca46:	781b      	ldrb	r3, [r3, #0]
 800ca48:	9309      	str	r3, [sp, #36]	; 0x24
 800ca4a:	2319      	movs	r3, #25
 800ca4c:	189b      	adds	r3, r3, r2
 800ca4e:	7fdb      	ldrb	r3, [r3, #31]
 800ca50:	9306      	str	r3, [sp, #24]
 800ca52:	231d      	movs	r3, #29
 800ca54:	189b      	adds	r3, r3, r2
 800ca56:	7fdb      	ldrb	r3, [r3, #31]
 800ca58:	9307      	str	r3, [sp, #28]
    SX1276SetModem( modem );
 800ca5a:	f7ff ff77 	bl	800c94c <SX1276SetModem>
    switch( modem )
 800ca5e:	2d00      	cmp	r5, #0
 800ca60:	d003      	beq.n	800ca6a <SX1276SetRxConfig+0x5a>
 800ca62:	2d01      	cmp	r5, #1
 800ca64:	d068      	beq.n	800cb38 <SX1276SetRxConfig+0x128>
}
 800ca66:	b00b      	add	sp, #44	; 0x2c
 800ca68:	bdf0      	pop	{r4, r5, r6, r7, pc}
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 800ca6a:	20fa      	movs	r0, #250	; 0xfa
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 800ca6c:	4d98      	ldr	r5, [pc, #608]	; (800ccd0 <SX1276SetRxConfig+0x2c0>)
            SX1276.Settings.Fsk.FixLen = fixLen;
 800ca6e:	9a01      	ldr	r2, [sp, #4]
 800ca70:	1ceb      	adds	r3, r5, #3
 800ca72:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 800ca74:	9a02      	ldr	r2, [sp, #8]
 800ca76:	1d2b      	adds	r3, r5, #4
 800ca78:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 800ca7a:	9a03      	ldr	r2, [sp, #12]
 800ca7c:	1d6b      	adds	r3, r5, #5
 800ca7e:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 800ca80:	9a06      	ldr	r2, [sp, #24]
 800ca82:	1dab      	adds	r3, r5, #6
 800ca84:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 800ca86:	9a07      	ldr	r2, [sp, #28]
 800ca88:	1deb      	adds	r3, r5, #7
 800ca8a:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 800ca8c:	9b00      	ldr	r3, [sp, #0]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 800ca8e:	0140      	lsls	r0, r0, #5
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 800ca90:	842b      	strh	r3, [r5, #32]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 800ca92:	9b04      	ldr	r3, [sp, #16]
 800ca94:	0021      	movs	r1, r4
 800ca96:	4358      	muls	r0, r3
            SX1276.Settings.Fsk.Datarate = datarate;
 800ca98:	61ec      	str	r4, [r5, #28]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 800ca9a:	616e      	str	r6, [r5, #20]
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 800ca9c:	61af      	str	r7, [r5, #24]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 800ca9e:	f7f3 fb63 	bl	8000168 <__udivsi3>
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 800caa2:	0021      	movs	r1, r4
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 800caa4:	62e8      	str	r0, [r5, #44]	; 0x2c
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 800caa6:	488b      	ldr	r0, [pc, #556]	; (800ccd4 <SX1276SetRxConfig+0x2c4>)
 800caa8:	f7f3 fb5e 	bl	8000168 <__udivsi3>
 800caac:	0004      	movs	r4, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 800caae:	0a01      	lsrs	r1, r0, #8
 800cab0:	b2c9      	uxtb	r1, r1
 800cab2:	2002      	movs	r0, #2
 800cab4:	f7ff fccf 	bl	800c456 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 800cab8:	b2e1      	uxtb	r1, r4
 800caba:	2003      	movs	r0, #3
 800cabc:	f7ff fccb 	bl	800c456 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 800cac0:	0030      	movs	r0, r6
 800cac2:	f7ff fc1f 	bl	800c304 <GetFskBandwidthRegValue>
 800cac6:	0001      	movs	r1, r0
 800cac8:	2012      	movs	r0, #18
 800caca:	f7ff fcc4 	bl	800c456 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 800cace:	0038      	movs	r0, r7
 800cad0:	f7ff fc18 	bl	800c304 <GetFskBandwidthRegValue>
 800cad4:	0001      	movs	r1, r0
 800cad6:	2013      	movs	r0, #19
 800cad8:	f7ff fcbd 	bl	800c456 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 800cadc:	9b00      	ldr	r3, [sp, #0]
 800cade:	2025      	movs	r0, #37	; 0x25
 800cae0:	0a19      	lsrs	r1, r3, #8
 800cae2:	f7ff fcb8 	bl	800c456 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 800cae6:	466b      	mov	r3, sp
 800cae8:	2026      	movs	r0, #38	; 0x26
 800caea:	7819      	ldrb	r1, [r3, #0]
 800caec:	f7ff fcb3 	bl	800c456 <SX1276Write>
            if( fixLen == 1 )
 800caf0:	9b01      	ldr	r3, [sp, #4]
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 800caf2:	9902      	ldr	r1, [sp, #8]
            if( fixLen == 1 )
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d100      	bne.n	800cafa <SX1276SetRxConfig+0xea>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 800caf8:	21ff      	movs	r1, #255	; 0xff
 800cafa:	2032      	movs	r0, #50	; 0x32
 800cafc:	f7ff fcab 	bl	800c456 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 800cb00:	2030      	movs	r0, #48	; 0x30
 800cb02:	f7ff fcf3 	bl	800c4ec <SX1276Read>
                           RF_PACKETCONFIG1_CRC_MASK &
 800cb06:	216f      	movs	r1, #111	; 0x6f
 800cb08:	4008      	ands	r0, r1
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800cb0a:	2100      	movs	r1, #0
 800cb0c:	9b01      	ldr	r3, [sp, #4]
 800cb0e:	428b      	cmp	r3, r1
 800cb10:	d100      	bne.n	800cb14 <SX1276SetRxConfig+0x104>
 800cb12:	3980      	subs	r1, #128	; 0x80
                           ( crcOn << 4 ) );
 800cb14:	9b03      	ldr	r3, [sp, #12]
 800cb16:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 800cb18:	4318      	orrs	r0, r3
 800cb1a:	4301      	orrs	r1, r0
            SX1276Write( REG_PACKETCONFIG1,
 800cb1c:	b2c9      	uxtb	r1, r1
 800cb1e:	2030      	movs	r0, #48	; 0x30
 800cb20:	f7ff fc99 	bl	800c456 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 800cb24:	2031      	movs	r0, #49	; 0x31
 800cb26:	f7ff fce1 	bl	800c4ec <SX1276Read>
 800cb2a:	2140      	movs	r1, #64	; 0x40
 800cb2c:	4301      	orrs	r1, r0
 800cb2e:	2031      	movs	r0, #49	; 0x31
 800cb30:	b2c9      	uxtb	r1, r1
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800cb32:	f7ff fc90 	bl	800c456 <SX1276Write>
}
 800cb36:	e796      	b.n	800ca66 <SX1276SetRxConfig+0x56>
            if( bandwidth > 2 )
 800cb38:	2e02      	cmp	r6, #2
 800cb3a:	d900      	bls.n	800cb3e <SX1276SetRxConfig+0x12e>
                while( 1 );
 800cb3c:	e7fe      	b.n	800cb3c <SX1276SetRxConfig+0x12c>
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 800cb3e:	4b64      	ldr	r3, [pc, #400]	; (800ccd0 <SX1276SetRxConfig+0x2c0>)
            SX1276.Settings.LoRa.Coderate = coderate;
 800cb40:	9905      	ldr	r1, [sp, #20]
 800cb42:	001a      	movs	r2, r3
 800cb44:	324d      	adds	r2, #77	; 0x4d
 800cb46:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 800cb48:	001a      	movs	r2, r3
 800cb4a:	9900      	ldr	r1, [sp, #0]
 800cb4c:	324e      	adds	r2, #78	; 0x4e
 800cb4e:	8011      	strh	r1, [r2, #0]
            SX1276.Settings.LoRa.FixLen = fixLen;
 800cb50:	001a      	movs	r2, r3
 800cb52:	9901      	ldr	r1, [sp, #4]
 800cb54:	3250      	adds	r2, #80	; 0x50
 800cb56:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 800cb58:	001a      	movs	r2, r3
 800cb5a:	9902      	ldr	r1, [sp, #8]
 800cb5c:	3251      	adds	r2, #81	; 0x51
 800cb5e:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 800cb60:	001a      	movs	r2, r3
 800cb62:	9903      	ldr	r1, [sp, #12]
 800cb64:	3252      	adds	r2, #82	; 0x52
 800cb66:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 800cb68:	001a      	movs	r2, r3
 800cb6a:	9908      	ldr	r1, [sp, #32]
 800cb6c:	3253      	adds	r2, #83	; 0x53
 800cb6e:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 800cb70:	001a      	movs	r2, r3
 800cb72:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cb74:	3254      	adds	r2, #84	; 0x54
 800cb76:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 800cb78:	001a      	movs	r2, r3
 800cb7a:	9906      	ldr	r1, [sp, #24]
 800cb7c:	3255      	adds	r2, #85	; 0x55
            bandwidth += 7;
 800cb7e:	1df7      	adds	r7, r6, #7
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 800cb80:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 800cb82:	9a07      	ldr	r2, [sp, #28]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 800cb84:	645f      	str	r7, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 800cb86:	649c      	str	r4, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 800cb88:	3356      	adds	r3, #86	; 0x56
 800cb8a:	2506      	movs	r5, #6
 800cb8c:	701a      	strb	r2, [r3, #0]
            if( datarate > 12 )
 800cb8e:	2c06      	cmp	r4, #6
 800cb90:	d303      	bcc.n	800cb9a <SX1276SetRxConfig+0x18a>
 800cb92:	0025      	movs	r5, r4
 800cb94:	2c0c      	cmp	r4, #12
 800cb96:	d900      	bls.n	800cb9a <SX1276SetRxConfig+0x18a>
 800cb98:	250c      	movs	r5, #12
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800cb9a:	2f07      	cmp	r7, #7
 800cb9c:	d17d      	bne.n	800cc9a <SX1276SetRxConfig+0x28a>
 800cb9e:	002a      	movs	r2, r5
 800cba0:	2300      	movs	r3, #0
 800cba2:	2101      	movs	r1, #1
 800cba4:	3a0b      	subs	r2, #11
 800cba6:	4291      	cmp	r1, r2
 800cba8:	415b      	adcs	r3, r3
 800cbaa:	b2db      	uxtb	r3, r3
 800cbac:	4a4a      	ldr	r2, [pc, #296]	; (800ccd8 <SX1276SetRxConfig+0x2c8>)
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 800cbae:	201d      	movs	r0, #29
 800cbb0:	7013      	strb	r3, [r2, #0]
            SX1276Write( REG_LR_MODEMCONFIG1,
 800cbb2:	4e47      	ldr	r6, [pc, #284]	; (800ccd0 <SX1276SetRxConfig+0x2c0>)
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 800cbb4:	f7ff fc9a 	bl	800c4ec <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800cbb8:	9b05      	ldr	r3, [sp, #20]
            SX1276Write( REG_LR_MODEMCONFIG1,
 800cbba:	201d      	movs	r0, #29
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800cbbc:	0059      	lsls	r1, r3, #1
 800cbbe:	9b01      	ldr	r3, [sp, #4]
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 800cbc0:	012d      	lsls	r5, r5, #4
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800cbc2:	4319      	orrs	r1, r3
 800cbc4:	013b      	lsls	r3, r7, #4
 800cbc6:	4319      	orrs	r1, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 800cbc8:	b2c9      	uxtb	r1, r1
 800cbca:	f7ff fc44 	bl	800c456 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 800cbce:	201e      	movs	r0, #30
 800cbd0:	f7ff fc8c 	bl	800c4ec <SX1276Read>
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 800cbd4:	9b04      	ldr	r3, [sp, #16]
 800cbd6:	0599      	lsls	r1, r3, #22
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 800cbd8:	9b03      	ldr	r3, [sp, #12]
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 800cbda:	0f89      	lsrs	r1, r1, #30
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 800cbdc:	009b      	lsls	r3, r3, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
 800cbde:	4319      	orrs	r1, r3
 800cbe0:	4329      	orrs	r1, r5
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 800cbe2:	2508      	movs	r5, #8
 800cbe4:	4028      	ands	r0, r5
            SX1276Write( REG_LR_MODEMCONFIG2,
 800cbe6:	4301      	orrs	r1, r0
 800cbe8:	b2c9      	uxtb	r1, r1
 800cbea:	201e      	movs	r0, #30
 800cbec:	f7ff fc33 	bl	800c456 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 800cbf0:	2026      	movs	r0, #38	; 0x26
 800cbf2:	f7ff fc7b 	bl	800c4ec <SX1276Read>
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800cbf6:	4b38      	ldr	r3, [pc, #224]	; (800ccd8 <SX1276SetRxConfig+0x2c8>)
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 800cbf8:	43a8      	bics	r0, r5
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800cbfa:	7819      	ldrb	r1, [r3, #0]
 800cbfc:	00c9      	lsls	r1, r1, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 800cbfe:	4301      	orrs	r1, r0
            SX1276Write( REG_LR_MODEMCONFIG3,
 800cc00:	b2c9      	uxtb	r1, r1
 800cc02:	2026      	movs	r0, #38	; 0x26
 800cc04:	f7ff fc27 	bl	800c456 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 800cc08:	466b      	mov	r3, sp
 800cc0a:	201f      	movs	r0, #31
 800cc0c:	7c19      	ldrb	r1, [r3, #16]
 800cc0e:	f7ff fc22 	bl	800c456 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 800cc12:	9b00      	ldr	r3, [sp, #0]
 800cc14:	2020      	movs	r0, #32
 800cc16:	0a19      	lsrs	r1, r3, #8
 800cc18:	f7ff fc1d 	bl	800c456 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 800cc1c:	466b      	mov	r3, sp
 800cc1e:	2021      	movs	r0, #33	; 0x21
 800cc20:	7819      	ldrb	r1, [r3, #0]
 800cc22:	f7ff fc18 	bl	800c456 <SX1276Write>
            if( fixLen == 1 )
 800cc26:	9b01      	ldr	r3, [sp, #4]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d003      	beq.n	800cc34 <SX1276SetRxConfig+0x224>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 800cc2c:	2022      	movs	r0, #34	; 0x22
 800cc2e:	9902      	ldr	r1, [sp, #8]
 800cc30:	f7ff fc11 	bl	800c456 <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800cc34:	0033      	movs	r3, r6
 800cc36:	3353      	adds	r3, #83	; 0x53
 800cc38:	781b      	ldrb	r3, [r3, #0]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d00f      	beq.n	800cc5e <SX1276SetRxConfig+0x24e>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 800cc3e:	2044      	movs	r0, #68	; 0x44
 800cc40:	f7ff fc54 	bl	800c4ec <SX1276Read>
 800cc44:	2180      	movs	r1, #128	; 0x80
 800cc46:	4249      	negs	r1, r1
 800cc48:	4301      	orrs	r1, r0
 800cc4a:	b2c9      	uxtb	r1, r1
 800cc4c:	2044      	movs	r0, #68	; 0x44
 800cc4e:	f7ff fc02 	bl	800c456 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 800cc52:	0033      	movs	r3, r6
 800cc54:	3354      	adds	r3, #84	; 0x54
 800cc56:	2024      	movs	r0, #36	; 0x24
 800cc58:	7819      	ldrb	r1, [r3, #0]
 800cc5a:	f7ff fbfc 	bl	800c456 <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 800cc5e:	2f09      	cmp	r7, #9
 800cc60:	d127      	bne.n	800ccb2 <SX1276SetRxConfig+0x2a2>
 800cc62:	4b1e      	ldr	r3, [pc, #120]	; (800ccdc <SX1276SetRxConfig+0x2cc>)
 800cc64:	68b2      	ldr	r2, [r6, #8]
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 800cc66:	2102      	movs	r1, #2
 800cc68:	2036      	movs	r0, #54	; 0x36
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 800cc6a:	429a      	cmp	r2, r3
 800cc6c:	d91d      	bls.n	800ccaa <SX1276SetRxConfig+0x29a>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 800cc6e:	f7ff fbf2 	bl	800c456 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 800cc72:	2164      	movs	r1, #100	; 0x64
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 800cc74:	203a      	movs	r0, #58	; 0x3a
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 800cc76:	f7ff fbee 	bl	800c456 <SX1276Write>
            if( datarate == 6 )
 800cc7a:	2507      	movs	r5, #7
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800cc7c:	2031      	movs	r0, #49	; 0x31
            if( datarate == 6 )
 800cc7e:	2c06      	cmp	r4, #6
 800cc80:	d81a      	bhi.n	800ccb8 <SX1276SetRxConfig+0x2a8>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800cc82:	f7ff fc33 	bl	800c4ec <SX1276Read>
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 800cc86:	2105      	movs	r1, #5
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800cc88:	43a8      	bics	r0, r5
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 800cc8a:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800cc8c:	b2c9      	uxtb	r1, r1
 800cc8e:	2031      	movs	r0, #49	; 0x31
 800cc90:	f7ff fbe1 	bl	800c456 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800cc94:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800cc96:	2037      	movs	r0, #55	; 0x37
 800cc98:	e74b      	b.n	800cb32 <SX1276SetRxConfig+0x122>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 800cc9a:	2300      	movs	r3, #0
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800cc9c:	2f08      	cmp	r7, #8
 800cc9e:	d185      	bne.n	800cbac <SX1276SetRxConfig+0x19c>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 800cca0:	330b      	adds	r3, #11
 800cca2:	42a3      	cmp	r3, r4
 800cca4:	419b      	sbcs	r3, r3
 800cca6:	425b      	negs	r3, r3
 800cca8:	e780      	b.n	800cbac <SX1276SetRxConfig+0x19c>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 800ccaa:	f7ff fbd4 	bl	800c456 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 800ccae:	217f      	movs	r1, #127	; 0x7f
 800ccb0:	e7e0      	b.n	800cc74 <SX1276SetRxConfig+0x264>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 800ccb2:	2103      	movs	r1, #3
 800ccb4:	2036      	movs	r0, #54	; 0x36
 800ccb6:	e7de      	b.n	800cc76 <SX1276SetRxConfig+0x266>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800ccb8:	f7ff fc18 	bl	800c4ec <SX1276Read>
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 800ccbc:	2103      	movs	r1, #3
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800ccbe:	43a8      	bics	r0, r5
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 800ccc0:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800ccc2:	b2c9      	uxtb	r1, r1
 800ccc4:	2031      	movs	r0, #49	; 0x31
 800ccc6:	f7ff fbc6 	bl	800c456 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800ccca:	210a      	movs	r1, #10
 800cccc:	e7e3      	b.n	800cc96 <SX1276SetRxConfig+0x286>
 800ccce:	46c0      	nop			; (mov r8, r8)
 800ccd0:	20001004 	.word	0x20001004
 800ccd4:	01e84800 	.word	0x01e84800
 800ccd8:	20001050 	.word	0x20001050
 800ccdc:	1f4add40 	.word	0x1f4add40

0800cce0 <SX1276SetSleep>:
{
 800cce0:	b510      	push	{r4, lr}
    TimerStop( &RxTimeoutTimer );
 800cce2:	4c0a      	ldr	r4, [pc, #40]	; (800cd0c <SX1276SetSleep+0x2c>)
 800cce4:	1d20      	adds	r0, r4, #4
 800cce6:	f001 f96d 	bl	800dfc4 <UTIL_TIMER_Stop>
    TimerStop( &TxTimeoutTimer );
 800ccea:	0020      	movs	r0, r4
 800ccec:	301c      	adds	r0, #28
 800ccee:	f001 f969 	bl	800dfc4 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutSyncWord );
 800ccf2:	4c07      	ldr	r4, [pc, #28]	; (800cd10 <SX1276SetSleep+0x30>)
 800ccf4:	0020      	movs	r0, r4
 800ccf6:	3068      	adds	r0, #104	; 0x68
 800ccf8:	f001 f964 	bl	800dfc4 <UTIL_TIMER_Stop>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
 800ccfc:	f7ff fe16 	bl	800c92c <SX1276SetOpMode.constprop.0>
    Sx_Board_SetXO( RESET );
 800cd00:	2000      	movs	r0, #0
 800cd02:	f7f6 f8dd 	bl	8002ec0 <SX1276MB1MAS_RADIO_SetXO>
    SX1276.Settings.State = RF_IDLE;
 800cd06:	2300      	movs	r3, #0
 800cd08:	7123      	strb	r3, [r4, #4]
}
 800cd0a:	bd10      	pop	{r4, pc}
 800cd0c:	20001084 	.word	0x20001084
 800cd10:	20001004 	.word	0x20001004

0800cd14 <SX1276IsChannelFree>:
{
 800cd14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd16:	0007      	movs	r7, r0
 800cd18:	000c      	movs	r4, r1
 800cd1a:	0016      	movs	r6, r2
 800cd1c:	001d      	movs	r5, r3
    SX1276SetSleep( );
 800cd1e:	f7ff ffdf 	bl	800cce0 <SX1276SetSleep>
    SX1276SetModem( MODEM_FSK );
 800cd22:	2000      	movs	r0, #0
 800cd24:	f7ff fe12 	bl	800c94c <SX1276SetModem>
    SX1276SetChannel( freq );
 800cd28:	0038      	movs	r0, r7
 800cd2a:	f7ff fb9d 	bl	800c468 <SX1276SetChannel>
    SX1276Write( REG_RXBW, GetFskBandwidthRegValue( rxBandwidth ) );
 800cd2e:	0020      	movs	r0, r4
 800cd30:	f7ff fae8 	bl	800c304 <GetFskBandwidthRegValue>
 800cd34:	0004      	movs	r4, r0
 800cd36:	0001      	movs	r1, r0
 800cd38:	2012      	movs	r0, #18
 800cd3a:	f7ff fb8c 	bl	800c456 <SX1276Write>
    SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( rxBandwidth ) );
 800cd3e:	0021      	movs	r1, r4
 800cd40:	2013      	movs	r0, #19
 800cd42:	f7ff fb88 	bl	800c456 <SX1276Write>
    if( opMode == RF_OPMODE_SLEEP )
 800cd46:	2005      	movs	r0, #5
 800cd48:	f7ff fc72 	bl	800c630 <SX1276SetOpMode.part.0>
    RADIO_DELAY_MS( 1 );
 800cd4c:	2001      	movs	r0, #1
 800cd4e:	f7f5 fea1 	bl	8002a94 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 800cd52:	f001 f8f3 	bl	800df3c <UTIL_TIMER_GetCurrentTime>
 800cd56:	0004      	movs	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800cd58:	0020      	movs	r0, r4
 800cd5a:	f001 f8f9 	bl	800df50 <UTIL_TIMER_GetElapsedTime>
 800cd5e:	42a8      	cmp	r0, r5
 800cd60:	d304      	bcc.n	800cd6c <SX1276IsChannelFree+0x58>
    bool status = true;
 800cd62:	2401      	movs	r4, #1
    SX1276SetSleep( );
 800cd64:	f7ff ffbc 	bl	800cce0 <SX1276SetSleep>
}
 800cd68:	0020      	movs	r0, r4
 800cd6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rssi = SX1276ReadRssi( MODEM_FSK );
 800cd6c:	2000      	movs	r0, #0
 800cd6e:	f7ff fdbb 	bl	800c8e8 <SX1276ReadRssi>
        if( rssi > rssiThresh )
 800cd72:	42b0      	cmp	r0, r6
 800cd74:	ddf0      	ble.n	800cd58 <SX1276IsChannelFree+0x44>
            status = false;
 800cd76:	2400      	movs	r4, #0
 800cd78:	e7f4      	b.n	800cd64 <SX1276IsChannelFree+0x50>

0800cd7a <SX1276Random>:
{
 800cd7a:	b570      	push	{r4, r5, r6, lr}
 800cd7c:	2400      	movs	r4, #0
    SX1276SetModem( MODEM_LORA );
 800cd7e:	2001      	movs	r0, #1
 800cd80:	f7ff fde4 	bl	800c94c <SX1276SetModem>
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800cd84:	21ff      	movs	r1, #255	; 0xff
 800cd86:	2011      	movs	r0, #17
 800cd88:	f7ff fb65 	bl	800c456 <SX1276Write>
    if( opMode == RF_OPMODE_SLEEP )
 800cd8c:	2005      	movs	r0, #5
 800cd8e:	f7ff fc4f 	bl	800c630 <SX1276SetOpMode.part.0>
    uint32_t rnd = 0;
 800cd92:	0025      	movs	r5, r4
        RADIO_DELAY_MS( 1 );
 800cd94:	2601      	movs	r6, #1
 800cd96:	0030      	movs	r0, r6
 800cd98:	f7f5 fe7c 	bl	8002a94 <HAL_Delay>
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 800cd9c:	202c      	movs	r0, #44	; 0x2c
 800cd9e:	f7ff fba5 	bl	800c4ec <SX1276Read>
 800cda2:	4030      	ands	r0, r6
 800cda4:	40a0      	lsls	r0, r4
    for( i = 0; i < 32; i++ )
 800cda6:	3401      	adds	r4, #1
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 800cda8:	4305      	orrs	r5, r0
    for( i = 0; i < 32; i++ )
 800cdaa:	2c20      	cmp	r4, #32
 800cdac:	d1f3      	bne.n	800cd96 <SX1276Random+0x1c>
    SX1276SetSleep( );
 800cdae:	f7ff ff97 	bl	800cce0 <SX1276SetSleep>
}
 800cdb2:	0028      	movs	r0, r5
 800cdb4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cdb8 <SX1276SetTxConfig>:
{
 800cdb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdba:	b08d      	sub	sp, #52	; 0x34
 800cdbc:	9305      	str	r3, [sp, #20]
 800cdbe:	ab12      	add	r3, sp, #72	; 0x48
 800cdc0:	cb80      	ldmia	r3!, {r7}
 800cdc2:	9204      	str	r2, [sp, #16]
 800cdc4:	781b      	ldrb	r3, [r3, #0]
 800cdc6:	0006      	movs	r6, r0
 800cdc8:	9307      	str	r3, [sp, #28]
 800cdca:	ab14      	add	r3, sp, #80	; 0x50
 800cdcc:	881b      	ldrh	r3, [r3, #0]
 800cdce:	000c      	movs	r4, r1
 800cdd0:	9301      	str	r3, [sp, #4]
 800cdd2:	ab15      	add	r3, sp, #84	; 0x54
 800cdd4:	781b      	ldrb	r3, [r3, #0]
 800cdd6:	9302      	str	r3, [sp, #8]
 800cdd8:	ab16      	add	r3, sp, #88	; 0x58
 800cdda:	781b      	ldrb	r3, [r3, #0]
 800cddc:	9303      	str	r3, [sp, #12]
 800cdde:	ab17      	add	r3, sp, #92	; 0x5c
 800cde0:	781b      	ldrb	r3, [r3, #0]
 800cde2:	9308      	str	r3, [sp, #32]
 800cde4:	ab18      	add	r3, sp, #96	; 0x60
 800cde6:	781b      	ldrb	r3, [r3, #0]
 800cde8:	930a      	str	r3, [sp, #40]	; 0x28
 800cdea:	ab19      	add	r3, sp, #100	; 0x64
 800cdec:	781b      	ldrb	r3, [r3, #0]
 800cdee:	9309      	str	r3, [sp, #36]	; 0x24
    if( ( SX1276.Settings.State == RF_RX_RUNNING ) && ( modem == MODEM_FSK ) )
 800cdf0:	4bb6      	ldr	r3, [pc, #728]	; (800d0cc <SX1276SetTxConfig+0x314>)
 800cdf2:	791d      	ldrb	r5, [r3, #4]
 800cdf4:	2d01      	cmp	r5, #1
 800cdf6:	d106      	bne.n	800ce06 <SX1276SetTxConfig+0x4e>
 800cdf8:	2800      	cmp	r0, #0
 800cdfa:	d104      	bne.n	800ce06 <SX1276SetTxConfig+0x4e>
        SX1276SetSleep( );
 800cdfc:	f7ff ff70 	bl	800cce0 <SX1276SetSleep>
        RADIO_DELAY_MS( 1 );
 800ce00:	0028      	movs	r0, r5
 800ce02:	f7f5 fe47 	bl	8002a94 <HAL_Delay>
    SX1276SetModem( modem );
 800ce06:	0030      	movs	r0, r6
 800ce08:	f7ff fda0 	bl	800c94c <SX1276SetModem>
    paConfig = SX1276Read( REG_PACONFIG );
 800ce0c:	2009      	movs	r0, #9
 800ce0e:	f7ff fb6d 	bl	800c4ec <SX1276Read>
 800ce12:	900b      	str	r0, [sp, #44]	; 0x2c
    paDac = SX1276Read( REG_PADAC );
 800ce14:	204d      	movs	r0, #77	; 0x4d
 800ce16:	f7ff fb69 	bl	800c4ec <SX1276Read>
    switch( Sx_Board_GetPaSelect(SX1276.Settings.Channel) )
 800ce1a:	4bac      	ldr	r3, [pc, #688]	; (800d0cc <SX1276SetTxConfig+0x314>)
    paDac = SX1276Read( REG_PADAC );
 800ce1c:	0005      	movs	r5, r0
 800ce1e:	9006      	str	r0, [sp, #24]
    switch( Sx_Board_GetPaSelect(SX1276.Settings.Channel) )
 800ce20:	6898      	ldr	r0, [r3, #8]
 800ce22:	f7f6 f999 	bl	8003158 <SX1276MB1MAS_RADIO_GetPaSelect>
 800ce26:	2800      	cmp	r0, #0
 800ce28:	d029      	beq.n	800ce7e <SX1276SetTxConfig+0xc6>
 800ce2a:	3802      	subs	r0, #2
 800ce2c:	b2c3      	uxtb	r3, r0
 800ce2e:	2080      	movs	r0, #128	; 0x80
 800ce30:	2b01      	cmp	r3, #1
 800ce32:	d900      	bls.n	800ce36 <SX1276SetTxConfig+0x7e>
    uint8_t board_config = 0;
 800ce34:	2000      	movs	r0, #0
    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | board_config;
 800ce36:	237f      	movs	r3, #127	; 0x7f
 800ce38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ce3a:	401a      	ands	r2, r3
 800ce3c:	4310      	orrs	r0, r2
 800ce3e:	b241      	sxtb	r1, r0
    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 800ce40:	0603      	lsls	r3, r0, #24
 800ce42:	d52a      	bpl.n	800ce9a <SX1276SetTxConfig+0xe2>
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 800ce44:	230f      	movs	r3, #15
 800ce46:	2507      	movs	r5, #7
 800ce48:	4399      	bics	r1, r3
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 800ce4a:	9b06      	ldr	r3, [sp, #24]
        if( power > 17 )
 800ce4c:	2c11      	cmp	r4, #17
 800ce4e:	dd1a      	ble.n	800ce86 <SX1276SetTxConfig+0xce>
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 800ce50:	431d      	orrs	r5, r3
 800ce52:	b2ed      	uxtb	r5, r5
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 800ce54:	1c23      	adds	r3, r4, #0
 800ce56:	2c14      	cmp	r4, #20
 800ce58:	dd00      	ble.n	800ce5c <SX1276SetTxConfig+0xa4>
 800ce5a:	2314      	movs	r3, #20
 800ce5c:	3b05      	subs	r3, #5
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 7 << 4 ) | ( power );
 800ce5e:	4319      	orrs	r1, r3
    SX1276Write( REG_PACONFIG, paConfig );
 800ce60:	2009      	movs	r0, #9
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 0 << 4 ) | ( power + 4 );
 800ce62:	b2c9      	uxtb	r1, r1
    SX1276Write( REG_PACONFIG, paConfig );
 800ce64:	f7ff faf7 	bl	800c456 <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 800ce68:	0029      	movs	r1, r5
 800ce6a:	204d      	movs	r0, #77	; 0x4d
 800ce6c:	f7ff faf3 	bl	800c456 <SX1276Write>
    switch( modem )
 800ce70:	2e00      	cmp	r6, #0
 800ce72:	d021      	beq.n	800ceb8 <SX1276SetTxConfig+0x100>
 800ce74:	2e01      	cmp	r6, #1
 800ce76:	d100      	bne.n	800ce7a <SX1276SetTxConfig+0xc2>
 800ce78:	e081      	b.n	800cf7e <SX1276SetTxConfig+0x1c6>
}
 800ce7a:	b00d      	add	sp, #52	; 0x34
 800ce7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (power > 14)
 800ce7e:	2c0e      	cmp	r4, #14
 800ce80:	ddd9      	ble.n	800ce36 <SX1276SetTxConfig+0x7e>
          board_config = RF_PACONFIG_PASELECT_PABOOST;
 800ce82:	2080      	movs	r0, #128	; 0x80
 800ce84:	e7d7      	b.n	800ce36 <SX1276SetTxConfig+0x7e>
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 800ce86:	43ab      	bics	r3, r5
 800ce88:	2504      	movs	r5, #4
 800ce8a:	432b      	orrs	r3, r5
 800ce8c:	b2dd      	uxtb	r5, r3
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 800ce8e:	1c23      	adds	r3, r4, #0
 800ce90:	2c02      	cmp	r4, #2
 800ce92:	da00      	bge.n	800ce96 <SX1276SetTxConfig+0xde>
 800ce94:	2302      	movs	r3, #2
 800ce96:	3b02      	subs	r3, #2
 800ce98:	e7e1      	b.n	800ce5e <SX1276SetTxConfig+0xa6>
        if( power > 0 )
 800ce9a:	2c00      	cmp	r4, #0
 800ce9c:	dd05      	ble.n	800ceaa <SX1276SetTxConfig+0xf2>
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 7 << 4 ) | ( power );
 800ce9e:	1c23      	adds	r3, r4, #0
 800cea0:	2c0f      	cmp	r4, #15
 800cea2:	dd00      	ble.n	800cea6 <SX1276SetTxConfig+0xee>
 800cea4:	230f      	movs	r3, #15
 800cea6:	2170      	movs	r1, #112	; 0x70
 800cea8:	e7d9      	b.n	800ce5e <SX1276SetTxConfig+0xa6>
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 0 << 4 ) | ( power + 4 );
 800ceaa:	1c21      	adds	r1, r4, #0
 800ceac:	1d23      	adds	r3, r4, #4
 800ceae:	da01      	bge.n	800ceb4 <SX1276SetTxConfig+0xfc>
 800ceb0:	4b87      	ldr	r3, [pc, #540]	; (800d0d0 <SX1276SetTxConfig+0x318>)
 800ceb2:	7819      	ldrb	r1, [r3, #0]
 800ceb4:	3104      	adds	r1, #4
 800ceb6:	e7d3      	b.n	800ce60 <SX1276SetTxConfig+0xa8>
            SX1276.Settings.Fsk.Power = power;
 800ceb8:	4b84      	ldr	r3, [pc, #528]	; (800d0cc <SX1276SetTxConfig+0x314>)
            SX1276.Settings.Fsk.Fdev = fdev;
 800ceba:	9a04      	ldr	r2, [sp, #16]
            SX1276.Settings.Fsk.FixLen = fixLen;
 800cebc:	9902      	ldr	r1, [sp, #8]
            SX1276.Settings.Fsk.Fdev = fdev;
 800cebe:	611a      	str	r2, [r3, #16]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 800cec0:	9a05      	ldr	r2, [sp, #20]
            SX1276.Settings.Fsk.Power = power;
 800cec2:	731c      	strb	r4, [r3, #12]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 800cec4:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 800cec6:	9a01      	ldr	r2, [sp, #4]
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 800cec8:	9804      	ldr	r0, [sp, #16]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 800ceca:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.FixLen = fixLen;
 800cecc:	1cda      	adds	r2, r3, #3
 800cece:	77d1      	strb	r1, [r2, #31]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 800ced0:	9903      	ldr	r1, [sp, #12]
 800ced2:	1d5a      	adds	r2, r3, #5
 800ced4:	77d1      	strb	r1, [r2, #31]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 800ced6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ced8:	1d9a      	adds	r2, r3, #6
 800ceda:	77d1      	strb	r1, [r2, #31]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 800cedc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
            SX1276.Settings.Fsk.Datarate = datarate;
 800cede:	61df      	str	r7, [r3, #28]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 800cee0:	629a      	str	r2, [r3, #40]	; 0x28
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 800cee2:	497c      	ldr	r1, [pc, #496]	; (800d0d4 <SX1276SetTxConfig+0x31c>)
 800cee4:	f7f3 f9c6 	bl	8000274 <__aeabi_uidivmod>
 800cee8:	4b7b      	ldr	r3, [pc, #492]	; (800d0d8 <SX1276SetTxConfig+0x320>)
 800ceea:	0208      	lsls	r0, r1, #8
 800ceec:	18c0      	adds	r0, r0, r3
 800ceee:	4979      	ldr	r1, [pc, #484]	; (800d0d4 <SX1276SetTxConfig+0x31c>)
 800cef0:	f7f3 f93a 	bl	8000168 <__udivsi3>
    stepsInt = freqInHz / SX1276_PLL_STEP_SCALED;
 800cef4:	4977      	ldr	r1, [pc, #476]	; (800d0d4 <SX1276SetTxConfig+0x31c>)
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 800cef6:	0004      	movs	r4, r0
    stepsInt = freqInHz / SX1276_PLL_STEP_SCALED;
 800cef8:	9804      	ldr	r0, [sp, #16]
 800cefa:	f7f3 f935 	bl	8000168 <__udivsi3>
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
 800cefe:	0200      	lsls	r0, r0, #8
 800cf00:	1824      	adds	r4, r4, r0
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdevInPllSteps >> 8 ) );
 800cf02:	0a21      	lsrs	r1, r4, #8
 800cf04:	2004      	movs	r0, #4
 800cf06:	b2c9      	uxtb	r1, r1
 800cf08:	f7ff faa5 	bl	800c456 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdevInPllSteps & 0xFF ) );
 800cf0c:	b2e1      	uxtb	r1, r4
 800cf0e:	2005      	movs	r0, #5
 800cf10:	f7ff faa1 	bl	800c456 <SX1276Write>
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 800cf14:	0039      	movs	r1, r7
 800cf16:	4871      	ldr	r0, [pc, #452]	; (800d0dc <SX1276SetTxConfig+0x324>)
 800cf18:	f7f3 f926 	bl	8000168 <__udivsi3>
 800cf1c:	0004      	movs	r4, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 800cf1e:	0a01      	lsrs	r1, r0, #8
 800cf20:	b2c9      	uxtb	r1, r1
 800cf22:	2002      	movs	r0, #2
 800cf24:	f7ff fa97 	bl	800c456 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 800cf28:	2003      	movs	r0, #3
 800cf2a:	b2e1      	uxtb	r1, r4
 800cf2c:	f7ff fa93 	bl	800c456 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 800cf30:	9b01      	ldr	r3, [sp, #4]
 800cf32:	2025      	movs	r0, #37	; 0x25
 800cf34:	0a19      	lsrs	r1, r3, #8
 800cf36:	f7ff fa8e 	bl	800c456 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 800cf3a:	466b      	mov	r3, sp
 800cf3c:	2026      	movs	r0, #38	; 0x26
 800cf3e:	7919      	ldrb	r1, [r3, #4]
 800cf40:	f7ff fa89 	bl	800c456 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 800cf44:	2030      	movs	r0, #48	; 0x30
 800cf46:	f7ff fad1 	bl	800c4ec <SX1276Read>
                           RF_PACKETCONFIG1_CRC_MASK &
 800cf4a:	216f      	movs	r1, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800cf4c:	9b02      	ldr	r3, [sp, #8]
                           RF_PACKETCONFIG1_CRC_MASK &
 800cf4e:	4008      	ands	r0, r1
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800cf50:	0031      	movs	r1, r6
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d101      	bne.n	800cf5a <SX1276SetTxConfig+0x1a2>
 800cf56:	2180      	movs	r1, #128	; 0x80
 800cf58:	4249      	negs	r1, r1
                           ( crcOn << 4 ) );
 800cf5a:	9b03      	ldr	r3, [sp, #12]
 800cf5c:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 800cf5e:	4318      	orrs	r0, r3
 800cf60:	4301      	orrs	r1, r0
            SX1276Write( REG_PACKETCONFIG1,
 800cf62:	b2c9      	uxtb	r1, r1
 800cf64:	2030      	movs	r0, #48	; 0x30
 800cf66:	f7ff fa76 	bl	800c456 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 800cf6a:	2031      	movs	r0, #49	; 0x31
 800cf6c:	f7ff fabe 	bl	800c4ec <SX1276Read>
 800cf70:	2140      	movs	r1, #64	; 0x40
 800cf72:	4301      	orrs	r1, r0
 800cf74:	2031      	movs	r0, #49	; 0x31
 800cf76:	b2c9      	uxtb	r1, r1
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800cf78:	f7ff fa6d 	bl	800c456 <SX1276Write>
}
 800cf7c:	e77d      	b.n	800ce7a <SX1276SetTxConfig+0xc2>
            SX1276.Settings.LoRa.Power = power;
 800cf7e:	4b53      	ldr	r3, [pc, #332]	; (800d0cc <SX1276SetTxConfig+0x314>)
 800cf80:	001a      	movs	r2, r3
 800cf82:	3240      	adds	r2, #64	; 0x40
 800cf84:	7014      	strb	r4, [r2, #0]
            if( bandwidth > 2 )
 800cf86:	9a05      	ldr	r2, [sp, #20]
 800cf88:	2a02      	cmp	r2, #2
 800cf8a:	d900      	bls.n	800cf8e <SX1276SetTxConfig+0x1d6>
                while( 1 );
 800cf8c:	e7fe      	b.n	800cf8c <SX1276SetTxConfig+0x1d4>
            SX1276.Settings.LoRa.Coderate = coderate;
 800cf8e:	001a      	movs	r2, r3
 800cf90:	9907      	ldr	r1, [sp, #28]
 800cf92:	324d      	adds	r2, #77	; 0x4d
 800cf94:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 800cf96:	001a      	movs	r2, r3
 800cf98:	9901      	ldr	r1, [sp, #4]
 800cf9a:	324e      	adds	r2, #78	; 0x4e
 800cf9c:	8011      	strh	r1, [r2, #0]
            SX1276.Settings.LoRa.FixLen = fixLen;
 800cf9e:	001a      	movs	r2, r3
 800cfa0:	9902      	ldr	r1, [sp, #8]
 800cfa2:	3250      	adds	r2, #80	; 0x50
 800cfa4:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 800cfa6:	001a      	movs	r2, r3
 800cfa8:	9908      	ldr	r1, [sp, #32]
 800cfaa:	3253      	adds	r2, #83	; 0x53
 800cfac:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 800cfae:	001a      	movs	r2, r3
 800cfb0:	990a      	ldr	r1, [sp, #40]	; 0x28
 800cfb2:	3254      	adds	r2, #84	; 0x54
 800cfb4:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 800cfb6:	001a      	movs	r2, r3
 800cfb8:	9903      	ldr	r1, [sp, #12]
 800cfba:	3252      	adds	r2, #82	; 0x52
 800cfbc:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 800cfbe:	001a      	movs	r2, r3
 800cfc0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cfc2:	3255      	adds	r2, #85	; 0x55
            bandwidth += 7;
 800cfc4:	9d05      	ldr	r5, [sp, #20]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 800cfc6:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.TxTimeout = timeout;
 800cfc8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
            bandwidth += 7;
 800cfca:	3507      	adds	r5, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 800cfcc:	2406      	movs	r4, #6
 800cfce:	645d      	str	r5, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 800cfd0:	649f      	str	r7, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.TxTimeout = timeout;
 800cfd2:	659a      	str	r2, [r3, #88]	; 0x58
            if( datarate > 12 )
 800cfd4:	2f06      	cmp	r7, #6
 800cfd6:	d303      	bcc.n	800cfe0 <SX1276SetTxConfig+0x228>
 800cfd8:	003c      	movs	r4, r7
 800cfda:	2f0c      	cmp	r7, #12
 800cfdc:	d900      	bls.n	800cfe0 <SX1276SetTxConfig+0x228>
 800cfde:	240c      	movs	r4, #12
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800cfe0:	2d07      	cmp	r5, #7
 800cfe2:	d160      	bne.n	800d0a6 <SX1276SetTxConfig+0x2ee>
 800cfe4:	0022      	movs	r2, r4
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	2101      	movs	r1, #1
 800cfea:	3a0b      	subs	r2, #11
 800cfec:	4291      	cmp	r1, r2
 800cfee:	415b      	adcs	r3, r3
 800cff0:	b2db      	uxtb	r3, r3
 800cff2:	4e36      	ldr	r6, [pc, #216]	; (800d0cc <SX1276SetTxConfig+0x314>)
 800cff4:	0032      	movs	r2, r6
 800cff6:	324c      	adds	r2, #76	; 0x4c
 800cff8:	7013      	strb	r3, [r2, #0]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800cffa:	9b08      	ldr	r3, [sp, #32]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d00f      	beq.n	800d020 <SX1276SetTxConfig+0x268>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 800d000:	2044      	movs	r0, #68	; 0x44
 800d002:	f7ff fa73 	bl	800c4ec <SX1276Read>
 800d006:	2180      	movs	r1, #128	; 0x80
 800d008:	4249      	negs	r1, r1
 800d00a:	4301      	orrs	r1, r0
 800d00c:	b2c9      	uxtb	r1, r1
 800d00e:	2044      	movs	r0, #68	; 0x44
 800d010:	f7ff fa21 	bl	800c456 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 800d014:	0033      	movs	r3, r6
 800d016:	3354      	adds	r3, #84	; 0x54
 800d018:	2024      	movs	r0, #36	; 0x24
 800d01a:	7819      	ldrb	r1, [r3, #0]
 800d01c:	f7ff fa1b 	bl	800c456 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 800d020:	201d      	movs	r0, #29
 800d022:	f7ff fa63 	bl	800c4ec <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800d026:	9b07      	ldr	r3, [sp, #28]
 800d028:	012d      	lsls	r5, r5, #4
 800d02a:	0059      	lsls	r1, r3, #1
 800d02c:	9b02      	ldr	r3, [sp, #8]
            SX1276Write( REG_LR_MODEMCONFIG1,
 800d02e:	201d      	movs	r0, #29
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800d030:	430b      	orrs	r3, r1
 800d032:	0019      	movs	r1, r3
 800d034:	4329      	orrs	r1, r5
            SX1276Write( REG_LR_MODEMCONFIG1,
 800d036:	b2c9      	uxtb	r1, r1
 800d038:	f7ff fa0d 	bl	800c456 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 800d03c:	201e      	movs	r0, #30
 800d03e:	f7ff fa55 	bl	800c4ec <SX1276Read>
                           RFLR_MODEMCONFIG2_SF_MASK &
 800d042:	210b      	movs	r1, #11
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 800d044:	9b03      	ldr	r3, [sp, #12]
 800d046:	0124      	lsls	r4, r4, #4
 800d048:	009b      	lsls	r3, r3, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
 800d04a:	431c      	orrs	r4, r3
                           RFLR_MODEMCONFIG2_SF_MASK &
 800d04c:	4001      	ands	r1, r0
            SX1276Write( REG_LR_MODEMCONFIG2,
 800d04e:	4321      	orrs	r1, r4
 800d050:	b2c9      	uxtb	r1, r1
 800d052:	201e      	movs	r0, #30
 800d054:	f7ff f9ff 	bl	800c456 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 800d058:	2026      	movs	r0, #38	; 0x26
 800d05a:	f7ff fa47 	bl	800c4ec <SX1276Read>
 800d05e:	2308      	movs	r3, #8
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800d060:	364c      	adds	r6, #76	; 0x4c
 800d062:	7831      	ldrb	r1, [r6, #0]
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 800d064:	4398      	bics	r0, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800d066:	00c9      	lsls	r1, r1, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 800d068:	4301      	orrs	r1, r0
            SX1276Write( REG_LR_MODEMCONFIG3,
 800d06a:	b2c9      	uxtb	r1, r1
 800d06c:	2026      	movs	r0, #38	; 0x26
 800d06e:	f7ff f9f2 	bl	800c456 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 800d072:	9b01      	ldr	r3, [sp, #4]
 800d074:	2020      	movs	r0, #32
 800d076:	0a19      	lsrs	r1, r3, #8
 800d078:	f7ff f9ed 	bl	800c456 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 800d07c:	466b      	mov	r3, sp
 800d07e:	2021      	movs	r0, #33	; 0x21
 800d080:	7919      	ldrb	r1, [r3, #4]
 800d082:	f7ff f9e8 	bl	800c456 <SX1276Write>
            if( datarate == 6 )
 800d086:	2407      	movs	r4, #7
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800d088:	2031      	movs	r0, #49	; 0x31
            if( datarate == 6 )
 800d08a:	2f06      	cmp	r7, #6
 800d08c:	d813      	bhi.n	800d0b6 <SX1276SetTxConfig+0x2fe>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800d08e:	f7ff fa2d 	bl	800c4ec <SX1276Read>
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 800d092:	2105      	movs	r1, #5
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800d094:	43a0      	bics	r0, r4
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 800d096:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800d098:	b2c9      	uxtb	r1, r1
 800d09a:	2031      	movs	r0, #49	; 0x31
 800d09c:	f7ff f9db 	bl	800c456 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800d0a0:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800d0a2:	2037      	movs	r0, #55	; 0x37
 800d0a4:	e768      	b.n	800cf78 <SX1276SetTxConfig+0x1c0>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 800d0a6:	2300      	movs	r3, #0
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800d0a8:	2d08      	cmp	r5, #8
 800d0aa:	d1a2      	bne.n	800cff2 <SX1276SetTxConfig+0x23a>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 800d0ac:	330b      	adds	r3, #11
 800d0ae:	42bb      	cmp	r3, r7
 800d0b0:	419b      	sbcs	r3, r3
 800d0b2:	425b      	negs	r3, r3
 800d0b4:	e79d      	b.n	800cff2 <SX1276SetTxConfig+0x23a>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800d0b6:	f7ff fa19 	bl	800c4ec <SX1276Read>
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 800d0ba:	2103      	movs	r1, #3
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800d0bc:	43a0      	bics	r0, r4
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 800d0be:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800d0c0:	b2c9      	uxtb	r1, r1
 800d0c2:	2031      	movs	r0, #49	; 0x31
 800d0c4:	f7ff f9c7 	bl	800c456 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800d0c8:	210a      	movs	r1, #10
 800d0ca:	e7ea      	b.n	800d0a2 <SX1276SetTxConfig+0x2ea>
 800d0cc:	20001004 	.word	0x20001004
 800d0d0:	0800f19b 	.word	0x0800f19b
 800d0d4:	00003d09 	.word	0x00003d09
 800d0d8:	00001e84 	.word	0x00001e84
 800d0dc:	01e84800 	.word	0x01e84800

0800d0e0 <SX1276SetTxContinuousWave>:
{
 800d0e0:	b530      	push	{r4, r5, lr}
    uint32_t timeout = ( uint32_t )time * 1000;
 800d0e2:	24fa      	movs	r4, #250	; 0xfa
{
 800d0e4:	b08b      	sub	sp, #44	; 0x2c
    uint32_t timeout = ( uint32_t )time * 1000;
 800d0e6:	00a4      	lsls	r4, r4, #2
 800d0e8:	4354      	muls	r4, r2
{
 800d0ea:	000d      	movs	r5, r1
    SX1276SetChannel( freq );
 800d0ec:	f7ff f9bc 	bl	800c468 <SX1276SetChannel>
    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 800d0f0:	2305      	movs	r3, #5
 800d0f2:	9302      	str	r3, [sp, #8]
 800d0f4:	2396      	movs	r3, #150	; 0x96
 800d0f6:	2000      	movs	r0, #0
 800d0f8:	015b      	lsls	r3, r3, #5
 800d0fa:	0002      	movs	r2, r0
 800d0fc:	0029      	movs	r1, r5
 800d0fe:	9007      	str	r0, [sp, #28]
 800d100:	9006      	str	r0, [sp, #24]
 800d102:	9005      	str	r0, [sp, #20]
 800d104:	9004      	str	r0, [sp, #16]
 800d106:	9003      	str	r0, [sp, #12]
 800d108:	9001      	str	r0, [sp, #4]
 800d10a:	9300      	str	r3, [sp, #0]
 800d10c:	9408      	str	r4, [sp, #32]
 800d10e:	0003      	movs	r3, r0
 800d110:	f7ff fe52 	bl	800cdb8 <SX1276SetTxConfig>
    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 800d114:	2031      	movs	r0, #49	; 0x31
 800d116:	f7ff f9e9 	bl	800c4ec <SX1276Read>
 800d11a:	2540      	movs	r5, #64	; 0x40
 800d11c:	43a8      	bics	r0, r5
 800d11e:	b2c1      	uxtb	r1, r0
 800d120:	2031      	movs	r0, #49	; 0x31
 800d122:	f7ff f998 	bl	800c456 <SX1276Write>
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 800d126:	0028      	movs	r0, r5
 800d128:	21f0      	movs	r1, #240	; 0xf0
 800d12a:	f7ff f994 	bl	800c456 <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 800d12e:	21a0      	movs	r1, #160	; 0xa0
 800d130:	2041      	movs	r0, #65	; 0x41
 800d132:	f7ff f990 	bl	800c456 <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
 800d136:	4d08      	ldr	r5, [pc, #32]	; (800d158 <SX1276SetTxContinuousWave+0x78>)
 800d138:	0021      	movs	r1, r4
 800d13a:	351c      	adds	r5, #28
 800d13c:	0028      	movs	r0, r5
 800d13e:	f000 ffd7 	bl	800e0f0 <UTIL_TIMER_SetPeriod>
    SX1276.Settings.State = RF_TX_RUNNING;
 800d142:	2202      	movs	r2, #2
 800d144:	4b05      	ldr	r3, [pc, #20]	; (800d15c <SX1276SetTxContinuousWave+0x7c>)
    TimerStart( &TxTimeoutTimer );
 800d146:	0028      	movs	r0, r5
    SX1276.Settings.State = RF_TX_RUNNING;
 800d148:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 800d14a:	f000 ff8f 	bl	800e06c <UTIL_TIMER_Start>
    if( opMode == RF_OPMODE_SLEEP )
 800d14e:	2003      	movs	r0, #3
 800d150:	f7ff fa6e 	bl	800c630 <SX1276SetOpMode.part.0>
}
 800d154:	b00b      	add	sp, #44	; 0x2c
 800d156:	bd30      	pop	{r4, r5, pc}
 800d158:	20001084 	.word	0x20001084
 800d15c:	20001004 	.word	0x20001004

0800d160 <RxChainCalibration>:
{
 800d160:	b570      	push	{r4, r5, r6, lr}
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 800d162:	2009      	movs	r0, #9
 800d164:	f7ff f9c2 	bl	800c4ec <SX1276Read>
 800d168:	0005      	movs	r5, r0
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800d16a:	2006      	movs	r0, #6
 800d16c:	f7ff f9be 	bl	800c4ec <SX1276Read>
 800d170:	0004      	movs	r4, r0
                                                    ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 800d172:	2007      	movs	r0, #7
 800d174:	f7ff f9ba 	bl	800c4ec <SX1276Read>
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800d178:	0424      	lsls	r4, r4, #16
                                                    ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 800d17a:	0200      	lsls	r0, r0, #8
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800d17c:	4304      	orrs	r4, r0
                                                    ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) );
 800d17e:	2008      	movs	r0, #8
 800d180:	f7ff f9b4 	bl	800c4ec <SX1276Read>
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 800d184:	4b1a      	ldr	r3, [pc, #104]	; (800d1f0 <RxChainCalibration+0x90>)
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800d186:	4304      	orrs	r4, r0
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 800d188:	b2c0      	uxtb	r0, r0
 800d18a:	4358      	muls	r0, r3
    freqInHzInt = pllSteps >> SX1276_PLL_STEP_SHIFT_AMOUNT;
 800d18c:	0a24      	lsrs	r4, r4, #8
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 800d18e:	435c      	muls	r4, r3
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 800d190:	3080      	adds	r0, #128	; 0x80
 800d192:	0a00      	lsrs	r0, r0, #8
    SX1276Write( REG_PACONFIG, 0x00 );
 800d194:	2100      	movs	r1, #0
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 800d196:	1904      	adds	r4, r0, r4
    SX1276Write( REG_PACONFIG, 0x00 );
 800d198:	2009      	movs	r0, #9
 800d19a:	f7ff f95c 	bl	800c456 <SX1276Write>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 800d19e:	203b      	movs	r0, #59	; 0x3b
 800d1a0:	f7ff f9a4 	bl	800c4ec <SX1276Read>
 800d1a4:	2140      	movs	r1, #64	; 0x40
 800d1a6:	4301      	orrs	r1, r0
 800d1a8:	b2c9      	uxtb	r1, r1
 800d1aa:	203b      	movs	r0, #59	; 0x3b
 800d1ac:	f7ff f953 	bl	800c456 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 800d1b0:	2620      	movs	r6, #32
 800d1b2:	203b      	movs	r0, #59	; 0x3b
 800d1b4:	f7ff f99a 	bl	800c4ec <SX1276Read>
 800d1b8:	4230      	tst	r0, r6
 800d1ba:	d1fa      	bne.n	800d1b2 <RxChainCalibration+0x52>
    SX1276SetChannel( 868000000 );
 800d1bc:	480d      	ldr	r0, [pc, #52]	; (800d1f4 <RxChainCalibration+0x94>)
 800d1be:	f7ff f953 	bl	800c468 <SX1276SetChannel>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 800d1c2:	203b      	movs	r0, #59	; 0x3b
 800d1c4:	f7ff f992 	bl	800c4ec <SX1276Read>
 800d1c8:	2140      	movs	r1, #64	; 0x40
 800d1ca:	4301      	orrs	r1, r0
 800d1cc:	b2c9      	uxtb	r1, r1
 800d1ce:	203b      	movs	r0, #59	; 0x3b
 800d1d0:	f7ff f941 	bl	800c456 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 800d1d4:	2620      	movs	r6, #32
 800d1d6:	203b      	movs	r0, #59	; 0x3b
 800d1d8:	f7ff f988 	bl	800c4ec <SX1276Read>
 800d1dc:	4230      	tst	r0, r6
 800d1de:	d1fa      	bne.n	800d1d6 <RxChainCalibration+0x76>
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 800d1e0:	0029      	movs	r1, r5
 800d1e2:	2009      	movs	r0, #9
 800d1e4:	f7ff f937 	bl	800c456 <SX1276Write>
    SX1276SetChannel( initialFreq );
 800d1e8:	0020      	movs	r0, r4
 800d1ea:	f7ff f93d 	bl	800c468 <SX1276SetChannel>
}
 800d1ee:	bd70      	pop	{r4, r5, r6, pc}
 800d1f0:	00003d09 	.word	0x00003d09
 800d1f4:	33bca100 	.word	0x33bca100

0800d1f8 <SX1276Init>:
{
 800d1f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    RadioEvents = events;
 800d1fa:	4d21      	ldr	r5, [pc, #132]	; (800d280 <SX1276Init+0x88>)
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 800d1fc:	2400      	movs	r4, #0
    RadioEvents = events;
 800d1fe:	6028      	str	r0, [r5, #0]
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 800d200:	2101      	movs	r1, #1
 800d202:	0028      	movs	r0, r5
 800d204:	4e1f      	ldr	r6, [pc, #124]	; (800d284 <SX1276Init+0x8c>)
 800d206:	0022      	movs	r2, r4
 800d208:	0033      	movs	r3, r6
 800d20a:	9400      	str	r4, [sp, #0]
 800d20c:	4249      	negs	r1, r1
 800d20e:	301c      	adds	r0, #28
 800d210:	f000 fe78 	bl	800df04 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 800d214:	2101      	movs	r1, #1
 800d216:	0033      	movs	r3, r6
 800d218:	0022      	movs	r2, r4
 800d21a:	1d28      	adds	r0, r5, #4
 800d21c:	9400      	str	r4, [sp, #0]
 800d21e:	4249      	negs	r1, r1
 800d220:	f000 fe70 	bl	800df04 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 800d224:	4d18      	ldr	r5, [pc, #96]	; (800d288 <SX1276Init+0x90>)
 800d226:	2101      	movs	r1, #1
 800d228:	0028      	movs	r0, r5
 800d22a:	0033      	movs	r3, r6
 800d22c:	0022      	movs	r2, r4
 800d22e:	4249      	negs	r1, r1
 800d230:	9400      	str	r4, [sp, #0]
 800d232:	3068      	adds	r0, #104	; 0x68
 800d234:	f000 fe66 	bl	800df04 <UTIL_TIMER_Create>
    Sx_Board_SetXO( SET );
 800d238:	2001      	movs	r0, #1
 800d23a:	f7f5 fe41 	bl	8002ec0 <SX1276MB1MAS_RADIO_SetXO>
    Sx_Board_Reset();
 800d23e:	f7f5 ffa9 	bl	8003194 <SX1276MB1MAS_RADIO_Reset>
    RxChainCalibration( );
 800d242:	f7ff ff8d 	bl	800d160 <RxChainCalibration>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
 800d246:	f7ff fb71 	bl	800c92c <SX1276SetOpMode.constprop.0>
    Sx_Board_IoIrqInit( DioIrq );
 800d24a:	4810      	ldr	r0, [pc, #64]	; (800d28c <SX1276Init+0x94>)
 800d24c:	f7f5 ff56 	bl	80030fc <SX1276MB1MAS_RADIO_IoIrqInit>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800d250:	4e0f      	ldr	r6, [pc, #60]	; (800d290 <SX1276Init+0x98>)
 800d252:	0034      	movs	r4, r6
 800d254:	363c      	adds	r6, #60	; 0x3c
 800d256:	340c      	adds	r4, #12
        SX1276SetModem( RadioRegsInit[i].Modem );
 800d258:	7820      	ldrb	r0, [r4, #0]
 800d25a:	f7ff fb77 	bl	800c94c <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 800d25e:	78a1      	ldrb	r1, [r4, #2]
 800d260:	7860      	ldrb	r0, [r4, #1]
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800d262:	3403      	adds	r4, #3
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 800d264:	f7ff f8f7 	bl	800c456 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800d268:	42b4      	cmp	r4, r6
 800d26a:	d1f5      	bne.n	800d258 <SX1276Init+0x60>
    SX1276SetModem( MODEM_FSK );
 800d26c:	2000      	movs	r0, #0
 800d26e:	f7ff fb6d 	bl	800c94c <SX1276SetModem>
    SX1276.Settings.State = RF_IDLE;
 800d272:	2300      	movs	r3, #0
 800d274:	712b      	strb	r3, [r5, #4]
    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
 800d276:	f7f5 fe21 	bl	8002ebc <SX1276MB1MAS_RADIO_GetWakeUpTime>
 800d27a:	3002      	adds	r0, #2
}
 800d27c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 800d27e:	46c0      	nop			; (mov r8, r8)
 800d280:	20001084 	.word	0x20001084
 800d284:	0800d295 	.word	0x0800d295
 800d288:	20001004 	.word	0x20001004
 800d28c:	200000d0 	.word	0x200000d0
 800d290:	0800ea68 	.word	0x0800ea68

0800d294 <SX1276OnTimeoutIrq>:
{
 800d294:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 800d296:	4c2a      	ldr	r4, [pc, #168]	; (800d340 <SX1276OnTimeoutIrq+0xac>)
 800d298:	7923      	ldrb	r3, [r4, #4]
 800d29a:	2b01      	cmp	r3, #1
 800d29c:	d002      	beq.n	800d2a4 <SX1276OnTimeoutIrq+0x10>
 800d29e:	2b02      	cmp	r3, #2
 800d2a0:	d02a      	beq.n	800d2f8 <SX1276OnTimeoutIrq+0x64>
}
 800d2a2:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1276.Settings.Modem == MODEM_FSK )
 800d2a4:	7963      	ldrb	r3, [r4, #5]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d117      	bne.n	800d2da <SX1276OnTimeoutIrq+0x46>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800d2aa:	8623      	strh	r3, [r4, #48]	; 0x30
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 800d2ac:	210b      	movs	r1, #11
 800d2ae:	203e      	movs	r0, #62	; 0x3e
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800d2b0:	87a3      	strh	r3, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 800d2b2:	8763      	strh	r3, [r4, #58]	; 0x3a
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 800d2b4:	f7ff f8cf 	bl	800c456 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 800d2b8:	2110      	movs	r1, #16
 800d2ba:	203f      	movs	r0, #63	; 0x3f
 800d2bc:	f7ff f8cb 	bl	800c456 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 800d2c0:	1de3      	adds	r3, r4, #7
 800d2c2:	7fdb      	ldrb	r3, [r3, #31]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d011      	beq.n	800d2ec <SX1276OnTimeoutIrq+0x58>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800d2c8:	200d      	movs	r0, #13
 800d2ca:	f7ff f90f 	bl	800c4ec <SX1276Read>
 800d2ce:	2140      	movs	r1, #64	; 0x40
 800d2d0:	4301      	orrs	r1, r0
 800d2d2:	b2c9      	uxtb	r1, r1
 800d2d4:	200d      	movs	r0, #13
 800d2d6:	f7ff f8be 	bl	800c456 <SX1276Write>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800d2da:	4b1a      	ldr	r3, [pc, #104]	; (800d344 <SX1276OnTimeoutIrq+0xb0>)
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d0df      	beq.n	800d2a2 <SX1276OnTimeoutIrq+0xe>
 800d2e2:	68db      	ldr	r3, [r3, #12]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d0dc      	beq.n	800d2a2 <SX1276OnTimeoutIrq+0xe>
            RadioEvents->TxTimeout( );
 800d2e8:	4798      	blx	r3
}
 800d2ea:	e7da      	b.n	800d2a2 <SX1276OnTimeoutIrq+0xe>
                TimerStop( &RxTimeoutSyncWord );
 800d2ec:	0020      	movs	r0, r4
 800d2ee:	3068      	adds	r0, #104	; 0x68
                SX1276.Settings.State = RF_IDLE;
 800d2f0:	7123      	strb	r3, [r4, #4]
                TimerStop( &RxTimeoutSyncWord );
 800d2f2:	f000 fe67 	bl	800dfc4 <UTIL_TIMER_Stop>
 800d2f6:	e7f0      	b.n	800d2da <SX1276OnTimeoutIrq+0x46>
    Sx_Board_Reset();
 800d2f8:	f7f5 ff4c 	bl	8003194 <SX1276MB1MAS_RADIO_Reset>
        RxChainCalibration( );
 800d2fc:	f7ff ff30 	bl	800d160 <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 800d300:	f7ff fb14 	bl	800c92c <SX1276SetOpMode.constprop.0>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800d304:	4e10      	ldr	r6, [pc, #64]	; (800d348 <SX1276OnTimeoutIrq+0xb4>)
 800d306:	0035      	movs	r5, r6
 800d308:	363c      	adds	r6, #60	; 0x3c
 800d30a:	350c      	adds	r5, #12
            SX1276SetModem( RadioRegsInit[i].Modem );
 800d30c:	7828      	ldrb	r0, [r5, #0]
 800d30e:	f7ff fb1d 	bl	800c94c <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 800d312:	78a9      	ldrb	r1, [r5, #2]
 800d314:	7868      	ldrb	r0, [r5, #1]
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800d316:	3503      	adds	r5, #3
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 800d318:	f7ff f89d 	bl	800c456 <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800d31c:	42b5      	cmp	r5, r6
 800d31e:	d1f5      	bne.n	800d30c <SX1276OnTimeoutIrq+0x78>
        SX1276SetModem( MODEM_FSK );
 800d320:	2000      	movs	r0, #0
 800d322:	f7ff fb13 	bl	800c94c <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 800d326:	0023      	movs	r3, r4
 800d328:	335c      	adds	r3, #92	; 0x5c
 800d32a:	7818      	ldrb	r0, [r3, #0]
 800d32c:	f7ff fb5e 	bl	800c9ec <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 800d330:	2300      	movs	r3, #0
 800d332:	7123      	strb	r3, [r4, #4]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800d334:	4b03      	ldr	r3, [pc, #12]	; (800d344 <SX1276OnTimeoutIrq+0xb0>)
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d0b2      	beq.n	800d2a2 <SX1276OnTimeoutIrq+0xe>
 800d33c:	685b      	ldr	r3, [r3, #4]
 800d33e:	e7d1      	b.n	800d2e4 <SX1276OnTimeoutIrq+0x50>
 800d340:	20001004 	.word	0x20001004
 800d344:	20001084 	.word	0x20001084
 800d348:	0800ea68 	.word	0x0800ea68

0800d34c <SX1276OnDio0Irq>:
{
 800d34c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    volatile uint8_t irqFlags = 0;
 800d34e:	466b      	mov	r3, sp
 800d350:	1dde      	adds	r6, r3, #7
 800d352:	2300      	movs	r3, #0
    switch( SX1276.Settings.State )
 800d354:	4c8a      	ldr	r4, [pc, #552]	; (800d580 <SX1276OnDio0Irq+0x234>)
    volatile uint8_t irqFlags = 0;
 800d356:	7033      	strb	r3, [r6, #0]
    switch( SX1276.Settings.State )
 800d358:	7923      	ldrb	r3, [r4, #4]
 800d35a:	2b01      	cmp	r3, #1
 800d35c:	d003      	beq.n	800d366 <SX1276OnDio0Irq+0x1a>
 800d35e:	2b02      	cmp	r3, #2
 800d360:	d100      	bne.n	800d364 <SX1276OnDio0Irq+0x18>
 800d362:	e0f8      	b.n	800d556 <SX1276OnDio0Irq+0x20a>
}
 800d364:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            switch( SX1276.Settings.Modem )
 800d366:	7963      	ldrb	r3, [r4, #5]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d023      	beq.n	800d3b4 <SX1276OnDio0Irq+0x68>
 800d36c:	2b01      	cmp	r3, #1
 800d36e:	d1f9      	bne.n	800d364 <SX1276OnDio0Irq+0x18>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 800d370:	2140      	movs	r1, #64	; 0x40
 800d372:	2012      	movs	r0, #18
 800d374:	f7ff f86f 	bl	800c456 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 800d378:	2012      	movs	r0, #18
 800d37a:	f7ff f8b7 	bl	800c4ec <SX1276Read>
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 800d37e:	2120      	movs	r1, #32
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 800d380:	7030      	strb	r0, [r6, #0]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 800d382:	7833      	ldrb	r3, [r6, #0]
 800d384:	4d7f      	ldr	r5, [pc, #508]	; (800d584 <SX1276OnDio0Irq+0x238>)
 800d386:	420b      	tst	r3, r1
 800d388:	d100      	bne.n	800d38c <SX1276OnDio0Irq+0x40>
 800d38a:	e08a      	b.n	800d4a2 <SX1276OnDio0Irq+0x156>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 800d38c:	2012      	movs	r0, #18
 800d38e:	f7ff f862 	bl	800c456 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 800d392:	0023      	movs	r3, r4
 800d394:	3356      	adds	r3, #86	; 0x56
 800d396:	781b      	ldrb	r3, [r3, #0]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d100      	bne.n	800d39e <SX1276OnDio0Irq+0x52>
                            SX1276.Settings.State = RF_IDLE;
 800d39c:	7123      	strb	r3, [r4, #4]
                        TimerStop( &RxTimeoutTimer );
 800d39e:	1d28      	adds	r0, r5, #4
 800d3a0:	f000 fe10 	bl	800dfc4 <UTIL_TIMER_Stop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 800d3a4:	682b      	ldr	r3, [r5, #0]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d0dc      	beq.n	800d364 <SX1276OnDio0Irq+0x18>
 800d3aa:	691b      	ldr	r3, [r3, #16]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d0d9      	beq.n	800d364 <SX1276OnDio0Irq+0x18>
                    RadioEvents->TxDone( );
 800d3b0:	4798      	blx	r3
}
 800d3b2:	e7d7      	b.n	800d364 <SX1276OnDio0Irq+0x18>
                if( SX1276.Settings.Fsk.CrcOn == true )
 800d3b4:	1d63      	adds	r3, r4, #5
 800d3b6:	7fdb      	ldrb	r3, [r3, #31]
 800d3b8:	4d72      	ldr	r5, [pc, #456]	; (800d584 <SX1276OnDio0Irq+0x238>)
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d030      	beq.n	800d420 <SX1276OnDio0Irq+0xd4>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 800d3be:	203f      	movs	r0, #63	; 0x3f
 800d3c0:	f7ff f894 	bl	800c4ec <SX1276Read>
 800d3c4:	7030      	strb	r0, [r6, #0]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 800d3c6:	7833      	ldrb	r3, [r6, #0]
 800d3c8:	079b      	lsls	r3, r3, #30
 800d3ca:	d429      	bmi.n	800d420 <SX1276OnDio0Irq+0xd4>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 800d3cc:	210b      	movs	r1, #11
 800d3ce:	203e      	movs	r0, #62	; 0x3e
 800d3d0:	f7ff f841 	bl	800c456 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 800d3d4:	2110      	movs	r1, #16
 800d3d6:	203f      	movs	r0, #63	; 0x3f
 800d3d8:	f7ff f83d 	bl	800c456 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 800d3dc:	1d28      	adds	r0, r5, #4
 800d3de:	f000 fdf1 	bl	800dfc4 <UTIL_TIMER_Stop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 800d3e2:	1de3      	adds	r3, r4, #7
 800d3e4:	7fde      	ldrb	r6, [r3, #31]
 800d3e6:	2e00      	cmp	r6, #0
 800d3e8:	d110      	bne.n	800d40c <SX1276OnDio0Irq+0xc0>
                            TimerStop( &RxTimeoutSyncWord );
 800d3ea:	0020      	movs	r0, r4
 800d3ec:	3068      	adds	r0, #104	; 0x68
 800d3ee:	f000 fde9 	bl	800dfc4 <UTIL_TIMER_Stop>
                            SX1276.Settings.State = RF_IDLE;
 800d3f2:	7126      	strb	r6, [r4, #4]
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 800d3f4:	682b      	ldr	r3, [r5, #0]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d003      	beq.n	800d402 <SX1276OnDio0Irq+0xb6>
 800d3fa:	691b      	ldr	r3, [r3, #16]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d000      	beq.n	800d402 <SX1276OnDio0Irq+0xb6>
                            RadioEvents->RxError( );
 800d400:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800d402:	2300      	movs	r3, #0
 800d404:	8623      	strh	r3, [r4, #48]	; 0x30
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800d406:	87a3      	strh	r3, [r4, #60]	; 0x3c
                        SX1276.Settings.FskPacketHandler.Size = 0;
 800d408:	8763      	strh	r3, [r4, #58]	; 0x3a
                        break;
 800d40a:	e7ab      	b.n	800d364 <SX1276OnDio0Irq+0x18>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800d40c:	200d      	movs	r0, #13
 800d40e:	f7ff f86d 	bl	800c4ec <SX1276Read>
 800d412:	2140      	movs	r1, #64	; 0x40
 800d414:	4301      	orrs	r1, r0
 800d416:	b2c9      	uxtb	r1, r1
 800d418:	200d      	movs	r0, #13
 800d41a:	f7ff f81c 	bl	800c456 <SX1276Write>
 800d41e:	e7e9      	b.n	800d3f4 <SX1276OnDio0Irq+0xa8>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 800d420:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 800d422:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 800d424:	0013      	movs	r3, r2
 800d426:	4e58      	ldr	r6, [pc, #352]	; (800d588 <SX1276OnDio0Irq+0x23c>)
 800d428:	430b      	orrs	r3, r1
 800d42a:	d10a      	bne.n	800d442 <SX1276OnDio0Irq+0xf6>
                    if( SX1276.Settings.Fsk.FixLen == false )
 800d42c:	1ce3      	adds	r3, r4, #3
 800d42e:	7fd8      	ldrb	r0, [r3, #31]
 800d430:	2800      	cmp	r0, #0
 800d432:	d127      	bne.n	800d484 <SX1276OnDio0Irq+0x138>
    SX1276ReadBuffer( 0, buffer, size );
 800d434:	0021      	movs	r1, r4
 800d436:	2201      	movs	r2, #1
 800d438:	313a      	adds	r1, #58	; 0x3a
 800d43a:	f7ff f83f 	bl	800c4bc <SX1276ReadBuffer>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800d43e:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 800d440:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800d442:	1a52      	subs	r2, r2, r1
    SX1276ReadBuffer( 0, buffer, size );
 800d444:	2000      	movs	r0, #0
 800d446:	b2d2      	uxtb	r2, r2
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800d448:	1871      	adds	r1, r6, r1
    SX1276ReadBuffer( 0, buffer, size );
 800d44a:	f7ff f837 	bl	800c4bc <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800d44e:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
                TimerStop( &RxTimeoutTimer );
 800d450:	1d28      	adds	r0, r5, #4
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800d452:	87a3      	strh	r3, [r4, #60]	; 0x3c
                TimerStop( &RxTimeoutTimer );
 800d454:	f000 fdb6 	bl	800dfc4 <UTIL_TIMER_Stop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 800d458:	1de3      	adds	r3, r4, #7
 800d45a:	7fdb      	ldrb	r3, [r3, #31]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d116      	bne.n	800d48e <SX1276OnDio0Irq+0x142>
                    TimerStop( &RxTimeoutSyncWord );
 800d460:	0020      	movs	r0, r4
 800d462:	3068      	adds	r0, #104	; 0x68
                    SX1276.Settings.State = RF_IDLE;
 800d464:	7123      	strb	r3, [r4, #4]
                    TimerStop( &RxTimeoutSyncWord );
 800d466:	f000 fdad 	bl	800dfc4 <UTIL_TIMER_Stop>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800d46a:	682b      	ldr	r3, [r5, #0]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d0c8      	beq.n	800d402 <SX1276OnDio0Irq+0xb6>
 800d470:	689d      	ldr	r5, [r3, #8]
 800d472:	2d00      	cmp	r5, #0
 800d474:	d0c5      	beq.n	800d402 <SX1276OnDio0Irq+0xb6>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 800d476:	2232      	movs	r2, #50	; 0x32
 800d478:	2300      	movs	r3, #0
 800d47a:	0030      	movs	r0, r6
 800d47c:	56a2      	ldrsb	r2, [r4, r2]
 800d47e:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
 800d480:	47a8      	blx	r5
 800d482:	e7be      	b.n	800d402 <SX1276OnDio0Irq+0xb6>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 800d484:	2032      	movs	r0, #50	; 0x32
 800d486:	f7ff f831 	bl	800c4ec <SX1276Read>
 800d48a:	8760      	strh	r0, [r4, #58]	; 0x3a
 800d48c:	e7d7      	b.n	800d43e <SX1276OnDio0Irq+0xf2>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800d48e:	200d      	movs	r0, #13
 800d490:	f7ff f82c 	bl	800c4ec <SX1276Read>
 800d494:	2140      	movs	r1, #64	; 0x40
 800d496:	4301      	orrs	r1, r0
 800d498:	b2c9      	uxtb	r1, r1
 800d49a:	200d      	movs	r0, #13
 800d49c:	f7fe ffdb 	bl	800c456 <SX1276Write>
 800d4a0:	e7e3      	b.n	800d46a <SX1276OnDio0Irq+0x11e>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 800d4a2:	2019      	movs	r0, #25
 800d4a4:	f7ff f822 	bl	800c4ec <SX1276Read>
 800d4a8:	0027      	movs	r7, r4
 800d4aa:	b240      	sxtb	r0, r0
 800d4ac:	3002      	adds	r0, #2
 800d4ae:	3760      	adds	r7, #96	; 0x60
 800d4b0:	1080      	asrs	r0, r0, #2
 800d4b2:	7038      	strb	r0, [r7, #0]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 800d4b4:	201a      	movs	r0, #26
 800d4b6:	f7ff f819 	bl	800c4ec <SX1276Read>
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	0022      	movs	r2, r4
 800d4be:	56fb      	ldrsb	r3, [r7, r3]
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 800d4c0:	b201      	sxth	r1, r0
 800d4c2:	1109      	asrs	r1, r1, #4
 800d4c4:	4f31      	ldr	r7, [pc, #196]	; (800d58c <SX1276OnDio0Irq+0x240>)
 800d4c6:	b289      	uxth	r1, r1
 800d4c8:	b286      	uxth	r6, r0
 800d4ca:	3262      	adds	r2, #98	; 0x62
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	da3a      	bge.n	800d546 <SX1276OnDio0Irq+0x1fa>
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 800d4d0:	b298      	uxth	r0, r3
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800d4d2:	68a3      	ldr	r3, [r4, #8]
 800d4d4:	42bb      	cmp	r3, r7
 800d4d6:	d934      	bls.n	800d542 <SX1276OnDio0Irq+0x1f6>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 800d4d8:	389d      	subs	r0, #157	; 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 800d4da:	1830      	adds	r0, r6, r0
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 800d4dc:	1808      	adds	r0, r1, r0
 800d4de:	8010      	strh	r0, [r2, #0]
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 800d4e0:	0026      	movs	r6, r4
 800d4e2:	2013      	movs	r0, #19
 800d4e4:	f7ff f802 	bl	800c4ec <SX1276Read>
 800d4e8:	3664      	adds	r6, #100	; 0x64
 800d4ea:	7030      	strb	r0, [r6, #0]
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 800d4ec:	2010      	movs	r0, #16
 800d4ee:	f7fe fffd 	bl	800c4ec <SX1276Read>
 800d4f2:	0001      	movs	r1, r0
 800d4f4:	200d      	movs	r0, #13
 800d4f6:	f7fe ffae 	bl	800c456 <SX1276Write>
    SX1276ReadBuffer( 0, buffer, size );
 800d4fa:	7832      	ldrb	r2, [r6, #0]
 800d4fc:	4e22      	ldr	r6, [pc, #136]	; (800d588 <SX1276OnDio0Irq+0x23c>)
 800d4fe:	2000      	movs	r0, #0
 800d500:	0031      	movs	r1, r6
 800d502:	f7fe ffdb 	bl	800c4bc <SX1276ReadBuffer>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 800d506:	0023      	movs	r3, r4
 800d508:	3356      	adds	r3, #86	; 0x56
 800d50a:	781b      	ldrb	r3, [r3, #0]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d100      	bne.n	800d512 <SX1276OnDio0Irq+0x1c6>
                        SX1276.Settings.State = RF_IDLE;
 800d510:	7123      	strb	r3, [r4, #4]
                    TimerStop( &RxTimeoutTimer );
 800d512:	1d28      	adds	r0, r5, #4
 800d514:	f000 fd56 	bl	800dfc4 <UTIL_TIMER_Stop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800d518:	682b      	ldr	r3, [r5, #0]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d100      	bne.n	800d520 <SX1276OnDio0Irq+0x1d4>
 800d51e:	e721      	b.n	800d364 <SX1276OnDio0Irq+0x18>
 800d520:	689d      	ldr	r5, [r3, #8]
 800d522:	2d00      	cmp	r5, #0
 800d524:	d100      	bne.n	800d528 <SX1276OnDio0Irq+0x1dc>
 800d526:	e71d      	b.n	800d364 <SX1276OnDio0Irq+0x18>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 800d528:	0023      	movs	r3, r4
 800d52a:	0022      	movs	r2, r4
 800d52c:	3360      	adds	r3, #96	; 0x60
 800d52e:	781b      	ldrb	r3, [r3, #0]
 800d530:	3464      	adds	r4, #100	; 0x64
 800d532:	3262      	adds	r2, #98	; 0x62
 800d534:	2100      	movs	r1, #0
 800d536:	5e52      	ldrsh	r2, [r2, r1]
 800d538:	0030      	movs	r0, r6
 800d53a:	7821      	ldrb	r1, [r4, #0]
 800d53c:	b25b      	sxtb	r3, r3
 800d53e:	47a8      	blx	r5
 800d540:	e710      	b.n	800d364 <SX1276OnDio0Irq+0x18>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 800d542:	38a4      	subs	r0, #164	; 0xa4
 800d544:	e7c9      	b.n	800d4da <SX1276OnDio0Irq+0x18e>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800d546:	68a3      	ldr	r3, [r4, #8]
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 800d548:	0030      	movs	r0, r6
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800d54a:	42bb      	cmp	r3, r7
 800d54c:	d901      	bls.n	800d552 <SX1276OnDio0Irq+0x206>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 800d54e:	389d      	subs	r0, #157	; 0x9d
 800d550:	e7c4      	b.n	800d4dc <SX1276OnDio0Irq+0x190>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 800d552:	38a4      	subs	r0, #164	; 0xa4
 800d554:	e7c2      	b.n	800d4dc <SX1276OnDio0Irq+0x190>
            TimerStop( &TxTimeoutTimer );
 800d556:	4d0b      	ldr	r5, [pc, #44]	; (800d584 <SX1276OnDio0Irq+0x238>)
 800d558:	0028      	movs	r0, r5
 800d55a:	301c      	adds	r0, #28
 800d55c:	f000 fd32 	bl	800dfc4 <UTIL_TIMER_Stop>
            switch( SX1276.Settings.Modem )
 800d560:	7963      	ldrb	r3, [r4, #5]
 800d562:	2b01      	cmp	r3, #1
 800d564:	d103      	bne.n	800d56e <SX1276OnDio0Irq+0x222>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 800d566:	2108      	movs	r1, #8
 800d568:	2012      	movs	r0, #18
 800d56a:	f7fe ff74 	bl	800c456 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 800d56e:	2300      	movs	r3, #0
 800d570:	7123      	strb	r3, [r4, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800d572:	682b      	ldr	r3, [r5, #0]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d100      	bne.n	800d57a <SX1276OnDio0Irq+0x22e>
 800d578:	e6f4      	b.n	800d364 <SX1276OnDio0Irq+0x18>
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	e716      	b.n	800d3ac <SX1276OnDio0Irq+0x60>
 800d57e:	46c0      	nop			; (mov r8, r8)
 800d580:	20001004 	.word	0x20001004
 800d584:	20001084 	.word	0x20001084
 800d588:	200010b8 	.word	0x200010b8
 800d58c:	1f4add40 	.word	0x1f4add40

0800d590 <SX1276Send>:
{
 800d590:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d592:	466b      	mov	r3, sp
    switch( SX1276.Settings.Modem )
 800d594:	4c61      	ldr	r4, [pc, #388]	; (800d71c <SX1276Send+0x18c>)
{
 800d596:	71d9      	strb	r1, [r3, #7]
    switch( SX1276.Settings.Modem )
 800d598:	7965      	ldrb	r5, [r4, #5]
{
 800d59a:	1dde      	adds	r6, r3, #7
 800d59c:	0007      	movs	r7, r0
    switch( SX1276.Settings.Modem )
 800d59e:	2d00      	cmp	r5, #0
 800d5a0:	d01c      	beq.n	800d5dc <SX1276Send+0x4c>
 800d5a2:	2d01      	cmp	r5, #1
 800d5a4:	d046      	beq.n	800d634 <SX1276Send+0xa4>
 800d5a6:	2600      	movs	r6, #0
    TimerStop( &RxTimeoutTimer );
 800d5a8:	4d5d      	ldr	r5, [pc, #372]	; (800d720 <SX1276Send+0x190>)
 800d5aa:	1d28      	adds	r0, r5, #4
 800d5ac:	f000 fd0a 	bl	800dfc4 <UTIL_TIMER_Stop>
    TimerSetValue( &TxTimeoutTimer, timeout );
 800d5b0:	0028      	movs	r0, r5
 800d5b2:	0031      	movs	r1, r6
 800d5b4:	301c      	adds	r0, #28
 800d5b6:	f000 fd9b 	bl	800e0f0 <UTIL_TIMER_SetPeriod>
    switch( SX1276.Settings.Modem )
 800d5ba:	7963      	ldrb	r3, [r4, #5]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d100      	bne.n	800d5c2 <SX1276Send+0x32>
 800d5c0:	e077      	b.n	800d6b2 <SX1276Send+0x122>
 800d5c2:	2b01      	cmp	r3, #1
 800d5c4:	d100      	bne.n	800d5c8 <SX1276Send+0x38>
 800d5c6:	e08d      	b.n	800d6e4 <SX1276Send+0x154>
    TimerStart( &TxTimeoutTimer );
 800d5c8:	0028      	movs	r0, r5
    SX1276.Settings.State = RF_TX_RUNNING;
 800d5ca:	2302      	movs	r3, #2
    TimerStart( &TxTimeoutTimer );
 800d5cc:	301c      	adds	r0, #28
    SX1276.Settings.State = RF_TX_RUNNING;
 800d5ce:	7123      	strb	r3, [r4, #4]
    TimerStart( &TxTimeoutTimer );
 800d5d0:	f000 fd4c 	bl	800e06c <UTIL_TIMER_Start>
    if( opMode == RF_OPMODE_SLEEP )
 800d5d4:	2003      	movs	r0, #3
 800d5d6:	f7ff f82b 	bl	800c630 <SX1276SetOpMode.part.0>
}
 800d5da:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            SX1276.Settings.FskPacketHandler.Size = size;
 800d5dc:	7831      	ldrb	r1, [r6, #0]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800d5de:	87a5      	strh	r5, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = size;
 800d5e0:	8761      	strh	r1, [r4, #58]	; 0x3a
            if( SX1276.Settings.Fsk.FixLen == false )
 800d5e2:	1ce3      	adds	r3, r4, #3
 800d5e4:	7fd8      	ldrb	r0, [r3, #31]
 800d5e6:	2800      	cmp	r0, #0
 800d5e8:	d117      	bne.n	800d61a <SX1276Send+0x8a>
    SX1276WriteBuffer( 0, buffer, size );
 800d5ea:	2201      	movs	r2, #1
 800d5ec:	0031      	movs	r1, r6
 800d5ee:	f7fe ff1a 	bl	800c426 <SX1276WriteBuffer>
            if( ( size > 0 ) && ( size <= 64 ) )
 800d5f2:	7832      	ldrb	r2, [r6, #0]
 800d5f4:	1e53      	subs	r3, r2, #1
 800d5f6:	2b3f      	cmp	r3, #63	; 0x3f
 800d5f8:	d813      	bhi.n	800d622 <SX1276Send+0x92>
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 800d5fa:	0023      	movs	r3, r4
 800d5fc:	333f      	adds	r3, #63	; 0x3f
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 800d5fe:	0025      	movs	r5, r4
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 800d600:	701a      	strb	r2, [r3, #0]
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 800d602:	353f      	adds	r5, #63	; 0x3f
    SX1276WriteBuffer( 0, buffer, size );
 800d604:	782a      	ldrb	r2, [r5, #0]
 800d606:	0039      	movs	r1, r7
 800d608:	2000      	movs	r0, #0
 800d60a:	f7fe ff0c 	bl	800c426 <SX1276WriteBuffer>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 800d60e:	782b      	ldrb	r3, [r5, #0]
 800d610:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 800d612:	6aa6      	ldr	r6, [r4, #40]	; 0x28
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 800d614:	189b      	adds	r3, r3, r2
 800d616:	87a3      	strh	r3, [r4, #60]	; 0x3c
        break;
 800d618:	e7c6      	b.n	800d5a8 <SX1276Send+0x18>
                SX1276Write( REG_PAYLOADLENGTH, size );
 800d61a:	2032      	movs	r0, #50	; 0x32
 800d61c:	f7fe ff1b 	bl	800c456 <SX1276Write>
 800d620:	e7e7      	b.n	800d5f2 <SX1276Send+0x62>
                RADIO_MEMCPY8( RxTxBuffer, buffer, size );
 800d622:	b292      	uxth	r2, r2
 800d624:	0039      	movs	r1, r7
 800d626:	483f      	ldr	r0, [pc, #252]	; (800d724 <SX1276Send+0x194>)
 800d628:	f000 fac6 	bl	800dbb8 <UTIL_MEM_cpy_8>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 800d62c:	0023      	movs	r3, r4
 800d62e:	2220      	movs	r2, #32
 800d630:	333f      	adds	r3, #63	; 0x3f
 800d632:	e7e4      	b.n	800d5fe <SX1276Send+0x6e>
            if( SX1276.Settings.LoRa.IqInverted == true )
 800d634:	0023      	movs	r3, r4
 800d636:	3355      	adds	r3, #85	; 0x55
 800d638:	781b      	ldrb	r3, [r3, #0]
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 800d63a:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d02c      	beq.n	800d69a <SX1276Send+0x10a>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 800d640:	f7fe ff54 	bl	800c4ec <SX1276Read>
 800d644:	2341      	movs	r3, #65	; 0x41
 800d646:	4398      	bics	r0, r3
 800d648:	b2c1      	uxtb	r1, r0
 800d64a:	2033      	movs	r0, #51	; 0x33
 800d64c:	f7fe ff03 	bl	800c456 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 800d650:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800d652:	203b      	movs	r0, #59	; 0x3b
 800d654:	f7fe feff 	bl	800c456 <SX1276Write>
            SX1276.Settings.LoRaPacketHandler.Size = size;
 800d658:	0023      	movs	r3, r4
 800d65a:	7831      	ldrb	r1, [r6, #0]
 800d65c:	3364      	adds	r3, #100	; 0x64
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 800d65e:	2022      	movs	r0, #34	; 0x22
            SX1276.Settings.LoRaPacketHandler.Size = size;
 800d660:	7019      	strb	r1, [r3, #0]
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 800d662:	f7fe fef8 	bl	800c456 <SX1276Write>
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 800d666:	2100      	movs	r1, #0
 800d668:	200e      	movs	r0, #14
 800d66a:	f7fe fef4 	bl	800c456 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 800d66e:	2100      	movs	r1, #0
 800d670:	200d      	movs	r0, #13
 800d672:	f7fe fef0 	bl	800c456 <SX1276Write>
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 800d676:	2001      	movs	r0, #1
 800d678:	f7fe ff38 	bl	800c4ec <SX1276Read>
 800d67c:	23f8      	movs	r3, #248	; 0xf8
 800d67e:	4398      	bics	r0, r3
 800d680:	d104      	bne.n	800d68c <SX1276Send+0xfc>
                SX1276SetStby( );
 800d682:	f7fe fff7 	bl	800c674 <SX1276SetStby>
                RADIO_DELAY_MS( 1 );
 800d686:	2001      	movs	r0, #1
 800d688:	f7f5 fa04 	bl	8002a94 <HAL_Delay>
    SX1276WriteBuffer( 0, buffer, size );
 800d68c:	7832      	ldrb	r2, [r6, #0]
 800d68e:	0039      	movs	r1, r7
 800d690:	2000      	movs	r0, #0
 800d692:	f7fe fec8 	bl	800c426 <SX1276WriteBuffer>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 800d696:	6da6      	ldr	r6, [r4, #88]	; 0x58
        break;
 800d698:	e786      	b.n	800d5a8 <SX1276Send+0x18>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 800d69a:	f7fe ff27 	bl	800c4ec <SX1276Read>
 800d69e:	2341      	movs	r3, #65	; 0x41
 800d6a0:	0001      	movs	r1, r0
 800d6a2:	4399      	bics	r1, r3
 800d6a4:	4329      	orrs	r1, r5
 800d6a6:	b2c9      	uxtb	r1, r1
 800d6a8:	2033      	movs	r0, #51	; 0x33
 800d6aa:	f7fe fed4 	bl	800c456 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800d6ae:	211d      	movs	r1, #29
 800d6b0:	e7cf      	b.n	800d652 <SX1276Send+0xc2>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800d6b2:	2040      	movs	r0, #64	; 0x40
 800d6b4:	f7fe ff1a 	bl	800c4ec <SX1276Read>
 800d6b8:	2103      	movs	r1, #3
 800d6ba:	4001      	ands	r1, r0
 800d6bc:	2040      	movs	r0, #64	; 0x40
 800d6be:	f7fe feca 	bl	800c456 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 800d6c2:	2041      	movs	r0, #65	; 0x41
 800d6c4:	f7fe ff12 	bl	800c4ec <SX1276Read>
 800d6c8:	213e      	movs	r1, #62	; 0x3e
 800d6ca:	4001      	ands	r1, r0
 800d6cc:	2041      	movs	r0, #65	; 0x41
 800d6ce:	f7fe fec2 	bl	800c456 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 800d6d2:	2035      	movs	r0, #53	; 0x35
 800d6d4:	f7fe ff0a 	bl	800c4ec <SX1276Read>
 800d6d8:	233f      	movs	r3, #63	; 0x3f
 800d6da:	4018      	ands	r0, r3
 800d6dc:	0023      	movs	r3, r4
 800d6de:	333e      	adds	r3, #62	; 0x3e
 800d6e0:	7018      	strb	r0, [r3, #0]
        break;
 800d6e2:	e771      	b.n	800d5c8 <SX1276Send+0x38>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800d6e4:	0023      	movs	r3, r4
 800d6e6:	3353      	adds	r3, #83	; 0x53
 800d6e8:	781b      	ldrb	r3, [r3, #0]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d00d      	beq.n	800d70a <SX1276Send+0x17a>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800d6ee:	21f5      	movs	r1, #245	; 0xf5
 800d6f0:	2011      	movs	r0, #17
 800d6f2:	f7fe feb0 	bl	800c456 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 800d6f6:	2040      	movs	r0, #64	; 0x40
 800d6f8:	f7fe fef8 	bl	800c4ec <SX1276Read>
 800d6fc:	2133      	movs	r1, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 800d6fe:	4001      	ands	r1, r0
 800d700:	2040      	movs	r0, #64	; 0x40
 800d702:	4301      	orrs	r1, r0
 800d704:	f7fe fea7 	bl	800c456 <SX1276Write>
 800d708:	e75e      	b.n	800d5c8 <SX1276Send+0x38>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800d70a:	21f7      	movs	r1, #247	; 0xf7
 800d70c:	2011      	movs	r0, #17
 800d70e:	f7fe fea2 	bl	800c456 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 800d712:	2040      	movs	r0, #64	; 0x40
 800d714:	f7fe feea 	bl	800c4ec <SX1276Read>
 800d718:	213f      	movs	r1, #63	; 0x3f
 800d71a:	e7f0      	b.n	800d6fe <SX1276Send+0x16e>
 800d71c:	20001004 	.word	0x20001004
 800d720:	20001084 	.word	0x20001084
 800d724:	200010b8 	.word	0x200010b8

0800d728 <SX1276OnDio1Irq>:
{
 800d728:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 800d72a:	4c39      	ldr	r4, [pc, #228]	; (800d810 <SX1276OnDio1Irq+0xe8>)
 800d72c:	7925      	ldrb	r5, [r4, #4]
 800d72e:	2d01      	cmp	r5, #1
 800d730:	d002      	beq.n	800d738 <SX1276OnDio1Irq+0x10>
 800d732:	2d02      	cmp	r5, #2
 800d734:	d050      	beq.n	800d7d8 <SX1276OnDio1Irq+0xb0>
}
 800d736:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 800d738:	7963      	ldrb	r3, [r4, #5]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d017      	beq.n	800d76e <SX1276OnDio1Irq+0x46>
 800d73e:	2b01      	cmp	r3, #1
 800d740:	d1f9      	bne.n	800d736 <SX1276OnDio1Irq+0xe>
                if( Sx_Board_GetDio1PinState( ) == 0 )
 800d742:	f7f5 fd6d 	bl	8003220 <SX1276MB1MAS_RADIO_GetDio1PinState>
 800d746:	2800      	cmp	r0, #0
 800d748:	d0f5      	beq.n	800d736 <SX1276OnDio1Irq+0xe>
                TimerStop( &RxTimeoutTimer );
 800d74a:	4d32      	ldr	r5, [pc, #200]	; (800d814 <SX1276OnDio1Irq+0xec>)
 800d74c:	1d28      	adds	r0, r5, #4
 800d74e:	f000 fc39 	bl	800dfc4 <UTIL_TIMER_Stop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 800d752:	2180      	movs	r1, #128	; 0x80
 800d754:	2012      	movs	r0, #18
 800d756:	f7fe fe7e 	bl	800c456 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 800d75a:	2300      	movs	r3, #0
 800d75c:	7123      	strb	r3, [r4, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800d75e:	682b      	ldr	r3, [r5, #0]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d0e8      	beq.n	800d736 <SX1276OnDio1Irq+0xe>
 800d764:	68db      	ldr	r3, [r3, #12]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d0e5      	beq.n	800d736 <SX1276OnDio1Irq+0xe>
                    RadioEvents->RxTimeout( );
 800d76a:	4798      	blx	r3
 800d76c:	e7e3      	b.n	800d736 <SX1276OnDio1Irq+0xe>
                if( Sx_Board_GetDio1PinState( ) == 0 )
 800d76e:	f7f5 fd57 	bl	8003220 <SX1276MB1MAS_RADIO_GetDio1PinState>
 800d772:	2800      	cmp	r0, #0
 800d774:	d0df      	beq.n	800d736 <SX1276OnDio1Irq+0xe>
                TimerStop( &RxTimeoutSyncWord );
 800d776:	0020      	movs	r0, r4
 800d778:	3068      	adds	r0, #104	; 0x68
 800d77a:	f000 fc23 	bl	800dfc4 <UTIL_TIMER_Stop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 800d77e:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800d780:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 800d782:	4313      	orrs	r3, r2
 800d784:	d108      	bne.n	800d798 <SX1276OnDio1Irq+0x70>
                    if( SX1276.Settings.Fsk.FixLen == false )
 800d786:	1ce3      	adds	r3, r4, #3
 800d788:	7fd8      	ldrb	r0, [r3, #31]
 800d78a:	2800      	cmp	r0, #0
 800d78c:	d119      	bne.n	800d7c2 <SX1276OnDio1Irq+0x9a>
    SX1276ReadBuffer( 0, buffer, size );
 800d78e:	0021      	movs	r1, r4
 800d790:	002a      	movs	r2, r5
 800d792:	313a      	adds	r1, #58	; 0x3a
 800d794:	f7fe fe92 	bl	800c4bc <SX1276ReadBuffer>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 800d798:	0025      	movs	r5, r4
 800d79a:	353e      	adds	r5, #62	; 0x3e
 800d79c:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 800d79e:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 800d7a0:	491d      	ldr	r1, [pc, #116]	; (800d818 <SX1276OnDio1Irq+0xf0>)
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 800d7a2:	782b      	ldrb	r3, [r5, #0]
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 800d7a4:	1841      	adds	r1, r0, r1
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 800d7a6:	1a12      	subs	r2, r2, r0
 800d7a8:	429a      	cmp	r2, r3
 800d7aa:	db0f      	blt.n	800d7cc <SX1276OnDio1Irq+0xa4>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 800d7ac:	3b01      	subs	r3, #1
    SX1276ReadBuffer( 0, buffer, size );
 800d7ae:	b2da      	uxtb	r2, r3
 800d7b0:	2000      	movs	r0, #0
 800d7b2:	f7fe fe83 	bl	800c4bc <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 800d7b6:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 800d7b8:	782b      	ldrb	r3, [r5, #0]
 800d7ba:	3a01      	subs	r2, #1
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 800d7bc:	189b      	adds	r3, r3, r2
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 800d7be:	87a3      	strh	r3, [r4, #60]	; 0x3c
}
 800d7c0:	e7b9      	b.n	800d736 <SX1276OnDio1Irq+0xe>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 800d7c2:	2032      	movs	r0, #50	; 0x32
 800d7c4:	f7fe fe92 	bl	800c4ec <SX1276Read>
 800d7c8:	8760      	strh	r0, [r4, #58]	; 0x3a
 800d7ca:	e7e5      	b.n	800d798 <SX1276OnDio1Irq+0x70>
    SX1276ReadBuffer( 0, buffer, size );
 800d7cc:	2000      	movs	r0, #0
 800d7ce:	b2d2      	uxtb	r2, r2
 800d7d0:	f7fe fe74 	bl	800c4bc <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 800d7d4:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800d7d6:	e7f2      	b.n	800d7be <SX1276OnDio1Irq+0x96>
            switch( SX1276.Settings.Modem )
 800d7d8:	7965      	ldrb	r5, [r4, #5]
 800d7da:	2d00      	cmp	r5, #0
 800d7dc:	d1ab      	bne.n	800d736 <SX1276OnDio1Irq+0xe>
                if( Sx_Board_GetDio1PinState( ) == 1 )
 800d7de:	f7f5 fd1f 	bl	8003220 <SX1276MB1MAS_RADIO_GetDio1PinState>
 800d7e2:	2801      	cmp	r0, #1
 800d7e4:	d0a7      	beq.n	800d736 <SX1276OnDio1Irq+0xe>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 800d7e6:	0026      	movs	r6, r4
 800d7e8:	363f      	adds	r6, #63	; 0x3f
 800d7ea:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 800d7ec:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 800d7ee:	490a      	ldr	r1, [pc, #40]	; (800d818 <SX1276OnDio1Irq+0xf0>)
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 800d7f0:	7832      	ldrb	r2, [r6, #0]
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 800d7f2:	1841      	adds	r1, r0, r1
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 800d7f4:	1a1b      	subs	r3, r3, r0
 800d7f6:	4293      	cmp	r3, r2
 800d7f8:	dd05      	ble.n	800d806 <SX1276OnDio1Irq+0xde>
    SX1276WriteBuffer( 0, buffer, size );
 800d7fa:	0028      	movs	r0, r5
 800d7fc:	f7fe fe13 	bl	800c426 <SX1276WriteBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 800d800:	7833      	ldrb	r3, [r6, #0]
 800d802:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 800d804:	e7da      	b.n	800d7bc <SX1276OnDio1Irq+0x94>
    SX1276WriteBuffer( 0, buffer, size );
 800d806:	0028      	movs	r0, r5
 800d808:	b2da      	uxtb	r2, r3
 800d80a:	f7fe fe0c 	bl	800c426 <SX1276WriteBuffer>
 800d80e:	e7e1      	b.n	800d7d4 <SX1276OnDio1Irq+0xac>
 800d810:	20001004 	.word	0x20001004
 800d814:	20001084 	.word	0x20001084
 800d818:	200010b8 	.word	0x200010b8

0800d81c <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 800d81c:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d81e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800d822:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 800d824:	4b16      	ldr	r3, [pc, #88]	; (800d880 <TRACE_AllocateBufer+0x64>)
 800d826:	8a5d      	ldrh	r5, [r3, #18]
 800d828:	8a1a      	ldrh	r2, [r3, #16]
 800d82a:	4295      	cmp	r5, r2
 800d82c:	d114      	bne.n	800d858 <TRACE_AllocateBufer+0x3c>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800d82e:	2280      	movs	r2, #128	; 0x80
 800d830:	00d2      	lsls	r2, r2, #3
 800d832:	1b52      	subs	r2, r2, r5
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 800d834:	b292      	uxth	r2, r2
 800d836:	4290      	cmp	r0, r2
 800d838:	d306      	bcc.n	800d848 <TRACE_AllocateBufer+0x2c>
 800d83a:	4285      	cmp	r5, r0
 800d83c:	d916      	bls.n	800d86c <TRACE_AllocateBufer+0x50>
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800d83e:	2201      	movs	r2, #1
 800d840:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 800d842:	2200      	movs	r2, #0
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800d844:	801d      	strh	r5, [r3, #0]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 800d846:	825a      	strh	r2, [r3, #18]
#endif
  }

  if(freesize > Size)
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 800d848:	8a5a      	ldrh	r2, [r3, #18]
 800d84a:	800a      	strh	r2, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 800d84c:	1812      	adds	r2, r2, r0
 800d84e:	0592      	lsls	r2, r2, #22
 800d850:	0d92      	lsrs	r2, r2, #22
    ret = 0;
 800d852:	2000      	movs	r0, #0
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 800d854:	825a      	strh	r2, [r3, #18]
    ret = 0;
 800d856:	e00b      	b.n	800d870 <TRACE_AllocateBufer+0x54>
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800d858:	4295      	cmp	r5, r2
 800d85a:	d90c      	bls.n	800d876 <TRACE_AllocateBufer+0x5a>
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800d85c:	2680      	movs	r6, #128	; 0x80
 800d85e:	00f6      	lsls	r6, r6, #3
 800d860:	1b76      	subs	r6, r6, r5
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 800d862:	b2b6      	uxth	r6, r6
 800d864:	4286      	cmp	r6, r0
 800d866:	d8ef      	bhi.n	800d848 <TRACE_AllocateBufer+0x2c>
 800d868:	4282      	cmp	r2, r0
 800d86a:	d8e8      	bhi.n	800d83e <TRACE_AllocateBufer+0x22>
  int16_t ret = -1;
 800d86c:	2001      	movs	r0, #1
 800d86e:	4240      	negs	r0, r0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d870:	f384 8810 	msr	PRIMASK, r4
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 800d874:	bd70      	pop	{r4, r5, r6, pc}
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 800d876:	1b52      	subs	r2, r2, r5
  if(freesize > Size)
 800d878:	b292      	uxth	r2, r2
 800d87a:	4282      	cmp	r2, r0
 800d87c:	d8e4      	bhi.n	800d848 <TRACE_AllocateBufer+0x2c>
 800d87e:	e7f5      	b.n	800d86c <TRACE_AllocateBufer+0x50>
 800d880:	200011b8 	.word	0x200011b8

0800d884 <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d884:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800d888:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 800d88a:	4a03      	ldr	r2, [pc, #12]	; (800d898 <TRACE_Lock+0x14>)
 800d88c:	8ad3      	ldrh	r3, [r2, #22]
 800d88e:	3301      	adds	r3, #1
 800d890:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d892:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800d896:	4770      	bx	lr
 800d898:	200011b8 	.word	0x200011b8

0800d89c <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d89c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800d8a0:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 800d8a2:	4a03      	ldr	r2, [pc, #12]	; (800d8b0 <TRACE_UnLock+0x14>)
 800d8a4:	8ad3      	ldrh	r3, [r2, #22]
 800d8a6:	3b01      	subs	r3, #1
 800d8a8:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d8aa:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800d8ae:	4770      	bx	lr
 800d8b0:	200011b8 	.word	0x200011b8

0800d8b4 <UTIL_ADV_TRACE_Init>:
{
 800d8b4:	b510      	push	{r4, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 800d8b6:	2218      	movs	r2, #24
 800d8b8:	2100      	movs	r1, #0
 800d8ba:	4807      	ldr	r0, [pc, #28]	; (800d8d8 <UTIL_ADV_TRACE_Init+0x24>)
 800d8bc:	f000 f985 	bl	800dbca <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 800d8c0:	2280      	movs	r2, #128	; 0x80
 800d8c2:	2100      	movs	r1, #0
 800d8c4:	4805      	ldr	r0, [pc, #20]	; (800d8dc <UTIL_ADV_TRACE_Init+0x28>)
 800d8c6:	00d2      	lsls	r2, r2, #3
 800d8c8:	f000 f97f 	bl	800dbca <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 800d8cc:	4b04      	ldr	r3, [pc, #16]	; (800d8e0 <UTIL_ADV_TRACE_Init+0x2c>)
 800d8ce:	4805      	ldr	r0, [pc, #20]	; (800d8e4 <UTIL_ADV_TRACE_Init+0x30>)
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	4798      	blx	r3
}
 800d8d4:	bd10      	pop	{r4, pc}
 800d8d6:	46c0      	nop			; (mov r8, r8)
 800d8d8:	200011b8 	.word	0x200011b8
 800d8dc:	200013d0 	.word	0x200013d0
 800d8e0:	0800e628 	.word	0x0800e628
 800d8e4:	0800da51 	.word	0x0800da51

0800d8e8 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 800d8e8:	4b01      	ldr	r3, [pc, #4]	; (800d8f0 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 800d8ea:	6058      	str	r0, [r3, #4]
}
 800d8ec:	4770      	bx	lr
 800d8ee:	46c0      	nop			; (mov r8, r8)
 800d8f0:	200011b8 	.word	0x200011b8

0800d8f4 <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 800d8f4:	4b01      	ldr	r3, [pc, #4]	; (800d8fc <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 800d8f6:	7218      	strb	r0, [r3, #8]
}
 800d8f8:	4770      	bx	lr
 800d8fa:	46c0      	nop			; (mov r8, r8)
 800d8fc:	200011b8 	.word	0x200011b8

0800d900 <TRACE_Send>:
{
 800d900:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d902:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800d906:	b672      	cpsid	i
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 800d908:	4c1b      	ldr	r4, [pc, #108]	; (800d978 <TRACE_Send+0x78>)
  if(TRACE_IsLocked() == 0u)
 800d90a:	8ae5      	ldrh	r5, [r4, #22]
 800d90c:	2d00      	cmp	r5, #0
 800d90e:	d12e      	bne.n	800d96e <TRACE_Send+0x6e>
    TRACE_Lock();
 800d910:	f7ff ffb8 	bl	800d884 <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 800d914:	8a20      	ldrh	r0, [r4, #16]
 800d916:	8a62      	ldrh	r2, [r4, #18]
 800d918:	4290      	cmp	r0, r2
 800d91a:	d026      	beq.n	800d96a <TRACE_Send+0x6a>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800d91c:	78a1      	ldrb	r1, [r4, #2]
 800d91e:	2901      	cmp	r1, #1
 800d920:	d110      	bne.n	800d944 <TRACE_Send+0x44>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 800d922:	8823      	ldrh	r3, [r4, #0]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800d924:	3101      	adds	r1, #1
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 800d926:	1a1b      	subs	r3, r3, r0
 800d928:	b29b      	uxth	r3, r3
 800d92a:	82a3      	strh	r3, [r4, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800d92c:	70a1      	strb	r1, [r4, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 800d92e:	8025      	strh	r5, [r4, #0]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800d930:	2b00      	cmp	r3, #0
 800d932:	d109      	bne.n	800d948 <TRACE_Send+0x48>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800d934:	70a3      	strb	r3, [r4, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 800d936:	8223      	strh	r3, [r4, #16]
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800d938:	8a23      	ldrh	r3, [r4, #16]
 800d93a:	429a      	cmp	r2, r3
 800d93c:	d912      	bls.n	800d964 <TRACE_Send+0x64>
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800d93e:	1ad2      	subs	r2, r2, r3
 800d940:	82a2      	strh	r2, [r4, #20]
 800d942:	e001      	b.n	800d948 <TRACE_Send+0x48>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800d944:	2900      	cmp	r1, #0
 800d946:	d0f7      	beq.n	800d938 <TRACE_Send+0x38>
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800d948:	8a25      	ldrh	r5, [r4, #16]
 800d94a:	4b0c      	ldr	r3, [pc, #48]	; (800d97c <TRACE_Send+0x7c>)
 800d94c:	18ed      	adds	r5, r5, r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d94e:	f386 8810 	msr	PRIMASK, r6
      UTIL_ADV_TRACE_PreSendHook();
 800d952:	f7f5 f88d 	bl	8002a70 <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800d956:	4b0a      	ldr	r3, [pc, #40]	; (800d980 <TRACE_Send+0x80>)
 800d958:	8aa1      	ldrh	r1, [r4, #20]
 800d95a:	68db      	ldr	r3, [r3, #12]
 800d95c:	0028      	movs	r0, r5
 800d95e:	9301      	str	r3, [sp, #4]
 800d960:	4798      	blx	r3
}
 800d962:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800d964:	2280      	movs	r2, #128	; 0x80
 800d966:	00d2      	lsls	r2, r2, #3
 800d968:	e7e9      	b.n	800d93e <TRACE_Send+0x3e>
      TRACE_UnLock();
 800d96a:	f7ff ff97 	bl	800d89c <TRACE_UnLock>
 800d96e:	f386 8810 	msr	PRIMASK, r6
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 800d972:	2000      	movs	r0, #0
}
 800d974:	e7f5      	b.n	800d962 <TRACE_Send+0x62>
 800d976:	46c0      	nop			; (mov r8, r8)
 800d978:	200011b8 	.word	0x200011b8
 800d97c:	200013d0 	.word	0x200013d0
 800d980:	0800e628 	.word	0x0800e628

0800d984 <UTIL_ADV_TRACE_COND_FSend>:
{
 800d984:	b408      	push	{r3}
 800d986:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d988:	b086      	sub	sp, #24
  uint16_t timestamp_size = 0u;
 800d98a:	2300      	movs	r3, #0
 800d98c:	466c      	mov	r4, sp
 800d98e:	8023      	strh	r3, [r4, #0]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 800d990:	4b2c      	ldr	r3, [pc, #176]	; (800da44 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 800d992:	7a1c      	ldrb	r4, [r3, #8]
 800d994:	4284      	cmp	r4, r0
 800d996:	d350      	bcc.n	800da3a <UTIL_ADV_TRACE_COND_FSend+0xb6>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 800d998:	68d8      	ldr	r0, [r3, #12]
 800d99a:	4008      	ands	r0, r1
 800d99c:	4288      	cmp	r0, r1
 800d99e:	d14e      	bne.n	800da3e <UTIL_ADV_TRACE_COND_FSend+0xba>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 800d9a0:	685b      	ldr	r3, [r3, #4]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d004      	beq.n	800d9b0 <UTIL_ADV_TRACE_COND_FSend+0x2c>
 800d9a6:	2a00      	cmp	r2, #0
 800d9a8:	d002      	beq.n	800d9b0 <UTIL_ADV_TRACE_COND_FSend+0x2c>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 800d9aa:	4669      	mov	r1, sp
 800d9ac:	a802      	add	r0, sp, #8
 800d9ae:	4798      	blx	r3
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800d9b0:	2180      	movs	r1, #128	; 0x80
  va_start( vaArgs, strFormat);
 800d9b2:	ab0c      	add	r3, sp, #48	; 0x30
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800d9b4:	0089      	lsls	r1, r1, #2
 800d9b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d9b8:	4823      	ldr	r0, [pc, #140]	; (800da48 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
  va_start( vaArgs, strFormat);
 800d9ba:	9301      	str	r3, [sp, #4]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800d9bc:	f000 fbfa 	bl	800e1b4 <tiny_vsnprintf_like>
 800d9c0:	0005      	movs	r5, r0
  TRACE_Lock();
 800d9c2:	f7ff ff5f 	bl	800d884 <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 800d9c6:	466b      	mov	r3, sp
 800d9c8:	8818      	ldrh	r0, [r3, #0]
 800d9ca:	1c9c      	adds	r4, r3, #2
 800d9cc:	1940      	adds	r0, r0, r5
 800d9ce:	0021      	movs	r1, r4
 800d9d0:	b280      	uxth	r0, r0
 800d9d2:	f7ff ff23 	bl	800d81c <TRACE_AllocateBufer>
 800d9d6:	1c43      	adds	r3, r0, #1
 800d9d8:	d02a      	beq.n	800da30 <UTIL_ADV_TRACE_COND_FSend+0xac>
    for (idx = 0u; idx < timestamp_size; idx++)
 800d9da:	2200      	movs	r2, #0
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800d9dc:	2101      	movs	r1, #1
    for (idx = 0u; idx < timestamp_size; idx++)
 800d9de:	466b      	mov	r3, sp
 800d9e0:	0015      	movs	r5, r2
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800d9e2:	468c      	mov	ip, r1
    for (idx = 0u; idx < timestamp_size; idx++)
 800d9e4:	881b      	ldrh	r3, [r3, #0]
 800d9e6:	8826      	ldrh	r6, [r4, #0]
 800d9e8:	4818      	ldr	r0, [pc, #96]	; (800da4c <UTIL_ADV_TRACE_COND_FSend+0xc8>)
 800d9ea:	b297      	uxth	r7, r2
 800d9ec:	19f1      	adds	r1, r6, r7
 800d9ee:	b289      	uxth	r1, r1
 800d9f0:	42bb      	cmp	r3, r7
 800d9f2:	d815      	bhi.n	800da20 <UTIL_ADV_TRACE_COND_FSend+0x9c>
 800d9f4:	199b      	adds	r3, r3, r6
 800d9f6:	b29b      	uxth	r3, r3
 800d9f8:	2d00      	cmp	r5, #0
 800d9fa:	d000      	beq.n	800d9fe <UTIL_ADV_TRACE_COND_FSend+0x7a>
 800d9fc:	8023      	strh	r3, [r4, #0]
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800d9fe:	2180      	movs	r1, #128	; 0x80
 800da00:	8823      	ldrh	r3, [r4, #0]
 800da02:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800da04:	0089      	lsls	r1, r1, #2
 800da06:	18c0      	adds	r0, r0, r3
 800da08:	9b01      	ldr	r3, [sp, #4]
 800da0a:	f000 fbd3 	bl	800e1b4 <tiny_vsnprintf_like>
    TRACE_UnLock();
 800da0e:	f7ff ff45 	bl	800d89c <TRACE_UnLock>
    return TRACE_Send();
 800da12:	f7ff ff75 	bl	800d900 <TRACE_Send>
}
 800da16:	b006      	add	sp, #24
 800da18:	bcf0      	pop	{r4, r5, r6, r7}
 800da1a:	bc08      	pop	{r3}
 800da1c:	b001      	add	sp, #4
 800da1e:	4718      	bx	r3
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800da20:	466d      	mov	r5, sp
 800da22:	2708      	movs	r7, #8
 800da24:	19ed      	adds	r5, r5, r7
 800da26:	5cad      	ldrb	r5, [r5, r2]
 800da28:	3201      	adds	r2, #1
 800da2a:	5445      	strb	r5, [r0, r1]
 800da2c:	4665      	mov	r5, ip
 800da2e:	e7dc      	b.n	800d9ea <UTIL_ADV_TRACE_COND_FSend+0x66>
  TRACE_UnLock();
 800da30:	f7ff ff34 	bl	800d89c <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 800da34:	2003      	movs	r0, #3
    return UTIL_ADV_TRACE_REGIONMASKED;
 800da36:	4240      	negs	r0, r0
 800da38:	e7ed      	b.n	800da16 <UTIL_ADV_TRACE_COND_FSend+0x92>
    return UTIL_ADV_TRACE_GIVEUP;
 800da3a:	2005      	movs	r0, #5
 800da3c:	e7fb      	b.n	800da36 <UTIL_ADV_TRACE_COND_FSend+0xb2>
    return UTIL_ADV_TRACE_REGIONMASKED;
 800da3e:	2006      	movs	r0, #6
 800da40:	e7f9      	b.n	800da36 <UTIL_ADV_TRACE_COND_FSend+0xb2>
 800da42:	46c0      	nop			; (mov r8, r8)
 800da44:	200011b8 	.word	0x200011b8
 800da48:	200011d0 	.word	0x200011d0
 800da4c:	200013d0 	.word	0x200013d0

0800da50 <TRACE_TxCpltCallback>:
{
 800da50:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da52:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800da56:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 800da58:	4b1f      	ldr	r3, [pc, #124]	; (800dad8 <TRACE_TxCpltCallback+0x88>)
 800da5a:	789a      	ldrb	r2, [r3, #2]
 800da5c:	2a02      	cmp	r2, #2
 800da5e:	d11e      	bne.n	800da9e <TRACE_TxCpltCallback+0x4e>
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800da60:	2200      	movs	r2, #0
 800da62:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 800da64:	821a      	strh	r2, [r3, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 800da66:	8a1d      	ldrh	r5, [r3, #16]
 800da68:	8a58      	ldrh	r0, [r3, #18]
 800da6a:	4285      	cmp	r5, r0
 800da6c:	d02d      	beq.n	800daca <TRACE_TxCpltCallback+0x7a>
 800da6e:	8ada      	ldrh	r2, [r3, #22]
 800da70:	2a01      	cmp	r2, #1
 800da72:	d12a      	bne.n	800daca <TRACE_TxCpltCallback+0x7a>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800da74:	789c      	ldrb	r4, [r3, #2]
 800da76:	2c01      	cmp	r4, #1
 800da78:	d117      	bne.n	800daaa <TRACE_TxCpltCallback+0x5a>
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800da7a:	3401      	adds	r4, #1
 800da7c:	709c      	strb	r4, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 800da7e:	2400      	movs	r4, #0
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800da80:	881a      	ldrh	r2, [r3, #0]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 800da82:	801c      	strh	r4, [r3, #0]
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800da84:	1b52      	subs	r2, r2, r5
 800da86:	b292      	uxth	r2, r2
 800da88:	829a      	strh	r2, [r3, #20]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800da8a:	42a2      	cmp	r2, r4
 800da8c:	d10f      	bne.n	800daae <TRACE_TxCpltCallback+0x5e>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800da8e:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 800da90:	821a      	strh	r2, [r3, #16]
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800da92:	8a1a      	ldrh	r2, [r3, #16]
 800da94:	4290      	cmp	r0, r2
 800da96:	d915      	bls.n	800dac4 <TRACE_TxCpltCallback+0x74>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800da98:	1a80      	subs	r0, r0, r2
 800da9a:	8298      	strh	r0, [r3, #20]
 800da9c:	e007      	b.n	800daae <TRACE_TxCpltCallback+0x5e>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 800da9e:	8a1a      	ldrh	r2, [r3, #16]
 800daa0:	8a98      	ldrh	r0, [r3, #20]
 800daa2:	1812      	adds	r2, r2, r0
 800daa4:	0592      	lsls	r2, r2, #22
 800daa6:	0d92      	lsrs	r2, r2, #22
 800daa8:	e7dc      	b.n	800da64 <TRACE_TxCpltCallback+0x14>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800daaa:	2c00      	cmp	r4, #0
 800daac:	d0f1      	beq.n	800da92 <TRACE_TxCpltCallback+0x42>
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800daae:	8a18      	ldrh	r0, [r3, #16]
 800dab0:	4a0a      	ldr	r2, [pc, #40]	; (800dadc <TRACE_TxCpltCallback+0x8c>)
 800dab2:	1880      	adds	r0, r0, r2
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dab4:	f381 8810 	msr	PRIMASK, r1
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800dab8:	8a99      	ldrh	r1, [r3, #20]
 800daba:	4b09      	ldr	r3, [pc, #36]	; (800dae0 <TRACE_TxCpltCallback+0x90>)
 800dabc:	68db      	ldr	r3, [r3, #12]
 800dabe:	9301      	str	r3, [sp, #4]
 800dac0:	4798      	blx	r3
}
 800dac2:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800dac4:	2080      	movs	r0, #128	; 0x80
 800dac6:	00c0      	lsls	r0, r0, #3
 800dac8:	e7e6      	b.n	800da98 <TRACE_TxCpltCallback+0x48>
 800daca:	f381 8810 	msr	PRIMASK, r1
    UTIL_ADV_TRACE_PostSendHook();
 800dace:	f7f4 ffd5 	bl	8002a7c <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 800dad2:	f7ff fee3 	bl	800d89c <TRACE_UnLock>
}
 800dad6:	e7f4      	b.n	800dac2 <TRACE_TxCpltCallback+0x72>
 800dad8:	200011b8 	.word	0x200011b8
 800dadc:	200013d0 	.word	0x200013d0
 800dae0:	0800e628 	.word	0x0800e628

0800dae4 <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800dae4:	2200      	movs	r2, #0
 800dae6:	4b02      	ldr	r3, [pc, #8]	; (800daf0 <UTIL_LPM_Init+0xc>)
 800dae8:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800daea:	605a      	str	r2, [r3, #4]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800daec:	4770      	bx	lr
 800daee:	46c0      	nop			; (mov r8, r8)
 800daf0:	200017d0 	.word	0x200017d0

0800daf4 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800daf4:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800daf6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800dafa:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 800dafc:	2900      	cmp	r1, #0
 800dafe:	d008      	beq.n	800db12 <UTIL_LPM_SetStopMode+0x1e>
 800db00:	2901      	cmp	r1, #1
 800db02:	d103      	bne.n	800db0c <UTIL_LPM_SetStopMode+0x18>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 800db04:	4b05      	ldr	r3, [pc, #20]	; (800db1c <UTIL_LPM_SetStopMode+0x28>)
 800db06:	681a      	ldr	r2, [r3, #0]
 800db08:	4310      	orrs	r0, r2
 800db0a:	6018      	str	r0, [r3, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db0c:	f384 8810 	msr	PRIMASK, r4
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800db10:	bd10      	pop	{r4, pc}
      StopModeDisable &= ( ~lpm_id_bm );
 800db12:	4a02      	ldr	r2, [pc, #8]	; (800db1c <UTIL_LPM_SetStopMode+0x28>)
 800db14:	6813      	ldr	r3, [r2, #0]
 800db16:	4383      	bics	r3, r0
 800db18:	6013      	str	r3, [r2, #0]
      break;
 800db1a:	e7f7      	b.n	800db0c <UTIL_LPM_SetStopMode+0x18>
 800db1c:	200017d0 	.word	0x200017d0

0800db20 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800db20:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db22:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800db26:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 800db28:	2900      	cmp	r1, #0
 800db2a:	d008      	beq.n	800db3e <UTIL_LPM_SetOffMode+0x1e>
 800db2c:	2901      	cmp	r1, #1
 800db2e:	d103      	bne.n	800db38 <UTIL_LPM_SetOffMode+0x18>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800db30:	4b05      	ldr	r3, [pc, #20]	; (800db48 <UTIL_LPM_SetOffMode+0x28>)
 800db32:	685a      	ldr	r2, [r3, #4]
 800db34:	4310      	orrs	r0, r2
 800db36:	6058      	str	r0, [r3, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db38:	f384 8810 	msr	PRIMASK, r4
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800db3c:	bd10      	pop	{r4, pc}
      OffModeDisable &= ( ~lpm_id_bm );
 800db3e:	4a02      	ldr	r2, [pc, #8]	; (800db48 <UTIL_LPM_SetOffMode+0x28>)
 800db40:	6853      	ldr	r3, [r2, #4]
 800db42:	4383      	bics	r3, r0
 800db44:	6053      	str	r3, [r2, #4]
      break;
 800db46:	e7f7      	b.n	800db38 <UTIL_LPM_SetOffMode+0x18>
 800db48:	200017d0 	.word	0x200017d0

0800db4c <UTIL_LPM_GetMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db4c:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800db50:	b672      	cpsid	i
  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
  {
    /**
     * At least one user disallows Stop Mode
     */
    mode_selected = UTIL_LPM_SLEEPMODE;
 800db52:	2000      	movs	r0, #0
  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800db54:	4b05      	ldr	r3, [pc, #20]	; (800db6c <UTIL_LPM_GetMode+0x20>)
 800db56:	6819      	ldr	r1, [r3, #0]
 800db58:	4281      	cmp	r1, r0
 800db5a:	d103      	bne.n	800db64 <UTIL_LPM_GetMode+0x18>
  }
  else
  {
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800db5c:	6858      	ldr	r0, [r3, #4]
       */
      mode_selected = UTIL_LPM_STOPMODE;
    }
    else
    {
      mode_selected = UTIL_LPM_OFFMODE;
 800db5e:	4243      	negs	r3, r0
 800db60:	4158      	adcs	r0, r3
 800db62:	3001      	adds	r0, #1
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db64:	f382 8810 	msr	PRIMASK, r2
  }

  UTIL_LPM_EXIT_CRITICAL_SECTION( );

  return mode_selected;
}
 800db68:	4770      	bx	lr
 800db6a:	46c0      	nop			; (mov r8, r8)
 800db6c:	200017d0 	.word	0x200017d0

0800db70 <UTIL_LPM_EnterLowPower>:

void UTIL_LPM_EnterLowPower( void )
{
 800db70:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db72:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800db76:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800db78:	4b0d      	ldr	r3, [pc, #52]	; (800dbb0 <UTIL_LPM_EnterLowPower+0x40>)
 800db7a:	4c0e      	ldr	r4, [pc, #56]	; (800dbb4 <UTIL_LPM_EnterLowPower+0x44>)
 800db7c:	681a      	ldr	r2, [r3, #0]
 800db7e:	2a00      	cmp	r2, #0
 800db80:	d008      	beq.n	800db94 <UTIL_LPM_EnterLowPower+0x24>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 800db82:	6823      	ldr	r3, [r4, #0]
 800db84:	9301      	str	r3, [sp, #4]
 800db86:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 800db88:	6863      	ldr	r3, [r4, #4]
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
      UTIL_PowerDriver.ExitOffMode( );
 800db8a:	9301      	str	r3, [sp, #4]
 800db8c:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db8e:	f385 8810 	msr	PRIMASK, r5
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 800db92:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800db94:	685b      	ldr	r3, [r3, #4]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d004      	beq.n	800dba4 <UTIL_LPM_EnterLowPower+0x34>
        UTIL_PowerDriver.EnterStopMode( );
 800db9a:	68a3      	ldr	r3, [r4, #8]
 800db9c:	9301      	str	r3, [sp, #4]
 800db9e:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 800dba0:	68e3      	ldr	r3, [r4, #12]
 800dba2:	e7f2      	b.n	800db8a <UTIL_LPM_EnterLowPower+0x1a>
      UTIL_PowerDriver.EnterOffMode( );
 800dba4:	6923      	ldr	r3, [r4, #16]
 800dba6:	9301      	str	r3, [sp, #4]
 800dba8:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 800dbaa:	6963      	ldr	r3, [r4, #20]
 800dbac:	e7ed      	b.n	800db8a <UTIL_LPM_EnterLowPower+0x1a>
 800dbae:	46c0      	nop			; (mov r8, r8)
 800dbb0:	200017d0 	.word	0x200017d0
 800dbb4:	0800e610 	.word	0x0800e610

0800dbb8 <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 800dbb8:	2300      	movs	r3, #0
{
 800dbba:	b510      	push	{r4, lr}
  while( size-- )
 800dbbc:	4293      	cmp	r3, r2
 800dbbe:	d100      	bne.n	800dbc2 <UTIL_MEM_cpy_8+0xa>
    {
        *dst8++ = *src8++;
    }
}
 800dbc0:	bd10      	pop	{r4, pc}
        *dst8++ = *src8++;
 800dbc2:	5ccc      	ldrb	r4, [r1, r3]
 800dbc4:	54c4      	strb	r4, [r0, r3]
 800dbc6:	3301      	adds	r3, #1
 800dbc8:	e7f8      	b.n	800dbbc <UTIL_MEM_cpy_8+0x4>

0800dbca <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 800dbca:	b510      	push	{r4, lr}
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
  {
    *dst8++ = value;
 800dbcc:	f000 fc49 	bl	800e462 <memset>
  }
}
 800dbd0:	bd10      	pop	{r4, pc}
	...

0800dbd4 <UTIL_SEQ_SetTask>:

  return;
}

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800dbd4:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dbd6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800dbda:	b672      	cpsid	i
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 800dbdc:	4b05      	ldr	r3, [pc, #20]	; (800dbf4 <UTIL_SEQ_SetTask+0x20>)
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800dbde:	00c9      	lsls	r1, r1, #3
  TaskSet |= TaskId_bm;
 800dbe0:	681a      	ldr	r2, [r3, #0]
 800dbe2:	4302      	orrs	r2, r0
 800dbe4:	601a      	str	r2, [r3, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800dbe6:	185b      	adds	r3, r3, r1
 800dbe8:	691a      	ldr	r2, [r3, #16]
 800dbea:	4310      	orrs	r0, r2
 800dbec:	6118      	str	r0, [r3, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dbee:	f384 8810 	msr	PRIMASK, r4

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 800dbf2:	bd10      	pop	{r4, pc}
 800dbf4:	200017d8 	.word	0x200017d8

0800dbf8 <UTIL_SEQ_PreIdle>:
 800dbf8:	4770      	bx	lr

0800dbfa <UTIL_SEQ_PostIdle>:
 800dbfa:	4770      	bx	lr

0800dbfc <SEQ_BitPosition>:
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
  uint8_t n = 0U;
 800dbfc:	2300      	movs	r3, #0

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 800dbfe:	0c02      	lsrs	r2, r0, #16
 800dc00:	429a      	cmp	r2, r3
 800dc02:	d101      	bne.n	800dc08 <SEQ_BitPosition+0xc>
 800dc04:	0400      	lsls	r0, r0, #16
 800dc06:	3310      	adds	r3, #16
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 800dc08:	0e02      	lsrs	r2, r0, #24
 800dc0a:	d102      	bne.n	800dc12 <SEQ_BitPosition+0x16>
 800dc0c:	3308      	adds	r3, #8
 800dc0e:	b2db      	uxtb	r3, r3
 800dc10:	0200      	lsls	r0, r0, #8
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 800dc12:	0f02      	lsrs	r2, r0, #28
 800dc14:	d102      	bne.n	800dc1c <SEQ_BitPosition+0x20>
 800dc16:	3304      	adds	r3, #4
 800dc18:	b2db      	uxtb	r3, r3
 800dc1a:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[Value >> (32-4)];

  return (uint8_t)(31U-n);
 800dc1c:	221f      	movs	r2, #31
 800dc1e:	1ad3      	subs	r3, r2, r3
 800dc20:	4a02      	ldr	r2, [pc, #8]	; (800dc2c <SEQ_BitPosition+0x30>)
  n += SEQ_clz_table_4bit[Value >> (32-4)];
 800dc22:	0f00      	lsrs	r0, r0, #28
  return (uint8_t)(31U-n);
 800dc24:	5c10      	ldrb	r0, [r2, r0]
 800dc26:	1a18      	subs	r0, r3, r0
 800dc28:	b2c0      	uxtb	r0, r0
}
 800dc2a:	4770      	bx	lr
 800dc2c:	0800ebc0 	.word	0x0800ebc0

0800dc30 <UTIL_SEQ_Run>:
{
 800dc30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  super_mask_backup = SuperMask;
 800dc32:	4e2f      	ldr	r6, [pc, #188]	; (800dcf0 <UTIL_SEQ_Run+0xc0>)
 800dc34:	6873      	ldr	r3, [r6, #4]
  SuperMask &= Mask_bm;
 800dc36:	4018      	ands	r0, r3
  super_mask_backup = SuperMask;
 800dc38:	9301      	str	r3, [sp, #4]
  SuperMask &= Mask_bm;
 800dc3a:	6070      	str	r0, [r6, #4]
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800dc3c:	4c2d      	ldr	r4, [pc, #180]	; (800dcf4 <UTIL_SEQ_Run+0xc4>)
 800dc3e:	6830      	ldr	r0, [r6, #0]
 800dc40:	6822      	ldr	r2, [r4, #0]
 800dc42:	6873      	ldr	r3, [r6, #4]
 800dc44:	4002      	ands	r2, r0
 800dc46:	4213      	tst	r3, r2
 800dc48:	d037      	beq.n	800dcba <UTIL_SEQ_Run+0x8a>
 800dc4a:	68a1      	ldr	r1, [r4, #8]
 800dc4c:	6862      	ldr	r2, [r4, #4]
 800dc4e:	000d      	movs	r5, r1
 800dc50:	4015      	ands	r5, r2
 800dc52:	4211      	tst	r1, r2
 800dc54:	d131      	bne.n	800dcba <UTIL_SEQ_Run+0x8a>
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800dc56:	6922      	ldr	r2, [r4, #16]
 800dc58:	4003      	ands	r3, r0
 800dc5a:	0010      	movs	r0, r2
 800dc5c:	4018      	ands	r0, r3
 800dc5e:	421a      	tst	r2, r3
 800dc60:	d102      	bne.n	800dc68 <UTIL_SEQ_Run+0x38>
      counter++;
 800dc62:	2501      	movs	r5, #1
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800dc64:	69a0      	ldr	r0, [r4, #24]
 800dc66:	4018      	ands	r0, r3
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800dc68:	00ed      	lsls	r5, r5, #3
 800dc6a:	1963      	adds	r3, r4, r5
 800dc6c:	695a      	ldr	r2, [r3, #20]
 800dc6e:	4202      	tst	r2, r0
 800dc70:	d102      	bne.n	800dc78 <UTIL_SEQ_Run+0x48>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800dc72:	2201      	movs	r2, #1
 800dc74:	4252      	negs	r2, r2
 800dc76:	615a      	str	r2, [r3, #20]
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800dc78:	1965      	adds	r5, r4, r5
 800dc7a:	696f      	ldr	r7, [r5, #20]
 800dc7c:	4038      	ands	r0, r7
 800dc7e:	f7ff ffbd 	bl	800dbfc <SEQ_BitPosition>
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800dc82:	2301      	movs	r3, #1
 800dc84:	4083      	lsls	r3, r0
 800dc86:	439f      	bics	r7, r3
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800dc88:	60e0      	str	r0, [r4, #12]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800dc8a:	616f      	str	r7, [r5, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc8c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800dc90:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 800dc92:	2301      	movs	r3, #1
 800dc94:	68e2      	ldr	r2, [r4, #12]
 800dc96:	4093      	lsls	r3, r2
 800dc98:	6822      	ldr	r2, [r4, #0]
 800dc9a:	439a      	bics	r2, r3
 800dc9c:	6022      	str	r2, [r4, #0]
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800dc9e:	69a2      	ldr	r2, [r4, #24]
 800dca0:	439a      	bics	r2, r3
 800dca2:	61a2      	str	r2, [r4, #24]
 800dca4:	6922      	ldr	r2, [r4, #16]
 800dca6:	439a      	bics	r2, r3
 800dca8:	6122      	str	r2, [r4, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dcaa:	f381 8810 	msr	PRIMASK, r1
    TaskCb[CurrentTaskIdx]( );
 800dcae:	68e3      	ldr	r3, [r4, #12]
 800dcb0:	4a11      	ldr	r2, [pc, #68]	; (800dcf8 <UTIL_SEQ_Run+0xc8>)
 800dcb2:	009b      	lsls	r3, r3, #2
 800dcb4:	589b      	ldr	r3, [r3, r2]
 800dcb6:	4798      	blx	r3
 800dcb8:	e7c0      	b.n	800dc3c <UTIL_SEQ_Run+0xc>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800dcba:	2301      	movs	r3, #1
 800dcbc:	425b      	negs	r3, r3
 800dcbe:	60e3      	str	r3, [r4, #12]
  UTIL_SEQ_PreIdle( );
 800dcc0:	f7ff ff9a 	bl	800dbf8 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dcc4:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800dcc8:	b672      	cpsid	i
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 800dcca:	6822      	ldr	r2, [r4, #0]
 800dccc:	6833      	ldr	r3, [r6, #0]
 800dcce:	6861      	ldr	r1, [r4, #4]
 800dcd0:	4013      	ands	r3, r2
 800dcd2:	6872      	ldr	r2, [r6, #4]
 800dcd4:	4013      	ands	r3, r2
 800dcd6:	68a2      	ldr	r2, [r4, #8]
 800dcd8:	400a      	ands	r2, r1
 800dcda:	4313      	orrs	r3, r2
 800dcdc:	d101      	bne.n	800dce2 <UTIL_SEQ_Run+0xb2>
	UTIL_SEQ_Idle( );
 800dcde:	f7f4 fe71 	bl	80029c4 <UTIL_SEQ_Idle>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dce2:	f385 8810 	msr	PRIMASK, r5
  UTIL_SEQ_PostIdle( );
 800dce6:	f7ff ff88 	bl	800dbfa <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 800dcea:	9b01      	ldr	r3, [sp, #4]
 800dcec:	6073      	str	r3, [r6, #4]
}
 800dcee:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800dcf0:	200000e8 	.word	0x200000e8
 800dcf4:	200017d8 	.word	0x200017d8
 800dcf8:	200017f8 	.word	0x200017f8

0800dcfc <UTIL_SEQ_RegTask>:
{
 800dcfc:	b570      	push	{r4, r5, r6, lr}
 800dcfe:	0014      	movs	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dd00:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800dd04:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800dd06:	f7ff ff79 	bl	800dbfc <SEQ_BitPosition>
 800dd0a:	4b03      	ldr	r3, [pc, #12]	; (800dd18 <UTIL_SEQ_RegTask+0x1c>)
 800dd0c:	0080      	lsls	r0, r0, #2
 800dd0e:	50c4      	str	r4, [r0, r3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd10:	f385 8810 	msr	PRIMASK, r5
}
 800dd14:	bd70      	pop	{r4, r5, r6, pc}
 800dd16:	46c0      	nop			; (mov r8, r8)
 800dd18:	200017f8 	.word	0x200017f8

0800dd1c <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 800dd1c:	b082      	sub	sp, #8
 800dd1e:	b513      	push	{r0, r1, r4, lr}
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };

  c.Seconds = a.Seconds + b.Seconds;
 800dd20:	18c9      	adds	r1, r1, r3
{
 800dd22:	9305      	str	r3, [sp, #20]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800dd24:	ab05      	add	r3, sp, #20
 800dd26:	889c      	ldrh	r4, [r3, #4]
 800dd28:	18a2      	adds	r2, r4, r2
  if( c.SubSeconds >= 1000 )
 800dd2a:	24fa      	movs	r4, #250	; 0xfa
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800dd2c:	b293      	uxth	r3, r2
 800dd2e:	b212      	sxth	r2, r2
  if( c.SubSeconds >= 1000 )
 800dd30:	00a4      	lsls	r4, r4, #2
 800dd32:	42a2      	cmp	r2, r4
 800dd34:	db03      	blt.n	800dd3e <SysTimeAdd+0x22>
  {
    c.Seconds++;
    c.SubSeconds -= 1000;
 800dd36:	4a05      	ldr	r2, [pc, #20]	; (800dd4c <SysTimeAdd+0x30>)
    c.Seconds++;
 800dd38:	3101      	adds	r1, #1
    c.SubSeconds -= 1000;
 800dd3a:	189b      	adds	r3, r3, r2
 800dd3c:	b21a      	sxth	r2, r3
  }
  return c;
 800dd3e:	6001      	str	r1, [r0, #0]
 800dd40:	8082      	strh	r2, [r0, #4]
}
 800dd42:	bc16      	pop	{r1, r2, r4}
 800dd44:	bc08      	pop	{r3}
 800dd46:	b002      	add	sp, #8
 800dd48:	4718      	bx	r3
 800dd4a:	46c0      	nop			; (mov r8, r8)
 800dd4c:	fffffc18 	.word	0xfffffc18

0800dd50 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 800dd50:	b082      	sub	sp, #8
 800dd52:	b513      	push	{r0, r1, r4, lr}
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };

  c.Seconds = a.Seconds - b.Seconds;
 800dd54:	1ac9      	subs	r1, r1, r3
{
 800dd56:	9305      	str	r3, [sp, #20]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800dd58:	ab05      	add	r3, sp, #20
 800dd5a:	889b      	ldrh	r3, [r3, #4]
 800dd5c:	1ad2      	subs	r2, r2, r3
 800dd5e:	b293      	uxth	r3, r2
 800dd60:	b214      	sxth	r4, r2
  if( c.SubSeconds < 0 )
 800dd62:	0412      	lsls	r2, r2, #16
 800dd64:	d504      	bpl.n	800dd70 <SysTimeSub+0x20>
  {
    c.Seconds--;
    c.SubSeconds += 1000;
 800dd66:	22fa      	movs	r2, #250	; 0xfa
 800dd68:	0092      	lsls	r2, r2, #2
 800dd6a:	189b      	adds	r3, r3, r2
    c.Seconds--;
 800dd6c:	3901      	subs	r1, #1
    c.SubSeconds += 1000;
 800dd6e:	b21c      	sxth	r4, r3
  }
  return c;
 800dd70:	6001      	str	r1, [r0, #0]
 800dd72:	8084      	strh	r4, [r0, #4]
}
 800dd74:	bc16      	pop	{r1, r2, r4}
 800dd76:	bc08      	pop	{r3}
 800dd78:	b002      	add	sp, #8
 800dd7a:	4718      	bx	r3

0800dd7c <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
  SysTime_t DeltaTime;
  
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800dd7c:	2300      	movs	r3, #0
{
 800dd7e:	b530      	push	{r4, r5, lr}

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800dd80:	4c11      	ldr	r4, [pc, #68]	; (800ddc8 <SysTimeSet+0x4c>)
{
 800dd82:	b087      	sub	sp, #28
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800dd84:	ad04      	add	r5, sp, #16
 800dd86:	80ab      	strh	r3, [r5, #4]
 800dd88:	9304      	str	r3, [sp, #16]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800dd8a:	6923      	ldr	r3, [r4, #16]
{
 800dd8c:	9002      	str	r0, [sp, #8]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800dd8e:	a805      	add	r0, sp, #20
 800dd90:	9301      	str	r3, [sp, #4]
{
 800dd92:	9103      	str	r1, [sp, #12]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800dd94:	4798      	blx	r3
  c.Seconds = a.Seconds - b.Seconds;
 800dd96:	9b02      	ldr	r3, [sp, #8]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800dd98:	9004      	str	r0, [sp, #16]
  c.Seconds = a.Seconds - b.Seconds;
 800dd9a:	1a18      	subs	r0, r3, r0
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800dd9c:	ab02      	add	r3, sp, #8
 800dd9e:	88aa      	ldrh	r2, [r5, #4]
 800dda0:	889b      	ldrh	r3, [r3, #4]
 800dda2:	1a9b      	subs	r3, r3, r2
 800dda4:	b29a      	uxth	r2, r3
 800dda6:	b21d      	sxth	r5, r3
  if( c.SubSeconds < 0 )
 800dda8:	041b      	lsls	r3, r3, #16
 800ddaa:	d504      	bpl.n	800ddb6 <SysTimeSet+0x3a>
    c.SubSeconds += 1000;
 800ddac:	23fa      	movs	r3, #250	; 0xfa
 800ddae:	009b      	lsls	r3, r3, #2
 800ddb0:	18d2      	adds	r2, r2, r3
    c.Seconds--;
 800ddb2:	3801      	subs	r0, #1
    c.SubSeconds += 1000;
 800ddb4:	b215      	sxth	r5, r2

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 800ddb6:	6823      	ldr	r3, [r4, #0]
 800ddb8:	9301      	str	r3, [sp, #4]
 800ddba:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 800ddbc:	68a3      	ldr	r3, [r4, #8]
 800ddbe:	0028      	movs	r0, r5
 800ddc0:	9301      	str	r3, [sp, #4]
 800ddc2:	4798      	blx	r3
}
 800ddc4:	b007      	add	sp, #28
 800ddc6:	bd30      	pop	{r4, r5, pc}
 800ddc8:	0800e5d0 	.word	0x0800e5d0

0800ddcc <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 800ddcc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800ddce:	2300      	movs	r3, #0
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800ddd0:	4e12      	ldr	r6, [pc, #72]	; (800de1c <SysTimeGet+0x50>)
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800ddd2:	aa02      	add	r2, sp, #8
 800ddd4:	8093      	strh	r3, [r2, #4]
 800ddd6:	9302      	str	r3, [sp, #8]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800ddd8:	6933      	ldr	r3, [r6, #16]
{
 800ddda:	0004      	movs	r4, r0
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800dddc:	a803      	add	r0, sp, #12
 800ddde:	9301      	str	r3, [sp, #4]
 800dde0:	4798      	blx	r3

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800dde2:	68f3      	ldr	r3, [r6, #12]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800dde4:	9002      	str	r0, [sp, #8]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800dde6:	9301      	str	r3, [sp, #4]
 800dde8:	4798      	blx	r3
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800ddea:	6873      	ldr	r3, [r6, #4]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800ddec:	0005      	movs	r5, r0
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800ddee:	9301      	str	r3, [sp, #4]
 800ddf0:	4798      	blx	r3
  if( c.SubSeconds >= 1000 )
 800ddf2:	21fa      	movs	r1, #250	; 0xfa
  c.Seconds = a.Seconds + b.Seconds;
 800ddf4:	9b02      	ldr	r3, [sp, #8]
  if( c.SubSeconds >= 1000 )
 800ddf6:	0089      	lsls	r1, r1, #2
  c.Seconds = a.Seconds + b.Seconds;
 800ddf8:	18c0      	adds	r0, r0, r3
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800ddfa:	ab02      	add	r3, sp, #8
 800ddfc:	889b      	ldrh	r3, [r3, #4]
 800ddfe:	195b      	adds	r3, r3, r5
 800de00:	b29a      	uxth	r2, r3
 800de02:	b21b      	sxth	r3, r3
  if( c.SubSeconds >= 1000 )
 800de04:	428b      	cmp	r3, r1
 800de06:	db03      	blt.n	800de10 <SysTimeGet+0x44>
    c.SubSeconds -= 1000;
 800de08:	4b05      	ldr	r3, [pc, #20]	; (800de20 <SysTimeGet+0x54>)
    c.Seconds++;
 800de0a:	3001      	adds	r0, #1
    c.SubSeconds -= 1000;
 800de0c:	18d2      	adds	r2, r2, r3
 800de0e:	b213      	sxth	r3, r2

  sysTime = SysTimeAdd( DeltaTime, calendarTime );

  return sysTime;
 800de10:	6020      	str	r0, [r4, #0]
}
 800de12:	0020      	movs	r0, r4
  return sysTime;
 800de14:	80a3      	strh	r3, [r4, #4]
}
 800de16:	b004      	add	sp, #16
 800de18:	bd70      	pop	{r4, r5, r6, pc}
 800de1a:	46c0      	nop			; (mov r8, r8)
 800de1c:	0800e5d0 	.word	0x0800e5d0
 800de20:	fffffc18 	.word	0xfffffc18

0800de24 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 800de24:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800de26:	2300      	movs	r3, #0
 800de28:	466d      	mov	r5, sp
{
 800de2a:	0004      	movs	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800de2c:	9300      	str	r3, [sp, #0]
 800de2e:	80ab      	strh	r3, [r5, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800de30:	4b04      	ldr	r3, [pc, #16]	; (800de44 <SysTimeGetMcuTime+0x20>)
 800de32:	a801      	add	r0, sp, #4
 800de34:	691b      	ldr	r3, [r3, #16]
 800de36:	4798      	blx	r3
  
  return calendarTime;
 800de38:	0023      	movs	r3, r4
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800de3a:	9000      	str	r0, [sp, #0]
  return calendarTime;
 800de3c:	cd06      	ldmia	r5!, {r1, r2}
 800de3e:	c306      	stmia	r3!, {r1, r2}
}
 800de40:	0020      	movs	r0, r4
 800de42:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 800de44:	0800e5d0 	.word	0x0800e5d0

0800de48 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 800de48:	b530      	push	{r4, r5, lr}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800de4a:	4d0f      	ldr	r5, [pc, #60]	; (800de88 <SysTimeToMs+0x40>)
{
 800de4c:	b085      	sub	sp, #20
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800de4e:	68eb      	ldr	r3, [r5, #12]
{
 800de50:	9103      	str	r1, [sp, #12]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800de52:	9301      	str	r3, [sp, #4]
{
 800de54:	9002      	str	r0, [sp, #8]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800de56:	4798      	blx	r3
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800de58:	686b      	ldr	r3, [r5, #4]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800de5a:	0004      	movs	r4, r0
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800de5c:	9301      	str	r3, [sp, #4]
 800de5e:	4798      	blx	r3
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800de60:	aa02      	add	r2, sp, #8
 800de62:	8892      	ldrh	r2, [r2, #4]
  c.Seconds = a.Seconds - b.Seconds;
 800de64:	9b02      	ldr	r3, [sp, #8]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800de66:	1b12      	subs	r2, r2, r4
  c.Seconds = a.Seconds - b.Seconds;
 800de68:	1a1b      	subs	r3, r3, r0
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800de6a:	b291      	uxth	r1, r2
 800de6c:	b214      	sxth	r4, r2
  if( c.SubSeconds < 0 )
 800de6e:	0412      	lsls	r2, r2, #16
 800de70:	d504      	bpl.n	800de7c <SysTimeToMs+0x34>
    c.SubSeconds += 1000;
 800de72:	22fa      	movs	r2, #250	; 0xfa
 800de74:	0092      	lsls	r2, r2, #2
 800de76:	1889      	adds	r1, r1, r2
    c.Seconds--;
 800de78:	3b01      	subs	r3, #1
    c.SubSeconds += 1000;
 800de7a:	b20c      	sxth	r4, r1
  
  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 800de7c:	20fa      	movs	r0, #250	; 0xfa
 800de7e:	0080      	lsls	r0, r0, #2
 800de80:	4358      	muls	r0, r3
 800de82:	1900      	adds	r0, r0, r4
}
 800de84:	b005      	add	sp, #20
 800de86:	bd30      	pop	{r4, r5, pc}
 800de88:	0800e5d0 	.word	0x0800e5d0

0800de8c <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 800de8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de8e:	000f      	movs	r7, r1
  uint32_t seconds = timeMs / 1000;
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 800de90:	26fa      	movs	r6, #250	; 0xfa
  uint32_t seconds = timeMs / 1000;
 800de92:	21fa      	movs	r1, #250	; 0xfa
{
 800de94:	b085      	sub	sp, #20
  uint32_t seconds = timeMs / 1000;
 800de96:	0089      	lsls	r1, r1, #2
{
 800de98:	0004      	movs	r4, r0
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 800de9a:	00b6      	lsls	r6, r6, #2
  uint32_t seconds = timeMs / 1000;
 800de9c:	0038      	movs	r0, r7
 800de9e:	f7f2 f963 	bl	8000168 <__udivsi3>
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 800dea2:	0031      	movs	r1, r6
 800dea4:	4341      	muls	r1, r0
 800dea6:	1a7f      	subs	r7, r7, r1
 800dea8:	b2bb      	uxth	r3, r7
  SysTime_t DeltaTime = { 0 };

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800deaa:	4f0e      	ldr	r7, [pc, #56]	; (800dee4 <SysTimeFromMs+0x58>)
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 800deac:	9301      	str	r3, [sp, #4]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800deae:	68fb      	ldr	r3, [r7, #12]
  uint32_t seconds = timeMs / 1000;
 800deb0:	0005      	movs	r5, r0
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800deb2:	9302      	str	r3, [sp, #8]
 800deb4:	4798      	blx	r3
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800deb6:	687b      	ldr	r3, [r7, #4]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800deb8:	9002      	str	r0, [sp, #8]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800deba:	9303      	str	r3, [sp, #12]
 800debc:	4798      	blx	r3
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800debe:	9b01      	ldr	r3, [sp, #4]
 800dec0:	9902      	ldr	r1, [sp, #8]
 800dec2:	469c      	mov	ip, r3
 800dec4:	4461      	add	r1, ip
  c.Seconds = a.Seconds + b.Seconds;
 800dec6:	1945      	adds	r5, r0, r5
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800dec8:	b288      	uxth	r0, r1
 800deca:	b209      	sxth	r1, r1
  if( c.SubSeconds >= 1000 )
 800decc:	42b1      	cmp	r1, r6
 800dece:	db03      	blt.n	800ded8 <SysTimeFromMs+0x4c>
    c.SubSeconds -= 1000;
 800ded0:	4b05      	ldr	r3, [pc, #20]	; (800dee8 <SysTimeFromMs+0x5c>)
    c.Seconds++;
 800ded2:	3501      	adds	r5, #1
    c.SubSeconds -= 1000;
 800ded4:	18c0      	adds	r0, r0, r3
 800ded6:	b201      	sxth	r1, r0
  return SysTimeAdd( sysTime, DeltaTime );
}
 800ded8:	0020      	movs	r0, r4
  return c;
 800deda:	6025      	str	r5, [r4, #0]
 800dedc:	80a1      	strh	r1, [r4, #4]
}
 800dede:	b005      	add	sp, #20
 800dee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dee2:	46c0      	nop			; (mov r8, r8)
 800dee4:	0800e5d0 	.word	0x0800e5d0
 800dee8:	fffffc18 	.word	0xfffffc18

0800deec <UTIL_TIMER_Init>:
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 800deec:	2200      	movs	r2, #0
{
 800deee:	b510      	push	{r4, lr}
  TimerListHead = NULL;
 800def0:	4b02      	ldr	r3, [pc, #8]	; (800defc <UTIL_TIMER_Init+0x10>)
 800def2:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 800def4:	4b02      	ldr	r3, [pc, #8]	; (800df00 <UTIL_TIMER_Init+0x14>)
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	4798      	blx	r3
}
 800defa:	bd10      	pop	{r4, pc}
 800defc:	20001878 	.word	0x20001878
 800df00:	0800e5e4 	.word	0x0800e5e4

0800df04 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 800df04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800df06:	0004      	movs	r4, r0
 800df08:	0017      	movs	r7, r2
 800df0a:	0008      	movs	r0, r1
 800df0c:	001e      	movs	r6, r3
    TimerObject->Next = NULL;
    return UTIL_TIMER_OK;
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 800df0e:	2501      	movs	r5, #1
  if((TimerObject != NULL) && (Callback != NULL))
 800df10:	2c00      	cmp	r4, #0
 800df12:	d00f      	beq.n	800df34 <UTIL_TIMER_Create+0x30>
 800df14:	2b00      	cmp	r3, #0
 800df16:	d00d      	beq.n	800df34 <UTIL_TIMER_Create+0x30>
    TimerObject->Timestamp = 0U;
 800df18:	2500      	movs	r5, #0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800df1a:	4b07      	ldr	r3, [pc, #28]	; (800df38 <UTIL_TIMER_Create+0x34>)
    TimerObject->Timestamp = 0U;
 800df1c:	6025      	str	r5, [r4, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800df1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df20:	9301      	str	r3, [sp, #4]
 800df22:	4798      	blx	r3
    TimerObject->argument = Argument;
 800df24:	9b08      	ldr	r3, [sp, #32]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800df26:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 800df28:	8125      	strh	r5, [r4, #8]
    TimerObject->IsReloadStopped = 0U;
 800df2a:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 800df2c:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 800df2e:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 800df30:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 800df32:	6165      	str	r5, [r4, #20]
  }
}
 800df34:	0028      	movs	r0, r5
 800df36:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800df38:	0800e5e4 	.word	0x0800e5e4

0800df3c <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800df3c:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800df3e:	4c03      	ldr	r4, [pc, #12]	; (800df4c <UTIL_TIMER_GetCurrentTime+0x10>)
 800df40:	69e3      	ldr	r3, [r4, #28]
 800df42:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 800df44:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800df46:	4798      	blx	r3
}
 800df48:	bd10      	pop	{r4, pc}
 800df4a:	46c0      	nop			; (mov r8, r8)
 800df4c:	0800e5e4 	.word	0x0800e5e4

0800df50 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800df50:	b570      	push	{r4, r5, r6, lr}
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800df52:	4d06      	ldr	r5, [pc, #24]	; (800df6c <UTIL_TIMER_GetElapsedTime+0x1c>)
{
 800df54:	0006      	movs	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800df56:	69eb      	ldr	r3, [r5, #28]
 800df58:	4798      	blx	r3
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800df5a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800df5c:	0004      	movs	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800df5e:	0030      	movs	r0, r6
 800df60:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800df62:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800df64:	1a20      	subs	r0, r4, r0
 800df66:	4798      	blx	r3
}
 800df68:	bd70      	pop	{r4, r5, r6, pc}
 800df6a:	46c0      	nop			; (mov r8, r8)
 800df6c:	0800e5e4 	.word	0x0800e5e4

0800df70 <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800df70:	4a05      	ldr	r2, [pc, #20]	; (800df88 <TimerExists+0x18>)
{
 800df72:	0003      	movs	r3, r0
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800df74:	6810      	ldr	r0, [r2, #0]

  while( cur != NULL )
 800df76:	2800      	cmp	r0, #0
 800df78:	d100      	bne.n	800df7c <TimerExists+0xc>
      return true;
    }
    cur = cur->Next;
  }
  return false;
}
 800df7a:	4770      	bx	lr
    if( cur == TimerObject )
 800df7c:	4298      	cmp	r0, r3
 800df7e:	d001      	beq.n	800df84 <TimerExists+0x14>
    cur = cur->Next;
 800df80:	6940      	ldr	r0, [r0, #20]
 800df82:	e7f8      	b.n	800df76 <TimerExists+0x6>
      return true;
 800df84:	2001      	movs	r0, #1
 800df86:	e7f8      	b.n	800df7a <TimerExists+0xa>
 800df88:	20001878 	.word	0x20001878

0800df8c <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800df8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800df8e:	4e0c      	ldr	r6, [pc, #48]	; (800dfc0 <TimerSetTimeout+0x34>)
{
 800df90:	0004      	movs	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800df92:	6a33      	ldr	r3, [r6, #32]
 800df94:	9301      	str	r3, [sp, #4]
 800df96:	4798      	blx	r3
  TimerObject->IsPending = 1;
 800df98:	2301      	movs	r3, #1
 800df9a:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800df9c:	69b3      	ldr	r3, [r6, #24]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800df9e:	0005      	movs	r5, r0
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800dfa0:	6827      	ldr	r7, [r4, #0]
 800dfa2:	9301      	str	r3, [sp, #4]
 800dfa4:	4798      	blx	r3
 800dfa6:	1940      	adds	r0, r0, r5
 800dfa8:	4287      	cmp	r7, r0
 800dfaa:	d203      	bcs.n	800dfb4 <TimerSetTimeout+0x28>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800dfac:	9b01      	ldr	r3, [sp, #4]
 800dfae:	4798      	blx	r3
 800dfb0:	1945      	adds	r5, r0, r5
 800dfb2:	6025      	str	r5, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800dfb4:	68b3      	ldr	r3, [r6, #8]
 800dfb6:	6820      	ldr	r0, [r4, #0]
 800dfb8:	9301      	str	r3, [sp, #4]
 800dfba:	4798      	blx	r3
}
 800dfbc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800dfbe:	46c0      	nop			; (mov r8, r8)
 800dfc0:	0800e5e4 	.word	0x0800e5e4

0800dfc4 <UTIL_TIMER_Stop>:
{
 800dfc4:	0003      	movs	r3, r0
 800dfc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
    ret = UTIL_TIMER_INVALID_PARAM;
 800dfc8:	2001      	movs	r0, #1
  if (NULL != TimerObject)
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d016      	beq.n	800dffc <UTIL_TIMER_Stop+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dfce:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800dfd2:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800dfd4:	4c11      	ldr	r4, [pc, #68]	; (800e01c <UTIL_TIMER_Stop+0x58>)
    TimerObject->IsReloadStopped = 1U;
 800dfd6:	7298      	strb	r0, [r3, #10]
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800dfd8:	6822      	ldr	r2, [r4, #0]
    if(NULL != TimerListHead)
 800dfda:	2a00      	cmp	r2, #0
 800dfdc:	d00b      	beq.n	800dff6 <UTIL_TIMER_Stop+0x32>
      TimerObject->IsRunning = 0U;
 800dfde:	2100      	movs	r1, #0
 800dfe0:	7259      	strb	r1, [r3, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800dfe2:	4293      	cmp	r3, r2
 800dfe4:	d111      	bne.n	800e00a <UTIL_TIMER_Stop+0x46>
          if( TimerListHead->Next != NULL )
 800dfe6:	695e      	ldr	r6, [r3, #20]
          TimerListHead->IsPending = 0;
 800dfe8:	7219      	strb	r1, [r3, #8]
          if( TimerListHead->Next != NULL )
 800dfea:	428e      	cmp	r6, r1
 800dfec:	d007      	beq.n	800dffe <UTIL_TIMER_Stop+0x3a>
            TimerSetTimeout( TimerListHead );
 800dfee:	0030      	movs	r0, r6
            TimerListHead = TimerListHead->Next;
 800dff0:	6026      	str	r6, [r4, #0]
            TimerSetTimeout( TimerListHead );
 800dff2:	f7ff ffcb 	bl	800df8c <TimerSetTimeout>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dff6:	f385 8810 	msr	PRIMASK, r5
}
 800dffa:	2000      	movs	r0, #0
}
 800dffc:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
            UTIL_TimerDriver.StopTimerEvt( );
 800dffe:	4b08      	ldr	r3, [pc, #32]	; (800e020 <UTIL_TIMER_Stop+0x5c>)
 800e000:	68db      	ldr	r3, [r3, #12]
 800e002:	9301      	str	r3, [sp, #4]
 800e004:	4798      	blx	r3
            TimerListHead = NULL;
 800e006:	6026      	str	r6, [r4, #0]
 800e008:	e7f5      	b.n	800dff6 <UTIL_TIMER_Stop+0x32>
            cur = cur->Next;
 800e00a:	0011      	movs	r1, r2
 800e00c:	6952      	ldr	r2, [r2, #20]
        while( cur != NULL )
 800e00e:	2a00      	cmp	r2, #0
 800e010:	d0f1      	beq.n	800dff6 <UTIL_TIMER_Stop+0x32>
          if( cur == TimerObject )
 800e012:	4293      	cmp	r3, r2
 800e014:	d1f9      	bne.n	800e00a <UTIL_TIMER_Stop+0x46>
            if( cur->Next != NULL )
 800e016:	695b      	ldr	r3, [r3, #20]
 800e018:	614b      	str	r3, [r1, #20]
 800e01a:	e7ec      	b.n	800dff6 <UTIL_TIMER_Stop+0x32>
 800e01c:	20001878 	.word	0x20001878
 800e020:	0800e5e4 	.word	0x0800e5e4

0800e024 <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800e024:	4b09      	ldr	r3, [pc, #36]	; (800e04c <TimerInsertTimer+0x28>)
{
 800e026:	b510      	push	{r4, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800e028:	681b      	ldr	r3, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800e02a:	695a      	ldr	r2, [r3, #20]

  while (cur->Next != NULL )
 800e02c:	6959      	ldr	r1, [r3, #20]
 800e02e:	2900      	cmp	r1, #0
 800e030:	d102      	bne.n	800e038 <TimerInsertTimer+0x14>
        TimerObject->Next = next;
        return;

    }
  }
  cur->Next = TimerObject;
 800e032:	6158      	str	r0, [r3, #20]
  TimerObject->Next = NULL;
 800e034:	6141      	str	r1, [r0, #20]
 800e036:	e008      	b.n	800e04a <TimerInsertTimer+0x26>
    if( TimerObject->Timestamp  > next->Timestamp )
 800e038:	6801      	ldr	r1, [r0, #0]
 800e03a:	6814      	ldr	r4, [r2, #0]
 800e03c:	42a1      	cmp	r1, r4
 800e03e:	d902      	bls.n	800e046 <TimerInsertTimer+0x22>
        next = next->Next;
 800e040:	0013      	movs	r3, r2
 800e042:	6952      	ldr	r2, [r2, #20]
 800e044:	e7f2      	b.n	800e02c <TimerInsertTimer+0x8>
        cur->Next = TimerObject;
 800e046:	6158      	str	r0, [r3, #20]
        TimerObject->Next = next;
 800e048:	6142      	str	r2, [r0, #20]
}
 800e04a:	bd10      	pop	{r4, pc}
 800e04c:	20001878 	.word	0x20001878

0800e050 <TimerInsertNewHeadTimer>:
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800e050:	4a05      	ldr	r2, [pc, #20]	; (800e068 <TimerInsertNewHeadTimer+0x18>)
{
 800e052:	b510      	push	{r4, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800e054:	6813      	ldr	r3, [r2, #0]

  if( cur != NULL )
 800e056:	2b00      	cmp	r3, #0
 800e058:	d001      	beq.n	800e05e <TimerInsertNewHeadTimer+0xe>
  {
    cur->IsPending = 0;
 800e05a:	2100      	movs	r1, #0
 800e05c:	7219      	strb	r1, [r3, #8]
  }

  TimerObject->Next = cur;
 800e05e:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 800e060:	6010      	str	r0, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800e062:	f7ff ff93 	bl	800df8c <TimerSetTimeout>
}
 800e066:	bd10      	pop	{r4, pc}
 800e068:	20001878 	.word	0x20001878

0800e06c <UTIL_TIMER_Start>:
{
 800e06c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e06e:	0004      	movs	r4, r0
    ret =  UTIL_TIMER_INVALID_PARAM;
 800e070:	2501      	movs	r5, #1
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800e072:	2800      	cmp	r0, #0
 800e074:	d025      	beq.n	800e0c2 <UTIL_TIMER_Start+0x56>
 800e076:	f7ff ff7b 	bl	800df70 <TimerExists>
 800e07a:	2800      	cmp	r0, #0
 800e07c:	d121      	bne.n	800e0c2 <UTIL_TIMER_Start+0x56>
 800e07e:	7a65      	ldrb	r5, [r4, #9]
 800e080:	2d00      	cmp	r5, #0
 800e082:	d12e      	bne.n	800e0e2 <UTIL_TIMER_Start+0x76>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e084:	f3ef 8310 	mrs	r3, PRIMASK
 800e088:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800e08a:	b672      	cpsid	i
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800e08c:	4e16      	ldr	r6, [pc, #88]	; (800e0e8 <UTIL_TIMER_Start+0x7c>)
    ticks = TimerObject->ReloadValue;
 800e08e:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800e090:	6a33      	ldr	r3, [r6, #32]
 800e092:	9301      	str	r3, [sp, #4]
 800e094:	4798      	blx	r3
    TimerObject->Timestamp = ticks;
 800e096:	4287      	cmp	r7, r0
 800e098:	d200      	bcs.n	800e09c <UTIL_TIMER_Start+0x30>
 800e09a:	0007      	movs	r7, r0
    TimerObject->IsPending = 0U;
 800e09c:	2380      	movs	r3, #128	; 0x80
 800e09e:	005b      	lsls	r3, r3, #1
 800e0a0:	8123      	strh	r3, [r4, #8]
    TimerObject->IsReloadStopped = 0U;
 800e0a2:	2300      	movs	r3, #0
    TimerObject->Timestamp = ticks;
 800e0a4:	6027      	str	r7, [r4, #0]
    if( TimerListHead == NULL )
 800e0a6:	4f11      	ldr	r7, [pc, #68]	; (800e0ec <UTIL_TIMER_Start+0x80>)
    TimerObject->IsReloadStopped = 0U;
 800e0a8:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 800e0aa:	683b      	ldr	r3, [r7, #0]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d10a      	bne.n	800e0c6 <UTIL_TIMER_Start+0x5a>
      UTIL_TimerDriver.SetTimerContext();
 800e0b0:	6933      	ldr	r3, [r6, #16]
 800e0b2:	9301      	str	r3, [sp, #4]
 800e0b4:	4798      	blx	r3
        TimerInsertNewHeadTimer( TimerObject);
 800e0b6:	0020      	movs	r0, r4
 800e0b8:	f7ff ffca 	bl	800e050 <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e0bc:	9b00      	ldr	r3, [sp, #0]
 800e0be:	f383 8810 	msr	PRIMASK, r3
}
 800e0c2:	0028      	movs	r0, r5
 800e0c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800e0c6:	69b3      	ldr	r3, [r6, #24]
 800e0c8:	9301      	str	r3, [sp, #4]
 800e0ca:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 800e0cc:	6823      	ldr	r3, [r4, #0]
 800e0ce:	18c0      	adds	r0, r0, r3
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800e0d0:	683b      	ldr	r3, [r7, #0]
      TimerObject->Timestamp += elapsedTime;
 800e0d2:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	4298      	cmp	r0, r3
 800e0d8:	d3ed      	bcc.n	800e0b6 <UTIL_TIMER_Start+0x4a>
        TimerInsertTimer( TimerObject);
 800e0da:	0020      	movs	r0, r4
 800e0dc:	f7ff ffa2 	bl	800e024 <TimerInsertTimer>
 800e0e0:	e7ec      	b.n	800e0bc <UTIL_TIMER_Start+0x50>
    ret =  UTIL_TIMER_INVALID_PARAM;
 800e0e2:	2501      	movs	r5, #1
 800e0e4:	e7ed      	b.n	800e0c2 <UTIL_TIMER_Start+0x56>
 800e0e6:	46c0      	nop			; (mov r8, r8)
 800e0e8:	0800e5e4 	.word	0x0800e5e4
 800e0ec:	20001878 	.word	0x20001878

0800e0f0 <UTIL_TIMER_SetPeriod>:
{
 800e0f0:	b513      	push	{r0, r1, r4, lr}
	  ret = UTIL_TIMER_INVALID_PARAM;
 800e0f2:	2301      	movs	r3, #1
{
 800e0f4:	0004      	movs	r4, r0
 800e0f6:	0008      	movs	r0, r1
  if(NULL == TimerObject)
 800e0f8:	2c00      	cmp	r4, #0
 800e0fa:	d011      	beq.n	800e120 <UTIL_TIMER_SetPeriod+0x30>
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800e0fc:	4b09      	ldr	r3, [pc, #36]	; (800e124 <UTIL_TIMER_SetPeriod+0x34>)
 800e0fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e100:	9301      	str	r3, [sp, #4]
 800e102:	4798      	blx	r3
 800e104:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 800e106:	0020      	movs	r0, r4
 800e108:	f7ff ff32 	bl	800df70 <TimerExists>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800e10c:	2300      	movs	r3, #0
    if(TimerExists(TimerObject))
 800e10e:	4298      	cmp	r0, r3
 800e110:	d006      	beq.n	800e120 <UTIL_TIMER_SetPeriod+0x30>
      (void)UTIL_TIMER_Stop(TimerObject);
 800e112:	0020      	movs	r0, r4
 800e114:	f7ff ff56 	bl	800dfc4 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800e118:	0020      	movs	r0, r4
 800e11a:	f7ff ffa7 	bl	800e06c <UTIL_TIMER_Start>
 800e11e:	0003      	movs	r3, r0
}
 800e120:	0018      	movs	r0, r3
 800e122:	bd16      	pop	{r1, r2, r4, pc}
 800e124:	0800e5e4 	.word	0x0800e5e4

0800e128 <UTIL_TIMER_IRQ_Handler>:
{
 800e128:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e12a:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800e12e:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 800e130:	4e1e      	ldr	r6, [pc, #120]	; (800e1ac <UTIL_TIMER_IRQ_Handler+0x84>)
 800e132:	6973      	ldr	r3, [r6, #20]
 800e134:	9301      	str	r3, [sp, #4]
 800e136:	4798      	blx	r3
  now  =  UTIL_TimerDriver.SetTimerContext( );
 800e138:	6933      	ldr	r3, [r6, #16]
  old  =  UTIL_TimerDriver.GetTimerContext( );
 800e13a:	0004      	movs	r4, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 800e13c:	9301      	str	r3, [sp, #4]
 800e13e:	4798      	blx	r3
  if ( TimerListHead != NULL )
 800e140:	4d1b      	ldr	r5, [pc, #108]	; (800e1b0 <UTIL_TIMER_IRQ_Handler+0x88>)
  DeltaContext = now  - old; /*intentional wrap around */
 800e142:	1b01      	subs	r1, r0, r4
  if ( TimerListHead != NULL )
 800e144:	682b      	ldr	r3, [r5, #0]
        cur->Timestamp -= DeltaContext;
 800e146:	1a24      	subs	r4, r4, r0
  if ( TimerListHead != NULL )
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d01f      	beq.n	800e18c <UTIL_TIMER_IRQ_Handler+0x64>
      if (cur->Timestamp > DeltaContext)
 800e14c:	6818      	ldr	r0, [r3, #0]
        cur->Timestamp = 0;
 800e14e:	2200      	movs	r2, #0
      if (cur->Timestamp > DeltaContext)
 800e150:	4288      	cmp	r0, r1
 800e152:	d900      	bls.n	800e156 <UTIL_TIMER_IRQ_Handler+0x2e>
        cur->Timestamp -= DeltaContext;
 800e154:	1822      	adds	r2, r4, r0
 800e156:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 800e158:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 800e15a:	e7f5      	b.n	800e148 <UTIL_TIMER_IRQ_Handler+0x20>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800e15c:	681c      	ldr	r4, [r3, #0]
 800e15e:	2c00      	cmp	r4, #0
 800e160:	d004      	beq.n	800e16c <UTIL_TIMER_IRQ_Handler+0x44>
 800e162:	69b3      	ldr	r3, [r6, #24]
 800e164:	9301      	str	r3, [sp, #4]
 800e166:	4798      	blx	r3
 800e168:	4284      	cmp	r4, r0
 800e16a:	d212      	bcs.n	800e192 <UTIL_TIMER_IRQ_Handler+0x6a>
      cur = TimerListHead;
 800e16c:	682c      	ldr	r4, [r5, #0]
      TimerListHead = TimerListHead->Next;
 800e16e:	6963      	ldr	r3, [r4, #20]
      cur->Callback(cur->argument);
 800e170:	6920      	ldr	r0, [r4, #16]
      TimerListHead = TimerListHead->Next;
 800e172:	602b      	str	r3, [r5, #0]
      cur->IsPending = 0;
 800e174:	2300      	movs	r3, #0
 800e176:	8123      	strh	r3, [r4, #8]
      cur->Callback(cur->argument);
 800e178:	68e3      	ldr	r3, [r4, #12]
 800e17a:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 800e17c:	2280      	movs	r2, #128	; 0x80
 800e17e:	8963      	ldrh	r3, [r4, #10]
 800e180:	0052      	lsls	r2, r2, #1
 800e182:	4293      	cmp	r3, r2
 800e184:	d102      	bne.n	800e18c <UTIL_TIMER_IRQ_Handler+0x64>
        (void)UTIL_TIMER_Start(cur);
 800e186:	0020      	movs	r0, r4
 800e188:	f7ff ff70 	bl	800e06c <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800e18c:	682b      	ldr	r3, [r5, #0]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d1e4      	bne.n	800e15c <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 800e192:	6828      	ldr	r0, [r5, #0]
 800e194:	2800      	cmp	r0, #0
 800e196:	d102      	bne.n	800e19e <UTIL_TIMER_IRQ_Handler+0x76>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e198:	f387 8810 	msr	PRIMASK, r7
}
 800e19c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 800e19e:	7a03      	ldrb	r3, [r0, #8]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d1f9      	bne.n	800e198 <UTIL_TIMER_IRQ_Handler+0x70>
    TimerSetTimeout( TimerListHead );
 800e1a4:	f7ff fef2 	bl	800df8c <TimerSetTimeout>
 800e1a8:	e7f6      	b.n	800e198 <UTIL_TIMER_IRQ_Handler+0x70>
 800e1aa:	46c0      	nop			; (mov r8, r8)
 800e1ac:	0800e5e4 	.word	0x0800e5e4
 800e1b0:	20001878 	.word	0x20001878

0800e1b4 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 800e1b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e1b6:	b09d      	sub	sp, #116	; 0x74
 800e1b8:	9002      	str	r0, [sp, #8]
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
  {
    return 0;
 800e1ba:	2000      	movs	r0, #0
{
 800e1bc:	001c      	movs	r4, r3
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800e1be:	9f02      	ldr	r7, [sp, #8]
{
 800e1c0:	9109      	str	r1, [sp, #36]	; 0x24
  if (size <= 0)
 800e1c2:	4281      	cmp	r1, r0
 800e1c4:	dc0a      	bgt.n	800e1dc <tiny_vsnprintf_like+0x28>
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
  }

  *str = '\0';
  return str - buf;
}
 800e1c6:	b01d      	add	sp, #116	; 0x74
 800e1c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    CHECK_STR_SIZE(buf, str, size);
 800e1ca:	4298      	cmp	r0, r3
 800e1cc:	da0d      	bge.n	800e1ea <tiny_vsnprintf_like+0x36>
    if (*fmt != '%')
 800e1ce:	2925      	cmp	r1, #37	; 0x25
 800e1d0:	d00e      	beq.n	800e1f0 <tiny_vsnprintf_like+0x3c>
      *str++ = *fmt;
 800e1d2:	7039      	strb	r1, [r7, #0]
      continue;
 800e1d4:	9201      	str	r2, [sp, #4]
      *str++ = *fmt;
 800e1d6:	3701      	adds	r7, #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800e1d8:	9a01      	ldr	r2, [sp, #4]
 800e1da:	3201      	adds	r2, #1
    CHECK_STR_SIZE(buf, str, size);
 800e1dc:	9b02      	ldr	r3, [sp, #8]
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800e1de:	7811      	ldrb	r1, [r2, #0]
    CHECK_STR_SIZE(buf, str, size);
 800e1e0:	1af8      	subs	r0, r7, r3
 800e1e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1e4:	3b01      	subs	r3, #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800e1e6:	2900      	cmp	r1, #0
 800e1e8:	d1ef      	bne.n	800e1ca <tiny_vsnprintf_like+0x16>
  *str = '\0';
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	703b      	strb	r3, [r7, #0]
  return str - buf;
 800e1ee:	e7ea      	b.n	800e1c6 <tiny_vsnprintf_like+0x12>
    fmt++;
 800e1f0:	1c51      	adds	r1, r2, #1
    if (*fmt == '0')
 800e1f2:	7852      	ldrb	r2, [r2, #1]
    fmt++;
 800e1f4:	9101      	str	r1, [sp, #4]
    if (*fmt == '0')
 800e1f6:	0010      	movs	r0, r2
 800e1f8:	3830      	subs	r0, #48	; 0x30
 800e1fa:	9204      	str	r2, [sp, #16]
 800e1fc:	4241      	negs	r1, r0
 800e1fe:	4141      	adcs	r1, r0
    if (is_digit(*fmt))
 800e200:	b2c0      	uxtb	r0, r0
      flags |= ZEROPAD;
 800e202:	000a      	movs	r2, r1
    if (is_digit(*fmt))
 800e204:	2809      	cmp	r0, #9
 800e206:	d92e      	bls.n	800e266 <tiny_vsnprintf_like+0xb2>
    field_width = -1;
 800e208:	2001      	movs	r0, #1
 800e20a:	4240      	negs	r0, r0
 800e20c:	9000      	str	r0, [sp, #0]
    switch (*fmt)
 800e20e:	9801      	ldr	r0, [sp, #4]
 800e210:	7800      	ldrb	r0, [r0, #0]
 800e212:	2869      	cmp	r0, #105	; 0x69
 800e214:	d100      	bne.n	800e218 <tiny_vsnprintf_like+0x64>
 800e216:	e0a4      	b.n	800e362 <tiny_vsnprintf_like+0x1ae>
 800e218:	d829      	bhi.n	800e26e <tiny_vsnprintf_like+0xba>
 800e21a:	2863      	cmp	r0, #99	; 0x63
 800e21c:	d038      	beq.n	800e290 <tiny_vsnprintf_like+0xdc>
 800e21e:	2864      	cmp	r0, #100	; 0x64
 800e220:	d100      	bne.n	800e224 <tiny_vsnprintf_like+0x70>
 800e222:	e09e      	b.n	800e362 <tiny_vsnprintf_like+0x1ae>
 800e224:	2858      	cmp	r0, #88	; 0x58
 800e226:	d066      	beq.n	800e2f6 <tiny_vsnprintf_like+0x142>
        if (*fmt != '%') *str++ = '%';
 800e228:	0039      	movs	r1, r7
 800e22a:	2825      	cmp	r0, #37	; 0x25
 800e22c:	d126      	bne.n	800e27c <tiny_vsnprintf_like+0xc8>
        if (*fmt)
 800e22e:	9801      	ldr	r0, [sp, #4]
 800e230:	7800      	ldrb	r0, [r0, #0]
 800e232:	2800      	cmp	r0, #0
 800e234:	d100      	bne.n	800e238 <tiny_vsnprintf_like+0x84>
 800e236:	e098      	b.n	800e36a <tiny_vsnprintf_like+0x1b6>
          *str++ = *fmt;
 800e238:	1c4f      	adds	r7, r1, #1
 800e23a:	7008      	strb	r0, [r1, #0]
        CHECK_STR_SIZE(buf, str, size);
 800e23c:	9902      	ldr	r1, [sp, #8]
 800e23e:	1a79      	subs	r1, r7, r1
 800e240:	4299      	cmp	r1, r3
 800e242:	db00      	blt.n	800e246 <tiny_vsnprintf_like+0x92>
 800e244:	e08f      	b.n	800e366 <tiny_vsnprintf_like+0x1b2>
 800e246:	e7c7      	b.n	800e1d8 <tiny_vsnprintf_like+0x24>
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 800e248:	9d01      	ldr	r5, [sp, #4]
 800e24a:	3501      	adds	r5, #1
 800e24c:	9501      	str	r5, [sp, #4]
 800e24e:	9d00      	ldr	r5, [sp, #0]
 800e250:	4375      	muls	r5, r6
 800e252:	1828      	adds	r0, r5, r0
 800e254:	3830      	subs	r0, #48	; 0x30
 800e256:	9000      	str	r0, [sp, #0]
 800e258:	9801      	ldr	r0, [sp, #4]
 800e25a:	7800      	ldrb	r0, [r0, #0]
 800e25c:	0005      	movs	r5, r0
 800e25e:	3d30      	subs	r5, #48	; 0x30
 800e260:	2d09      	cmp	r5, #9
 800e262:	d9f1      	bls.n	800e248 <tiny_vsnprintf_like+0x94>
 800e264:	e7d3      	b.n	800e20e <tiny_vsnprintf_like+0x5a>
  int i = 0;
 800e266:	2000      	movs	r0, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 800e268:	260a      	movs	r6, #10
  int i = 0;
 800e26a:	9000      	str	r0, [sp, #0]
 800e26c:	e7f4      	b.n	800e258 <tiny_vsnprintf_like+0xa4>
    switch (*fmt)
 800e26e:	2875      	cmp	r0, #117	; 0x75
 800e270:	d079      	beq.n	800e366 <tiny_vsnprintf_like+0x1b2>
 800e272:	2510      	movs	r5, #16
 800e274:	2878      	cmp	r0, #120	; 0x78
 800e276:	d041      	beq.n	800e2fc <tiny_vsnprintf_like+0x148>
 800e278:	2873      	cmp	r0, #115	; 0x73
 800e27a:	d01d      	beq.n	800e2b8 <tiny_vsnprintf_like+0x104>
        if (*fmt != '%') *str++ = '%';
 800e27c:	2025      	movs	r0, #37	; 0x25
 800e27e:	7038      	strb	r0, [r7, #0]
        CHECK_STR_SIZE(buf, str, size);
 800e280:	9802      	ldr	r0, [sp, #8]
        if (*fmt != '%') *str++ = '%';
 800e282:	1c79      	adds	r1, r7, #1
 800e284:	000f      	movs	r7, r1
    base = 10;
 800e286:	250a      	movs	r5, #10
        CHECK_STR_SIZE(buf, str, size);
 800e288:	1a08      	subs	r0, r1, r0
 800e28a:	4298      	cmp	r0, r3
 800e28c:	da36      	bge.n	800e2fc <tiny_vsnprintf_like+0x148>
 800e28e:	e7ce      	b.n	800e22e <tiny_vsnprintf_like+0x7a>
          while (--field_width > 0) *str++ = ' ';
 800e290:	2500      	movs	r5, #0
 800e292:	9b00      	ldr	r3, [sp, #0]
 800e294:	42ab      	cmp	r3, r5
 800e296:	dd00      	ble.n	800e29a <tiny_vsnprintf_like+0xe6>
 800e298:	1e5d      	subs	r5, r3, #1
 800e29a:	002a      	movs	r2, r5
 800e29c:	2120      	movs	r1, #32
 800e29e:	0038      	movs	r0, r7
 800e2a0:	f000 f8df 	bl	800e462 <memset>
 800e2a4:	9a00      	ldr	r2, [sp, #0]
 800e2a6:	2301      	movs	r3, #1
 800e2a8:	197d      	adds	r5, r7, r5
 800e2aa:	2a00      	cmp	r2, #0
 800e2ac:	dd00      	ble.n	800e2b0 <tiny_vsnprintf_like+0xfc>
 800e2ae:	0013      	movs	r3, r2
 800e2b0:	18ff      	adds	r7, r7, r3
        *str++ = (unsigned char) va_arg(args, int);
 800e2b2:	cc08      	ldmia	r4!, {r3}
 800e2b4:	702b      	strb	r3, [r5, #0]
        continue;
 800e2b6:	e78f      	b.n	800e1d8 <tiny_vsnprintf_like+0x24>
        s = va_arg(args, char *);
 800e2b8:	cc40      	ldmia	r4!, {r6}
        if (!s) s = "<NULL>";
 800e2ba:	2e00      	cmp	r6, #0
 800e2bc:	d100      	bne.n	800e2c0 <tiny_vsnprintf_like+0x10c>
 800e2be:	4e4f      	ldr	r6, [pc, #316]	; (800e3fc <tiny_vsnprintf_like+0x248>)
        len = strlen(s);
 800e2c0:	0030      	movs	r0, r6
 800e2c2:	f7f1 ff21 	bl	8000108 <strlen>
          while (len < field_width--) *str++ = ' ';
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	9303      	str	r3, [sp, #12]
 800e2ca:	9b00      	ldr	r3, [sp, #0]
        len = strlen(s);
 800e2cc:	0005      	movs	r5, r0
          while (len < field_width--) *str++ = ' ';
 800e2ce:	4283      	cmp	r3, r0
 800e2d0:	db01      	blt.n	800e2d6 <tiny_vsnprintf_like+0x122>
 800e2d2:	1a1b      	subs	r3, r3, r0
 800e2d4:	9303      	str	r3, [sp, #12]
 800e2d6:	0038      	movs	r0, r7
 800e2d8:	2120      	movs	r1, #32
 800e2da:	9a03      	ldr	r2, [sp, #12]
 800e2dc:	f000 f8c1 	bl	800e462 <memset>
 800e2e0:	9b03      	ldr	r3, [sp, #12]
 800e2e2:	18ff      	adds	r7, r7, r3
        for (i = 0; i < len; ++i) *str++ = *s++;
 800e2e4:	2300      	movs	r3, #0
 800e2e6:	42ab      	cmp	r3, r5
 800e2e8:	db01      	blt.n	800e2ee <tiny_vsnprintf_like+0x13a>
 800e2ea:	197f      	adds	r7, r7, r5
 800e2ec:	e774      	b.n	800e1d8 <tiny_vsnprintf_like+0x24>
 800e2ee:	5cf2      	ldrb	r2, [r6, r3]
 800e2f0:	54fa      	strb	r2, [r7, r3]
 800e2f2:	3301      	adds	r3, #1
 800e2f4:	e7f7      	b.n	800e2e6 <tiny_vsnprintf_like+0x132>
        flags |= UPPERCASE;
 800e2f6:	2240      	movs	r2, #64	; 0x40
        base = 16;
 800e2f8:	2510      	movs	r5, #16
        flags |= UPPERCASE;
 800e2fa:	430a      	orrs	r2, r1
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800e2fc:	9802      	ldr	r0, [sp, #8]
    else if (flags & SIGN)
 800e2fe:	2102      	movs	r1, #2
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800e300:	1a3e      	subs	r6, r7, r0
 800e302:	0020      	movs	r0, r4
 800e304:	1b9e      	subs	r6, r3, r6
 800e306:	c808      	ldmia	r0!, {r3}
    else if (flags & SIGN)
 800e308:	4011      	ands	r1, r2
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800e30a:	9005      	str	r0, [sp, #20]
  if (type & UPPERCASE)  dig = upper_digits;
 800e30c:	483c      	ldr	r0, [pc, #240]	; (800e400 <tiny_vsnprintf_like+0x24c>)
 800e30e:	9007      	str	r0, [sp, #28]
 800e310:	2040      	movs	r0, #64	; 0x40
 800e312:	4202      	tst	r2, r0
 800e314:	d101      	bne.n	800e31a <tiny_vsnprintf_like+0x166>
  char *dig = lower_digits;
 800e316:	4a3b      	ldr	r2, [pc, #236]	; (800e404 <tiny_vsnprintf_like+0x250>)
 800e318:	9207      	str	r2, [sp, #28]
  c = (type & ZEROPAD) ? '0' : ' ';
 800e31a:	2230      	movs	r2, #48	; 0x30
 800e31c:	9208      	str	r2, [sp, #32]
 800e31e:	9a04      	ldr	r2, [sp, #16]
 800e320:	2a30      	cmp	r2, #48	; 0x30
 800e322:	d001      	beq.n	800e328 <tiny_vsnprintf_like+0x174>
 800e324:	2220      	movs	r2, #32
 800e326:	9208      	str	r2, [sp, #32]
  if (type & SIGN)
 800e328:	2900      	cmp	r1, #0
 800e32a:	d023      	beq.n	800e374 <tiny_vsnprintf_like+0x1c0>
    if (num < 0)
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	da21      	bge.n	800e374 <tiny_vsnprintf_like+0x1c0>
      size--;
 800e330:	9a00      	ldr	r2, [sp, #0]
      num = -num;
 800e332:	425b      	negs	r3, r3
      size--;
 800e334:	3a01      	subs	r2, #1
 800e336:	9200      	str	r2, [sp, #0]
      sign = '-';
 800e338:	222d      	movs	r2, #45	; 0x2d
  if (base < 2 || base > 36) return 0;
 800e33a:	2400      	movs	r4, #0
 800e33c:	9203      	str	r2, [sp, #12]
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 800e33e:	0018      	movs	r0, r3
 800e340:	0029      	movs	r1, r5
 800e342:	9306      	str	r3, [sp, #24]
 800e344:	f7f1 ff96 	bl	8000274 <__aeabi_uidivmod>
 800e348:	0022      	movs	r2, r4
 800e34a:	4684      	mov	ip, r0
 800e34c:	9b07      	ldr	r3, [sp, #28]
 800e34e:	3401      	adds	r4, #1
 800e350:	5c59      	ldrb	r1, [r3, r1]
 800e352:	ab0b      	add	r3, sp, #44	; 0x2c
 800e354:	5499      	strb	r1, [r3, r2]
    while (num != 0)
 800e356:	9a06      	ldr	r2, [sp, #24]
 800e358:	0020      	movs	r0, r4
      num = ((unsigned long) num) / (unsigned) base;
 800e35a:	4663      	mov	r3, ip
    while (num != 0)
 800e35c:	4295      	cmp	r5, r2
 800e35e:	d9ee      	bls.n	800e33e <tiny_vsnprintf_like+0x18a>
 800e360:	e011      	b.n	800e386 <tiny_vsnprintf_like+0x1d2>
        flags |= SIGN;
 800e362:	2202      	movs	r2, #2
 800e364:	430a      	orrs	r2, r1
    base = 10;
 800e366:	250a      	movs	r5, #10
 800e368:	e7c8      	b.n	800e2fc <tiny_vsnprintf_like+0x148>
          --fmt;
 800e36a:	9801      	ldr	r0, [sp, #4]
 800e36c:	000f      	movs	r7, r1
 800e36e:	3801      	subs	r0, #1
 800e370:	9001      	str	r0, [sp, #4]
 800e372:	e763      	b.n	800e23c <tiny_vsnprintf_like+0x88>
  if (num == 0)
 800e374:	2b00      	cmp	r3, #0
 800e376:	d001      	beq.n	800e37c <tiny_vsnprintf_like+0x1c8>
 800e378:	2200      	movs	r2, #0
 800e37a:	e7de      	b.n	800e33a <tiny_vsnprintf_like+0x186>
    tmp[i++] = '0';
 800e37c:	2130      	movs	r1, #48	; 0x30
 800e37e:	2001      	movs	r0, #1
 800e380:	aa0b      	add	r2, sp, #44	; 0x2c
 800e382:	7011      	strb	r1, [r2, #0]
 800e384:	9303      	str	r3, [sp, #12]
  size -= precision;
 800e386:	9b00      	ldr	r3, [sp, #0]
 800e388:	1a1c      	subs	r4, r3, r0
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800e38a:	9b04      	ldr	r3, [sp, #16]
 800e38c:	2b30      	cmp	r3, #48	; 0x30
 800e38e:	d006      	beq.n	800e39e <tiny_vsnprintf_like+0x1ea>
 800e390:	003b      	movs	r3, r7
 800e392:	2220      	movs	r2, #32
 800e394:	0021      	movs	r1, r4
 800e396:	001f      	movs	r7, r3
 800e398:	3c01      	subs	r4, #1
 800e39a:	2900      	cmp	r1, #0
 800e39c:	dc0c      	bgt.n	800e3b8 <tiny_vsnprintf_like+0x204>
  if (sign) ASSIGN_STR(sign);
 800e39e:	9b03      	ldr	r3, [sp, #12]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d005      	beq.n	800e3b0 <tiny_vsnprintf_like+0x1fc>
 800e3a4:	1c79      	adds	r1, r7, #1
 800e3a6:	3e01      	subs	r6, #1
 800e3a8:	703b      	strb	r3, [r7, #0]
 800e3aa:	000f      	movs	r7, r1
 800e3ac:	2e00      	cmp	r6, #0
 800e3ae:	d009      	beq.n	800e3c4 <tiny_vsnprintf_like+0x210>
 800e3b0:	003b      	movs	r3, r7
 800e3b2:	0032      	movs	r2, r6
 800e3b4:	1ba4      	subs	r4, r4, r6
 800e3b6:	e00f      	b.n	800e3d8 <tiny_vsnprintf_like+0x224>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800e3b8:	3301      	adds	r3, #1
 800e3ba:	3e01      	subs	r6, #1
 800e3bc:	0019      	movs	r1, r3
 800e3be:	703a      	strb	r2, [r7, #0]
 800e3c0:	2e00      	cmp	r6, #0
 800e3c2:	d1e7      	bne.n	800e394 <tiny_vsnprintf_like+0x1e0>
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800e3c4:	000f      	movs	r7, r1
 800e3c6:	9c05      	ldr	r4, [sp, #20]
 800e3c8:	e706      	b.n	800e1d8 <tiny_vsnprintf_like+0x24>
  while (size-- > 0) ASSIGN_STR(c);
 800e3ca:	9e08      	ldr	r6, [sp, #32]
 800e3cc:	3301      	adds	r3, #1
 800e3ce:	3a01      	subs	r2, #1
 800e3d0:	0019      	movs	r1, r3
 800e3d2:	702e      	strb	r6, [r5, #0]
 800e3d4:	2a00      	cmp	r2, #0
 800e3d6:	d0f5      	beq.n	800e3c4 <tiny_vsnprintf_like+0x210>
 800e3d8:	18a1      	adds	r1, r4, r2
 800e3da:	001d      	movs	r5, r3
 800e3dc:	2900      	cmp	r1, #0
 800e3de:	dcf4      	bgt.n	800e3ca <tiny_vsnprintf_like+0x216>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 800e3e0:	ad0b      	add	r5, sp, #44	; 0x2c
 800e3e2:	189a      	adds	r2, r3, r2
 800e3e4:	001c      	movs	r4, r3
 800e3e6:	3801      	subs	r0, #1
 800e3e8:	d201      	bcs.n	800e3ee <tiny_vsnprintf_like+0x23a>
 800e3ea:	0019      	movs	r1, r3
 800e3ec:	e7ea      	b.n	800e3c4 <tiny_vsnprintf_like+0x210>
 800e3ee:	5d46      	ldrb	r6, [r0, r5]
 800e3f0:	3301      	adds	r3, #1
 800e3f2:	0019      	movs	r1, r3
 800e3f4:	7026      	strb	r6, [r4, #0]
 800e3f6:	4293      	cmp	r3, r2
 800e3f8:	d1f4      	bne.n	800e3e4 <tiny_vsnprintf_like+0x230>
 800e3fa:	e7e3      	b.n	800e3c4 <tiny_vsnprintf_like+0x210>
 800e3fc:	0800f19c 	.word	0x0800f19c
 800e400:	0800f1a3 	.word	0x0800f1a3
 800e404:	0800f1c8 	.word	0x0800f1c8

0800e408 <__libc_init_array>:
 800e408:	b570      	push	{r4, r5, r6, lr}
 800e40a:	2600      	movs	r6, #0
 800e40c:	4d0c      	ldr	r5, [pc, #48]	; (800e440 <__libc_init_array+0x38>)
 800e40e:	4c0d      	ldr	r4, [pc, #52]	; (800e444 <__libc_init_array+0x3c>)
 800e410:	1b64      	subs	r4, r4, r5
 800e412:	10a4      	asrs	r4, r4, #2
 800e414:	42a6      	cmp	r6, r4
 800e416:	d109      	bne.n	800e42c <__libc_init_array+0x24>
 800e418:	2600      	movs	r6, #0
 800e41a:	f000 f8b5 	bl	800e588 <_init>
 800e41e:	4d0a      	ldr	r5, [pc, #40]	; (800e448 <__libc_init_array+0x40>)
 800e420:	4c0a      	ldr	r4, [pc, #40]	; (800e44c <__libc_init_array+0x44>)
 800e422:	1b64      	subs	r4, r4, r5
 800e424:	10a4      	asrs	r4, r4, #2
 800e426:	42a6      	cmp	r6, r4
 800e428:	d105      	bne.n	800e436 <__libc_init_array+0x2e>
 800e42a:	bd70      	pop	{r4, r5, r6, pc}
 800e42c:	00b3      	lsls	r3, r6, #2
 800e42e:	58eb      	ldr	r3, [r5, r3]
 800e430:	4798      	blx	r3
 800e432:	3601      	adds	r6, #1
 800e434:	e7ee      	b.n	800e414 <__libc_init_array+0xc>
 800e436:	00b3      	lsls	r3, r6, #2
 800e438:	58eb      	ldr	r3, [r5, r3]
 800e43a:	4798      	blx	r3
 800e43c:	3601      	adds	r6, #1
 800e43e:	e7f2      	b.n	800e426 <__libc_init_array+0x1e>
 800e440:	0800f1f8 	.word	0x0800f1f8
 800e444:	0800f1f8 	.word	0x0800f1f8
 800e448:	0800f1f8 	.word	0x0800f1f8
 800e44c:	0800f1fc 	.word	0x0800f1fc

0800e450 <memcpy>:
 800e450:	2300      	movs	r3, #0
 800e452:	b510      	push	{r4, lr}
 800e454:	429a      	cmp	r2, r3
 800e456:	d100      	bne.n	800e45a <memcpy+0xa>
 800e458:	bd10      	pop	{r4, pc}
 800e45a:	5ccc      	ldrb	r4, [r1, r3]
 800e45c:	54c4      	strb	r4, [r0, r3]
 800e45e:	3301      	adds	r3, #1
 800e460:	e7f8      	b.n	800e454 <memcpy+0x4>

0800e462 <memset>:
 800e462:	0003      	movs	r3, r0
 800e464:	1882      	adds	r2, r0, r2
 800e466:	4293      	cmp	r3, r2
 800e468:	d100      	bne.n	800e46c <memset+0xa>
 800e46a:	4770      	bx	lr
 800e46c:	7019      	strb	r1, [r3, #0]
 800e46e:	3301      	adds	r3, #1
 800e470:	e7f9      	b.n	800e466 <memset+0x4>
	...

0800e474 <floor>:
 800e474:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e476:	004b      	lsls	r3, r1, #1
 800e478:	4a3d      	ldr	r2, [pc, #244]	; (800e570 <floor+0xfc>)
 800e47a:	0d5b      	lsrs	r3, r3, #21
 800e47c:	189f      	adds	r7, r3, r2
 800e47e:	4684      	mov	ip, r0
 800e480:	000e      	movs	r6, r1
 800e482:	000d      	movs	r5, r1
 800e484:	0004      	movs	r4, r0
 800e486:	9001      	str	r0, [sp, #4]
 800e488:	2f13      	cmp	r7, #19
 800e48a:	dc34      	bgt.n	800e4f6 <floor+0x82>
 800e48c:	2f00      	cmp	r7, #0
 800e48e:	da16      	bge.n	800e4be <floor+0x4a>
 800e490:	4a38      	ldr	r2, [pc, #224]	; (800e574 <floor+0x100>)
 800e492:	4b39      	ldr	r3, [pc, #228]	; (800e578 <floor+0x104>)
 800e494:	4660      	mov	r0, ip
 800e496:	0031      	movs	r1, r6
 800e498:	f7f2 fe84 	bl	80011a4 <__aeabi_dadd>
 800e49c:	2200      	movs	r2, #0
 800e49e:	2300      	movs	r3, #0
 800e4a0:	f7f2 f802 	bl	80004a8 <__aeabi_dcmpgt>
 800e4a4:	2800      	cmp	r0, #0
 800e4a6:	d007      	beq.n	800e4b8 <floor+0x44>
 800e4a8:	2e00      	cmp	r6, #0
 800e4aa:	da5d      	bge.n	800e568 <floor+0xf4>
 800e4ac:	0073      	lsls	r3, r6, #1
 800e4ae:	085b      	lsrs	r3, r3, #1
 800e4b0:	431c      	orrs	r4, r3
 800e4b2:	d001      	beq.n	800e4b8 <floor+0x44>
 800e4b4:	2400      	movs	r4, #0
 800e4b6:	4d31      	ldr	r5, [pc, #196]	; (800e57c <floor+0x108>)
 800e4b8:	46a4      	mov	ip, r4
 800e4ba:	002e      	movs	r6, r5
 800e4bc:	e029      	b.n	800e512 <floor+0x9e>
 800e4be:	4b30      	ldr	r3, [pc, #192]	; (800e580 <floor+0x10c>)
 800e4c0:	413b      	asrs	r3, r7
 800e4c2:	9300      	str	r3, [sp, #0]
 800e4c4:	400b      	ands	r3, r1
 800e4c6:	4303      	orrs	r3, r0
 800e4c8:	d023      	beq.n	800e512 <floor+0x9e>
 800e4ca:	4a2a      	ldr	r2, [pc, #168]	; (800e574 <floor+0x100>)
 800e4cc:	4b2a      	ldr	r3, [pc, #168]	; (800e578 <floor+0x104>)
 800e4ce:	4660      	mov	r0, ip
 800e4d0:	0031      	movs	r1, r6
 800e4d2:	f7f2 fe67 	bl	80011a4 <__aeabi_dadd>
 800e4d6:	2200      	movs	r2, #0
 800e4d8:	2300      	movs	r3, #0
 800e4da:	f7f1 ffe5 	bl	80004a8 <__aeabi_dcmpgt>
 800e4de:	2800      	cmp	r0, #0
 800e4e0:	d0ea      	beq.n	800e4b8 <floor+0x44>
 800e4e2:	2e00      	cmp	r6, #0
 800e4e4:	da03      	bge.n	800e4ee <floor+0x7a>
 800e4e6:	2380      	movs	r3, #128	; 0x80
 800e4e8:	035b      	lsls	r3, r3, #13
 800e4ea:	413b      	asrs	r3, r7
 800e4ec:	18f5      	adds	r5, r6, r3
 800e4ee:	9b00      	ldr	r3, [sp, #0]
 800e4f0:	2400      	movs	r4, #0
 800e4f2:	439d      	bics	r5, r3
 800e4f4:	e7e0      	b.n	800e4b8 <floor+0x44>
 800e4f6:	2f33      	cmp	r7, #51	; 0x33
 800e4f8:	dd0f      	ble.n	800e51a <floor+0xa6>
 800e4fa:	2380      	movs	r3, #128	; 0x80
 800e4fc:	00db      	lsls	r3, r3, #3
 800e4fe:	429f      	cmp	r7, r3
 800e500:	d107      	bne.n	800e512 <floor+0x9e>
 800e502:	0002      	movs	r2, r0
 800e504:	000b      	movs	r3, r1
 800e506:	4660      	mov	r0, ip
 800e508:	0031      	movs	r1, r6
 800e50a:	f7f2 fe4b 	bl	80011a4 <__aeabi_dadd>
 800e50e:	4684      	mov	ip, r0
 800e510:	000e      	movs	r6, r1
 800e512:	4660      	mov	r0, ip
 800e514:	0031      	movs	r1, r6
 800e516:	b003      	add	sp, #12
 800e518:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e51a:	4a1a      	ldr	r2, [pc, #104]	; (800e584 <floor+0x110>)
 800e51c:	189b      	adds	r3, r3, r2
 800e51e:	2201      	movs	r2, #1
 800e520:	4252      	negs	r2, r2
 800e522:	40da      	lsrs	r2, r3
 800e524:	9200      	str	r2, [sp, #0]
 800e526:	4210      	tst	r0, r2
 800e528:	d0f3      	beq.n	800e512 <floor+0x9e>
 800e52a:	4a12      	ldr	r2, [pc, #72]	; (800e574 <floor+0x100>)
 800e52c:	4b12      	ldr	r3, [pc, #72]	; (800e578 <floor+0x104>)
 800e52e:	4660      	mov	r0, ip
 800e530:	0031      	movs	r1, r6
 800e532:	f7f2 fe37 	bl	80011a4 <__aeabi_dadd>
 800e536:	2200      	movs	r2, #0
 800e538:	2300      	movs	r3, #0
 800e53a:	f7f1 ffb5 	bl	80004a8 <__aeabi_dcmpgt>
 800e53e:	2800      	cmp	r0, #0
 800e540:	d0ba      	beq.n	800e4b8 <floor+0x44>
 800e542:	2e00      	cmp	r6, #0
 800e544:	da02      	bge.n	800e54c <floor+0xd8>
 800e546:	2f14      	cmp	r7, #20
 800e548:	d103      	bne.n	800e552 <floor+0xde>
 800e54a:	3501      	adds	r5, #1
 800e54c:	9b00      	ldr	r3, [sp, #0]
 800e54e:	439c      	bics	r4, r3
 800e550:	e7b2      	b.n	800e4b8 <floor+0x44>
 800e552:	2334      	movs	r3, #52	; 0x34
 800e554:	1bdf      	subs	r7, r3, r7
 800e556:	3b33      	subs	r3, #51	; 0x33
 800e558:	40bb      	lsls	r3, r7
 800e55a:	18e4      	adds	r4, r4, r3
 800e55c:	9b01      	ldr	r3, [sp, #4]
 800e55e:	429c      	cmp	r4, r3
 800e560:	419b      	sbcs	r3, r3
 800e562:	425b      	negs	r3, r3
 800e564:	18f5      	adds	r5, r6, r3
 800e566:	e7f1      	b.n	800e54c <floor+0xd8>
 800e568:	2400      	movs	r4, #0
 800e56a:	0025      	movs	r5, r4
 800e56c:	e7a4      	b.n	800e4b8 <floor+0x44>
 800e56e:	46c0      	nop			; (mov r8, r8)
 800e570:	fffffc01 	.word	0xfffffc01
 800e574:	8800759c 	.word	0x8800759c
 800e578:	7e37e43c 	.word	0x7e37e43c
 800e57c:	bff00000 	.word	0xbff00000
 800e580:	000fffff 	.word	0x000fffff
 800e584:	fffffbed 	.word	0xfffffbed

0800e588 <_init>:
 800e588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e58a:	46c0      	nop			; (mov r8, r8)
 800e58c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e58e:	bc08      	pop	{r3}
 800e590:	469e      	mov	lr, r3
 800e592:	4770      	bx	lr

0800e594 <_fini>:
 800e594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e596:	46c0      	nop			; (mov r8, r8)
 800e598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e59a:	bc08      	pop	{r3}
 800e59c:	469e      	mov	lr, r3
 800e59e:	4770      	bx	lr
