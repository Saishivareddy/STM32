
oled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000247c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000db0  080025b8  080025b8  000125b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003368  08003368  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08003368  08003368  00013368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003370  08003370  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003370  08003370  00013370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003374  08003374  00013374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08003378  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000047c  2000001c  08003394  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000498  08003394  00020498  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007269  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001606  00000000  00000000  000272ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000780  00000000  00000000  000288b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006e8  00000000  00000000  00029038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000189af  00000000  00000000  00029720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009479  00000000  00000000  000420cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000849b5  00000000  00000000  0004b548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cfefd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e18  00000000  00000000  000cff50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000001c 	.word	0x2000001c
 8000158:	00000000 	.word	0x00000000
 800015c:	080025a0 	.word	0x080025a0

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000020 	.word	0x20000020
 8000178:	080025a0 	.word	0x080025a0

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b976 	b.w	8000480 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	4688      	mov	r8, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14d      	bne.n	8000258 <__udivmoddi4+0xac>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d968      	bls.n	8000294 <__udivmoddi4+0xe8>
 80001c2:	fab2 f282 	clz	r2, r2
 80001c6:	b152      	cbz	r2, 80001de <__udivmoddi4+0x32>
 80001c8:	fa01 f302 	lsl.w	r3, r1, r2
 80001cc:	f1c2 0120 	rsb	r1, r2, #32
 80001d0:	fa20 f101 	lsr.w	r1, r0, r1
 80001d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d8:	ea41 0803 	orr.w	r8, r1, r3
 80001dc:	4094      	lsls	r4, r2
 80001de:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001e2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001e6:	fa1f fe8c 	uxth.w	lr, ip
 80001ea:	fb01 8817 	mls	r8, r1, r7, r8
 80001ee:	fb07 f00e 	mul.w	r0, r7, lr
 80001f2:	0c23      	lsrs	r3, r4, #16
 80001f4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001f8:	4298      	cmp	r0, r3
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0303 	adds.w	r3, ip, r3
 8000200:	f107 35ff 	add.w	r5, r7, #4294967295
 8000204:	f080 811e 	bcs.w	8000444 <__udivmoddi4+0x298>
 8000208:	4298      	cmp	r0, r3
 800020a:	f240 811b 	bls.w	8000444 <__udivmoddi4+0x298>
 800020e:	3f02      	subs	r7, #2
 8000210:	4463      	add	r3, ip
 8000212:	1a1b      	subs	r3, r3, r0
 8000214:	fbb3 f0f1 	udiv	r0, r3, r1
 8000218:	fb01 3310 	mls	r3, r1, r0, r3
 800021c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000226:	45a6      	cmp	lr, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000232:	f080 8109 	bcs.w	8000448 <__udivmoddi4+0x29c>
 8000236:	45a6      	cmp	lr, r4
 8000238:	f240 8106 	bls.w	8000448 <__udivmoddi4+0x29c>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	2100      	movs	r1, #0
 8000242:	eba4 040e 	sub.w	r4, r4, lr
 8000246:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800024a:	b11e      	cbz	r6, 8000254 <__udivmoddi4+0xa8>
 800024c:	2300      	movs	r3, #0
 800024e:	40d4      	lsrs	r4, r2
 8000250:	e9c6 4300 	strd	r4, r3, [r6]
 8000254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000258:	428b      	cmp	r3, r1
 800025a:	d908      	bls.n	800026e <__udivmoddi4+0xc2>
 800025c:	2e00      	cmp	r6, #0
 800025e:	f000 80ee 	beq.w	800043e <__udivmoddi4+0x292>
 8000262:	2100      	movs	r1, #0
 8000264:	e9c6 0500 	strd	r0, r5, [r6]
 8000268:	4608      	mov	r0, r1
 800026a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026e:	fab3 f183 	clz	r1, r3
 8000272:	2900      	cmp	r1, #0
 8000274:	d14a      	bne.n	800030c <__udivmoddi4+0x160>
 8000276:	42ab      	cmp	r3, r5
 8000278:	d302      	bcc.n	8000280 <__udivmoddi4+0xd4>
 800027a:	4282      	cmp	r2, r0
 800027c:	f200 80fc 	bhi.w	8000478 <__udivmoddi4+0x2cc>
 8000280:	1a84      	subs	r4, r0, r2
 8000282:	eb65 0303 	sbc.w	r3, r5, r3
 8000286:	2001      	movs	r0, #1
 8000288:	4698      	mov	r8, r3
 800028a:	2e00      	cmp	r6, #0
 800028c:	d0e2      	beq.n	8000254 <__udivmoddi4+0xa8>
 800028e:	e9c6 4800 	strd	r4, r8, [r6]
 8000292:	e7df      	b.n	8000254 <__udivmoddi4+0xa8>
 8000294:	b902      	cbnz	r2, 8000298 <__udivmoddi4+0xec>
 8000296:	deff      	udf	#255	; 0xff
 8000298:	fab2 f282 	clz	r2, r2
 800029c:	2a00      	cmp	r2, #0
 800029e:	f040 8091 	bne.w	80003c4 <__udivmoddi4+0x218>
 80002a2:	eba1 000c 	sub.w	r0, r1, ip
 80002a6:	2101      	movs	r1, #1
 80002a8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ac:	fa1f fe8c 	uxth.w	lr, ip
 80002b0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002b4:	fb07 0013 	mls	r0, r7, r3, r0
 80002b8:	0c25      	lsrs	r5, r4, #16
 80002ba:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002be:	fb0e f003 	mul.w	r0, lr, r3
 80002c2:	42a8      	cmp	r0, r5
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0x12c>
 80002c6:	eb1c 0505 	adds.w	r5, ip, r5
 80002ca:	f103 38ff 	add.w	r8, r3, #4294967295
 80002ce:	d202      	bcs.n	80002d6 <__udivmoddi4+0x12a>
 80002d0:	42a8      	cmp	r0, r5
 80002d2:	f200 80ce 	bhi.w	8000472 <__udivmoddi4+0x2c6>
 80002d6:	4643      	mov	r3, r8
 80002d8:	1a2d      	subs	r5, r5, r0
 80002da:	fbb5 f0f7 	udiv	r0, r5, r7
 80002de:	fb07 5510 	mls	r5, r7, r0, r5
 80002e2:	fb0e fe00 	mul.w	lr, lr, r0
 80002e6:	b2a4      	uxth	r4, r4
 80002e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d908      	bls.n	8000302 <__udivmoddi4+0x156>
 80002f0:	eb1c 0404 	adds.w	r4, ip, r4
 80002f4:	f100 35ff 	add.w	r5, r0, #4294967295
 80002f8:	d202      	bcs.n	8000300 <__udivmoddi4+0x154>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f200 80b6 	bhi.w	800046c <__udivmoddi4+0x2c0>
 8000300:	4628      	mov	r0, r5
 8000302:	eba4 040e 	sub.w	r4, r4, lr
 8000306:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800030a:	e79e      	b.n	800024a <__udivmoddi4+0x9e>
 800030c:	f1c1 0720 	rsb	r7, r1, #32
 8000310:	408b      	lsls	r3, r1
 8000312:	fa22 fc07 	lsr.w	ip, r2, r7
 8000316:	ea4c 0c03 	orr.w	ip, ip, r3
 800031a:	fa25 fa07 	lsr.w	sl, r5, r7
 800031e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000322:	fbba f8f9 	udiv	r8, sl, r9
 8000326:	fa20 f307 	lsr.w	r3, r0, r7
 800032a:	fb09 aa18 	mls	sl, r9, r8, sl
 800032e:	408d      	lsls	r5, r1
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	431d      	orrs	r5, r3
 8000336:	fa00 f301 	lsl.w	r3, r0, r1
 800033a:	fb08 f00e 	mul.w	r0, r8, lr
 800033e:	0c2c      	lsrs	r4, r5, #16
 8000340:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000344:	42a0      	cmp	r0, r4
 8000346:	fa02 f201 	lsl.w	r2, r2, r1
 800034a:	d90b      	bls.n	8000364 <__udivmoddi4+0x1b8>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f108 3aff 	add.w	sl, r8, #4294967295
 8000354:	f080 8088 	bcs.w	8000468 <__udivmoddi4+0x2bc>
 8000358:	42a0      	cmp	r0, r4
 800035a:	f240 8085 	bls.w	8000468 <__udivmoddi4+0x2bc>
 800035e:	f1a8 0802 	sub.w	r8, r8, #2
 8000362:	4464      	add	r4, ip
 8000364:	1a24      	subs	r4, r4, r0
 8000366:	fbb4 f0f9 	udiv	r0, r4, r9
 800036a:	fb09 4410 	mls	r4, r9, r0, r4
 800036e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000372:	b2ad      	uxth	r5, r5
 8000374:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x1e2>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 35ff 	add.w	r5, r0, #4294967295
 8000384:	d26c      	bcs.n	8000460 <__udivmoddi4+0x2b4>
 8000386:	45a6      	cmp	lr, r4
 8000388:	d96a      	bls.n	8000460 <__udivmoddi4+0x2b4>
 800038a:	3802      	subs	r0, #2
 800038c:	4464      	add	r4, ip
 800038e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000392:	fba0 9502 	umull	r9, r5, r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	42ac      	cmp	r4, r5
 800039c:	46c8      	mov	r8, r9
 800039e:	46ae      	mov	lr, r5
 80003a0:	d356      	bcc.n	8000450 <__udivmoddi4+0x2a4>
 80003a2:	d053      	beq.n	800044c <__udivmoddi4+0x2a0>
 80003a4:	2e00      	cmp	r6, #0
 80003a6:	d069      	beq.n	800047c <__udivmoddi4+0x2d0>
 80003a8:	ebb3 0208 	subs.w	r2, r3, r8
 80003ac:	eb64 040e 	sbc.w	r4, r4, lr
 80003b0:	fa22 f301 	lsr.w	r3, r2, r1
 80003b4:	fa04 f707 	lsl.w	r7, r4, r7
 80003b8:	431f      	orrs	r7, r3
 80003ba:	40cc      	lsrs	r4, r1
 80003bc:	e9c6 7400 	strd	r7, r4, [r6]
 80003c0:	2100      	movs	r1, #0
 80003c2:	e747      	b.n	8000254 <__udivmoddi4+0xa8>
 80003c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003c8:	f1c2 0120 	rsb	r1, r2, #32
 80003cc:	fa25 f301 	lsr.w	r3, r5, r1
 80003d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d4:	fa20 f101 	lsr.w	r1, r0, r1
 80003d8:	4095      	lsls	r5, r2
 80003da:	430d      	orrs	r5, r1
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3311 	mls	r3, r7, r1, r3
 80003e4:	fa1f fe8c 	uxth.w	lr, ip
 80003e8:	0c28      	lsrs	r0, r5, #16
 80003ea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ee:	fb01 f30e 	mul.w	r3, r1, lr
 80003f2:	4283      	cmp	r3, r0
 80003f4:	fa04 f402 	lsl.w	r4, r4, r2
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x260>
 80003fa:	eb1c 0000 	adds.w	r0, ip, r0
 80003fe:	f101 38ff 	add.w	r8, r1, #4294967295
 8000402:	d22f      	bcs.n	8000464 <__udivmoddi4+0x2b8>
 8000404:	4283      	cmp	r3, r0
 8000406:	d92d      	bls.n	8000464 <__udivmoddi4+0x2b8>
 8000408:	3902      	subs	r1, #2
 800040a:	4460      	add	r0, ip
 800040c:	1ac0      	subs	r0, r0, r3
 800040e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000412:	fb07 0013 	mls	r0, r7, r3, r0
 8000416:	b2ad      	uxth	r5, r5
 8000418:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800041c:	fb03 f00e 	mul.w	r0, r3, lr
 8000420:	42a8      	cmp	r0, r5
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x28a>
 8000424:	eb1c 0505 	adds.w	r5, ip, r5
 8000428:	f103 38ff 	add.w	r8, r3, #4294967295
 800042c:	d216      	bcs.n	800045c <__udivmoddi4+0x2b0>
 800042e:	42a8      	cmp	r0, r5
 8000430:	d914      	bls.n	800045c <__udivmoddi4+0x2b0>
 8000432:	3b02      	subs	r3, #2
 8000434:	4465      	add	r5, ip
 8000436:	1a28      	subs	r0, r5, r0
 8000438:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043c:	e738      	b.n	80002b0 <__udivmoddi4+0x104>
 800043e:	4631      	mov	r1, r6
 8000440:	4630      	mov	r0, r6
 8000442:	e707      	b.n	8000254 <__udivmoddi4+0xa8>
 8000444:	462f      	mov	r7, r5
 8000446:	e6e4      	b.n	8000212 <__udivmoddi4+0x66>
 8000448:	4618      	mov	r0, r3
 800044a:	e6f9      	b.n	8000240 <__udivmoddi4+0x94>
 800044c:	454b      	cmp	r3, r9
 800044e:	d2a9      	bcs.n	80003a4 <__udivmoddi4+0x1f8>
 8000450:	ebb9 0802 	subs.w	r8, r9, r2
 8000454:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000458:	3801      	subs	r0, #1
 800045a:	e7a3      	b.n	80003a4 <__udivmoddi4+0x1f8>
 800045c:	4643      	mov	r3, r8
 800045e:	e7ea      	b.n	8000436 <__udivmoddi4+0x28a>
 8000460:	4628      	mov	r0, r5
 8000462:	e794      	b.n	800038e <__udivmoddi4+0x1e2>
 8000464:	4641      	mov	r1, r8
 8000466:	e7d1      	b.n	800040c <__udivmoddi4+0x260>
 8000468:	46d0      	mov	r8, sl
 800046a:	e77b      	b.n	8000364 <__udivmoddi4+0x1b8>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	e747      	b.n	8000302 <__udivmoddi4+0x156>
 8000472:	3b02      	subs	r3, #2
 8000474:	4465      	add	r5, ip
 8000476:	e72f      	b.n	80002d8 <__udivmoddi4+0x12c>
 8000478:	4608      	mov	r0, r1
 800047a:	e706      	b.n	800028a <__udivmoddi4+0xde>
 800047c:	4631      	mov	r1, r6
 800047e:	e6e9      	b.n	8000254 <__udivmoddi4+0xa8>

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <ssd1306_WriteCommand>:
void ssd1306_Reset(void) {
	/* for I2C - do nothing */
}

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000484:	b580      	push	{r7, lr}
 8000486:	b086      	sub	sp, #24
 8000488:	af04      	add	r7, sp, #16
 800048a:	4603      	mov	r3, r0
 800048c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1,
 800048e:	f04f 33ff 	mov.w	r3, #4294967295
 8000492:	9302      	str	r3, [sp, #8]
 8000494:	2301      	movs	r3, #1
 8000496:	9301      	str	r3, [sp, #4]
 8000498:	1dfb      	adds	r3, r7, #7
 800049a:	9300      	str	r3, [sp, #0]
 800049c:	2301      	movs	r3, #1
 800049e:	2200      	movs	r2, #0
 80004a0:	2178      	movs	r1, #120	; 0x78
 80004a2:	4803      	ldr	r0, [pc, #12]	; (80004b0 <ssd1306_WriteCommand+0x2c>)
 80004a4:	f000 ff9a 	bl	80013dc <HAL_I2C_Mem_Write>
			HAL_MAX_DELAY);
}
 80004a8:	bf00      	nop
 80004aa:	3708      	adds	r7, #8
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	20000440 	.word	0x20000440

080004b4 <ssd1306_WriteData>:
//void ssd1306_writecommand(uint8_t *buff, uint8_t command)
//{
//	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR , 0x80, buff, command, HAL_MAX_DELAY);
//}
// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b086      	sub	sp, #24
 80004b8:	af04      	add	r7, sp, #16
 80004ba:	6078      	str	r0, [r7, #4]
 80004bc:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer,
 80004be:	683b      	ldr	r3, [r7, #0]
 80004c0:	b29b      	uxth	r3, r3
 80004c2:	f04f 32ff 	mov.w	r2, #4294967295
 80004c6:	9202      	str	r2, [sp, #8]
 80004c8:	9301      	str	r3, [sp, #4]
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	9300      	str	r3, [sp, #0]
 80004ce:	2301      	movs	r3, #1
 80004d0:	2240      	movs	r2, #64	; 0x40
 80004d2:	2178      	movs	r1, #120	; 0x78
 80004d4:	4803      	ldr	r0, [pc, #12]	; (80004e4 <ssd1306_WriteData+0x30>)
 80004d6:	f000 ff81 	bl	80013dc <HAL_I2C_Mem_Write>
			buff_size, HAL_MAX_DELAY);
}
 80004da:	bf00      	nop
 80004dc:	3708      	adds	r7, #8
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	20000440 	.word	0x20000440

080004e8 <ssd1306_Fill>:

	SSD1306.Initialized = 1;
}

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 80004e8:	b480      	push	{r7}
 80004ea:	b085      	sub	sp, #20
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	4603      	mov	r3, r0
 80004f0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	uint32_t i;
//	send_uart("Enter Fill \n\r");
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80004f2:	2300      	movs	r3, #0
 80004f4:	60fb      	str	r3, [r7, #12]
 80004f6:	e00d      	b.n	8000514 <ssd1306_Fill+0x2c>
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80004f8:	79fb      	ldrb	r3, [r7, #7]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d101      	bne.n	8000502 <ssd1306_Fill+0x1a>
 80004fe:	2100      	movs	r1, #0
 8000500:	e000      	b.n	8000504 <ssd1306_Fill+0x1c>
 8000502:	21ff      	movs	r1, #255	; 0xff
 8000504:	4a08      	ldr	r2, [pc, #32]	; (8000528 <ssd1306_Fill+0x40>)
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	4413      	add	r3, r2
 800050a:	460a      	mov	r2, r1
 800050c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	3301      	adds	r3, #1
 8000512:	60fb      	str	r3, [r7, #12]
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800051a:	d3ed      	bcc.n	80004f8 <ssd1306_Fill+0x10>
	}
//	send_uart("End Fill \n\r");
}
 800051c:	bf00      	nop
 800051e:	bf00      	nop
 8000520:	3714      	adds	r7, #20
 8000522:	46bd      	mov	sp, r7
 8000524:	bc80      	pop	{r7}
 8000526:	4770      	bx	lr
 8000528:	20000038 	.word	0x20000038

0800052c <ssd1306_UpdateScreen>:

// Write the screen buffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
	// depends on the screen height:
	//
	//  * 32px   ==  4 pages
	//  * 64px   ==  8 pages
	//  * 128px  ==  16 pages
	for (uint8_t i = 0; i < SSD1306_HEIGHT / 8; i++) {
 8000532:	2300      	movs	r3, #0
 8000534:	71fb      	strb	r3, [r7, #7]
 8000536:	e016      	b.n	8000566 <ssd1306_UpdateScreen+0x3a>
		ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000538:	79fb      	ldrb	r3, [r7, #7]
 800053a:	3b50      	subs	r3, #80	; 0x50
 800053c:	b2db      	uxtb	r3, r3
 800053e:	4618      	mov	r0, r3
 8000540:	f7ff ffa0 	bl	8000484 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 8000544:	2000      	movs	r0, #0
 8000546:	f7ff ff9d 	bl	8000484 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 800054a:	2010      	movs	r0, #16
 800054c:	f7ff ff9a 	bl	8000484 <ssd1306_WriteCommand>
		ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH);
 8000550:	79fb      	ldrb	r3, [r7, #7]
 8000552:	01db      	lsls	r3, r3, #7
 8000554:	4a08      	ldr	r2, [pc, #32]	; (8000578 <ssd1306_UpdateScreen+0x4c>)
 8000556:	4413      	add	r3, r2
 8000558:	2180      	movs	r1, #128	; 0x80
 800055a:	4618      	mov	r0, r3
 800055c:	f7ff ffaa 	bl	80004b4 <ssd1306_WriteData>
	for (uint8_t i = 0; i < SSD1306_HEIGHT / 8; i++) {
 8000560:	79fb      	ldrb	r3, [r7, #7]
 8000562:	3301      	adds	r3, #1
 8000564:	71fb      	strb	r3, [r7, #7]
 8000566:	79fb      	ldrb	r3, [r7, #7]
 8000568:	2b07      	cmp	r3, #7
 800056a:	d9e5      	bls.n	8000538 <ssd1306_UpdateScreen+0xc>
	}
//	send_uart("End update \n\r");
}
 800056c:	bf00      	nop
 800056e:	bf00      	nop
 8000570:	3708      	adds	r7, #8
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	20000038 	.word	0x20000038

0800057c <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	71fb      	strb	r3, [r7, #7]
 8000586:	460b      	mov	r3, r1
 8000588:	71bb      	strb	r3, [r7, #6]
 800058a:	4613      	mov	r3, r2
 800058c:	717b      	strb	r3, [r7, #5]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800058e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000592:	2b00      	cmp	r3, #0
 8000594:	db48      	blt.n	8000628 <ssd1306_DrawPixel+0xac>
 8000596:	79bb      	ldrb	r3, [r7, #6]
 8000598:	2b3f      	cmp	r3, #63	; 0x3f
 800059a:	d845      	bhi.n	8000628 <ssd1306_DrawPixel+0xac>
		// Don't write outside the buffer
		return;
	}

	// Check if pixel should be inverted
	if (SSD1306.Inverted) {
 800059c:	4b25      	ldr	r3, [pc, #148]	; (8000634 <ssd1306_DrawPixel+0xb8>)
 800059e:	791b      	ldrb	r3, [r3, #4]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d006      	beq.n	80005b2 <ssd1306_DrawPixel+0x36>
		color = (SSD1306_COLOR) !color;
 80005a4:	797b      	ldrb	r3, [r7, #5]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	bf0c      	ite	eq
 80005aa:	2301      	moveq	r3, #1
 80005ac:	2300      	movne	r3, #0
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	717b      	strb	r3, [r7, #5]
	}

	// Draw in the right color
	if (color == White) {
 80005b2:	797b      	ldrb	r3, [r7, #5]
 80005b4:	2b01      	cmp	r3, #1
 80005b6:	d11a      	bne.n	80005ee <ssd1306_DrawPixel+0x72>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80005b8:	79fa      	ldrb	r2, [r7, #7]
 80005ba:	79bb      	ldrb	r3, [r7, #6]
 80005bc:	08db      	lsrs	r3, r3, #3
 80005be:	b2d8      	uxtb	r0, r3
 80005c0:	4603      	mov	r3, r0
 80005c2:	01db      	lsls	r3, r3, #7
 80005c4:	4413      	add	r3, r2
 80005c6:	4a1c      	ldr	r2, [pc, #112]	; (8000638 <ssd1306_DrawPixel+0xbc>)
 80005c8:	5cd3      	ldrb	r3, [r2, r3]
 80005ca:	b25a      	sxtb	r2, r3
 80005cc:	79bb      	ldrb	r3, [r7, #6]
 80005ce:	f003 0307 	and.w	r3, r3, #7
 80005d2:	2101      	movs	r1, #1
 80005d4:	fa01 f303 	lsl.w	r3, r1, r3
 80005d8:	b25b      	sxtb	r3, r3
 80005da:	4313      	orrs	r3, r2
 80005dc:	b259      	sxtb	r1, r3
 80005de:	79fa      	ldrb	r2, [r7, #7]
 80005e0:	4603      	mov	r3, r0
 80005e2:	01db      	lsls	r3, r3, #7
 80005e4:	4413      	add	r3, r2
 80005e6:	b2c9      	uxtb	r1, r1
 80005e8:	4a13      	ldr	r2, [pc, #76]	; (8000638 <ssd1306_DrawPixel+0xbc>)
 80005ea:	54d1      	strb	r1, [r2, r3]
 80005ec:	e01d      	b.n	800062a <ssd1306_DrawPixel+0xae>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80005ee:	79fa      	ldrb	r2, [r7, #7]
 80005f0:	79bb      	ldrb	r3, [r7, #6]
 80005f2:	08db      	lsrs	r3, r3, #3
 80005f4:	b2d8      	uxtb	r0, r3
 80005f6:	4603      	mov	r3, r0
 80005f8:	01db      	lsls	r3, r3, #7
 80005fa:	4413      	add	r3, r2
 80005fc:	4a0e      	ldr	r2, [pc, #56]	; (8000638 <ssd1306_DrawPixel+0xbc>)
 80005fe:	5cd3      	ldrb	r3, [r2, r3]
 8000600:	b25a      	sxtb	r2, r3
 8000602:	79bb      	ldrb	r3, [r7, #6]
 8000604:	f003 0307 	and.w	r3, r3, #7
 8000608:	2101      	movs	r1, #1
 800060a:	fa01 f303 	lsl.w	r3, r1, r3
 800060e:	b25b      	sxtb	r3, r3
 8000610:	43db      	mvns	r3, r3
 8000612:	b25b      	sxtb	r3, r3
 8000614:	4013      	ands	r3, r2
 8000616:	b259      	sxtb	r1, r3
 8000618:	79fa      	ldrb	r2, [r7, #7]
 800061a:	4603      	mov	r3, r0
 800061c:	01db      	lsls	r3, r3, #7
 800061e:	4413      	add	r3, r2
 8000620:	b2c9      	uxtb	r1, r1
 8000622:	4a05      	ldr	r2, [pc, #20]	; (8000638 <ssd1306_DrawPixel+0xbc>)
 8000624:	54d1      	strb	r1, [r2, r3]
 8000626:	e000      	b.n	800062a <ssd1306_DrawPixel+0xae>
		return;
 8000628:	bf00      	nop
	}
}
 800062a:	370c      	adds	r7, #12
 800062c:	46bd      	mov	sp, r7
 800062e:	bc80      	pop	{r7}
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	20000438 	.word	0x20000438
 8000638:	20000038 	.word	0x20000038

0800063c <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800063c:	b590      	push	{r4, r7, lr}
 800063e:	b089      	sub	sp, #36	; 0x24
 8000640:	af00      	add	r7, sp, #0
 8000642:	4604      	mov	r4, r0
 8000644:	1d38      	adds	r0, r7, #4
 8000646:	e880 0006 	stmia.w	r0, {r1, r2}
 800064a:	461a      	mov	r2, r3
 800064c:	4623      	mov	r3, r4
 800064e:	73fb      	strb	r3, [r7, #15]
 8000650:	4613      	mov	r3, r2
 8000652:	73bb      	strb	r3, [r7, #14]
	uint32_t i, b, j;

	// Check if character is valid
	if (ch < 32 || ch > 126)
 8000654:	7bfb      	ldrb	r3, [r7, #15]
 8000656:	2b1f      	cmp	r3, #31
 8000658:	d902      	bls.n	8000660 <ssd1306_WriteChar+0x24>
 800065a:	7bfb      	ldrb	r3, [r7, #15]
 800065c:	2b7e      	cmp	r3, #126	; 0x7e
 800065e:	d901      	bls.n	8000664 <ssd1306_WriteChar+0x28>
		return 0;
 8000660:	2300      	movs	r3, #0
 8000662:	e06d      	b.n	8000740 <ssd1306_WriteChar+0x104>

	// Check remaining space on current line
	if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000664:	4b38      	ldr	r3, [pc, #224]	; (8000748 <ssd1306_WriteChar+0x10c>)
 8000666:	881b      	ldrh	r3, [r3, #0]
 8000668:	461a      	mov	r2, r3
 800066a:	793b      	ldrb	r3, [r7, #4]
 800066c:	4413      	add	r3, r2
 800066e:	2b80      	cmp	r3, #128	; 0x80
 8000670:	dc06      	bgt.n	8000680 <ssd1306_WriteChar+0x44>
	SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight)) {
 8000672:	4b35      	ldr	r3, [pc, #212]	; (8000748 <ssd1306_WriteChar+0x10c>)
 8000674:	885b      	ldrh	r3, [r3, #2]
 8000676:	461a      	mov	r2, r3
 8000678:	797b      	ldrb	r3, [r7, #5]
 800067a:	4413      	add	r3, r2
	if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800067c:	2b40      	cmp	r3, #64	; 0x40
 800067e:	dd01      	ble.n	8000684 <ssd1306_WriteChar+0x48>
		// Not enough space on current line
		return 0;
 8000680:	2300      	movs	r3, #0
 8000682:	e05d      	b.n	8000740 <ssd1306_WriteChar+0x104>
	}

	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++) {
 8000684:	2300      	movs	r3, #0
 8000686:	61fb      	str	r3, [r7, #28]
 8000688:	e04c      	b.n	8000724 <ssd1306_WriteChar+0xe8>
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 800068a:	68ba      	ldr	r2, [r7, #8]
 800068c:	7bfb      	ldrb	r3, [r7, #15]
 800068e:	3b20      	subs	r3, #32
 8000690:	7979      	ldrb	r1, [r7, #5]
 8000692:	fb01 f303 	mul.w	r3, r1, r3
 8000696:	4619      	mov	r1, r3
 8000698:	69fb      	ldr	r3, [r7, #28]
 800069a:	440b      	add	r3, r1
 800069c:	005b      	lsls	r3, r3, #1
 800069e:	4413      	add	r3, r2
 80006a0:	881b      	ldrh	r3, [r3, #0]
 80006a2:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++) {
 80006a4:	2300      	movs	r3, #0
 80006a6:	61bb      	str	r3, [r7, #24]
 80006a8:	e034      	b.n	8000714 <ssd1306_WriteChar+0xd8>
			if ((b << j) & 0x8000) {
 80006aa:	697a      	ldr	r2, [r7, #20]
 80006ac:	69bb      	ldr	r3, [r7, #24]
 80006ae:	fa02 f303 	lsl.w	r3, r2, r3
 80006b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d012      	beq.n	80006e0 <ssd1306_WriteChar+0xa4>
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i),
 80006ba:	4b23      	ldr	r3, [pc, #140]	; (8000748 <ssd1306_WriteChar+0x10c>)
 80006bc:	881b      	ldrh	r3, [r3, #0]
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	69bb      	ldr	r3, [r7, #24]
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	4413      	add	r3, r2
 80006c6:	b2d8      	uxtb	r0, r3
 80006c8:	4b1f      	ldr	r3, [pc, #124]	; (8000748 <ssd1306_WriteChar+0x10c>)
 80006ca:	885b      	ldrh	r3, [r3, #2]
 80006cc:	b2da      	uxtb	r2, r3
 80006ce:	69fb      	ldr	r3, [r7, #28]
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	4413      	add	r3, r2
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	7bba      	ldrb	r2, [r7, #14]
 80006d8:	4619      	mov	r1, r3
 80006da:	f7ff ff4f 	bl	800057c <ssd1306_DrawPixel>
 80006de:	e016      	b.n	800070e <ssd1306_WriteChar+0xd2>
						(SSD1306_COLOR) color);
			} else {
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i),
 80006e0:	4b19      	ldr	r3, [pc, #100]	; (8000748 <ssd1306_WriteChar+0x10c>)
 80006e2:	881b      	ldrh	r3, [r3, #0]
 80006e4:	b2da      	uxtb	r2, r3
 80006e6:	69bb      	ldr	r3, [r7, #24]
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	4413      	add	r3, r2
 80006ec:	b2d8      	uxtb	r0, r3
 80006ee:	4b16      	ldr	r3, [pc, #88]	; (8000748 <ssd1306_WriteChar+0x10c>)
 80006f0:	885b      	ldrh	r3, [r3, #2]
 80006f2:	b2da      	uxtb	r2, r3
 80006f4:	69fb      	ldr	r3, [r7, #28]
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	4413      	add	r3, r2
 80006fa:	b2d9      	uxtb	r1, r3
 80006fc:	7bbb      	ldrb	r3, [r7, #14]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	bf0c      	ite	eq
 8000702:	2301      	moveq	r3, #1
 8000704:	2300      	movne	r3, #0
 8000706:	b2db      	uxtb	r3, r3
 8000708:	461a      	mov	r2, r3
 800070a:	f7ff ff37 	bl	800057c <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++) {
 800070e:	69bb      	ldr	r3, [r7, #24]
 8000710:	3301      	adds	r3, #1
 8000712:	61bb      	str	r3, [r7, #24]
 8000714:	793b      	ldrb	r3, [r7, #4]
 8000716:	461a      	mov	r2, r3
 8000718:	69bb      	ldr	r3, [r7, #24]
 800071a:	4293      	cmp	r3, r2
 800071c:	d3c5      	bcc.n	80006aa <ssd1306_WriteChar+0x6e>
	for (i = 0; i < Font.FontHeight; i++) {
 800071e:	69fb      	ldr	r3, [r7, #28]
 8000720:	3301      	adds	r3, #1
 8000722:	61fb      	str	r3, [r7, #28]
 8000724:	797b      	ldrb	r3, [r7, #5]
 8000726:	461a      	mov	r2, r3
 8000728:	69fb      	ldr	r3, [r7, #28]
 800072a:	4293      	cmp	r3, r2
 800072c:	d3ad      	bcc.n	800068a <ssd1306_WriteChar+0x4e>
			}
		}
	}

	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 800072e:	4b06      	ldr	r3, [pc, #24]	; (8000748 <ssd1306_WriteChar+0x10c>)
 8000730:	881a      	ldrh	r2, [r3, #0]
 8000732:	793b      	ldrb	r3, [r7, #4]
 8000734:	b29b      	uxth	r3, r3
 8000736:	4413      	add	r3, r2
 8000738:	b29a      	uxth	r2, r3
 800073a:	4b03      	ldr	r3, [pc, #12]	; (8000748 <ssd1306_WriteChar+0x10c>)
 800073c:	801a      	strh	r2, [r3, #0]

	// Return written char for validation
	return ch;
 800073e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000740:	4618      	mov	r0, r3
 8000742:	3724      	adds	r7, #36	; 0x24
 8000744:	46bd      	mov	sp, r7
 8000746:	bd90      	pop	{r4, r7, pc}
 8000748:	20000438 	.word	0x20000438

0800074c <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	60f8      	str	r0, [r7, #12]
 8000754:	1d38      	adds	r0, r7, #4
 8000756:	e880 0006 	stmia.w	r0, {r1, r2}
 800075a:	70fb      	strb	r3, [r7, #3]
	// Write until null-byte
//	send_uart("Enter Writestring \n\r");
	while (*str) {
 800075c:	e012      	b.n	8000784 <ssd1306_WriteString+0x38>
		if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	7818      	ldrb	r0, [r3, #0]
 8000762:	78fb      	ldrb	r3, [r7, #3]
 8000764:	1d3a      	adds	r2, r7, #4
 8000766:	ca06      	ldmia	r2, {r1, r2}
 8000768:	f7ff ff68 	bl	800063c <ssd1306_WriteChar>
 800076c:	4603      	mov	r3, r0
 800076e:	461a      	mov	r2, r3
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	429a      	cmp	r2, r3
 8000776:	d002      	beq.n	800077e <ssd1306_WriteString+0x32>
			// Char could not be written
			return *str;
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	e008      	b.n	8000790 <ssd1306_WriteString+0x44>
		}

		// Next char
		str++;
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	3301      	adds	r3, #1
 8000782:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d1e8      	bne.n	800075e <ssd1306_WriteString+0x12>
	}
//	send_uart("End Writestring \n\r");
	// Everything ok
	return *str;
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	781b      	ldrb	r3, [r3, #0]
}
 8000790:	4618      	mov	r0, r3
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	460a      	mov	r2, r1
 80007a2:	71fb      	strb	r3, [r7, #7]
 80007a4:	4613      	mov	r3, r2
 80007a6:	71bb      	strb	r3, [r7, #6]
//	send_uart("Enter Cursor \n\r");
	SSD1306.CurrentX = x;
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	b29a      	uxth	r2, r3
 80007ac:	4b05      	ldr	r3, [pc, #20]	; (80007c4 <ssd1306_SetCursor+0x2c>)
 80007ae:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 80007b0:	79bb      	ldrb	r3, [r7, #6]
 80007b2:	b29a      	uxth	r2, r3
 80007b4:	4b03      	ldr	r3, [pc, #12]	; (80007c4 <ssd1306_SetCursor+0x2c>)
 80007b6:	805a      	strh	r2, [r3, #2]
//	send_uart("End Cursor \n\r");
}
 80007b8:	bf00      	nop
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	bc80      	pop	{r7}
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	20000438 	.word	0x20000438

080007c8 <ssd1306_SetDisplayOn>:
	const uint8_t kSetContrastControlRegister = 0x81;
	ssd1306_WriteCommand(kSetContrastControlRegister);
	ssd1306_WriteCommand(value);
}

void ssd1306_SetDisplayOn(const uint8_t on) {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	71fb      	strb	r3, [r7, #7]
	uint8_t value;
	if (on) {
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d005      	beq.n	80007e4 <ssd1306_SetDisplayOn+0x1c>
		value = 0xAF;   // Display on
 80007d8:	23af      	movs	r3, #175	; 0xaf
 80007da:	73fb      	strb	r3, [r7, #15]
		SSD1306.DisplayOn = 1;
 80007dc:	4b08      	ldr	r3, [pc, #32]	; (8000800 <ssd1306_SetDisplayOn+0x38>)
 80007de:	2201      	movs	r2, #1
 80007e0:	719a      	strb	r2, [r3, #6]
 80007e2:	e004      	b.n	80007ee <ssd1306_SetDisplayOn+0x26>
	} else {
		value = 0xAE;   // Display off
 80007e4:	23ae      	movs	r3, #174	; 0xae
 80007e6:	73fb      	strb	r3, [r7, #15]
		SSD1306.DisplayOn = 0;
 80007e8:	4b05      	ldr	r3, [pc, #20]	; (8000800 <ssd1306_SetDisplayOn+0x38>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	719a      	strb	r2, [r3, #6]
	}
	ssd1306_WriteCommand(value);
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff fe47 	bl	8000484 <ssd1306_WriteCommand>
}
 80007f6:	bf00      	nop
 80007f8:	3710      	adds	r7, #16
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000438 	.word	0x20000438

08000804 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8000808:	f000 f99f 	bl	8000b4a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800080c:	f000 f83a 	bl	8000884 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000810:	f000 f8ae 	bl	8000970 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000814:	f000 f87e 	bl	8000914 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	ssd1306_SetDisplayOn(0xAF);		        /* Display ON */
 8000818:	20af      	movs	r0, #175	; 0xaf
 800081a:	f7ff ffd5 	bl	80007c8 <ssd1306_SetDisplayOn>
	ssd1306_Fill(White);
 800081e:	2001      	movs	r0, #1
 8000820:	f7ff fe62 	bl	80004e8 <ssd1306_Fill>
		ssd1306_SetCursor(1,1);
 8000824:	2101      	movs	r1, #1
 8000826:	2001      	movs	r0, #1
 8000828:	f7ff ffb6 	bl	8000798 <ssd1306_SetCursor>
		ssd1306_WriteString("Hello World",Font_7x10,Black);
 800082c:	4a10      	ldr	r2, [pc, #64]	; (8000870 <main+0x6c>)
 800082e:	2300      	movs	r3, #0
 8000830:	ca06      	ldmia	r2, {r1, r2}
 8000832:	4810      	ldr	r0, [pc, #64]	; (8000874 <main+0x70>)
 8000834:	f7ff ff8a 	bl	800074c <ssd1306_WriteString>
		ssd1306_SetCursor(1, 10);
 8000838:	210a      	movs	r1, #10
 800083a:	2001      	movs	r0, #1
 800083c:	f7ff ffac 	bl	8000798 <ssd1306_SetCursor>
		ssd1306_WriteString("Hello CDAC",Font_7x10,Black);
 8000840:	4a0b      	ldr	r2, [pc, #44]	; (8000870 <main+0x6c>)
 8000842:	2300      	movs	r3, #0
 8000844:	ca06      	ldmia	r2, {r1, r2}
 8000846:	480c      	ldr	r0, [pc, #48]	; (8000878 <main+0x74>)
 8000848:	f7ff ff80 	bl	800074c <ssd1306_WriteString>

		ssd1306_SetCursor(1, 20);
 800084c:	2114      	movs	r1, #20
 800084e:	2001      	movs	r0, #1
 8000850:	f7ff ffa2 	bl	8000798 <ssd1306_SetCursor>
				ssd1306_WriteString("Saishiva Reddy Gatla",Font_6x8,Black);
 8000854:	4a09      	ldr	r2, [pc, #36]	; (800087c <main+0x78>)
 8000856:	2300      	movs	r3, #0
 8000858:	ca06      	ldmia	r2, {r1, r2}
 800085a:	4809      	ldr	r0, [pc, #36]	; (8000880 <main+0x7c>)
 800085c:	f7ff ff76 	bl	800074c <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000860:	f7ff fe64 	bl	800052c <ssd1306_UpdateScreen>

		HAL_Delay(1000);
 8000864:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000868:	f000 f9de 	bl	8000c28 <HAL_Delay>
 // update screen
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800086c:	e7fe      	b.n	800086c <main+0x68>
 800086e:	bf00      	nop
 8000870:	20000008 	.word	0x20000008
 8000874:	080025b8 	.word	0x080025b8
 8000878:	080025c4 	.word	0x080025c4
 800087c:	20000000 	.word	0x20000000
 8000880:	080025d0 	.word	0x080025d0

08000884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b092      	sub	sp, #72	; 0x48
 8000888:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088a:	f107 0314 	add.w	r3, r7, #20
 800088e:	2234      	movs	r2, #52	; 0x34
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f001 fe7c 	bl	8002590 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000898:	463b      	mov	r3, r7
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]
 80008a2:	60da      	str	r2, [r3, #12]
 80008a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008a6:	4b1a      	ldr	r3, [pc, #104]	; (8000910 <SystemClock_Config+0x8c>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80008ae:	4a18      	ldr	r2, [pc, #96]	; (8000910 <SystemClock_Config+0x8c>)
 80008b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008b4:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80008b6:	2310      	movs	r3, #16
 80008b8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008ba:	2301      	movs	r3, #1
 80008bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80008c2:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80008c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008c8:	2300      	movs	r3, #0
 80008ca:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	4618      	mov	r0, r3
 80008d2:	f001 f899 	bl	8001a08 <HAL_RCC_OscConfig>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80008dc:	f000 f86a 	bl	80009b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e0:	230f      	movs	r3, #15
 80008e2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80008e4:	2300      	movs	r3, #0
 80008e6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e8:	2300      	movs	r3, #0
 80008ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008ec:	2300      	movs	r3, #0
 80008ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008f0:	2300      	movs	r3, #0
 80008f2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008f4:	463b      	mov	r3, r7
 80008f6:	2100      	movs	r1, #0
 80008f8:	4618      	mov	r0, r3
 80008fa:	f001 fbb5 	bl	8002068 <HAL_RCC_ClockConfig>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000904:	f000 f856 	bl	80009b4 <Error_Handler>
  }
}
 8000908:	bf00      	nop
 800090a:	3748      	adds	r7, #72	; 0x48
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40007000 	.word	0x40007000

08000914 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000918:	4b12      	ldr	r3, [pc, #72]	; (8000964 <MX_I2C1_Init+0x50>)
 800091a:	4a13      	ldr	r2, [pc, #76]	; (8000968 <MX_I2C1_Init+0x54>)
 800091c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <MX_I2C1_Init+0x50>)
 8000920:	4a12      	ldr	r2, [pc, #72]	; (800096c <MX_I2C1_Init+0x58>)
 8000922:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000924:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <MX_I2C1_Init+0x50>)
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <MX_I2C1_Init+0x50>)
 800092c:	2200      	movs	r2, #0
 800092e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <MX_I2C1_Init+0x50>)
 8000932:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000936:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000938:	4b0a      	ldr	r3, [pc, #40]	; (8000964 <MX_I2C1_Init+0x50>)
 800093a:	2200      	movs	r2, #0
 800093c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800093e:	4b09      	ldr	r3, [pc, #36]	; (8000964 <MX_I2C1_Init+0x50>)
 8000940:	2200      	movs	r2, #0
 8000942:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000944:	4b07      	ldr	r3, [pc, #28]	; (8000964 <MX_I2C1_Init+0x50>)
 8000946:	2200      	movs	r2, #0
 8000948:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800094a:	4b06      	ldr	r3, [pc, #24]	; (8000964 <MX_I2C1_Init+0x50>)
 800094c:	2200      	movs	r2, #0
 800094e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000950:	4804      	ldr	r0, [pc, #16]	; (8000964 <MX_I2C1_Init+0x50>)
 8000952:	f000 fbff 	bl	8001154 <HAL_I2C_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800095c:	f000 f82a 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}
 8000964:	20000440 	.word	0x20000440
 8000968:	40005400 	.word	0x40005400
 800096c:	000186a0 	.word	0x000186a0

08000970 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000976:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <MX_GPIO_Init+0x40>)
 8000978:	69db      	ldr	r3, [r3, #28]
 800097a:	4a0d      	ldr	r2, [pc, #52]	; (80009b0 <MX_GPIO_Init+0x40>)
 800097c:	f043 0320 	orr.w	r3, r3, #32
 8000980:	61d3      	str	r3, [r2, #28]
 8000982:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <MX_GPIO_Init+0x40>)
 8000984:	69db      	ldr	r3, [r3, #28]
 8000986:	f003 0320 	and.w	r3, r3, #32
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800098e:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <MX_GPIO_Init+0x40>)
 8000990:	69db      	ldr	r3, [r3, #28]
 8000992:	4a07      	ldr	r2, [pc, #28]	; (80009b0 <MX_GPIO_Init+0x40>)
 8000994:	f043 0302 	orr.w	r3, r3, #2
 8000998:	61d3      	str	r3, [r2, #28]
 800099a:	4b05      	ldr	r3, [pc, #20]	; (80009b0 <MX_GPIO_Init+0x40>)
 800099c:	69db      	ldr	r3, [r3, #28]
 800099e:	f003 0302 	and.w	r3, r3, #2
 80009a2:	603b      	str	r3, [r7, #0]
 80009a4:	683b      	ldr	r3, [r7, #0]

}
 80009a6:	bf00      	nop
 80009a8:	370c      	adds	r7, #12
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bc80      	pop	{r7}
 80009ae:	4770      	bx	lr
 80009b0:	40023800 	.word	0x40023800

080009b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b8:	b672      	cpsid	i
}
 80009ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009bc:	e7fe      	b.n	80009bc <Error_Handler+0x8>
	...

080009c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80009c6:	4b14      	ldr	r3, [pc, #80]	; (8000a18 <HAL_MspInit+0x58>)
 80009c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ca:	4a13      	ldr	r2, [pc, #76]	; (8000a18 <HAL_MspInit+0x58>)
 80009cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d0:	6253      	str	r3, [r2, #36]	; 0x24
 80009d2:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <HAL_MspInit+0x58>)
 80009d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009de:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <HAL_MspInit+0x58>)
 80009e0:	6a1b      	ldr	r3, [r3, #32]
 80009e2:	4a0d      	ldr	r2, [pc, #52]	; (8000a18 <HAL_MspInit+0x58>)
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	6213      	str	r3, [r2, #32]
 80009ea:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <HAL_MspInit+0x58>)
 80009ec:	6a1b      	ldr	r3, [r3, #32]
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	60bb      	str	r3, [r7, #8]
 80009f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f6:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <HAL_MspInit+0x58>)
 80009f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009fa:	4a07      	ldr	r2, [pc, #28]	; (8000a18 <HAL_MspInit+0x58>)
 80009fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a00:	6253      	str	r3, [r2, #36]	; 0x24
 8000a02:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <HAL_MspInit+0x58>)
 8000a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	3714      	adds	r7, #20
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bc80      	pop	{r7}
 8000a16:	4770      	bx	lr
 8000a18:	40023800 	.word	0x40023800

08000a1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08a      	sub	sp, #40	; 0x28
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
 8000a32:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a17      	ldr	r2, [pc, #92]	; (8000a98 <HAL_I2C_MspInit+0x7c>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d127      	bne.n	8000a8e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3e:	4b17      	ldr	r3, [pc, #92]	; (8000a9c <HAL_I2C_MspInit+0x80>)
 8000a40:	69db      	ldr	r3, [r3, #28]
 8000a42:	4a16      	ldr	r2, [pc, #88]	; (8000a9c <HAL_I2C_MspInit+0x80>)
 8000a44:	f043 0302 	orr.w	r3, r3, #2
 8000a48:	61d3      	str	r3, [r2, #28]
 8000a4a:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <HAL_I2C_MspInit+0x80>)
 8000a4c:	69db      	ldr	r3, [r3, #28]
 8000a4e:	f003 0302 	and.w	r3, r3, #2
 8000a52:	613b      	str	r3, [r7, #16]
 8000a54:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a56:	23c0      	movs	r3, #192	; 0xc0
 8000a58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a5a:	2312      	movs	r3, #18
 8000a5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a62:	2303      	movs	r3, #3
 8000a64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a66:	2304      	movs	r3, #4
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a6a:	f107 0314 	add.w	r3, r7, #20
 8000a6e:	4619      	mov	r1, r3
 8000a70:	480b      	ldr	r0, [pc, #44]	; (8000aa0 <HAL_I2C_MspInit+0x84>)
 8000a72:	f000 f9df 	bl	8000e34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a76:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <HAL_I2C_MspInit+0x80>)
 8000a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a7a:	4a08      	ldr	r2, [pc, #32]	; (8000a9c <HAL_I2C_MspInit+0x80>)
 8000a7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a80:	6253      	str	r3, [r2, #36]	; 0x24
 8000a82:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <HAL_I2C_MspInit+0x80>)
 8000a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a8e:	bf00      	nop
 8000a90:	3728      	adds	r7, #40	; 0x28
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40005400 	.word	0x40005400
 8000a9c:	40023800 	.word	0x40023800
 8000aa0:	40020400 	.word	0x40020400

08000aa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <NMI_Handler+0x4>

08000aaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aae:	e7fe      	b.n	8000aae <HardFault_Handler+0x4>

08000ab0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <MemManage_Handler+0x4>

08000ab6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aba:	e7fe      	b.n	8000aba <BusFault_Handler+0x4>

08000abc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <UsageFault_Handler+0x4>

08000ac2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bc80      	pop	{r7}
 8000acc:	4770      	bx	lr

08000ace <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bc80      	pop	{r7}
 8000ad8:	4770      	bx	lr

08000ada <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bc80      	pop	{r7}
 8000ae4:	4770      	bx	lr

08000ae6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aea:	f000 f881 	bl	8000bf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000af6:	bf00      	nop
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bc80      	pop	{r7}
 8000afc:	4770      	bx	lr
	...

08000b00 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b00:	480c      	ldr	r0, [pc, #48]	; (8000b34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b02:	490d      	ldr	r1, [pc, #52]	; (8000b38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b04:	4a0d      	ldr	r2, [pc, #52]	; (8000b3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b08:	e002      	b.n	8000b10 <LoopCopyDataInit>

08000b0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b0e:	3304      	adds	r3, #4

08000b10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b14:	d3f9      	bcc.n	8000b0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b16:	4a0a      	ldr	r2, [pc, #40]	; (8000b40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b18:	4c0a      	ldr	r4, [pc, #40]	; (8000b44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b1c:	e001      	b.n	8000b22 <LoopFillZerobss>

08000b1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b20:	3204      	adds	r2, #4

08000b22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b24:	d3fb      	bcc.n	8000b1e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b26:	f7ff ffe4 	bl	8000af2 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b2a:	f001 fd0d 	bl	8002548 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b2e:	f7ff fe69 	bl	8000804 <main>
  bx lr
 8000b32:	4770      	bx	lr
  ldr r0, =_sdata
 8000b34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b38:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000b3c:	08003378 	.word	0x08003378
  ldr r2, =_sbss
 8000b40:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000b44:	20000498 	.word	0x20000498

08000b48 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b48:	e7fe      	b.n	8000b48 <ADC1_IRQHandler>

08000b4a <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b082      	sub	sp, #8
 8000b4e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b50:	2300      	movs	r3, #0
 8000b52:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b54:	2003      	movs	r0, #3
 8000b56:	f000 f939 	bl	8000dcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b5a:	200f      	movs	r0, #15
 8000b5c:	f000 f80e 	bl	8000b7c <HAL_InitTick>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d002      	beq.n	8000b6c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
 8000b68:	71fb      	strb	r3, [r7, #7]
 8000b6a:	e001      	b.n	8000b70 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b6c:	f7ff ff28 	bl	80009c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b70:	79fb      	ldrb	r3, [r7, #7]
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
	...

08000b7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b84:	2300      	movs	r3, #0
 8000b86:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000b88:	4b16      	ldr	r3, [pc, #88]	; (8000be4 <HAL_InitTick+0x68>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d022      	beq.n	8000bd6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000b90:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <HAL_InitTick+0x6c>)
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	4b13      	ldr	r3, [pc, #76]	; (8000be4 <HAL_InitTick+0x68>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f000 f938 	bl	8000e1a <HAL_SYSTICK_Config>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d10f      	bne.n	8000bd0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2b0f      	cmp	r3, #15
 8000bb4:	d809      	bhi.n	8000bca <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	6879      	ldr	r1, [r7, #4]
 8000bba:	f04f 30ff 	mov.w	r0, #4294967295
 8000bbe:	f000 f910 	bl	8000de2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bc2:	4a0a      	ldr	r2, [pc, #40]	; (8000bec <HAL_InitTick+0x70>)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	6013      	str	r3, [r2, #0]
 8000bc8:	e007      	b.n	8000bda <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	73fb      	strb	r3, [r7, #15]
 8000bce:	e004      	b.n	8000bda <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	73fb      	strb	r3, [r7, #15]
 8000bd4:	e001      	b.n	8000bda <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3710      	adds	r7, #16
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000018 	.word	0x20000018
 8000be8:	20000010 	.word	0x20000010
 8000bec:	20000014 	.word	0x20000014

08000bf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bf4:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <HAL_IncTick+0x1c>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <HAL_IncTick+0x20>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	4a03      	ldr	r2, [pc, #12]	; (8000c0c <HAL_IncTick+0x1c>)
 8000c00:	6013      	str	r3, [r2, #0]
}
 8000c02:	bf00      	nop
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bc80      	pop	{r7}
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	20000494 	.word	0x20000494
 8000c10:	20000018 	.word	0x20000018

08000c14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  return uwTick;
 8000c18:	4b02      	ldr	r3, [pc, #8]	; (8000c24 <HAL_GetTick+0x10>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bc80      	pop	{r7}
 8000c22:	4770      	bx	lr
 8000c24:	20000494 	.word	0x20000494

08000c28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c30:	f7ff fff0 	bl	8000c14 <HAL_GetTick>
 8000c34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c40:	d004      	beq.n	8000c4c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c42:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <HAL_Delay+0x40>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	68fa      	ldr	r2, [r7, #12]
 8000c48:	4413      	add	r3, r2
 8000c4a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c4c:	bf00      	nop
 8000c4e:	f7ff ffe1 	bl	8000c14 <HAL_GetTick>
 8000c52:	4602      	mov	r2, r0
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	1ad3      	subs	r3, r2, r3
 8000c58:	68fa      	ldr	r2, [r7, #12]
 8000c5a:	429a      	cmp	r2, r3
 8000c5c:	d8f7      	bhi.n	8000c4e <HAL_Delay+0x26>
  {
  }
}
 8000c5e:	bf00      	nop
 8000c60:	bf00      	nop
 8000c62:	3710      	adds	r7, #16
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20000018 	.word	0x20000018

08000c6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c82:	68ba      	ldr	r2, [r7, #8]
 8000c84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c88:	4013      	ands	r3, r2
 8000c8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c9e:	4a04      	ldr	r2, [pc, #16]	; (8000cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	60d3      	str	r3, [r2, #12]
}
 8000ca4:	bf00      	nop
 8000ca6:	3714      	adds	r7, #20
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bc80      	pop	{r7}
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb8:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <__NVIC_GetPriorityGrouping+0x18>)
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	0a1b      	lsrs	r3, r3, #8
 8000cbe:	f003 0307 	and.w	r3, r3, #7
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bc80      	pop	{r7}
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	6039      	str	r1, [r7, #0]
 8000cda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db0a      	blt.n	8000cfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	b2da      	uxtb	r2, r3
 8000ce8:	490c      	ldr	r1, [pc, #48]	; (8000d1c <__NVIC_SetPriority+0x4c>)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	0112      	lsls	r2, r2, #4
 8000cf0:	b2d2      	uxtb	r2, r2
 8000cf2:	440b      	add	r3, r1
 8000cf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf8:	e00a      	b.n	8000d10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	4908      	ldr	r1, [pc, #32]	; (8000d20 <__NVIC_SetPriority+0x50>)
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	f003 030f 	and.w	r3, r3, #15
 8000d06:	3b04      	subs	r3, #4
 8000d08:	0112      	lsls	r2, r2, #4
 8000d0a:	b2d2      	uxtb	r2, r2
 8000d0c:	440b      	add	r3, r1
 8000d0e:	761a      	strb	r2, [r3, #24]
}
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bc80      	pop	{r7}
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	e000e100 	.word	0xe000e100
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b089      	sub	sp, #36	; 0x24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	f1c3 0307 	rsb	r3, r3, #7
 8000d3e:	2b04      	cmp	r3, #4
 8000d40:	bf28      	it	cs
 8000d42:	2304      	movcs	r3, #4
 8000d44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3304      	adds	r3, #4
 8000d4a:	2b06      	cmp	r3, #6
 8000d4c:	d902      	bls.n	8000d54 <NVIC_EncodePriority+0x30>
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	3b03      	subs	r3, #3
 8000d52:	e000      	b.n	8000d56 <NVIC_EncodePriority+0x32>
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d58:	f04f 32ff 	mov.w	r2, #4294967295
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43da      	mvns	r2, r3
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	401a      	ands	r2, r3
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	fa01 f303 	lsl.w	r3, r1, r3
 8000d76:	43d9      	mvns	r1, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d7c:	4313      	orrs	r3, r2
         );
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3724      	adds	r7, #36	; 0x24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bc80      	pop	{r7}
 8000d86:	4770      	bx	lr

08000d88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	3b01      	subs	r3, #1
 8000d94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d98:	d301      	bcc.n	8000d9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e00f      	b.n	8000dbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d9e:	4a0a      	ldr	r2, [pc, #40]	; (8000dc8 <SysTick_Config+0x40>)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	3b01      	subs	r3, #1
 8000da4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000da6:	210f      	movs	r1, #15
 8000da8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dac:	f7ff ff90 	bl	8000cd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000db0:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <SysTick_Config+0x40>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000db6:	4b04      	ldr	r3, [pc, #16]	; (8000dc8 <SysTick_Config+0x40>)
 8000db8:	2207      	movs	r2, #7
 8000dba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	e000e010 	.word	0xe000e010

08000dcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f7ff ff49 	bl	8000c6c <__NVIC_SetPriorityGrouping>
}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b086      	sub	sp, #24
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	4603      	mov	r3, r0
 8000dea:	60b9      	str	r1, [r7, #8]
 8000dec:	607a      	str	r2, [r7, #4]
 8000dee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000df4:	f7ff ff5e 	bl	8000cb4 <__NVIC_GetPriorityGrouping>
 8000df8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	68b9      	ldr	r1, [r7, #8]
 8000dfe:	6978      	ldr	r0, [r7, #20]
 8000e00:	f7ff ff90 	bl	8000d24 <NVIC_EncodePriority>
 8000e04:	4602      	mov	r2, r0
 8000e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e0a:	4611      	mov	r1, r2
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff ff5f 	bl	8000cd0 <__NVIC_SetPriority>
}
 8000e12:	bf00      	nop
 8000e14:	3718      	adds	r7, #24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f7ff ffb0 	bl	8000d88 <SysTick_Config>
 8000e28:	4603      	mov	r3, r0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
	...

08000e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b087      	sub	sp, #28
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000e42:	2300      	movs	r3, #0
 8000e44:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000e46:	2300      	movs	r3, #0
 8000e48:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e4a:	e160      	b.n	800110e <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	2101      	movs	r1, #1
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	fa01 f303 	lsl.w	r3, r1, r3
 8000e58:	4013      	ands	r3, r2
 8000e5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f000 8152 	beq.w	8001108 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f003 0303 	and.w	r3, r3, #3
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d005      	beq.n	8000e7c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d130      	bne.n	8000ede <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	2203      	movs	r2, #3
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	4013      	ands	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	68da      	ldr	r2, [r3, #12]
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	091b      	lsrs	r3, r3, #4
 8000ec8:	f003 0201 	and.w	r2, r3, #1
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f003 0303 	and.w	r3, r3, #3
 8000ee6:	2b03      	cmp	r3, #3
 8000ee8:	d017      	beq.n	8000f1a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	68db      	ldr	r3, [r3, #12]
 8000eee:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43db      	mvns	r3, r3
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	4013      	ands	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	689a      	ldr	r2, [r3, #8]
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f003 0303 	and.w	r3, r3, #3
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d123      	bne.n	8000f6e <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	08da      	lsrs	r2, r3, #3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	3208      	adds	r2, #8
 8000f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f32:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	220f      	movs	r2, #15
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	43db      	mvns	r3, r3
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	4013      	ands	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	691a      	ldr	r2, [r3, #16]
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	f003 0307 	and.w	r3, r3, #7
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	08da      	lsrs	r2, r3, #3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3208      	adds	r2, #8
 8000f68:	6939      	ldr	r1, [r7, #16]
 8000f6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	2203      	movs	r2, #3
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	4013      	ands	r3, r2
 8000f84:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f003 0203 	and.w	r2, r3, #3
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	f000 80ac 	beq.w	8001108 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb0:	4b5e      	ldr	r3, [pc, #376]	; (800112c <HAL_GPIO_Init+0x2f8>)
 8000fb2:	6a1b      	ldr	r3, [r3, #32]
 8000fb4:	4a5d      	ldr	r2, [pc, #372]	; (800112c <HAL_GPIO_Init+0x2f8>)
 8000fb6:	f043 0301 	orr.w	r3, r3, #1
 8000fba:	6213      	str	r3, [r2, #32]
 8000fbc:	4b5b      	ldr	r3, [pc, #364]	; (800112c <HAL_GPIO_Init+0x2f8>)
 8000fbe:	6a1b      	ldr	r3, [r3, #32]
 8000fc0:	f003 0301 	and.w	r3, r3, #1
 8000fc4:	60bb      	str	r3, [r7, #8]
 8000fc6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000fc8:	4a59      	ldr	r2, [pc, #356]	; (8001130 <HAL_GPIO_Init+0x2fc>)
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	089b      	lsrs	r3, r3, #2
 8000fce:	3302      	adds	r3, #2
 8000fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	f003 0303 	and.w	r3, r3, #3
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	220f      	movs	r2, #15
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4a51      	ldr	r2, [pc, #324]	; (8001134 <HAL_GPIO_Init+0x300>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d025      	beq.n	8001040 <HAL_GPIO_Init+0x20c>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a50      	ldr	r2, [pc, #320]	; (8001138 <HAL_GPIO_Init+0x304>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d01f      	beq.n	800103c <HAL_GPIO_Init+0x208>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4a4f      	ldr	r2, [pc, #316]	; (800113c <HAL_GPIO_Init+0x308>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d019      	beq.n	8001038 <HAL_GPIO_Init+0x204>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a4e      	ldr	r2, [pc, #312]	; (8001140 <HAL_GPIO_Init+0x30c>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d013      	beq.n	8001034 <HAL_GPIO_Init+0x200>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4a4d      	ldr	r2, [pc, #308]	; (8001144 <HAL_GPIO_Init+0x310>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d00d      	beq.n	8001030 <HAL_GPIO_Init+0x1fc>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4a4c      	ldr	r2, [pc, #304]	; (8001148 <HAL_GPIO_Init+0x314>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d007      	beq.n	800102c <HAL_GPIO_Init+0x1f8>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4a4b      	ldr	r2, [pc, #300]	; (800114c <HAL_GPIO_Init+0x318>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d101      	bne.n	8001028 <HAL_GPIO_Init+0x1f4>
 8001024:	2306      	movs	r3, #6
 8001026:	e00c      	b.n	8001042 <HAL_GPIO_Init+0x20e>
 8001028:	2307      	movs	r3, #7
 800102a:	e00a      	b.n	8001042 <HAL_GPIO_Init+0x20e>
 800102c:	2305      	movs	r3, #5
 800102e:	e008      	b.n	8001042 <HAL_GPIO_Init+0x20e>
 8001030:	2304      	movs	r3, #4
 8001032:	e006      	b.n	8001042 <HAL_GPIO_Init+0x20e>
 8001034:	2303      	movs	r3, #3
 8001036:	e004      	b.n	8001042 <HAL_GPIO_Init+0x20e>
 8001038:	2302      	movs	r3, #2
 800103a:	e002      	b.n	8001042 <HAL_GPIO_Init+0x20e>
 800103c:	2301      	movs	r3, #1
 800103e:	e000      	b.n	8001042 <HAL_GPIO_Init+0x20e>
 8001040:	2300      	movs	r3, #0
 8001042:	697a      	ldr	r2, [r7, #20]
 8001044:	f002 0203 	and.w	r2, r2, #3
 8001048:	0092      	lsls	r2, r2, #2
 800104a:	4093      	lsls	r3, r2
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	4313      	orrs	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001052:	4937      	ldr	r1, [pc, #220]	; (8001130 <HAL_GPIO_Init+0x2fc>)
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	089b      	lsrs	r3, r3, #2
 8001058:	3302      	adds	r3, #2
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001060:	4b3b      	ldr	r3, [pc, #236]	; (8001150 <HAL_GPIO_Init+0x31c>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	43db      	mvns	r3, r3
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	4013      	ands	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001078:	2b00      	cmp	r3, #0
 800107a:	d003      	beq.n	8001084 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	4313      	orrs	r3, r2
 8001082:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001084:	4a32      	ldr	r2, [pc, #200]	; (8001150 <HAL_GPIO_Init+0x31c>)
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800108a:	4b31      	ldr	r3, [pc, #196]	; (8001150 <HAL_GPIO_Init+0x31c>)
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	43db      	mvns	r3, r3
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	4013      	ands	r3, r2
 8001098:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d003      	beq.n	80010ae <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80010ae:	4a28      	ldr	r2, [pc, #160]	; (8001150 <HAL_GPIO_Init+0x31c>)
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010b4:	4b26      	ldr	r3, [pc, #152]	; (8001150 <HAL_GPIO_Init+0x31c>)
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	43db      	mvns	r3, r3
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	4013      	ands	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d003      	beq.n	80010d8 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80010d8:	4a1d      	ldr	r2, [pc, #116]	; (8001150 <HAL_GPIO_Init+0x31c>)
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010de:	4b1c      	ldr	r3, [pc, #112]	; (8001150 <HAL_GPIO_Init+0x31c>)
 80010e0:	68db      	ldr	r3, [r3, #12]
 80010e2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	43db      	mvns	r3, r3
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	4013      	ands	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d003      	beq.n	8001102 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	4313      	orrs	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001102:	4a13      	ldr	r2, [pc, #76]	; (8001150 <HAL_GPIO_Init+0x31c>)
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	3301      	adds	r3, #1
 800110c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	fa22 f303 	lsr.w	r3, r2, r3
 8001118:	2b00      	cmp	r3, #0
 800111a:	f47f ae97 	bne.w	8000e4c <HAL_GPIO_Init+0x18>
  }
}
 800111e:	bf00      	nop
 8001120:	bf00      	nop
 8001122:	371c      	adds	r7, #28
 8001124:	46bd      	mov	sp, r7
 8001126:	bc80      	pop	{r7}
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	40023800 	.word	0x40023800
 8001130:	40010000 	.word	0x40010000
 8001134:	40020000 	.word	0x40020000
 8001138:	40020400 	.word	0x40020400
 800113c:	40020800 	.word	0x40020800
 8001140:	40020c00 	.word	0x40020c00
 8001144:	40021000 	.word	0x40021000
 8001148:	40021400 	.word	0x40021400
 800114c:	40021800 	.word	0x40021800
 8001150:	40010400 	.word	0x40010400

08001154 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d101      	bne.n	8001166 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e12b      	b.n	80013be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800116c:	b2db      	uxtb	r3, r3
 800116e:	2b00      	cmp	r3, #0
 8001170:	d106      	bne.n	8001180 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2200      	movs	r2, #0
 8001176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f7ff fc4e 	bl	8000a1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2224      	movs	r2, #36	; 0x24
 8001184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f022 0201 	bic.w	r2, r2, #1
 8001196:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80011b8:	f001 f952 	bl	8002460 <HAL_RCC_GetPCLK1Freq>
 80011bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	4a81      	ldr	r2, [pc, #516]	; (80013c8 <HAL_I2C_Init+0x274>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d807      	bhi.n	80011d8 <HAL_I2C_Init+0x84>
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	4a80      	ldr	r2, [pc, #512]	; (80013cc <HAL_I2C_Init+0x278>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	bf94      	ite	ls
 80011d0:	2301      	movls	r3, #1
 80011d2:	2300      	movhi	r3, #0
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	e006      	b.n	80011e6 <HAL_I2C_Init+0x92>
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	4a7d      	ldr	r2, [pc, #500]	; (80013d0 <HAL_I2C_Init+0x27c>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	bf94      	ite	ls
 80011e0:	2301      	movls	r3, #1
 80011e2:	2300      	movhi	r3, #0
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e0e7      	b.n	80013be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	4a78      	ldr	r2, [pc, #480]	; (80013d4 <HAL_I2C_Init+0x280>)
 80011f2:	fba2 2303 	umull	r2, r3, r2, r3
 80011f6:	0c9b      	lsrs	r3, r3, #18
 80011f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	68ba      	ldr	r2, [r7, #8]
 800120a:	430a      	orrs	r2, r1
 800120c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	6a1b      	ldr	r3, [r3, #32]
 8001214:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	4a6a      	ldr	r2, [pc, #424]	; (80013c8 <HAL_I2C_Init+0x274>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d802      	bhi.n	8001228 <HAL_I2C_Init+0xd4>
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	3301      	adds	r3, #1
 8001226:	e009      	b.n	800123c <HAL_I2C_Init+0xe8>
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800122e:	fb02 f303 	mul.w	r3, r2, r3
 8001232:	4a69      	ldr	r2, [pc, #420]	; (80013d8 <HAL_I2C_Init+0x284>)
 8001234:	fba2 2303 	umull	r2, r3, r2, r3
 8001238:	099b      	lsrs	r3, r3, #6
 800123a:	3301      	adds	r3, #1
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	6812      	ldr	r2, [r2, #0]
 8001240:	430b      	orrs	r3, r1
 8001242:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	69db      	ldr	r3, [r3, #28]
 800124a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800124e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	495c      	ldr	r1, [pc, #368]	; (80013c8 <HAL_I2C_Init+0x274>)
 8001258:	428b      	cmp	r3, r1
 800125a:	d819      	bhi.n	8001290 <HAL_I2C_Init+0x13c>
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	1e59      	subs	r1, r3, #1
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	fbb1 f3f3 	udiv	r3, r1, r3
 800126a:	1c59      	adds	r1, r3, #1
 800126c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001270:	400b      	ands	r3, r1
 8001272:	2b00      	cmp	r3, #0
 8001274:	d00a      	beq.n	800128c <HAL_I2C_Init+0x138>
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	1e59      	subs	r1, r3, #1
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	fbb1 f3f3 	udiv	r3, r1, r3
 8001284:	3301      	adds	r3, #1
 8001286:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800128a:	e051      	b.n	8001330 <HAL_I2C_Init+0x1dc>
 800128c:	2304      	movs	r3, #4
 800128e:	e04f      	b.n	8001330 <HAL_I2C_Init+0x1dc>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d111      	bne.n	80012bc <HAL_I2C_Init+0x168>
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	1e58      	subs	r0, r3, #1
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6859      	ldr	r1, [r3, #4]
 80012a0:	460b      	mov	r3, r1
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	440b      	add	r3, r1
 80012a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80012aa:	3301      	adds	r3, #1
 80012ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	bf0c      	ite	eq
 80012b4:	2301      	moveq	r3, #1
 80012b6:	2300      	movne	r3, #0
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	e012      	b.n	80012e2 <HAL_I2C_Init+0x18e>
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	1e58      	subs	r0, r3, #1
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6859      	ldr	r1, [r3, #4]
 80012c4:	460b      	mov	r3, r1
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	440b      	add	r3, r1
 80012ca:	0099      	lsls	r1, r3, #2
 80012cc:	440b      	add	r3, r1
 80012ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80012d2:	3301      	adds	r3, #1
 80012d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012d8:	2b00      	cmp	r3, #0
 80012da:	bf0c      	ite	eq
 80012dc:	2301      	moveq	r3, #1
 80012de:	2300      	movne	r3, #0
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <HAL_I2C_Init+0x196>
 80012e6:	2301      	movs	r3, #1
 80012e8:	e022      	b.n	8001330 <HAL_I2C_Init+0x1dc>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d10e      	bne.n	8001310 <HAL_I2C_Init+0x1bc>
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	1e58      	subs	r0, r3, #1
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6859      	ldr	r1, [r3, #4]
 80012fa:	460b      	mov	r3, r1
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	440b      	add	r3, r1
 8001300:	fbb0 f3f3 	udiv	r3, r0, r3
 8001304:	3301      	adds	r3, #1
 8001306:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800130a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800130e:	e00f      	b.n	8001330 <HAL_I2C_Init+0x1dc>
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	1e58      	subs	r0, r3, #1
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6859      	ldr	r1, [r3, #4]
 8001318:	460b      	mov	r3, r1
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	440b      	add	r3, r1
 800131e:	0099      	lsls	r1, r3, #2
 8001320:	440b      	add	r3, r1
 8001322:	fbb0 f3f3 	udiv	r3, r0, r3
 8001326:	3301      	adds	r3, #1
 8001328:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800132c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001330:	6879      	ldr	r1, [r7, #4]
 8001332:	6809      	ldr	r1, [r1, #0]
 8001334:	4313      	orrs	r3, r2
 8001336:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	69da      	ldr	r2, [r3, #28]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6a1b      	ldr	r3, [r3, #32]
 800134a:	431a      	orrs	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	430a      	orrs	r2, r1
 8001352:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800135e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	6911      	ldr	r1, [r2, #16]
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	68d2      	ldr	r2, [r2, #12]
 800136a:	4311      	orrs	r1, r2
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	6812      	ldr	r2, [r2, #0]
 8001370:	430b      	orrs	r3, r1
 8001372:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	68db      	ldr	r3, [r3, #12]
 800137a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	695a      	ldr	r2, [r3, #20]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	699b      	ldr	r3, [r3, #24]
 8001386:	431a      	orrs	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	430a      	orrs	r2, r1
 800138e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f042 0201 	orr.w	r2, r2, #1
 800139e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2200      	movs	r2, #0
 80013a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2220      	movs	r2, #32
 80013aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	000186a0 	.word	0x000186a0
 80013cc:	001e847f 	.word	0x001e847f
 80013d0:	003d08ff 	.word	0x003d08ff
 80013d4:	431bde83 	.word	0x431bde83
 80013d8:	10624dd3 	.word	0x10624dd3

080013dc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b088      	sub	sp, #32
 80013e0:	af02      	add	r7, sp, #8
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	4608      	mov	r0, r1
 80013e6:	4611      	mov	r1, r2
 80013e8:	461a      	mov	r2, r3
 80013ea:	4603      	mov	r3, r0
 80013ec:	817b      	strh	r3, [r7, #10]
 80013ee:	460b      	mov	r3, r1
 80013f0:	813b      	strh	r3, [r7, #8]
 80013f2:	4613      	mov	r3, r2
 80013f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80013f6:	f7ff fc0d 	bl	8000c14 <HAL_GetTick>
 80013fa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001402:	b2db      	uxtb	r3, r3
 8001404:	2b20      	cmp	r3, #32
 8001406:	f040 80d9 	bne.w	80015bc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	9300      	str	r3, [sp, #0]
 800140e:	2319      	movs	r3, #25
 8001410:	2201      	movs	r2, #1
 8001412:	496d      	ldr	r1, [pc, #436]	; (80015c8 <HAL_I2C_Mem_Write+0x1ec>)
 8001414:	68f8      	ldr	r0, [r7, #12]
 8001416:	f000 f971 	bl	80016fc <I2C_WaitOnFlagUntilTimeout>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001420:	2302      	movs	r3, #2
 8001422:	e0cc      	b.n	80015be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800142a:	2b01      	cmp	r3, #1
 800142c:	d101      	bne.n	8001432 <HAL_I2C_Mem_Write+0x56>
 800142e:	2302      	movs	r3, #2
 8001430:	e0c5      	b.n	80015be <HAL_I2C_Mem_Write+0x1e2>
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	2201      	movs	r2, #1
 8001436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0301 	and.w	r3, r3, #1
 8001444:	2b01      	cmp	r3, #1
 8001446:	d007      	beq.n	8001458 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f042 0201 	orr.w	r2, r2, #1
 8001456:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001466:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	2221      	movs	r2, #33	; 0x21
 800146c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	2240      	movs	r2, #64	; 0x40
 8001474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	2200      	movs	r2, #0
 800147c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	6a3a      	ldr	r2, [r7, #32]
 8001482:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001488:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800148e:	b29a      	uxth	r2, r3
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	4a4d      	ldr	r2, [pc, #308]	; (80015cc <HAL_I2C_Mem_Write+0x1f0>)
 8001498:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800149a:	88f8      	ldrh	r0, [r7, #6]
 800149c:	893a      	ldrh	r2, [r7, #8]
 800149e:	8979      	ldrh	r1, [r7, #10]
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	9301      	str	r3, [sp, #4]
 80014a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014a6:	9300      	str	r3, [sp, #0]
 80014a8:	4603      	mov	r3, r0
 80014aa:	68f8      	ldr	r0, [r7, #12]
 80014ac:	f000 f890 	bl	80015d0 <I2C_RequestMemoryWrite>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d052      	beq.n	800155c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e081      	b.n	80015be <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014ba:	697a      	ldr	r2, [r7, #20]
 80014bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80014be:	68f8      	ldr	r0, [r7, #12]
 80014c0:	f000 f9f2 	bl	80018a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d00d      	beq.n	80014e6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	2b04      	cmp	r3, #4
 80014d0:	d107      	bne.n	80014e2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e06b      	b.n	80015be <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ea:	781a      	ldrb	r2, [r3, #0]
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f6:	1c5a      	adds	r2, r3, #1
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001500:	3b01      	subs	r3, #1
 8001502:	b29a      	uxth	r2, r3
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800150c:	b29b      	uxth	r3, r3
 800150e:	3b01      	subs	r3, #1
 8001510:	b29a      	uxth	r2, r3
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	695b      	ldr	r3, [r3, #20]
 800151c:	f003 0304 	and.w	r3, r3, #4
 8001520:	2b04      	cmp	r3, #4
 8001522:	d11b      	bne.n	800155c <HAL_I2C_Mem_Write+0x180>
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001528:	2b00      	cmp	r3, #0
 800152a:	d017      	beq.n	800155c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001530:	781a      	ldrb	r2, [r3, #0]
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153c:	1c5a      	adds	r2, r3, #1
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001546:	3b01      	subs	r3, #1
 8001548:	b29a      	uxth	r2, r3
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001552:	b29b      	uxth	r3, r3
 8001554:	3b01      	subs	r3, #1
 8001556:	b29a      	uxth	r2, r3
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001560:	2b00      	cmp	r3, #0
 8001562:	d1aa      	bne.n	80014ba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001564:	697a      	ldr	r2, [r7, #20]
 8001566:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001568:	68f8      	ldr	r0, [r7, #12]
 800156a:	f000 f9de 	bl	800192a <I2C_WaitOnBTFFlagUntilTimeout>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d00d      	beq.n	8001590 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001578:	2b04      	cmp	r3, #4
 800157a:	d107      	bne.n	800158c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800158a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e016      	b.n	80015be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800159e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2220      	movs	r2, #32
 80015a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	2200      	movs	r2, #0
 80015ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2200      	movs	r2, #0
 80015b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80015b8:	2300      	movs	r3, #0
 80015ba:	e000      	b.n	80015be <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80015bc:	2302      	movs	r3, #2
  }
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3718      	adds	r7, #24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	00100002 	.word	0x00100002
 80015cc:	ffff0000 	.word	0xffff0000

080015d0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b088      	sub	sp, #32
 80015d4:	af02      	add	r7, sp, #8
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	4608      	mov	r0, r1
 80015da:	4611      	mov	r1, r2
 80015dc:	461a      	mov	r2, r3
 80015de:	4603      	mov	r3, r0
 80015e0:	817b      	strh	r3, [r7, #10]
 80015e2:	460b      	mov	r3, r1
 80015e4:	813b      	strh	r3, [r7, #8]
 80015e6:	4613      	mov	r3, r2
 80015e8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80015fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	6a3b      	ldr	r3, [r7, #32]
 8001600:	2200      	movs	r2, #0
 8001602:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001606:	68f8      	ldr	r0, [r7, #12]
 8001608:	f000 f878 	bl	80016fc <I2C_WaitOnFlagUntilTimeout>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d00d      	beq.n	800162e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800161c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001620:	d103      	bne.n	800162a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001628:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e05f      	b.n	80016ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800162e:	897b      	ldrh	r3, [r7, #10]
 8001630:	b2db      	uxtb	r3, r3
 8001632:	461a      	mov	r2, r3
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800163c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800163e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001640:	6a3a      	ldr	r2, [r7, #32]
 8001642:	492d      	ldr	r1, [pc, #180]	; (80016f8 <I2C_RequestMemoryWrite+0x128>)
 8001644:	68f8      	ldr	r0, [r7, #12]
 8001646:	f000 f8b0 	bl	80017aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e04c      	b.n	80016ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	617b      	str	r3, [r7, #20]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	699b      	ldr	r3, [r3, #24]
 8001666:	617b      	str	r3, [r7, #20]
 8001668:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800166a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800166c:	6a39      	ldr	r1, [r7, #32]
 800166e:	68f8      	ldr	r0, [r7, #12]
 8001670:	f000 f91a 	bl	80018a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d00d      	beq.n	8001696 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	2b04      	cmp	r3, #4
 8001680:	d107      	bne.n	8001692 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001690:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e02b      	b.n	80016ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001696:	88fb      	ldrh	r3, [r7, #6]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d105      	bne.n	80016a8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800169c:	893b      	ldrh	r3, [r7, #8]
 800169e:	b2da      	uxtb	r2, r3
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	611a      	str	r2, [r3, #16]
 80016a6:	e021      	b.n	80016ec <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80016a8:	893b      	ldrh	r3, [r7, #8]
 80016aa:	0a1b      	lsrs	r3, r3, #8
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	b2da      	uxtb	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80016b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016b8:	6a39      	ldr	r1, [r7, #32]
 80016ba:	68f8      	ldr	r0, [r7, #12]
 80016bc:	f000 f8f4 	bl	80018a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d00d      	beq.n	80016e2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	2b04      	cmp	r3, #4
 80016cc:	d107      	bne.n	80016de <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e005      	b.n	80016ee <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80016e2:	893b      	ldrh	r3, [r7, #8]
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3718      	adds	r7, #24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	00010002 	.word	0x00010002

080016fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	603b      	str	r3, [r7, #0]
 8001708:	4613      	mov	r3, r2
 800170a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800170c:	e025      	b.n	800175a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001714:	d021      	beq.n	800175a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001716:	f7ff fa7d 	bl	8000c14 <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	683a      	ldr	r2, [r7, #0]
 8001722:	429a      	cmp	r2, r3
 8001724:	d302      	bcc.n	800172c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d116      	bne.n	800175a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2200      	movs	r2, #0
 8001730:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	2220      	movs	r2, #32
 8001736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	2200      	movs	r2, #0
 800173e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	f043 0220 	orr.w	r2, r3, #32
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2200      	movs	r2, #0
 8001752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e023      	b.n	80017a2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	0c1b      	lsrs	r3, r3, #16
 800175e:	b2db      	uxtb	r3, r3
 8001760:	2b01      	cmp	r3, #1
 8001762:	d10d      	bne.n	8001780 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	695b      	ldr	r3, [r3, #20]
 800176a:	43da      	mvns	r2, r3
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	4013      	ands	r3, r2
 8001770:	b29b      	uxth	r3, r3
 8001772:	2b00      	cmp	r3, #0
 8001774:	bf0c      	ite	eq
 8001776:	2301      	moveq	r3, #1
 8001778:	2300      	movne	r3, #0
 800177a:	b2db      	uxtb	r3, r3
 800177c:	461a      	mov	r2, r3
 800177e:	e00c      	b.n	800179a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	699b      	ldr	r3, [r3, #24]
 8001786:	43da      	mvns	r2, r3
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	4013      	ands	r3, r2
 800178c:	b29b      	uxth	r3, r3
 800178e:	2b00      	cmp	r3, #0
 8001790:	bf0c      	ite	eq
 8001792:	2301      	moveq	r3, #1
 8001794:	2300      	movne	r3, #0
 8001796:	b2db      	uxtb	r3, r3
 8001798:	461a      	mov	r2, r3
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	429a      	cmp	r2, r3
 800179e:	d0b6      	beq.n	800170e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b084      	sub	sp, #16
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	60f8      	str	r0, [r7, #12]
 80017b2:	60b9      	str	r1, [r7, #8]
 80017b4:	607a      	str	r2, [r7, #4]
 80017b6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80017b8:	e051      	b.n	800185e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	695b      	ldr	r3, [r3, #20]
 80017c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017c8:	d123      	bne.n	8001812 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017d8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80017e2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2200      	movs	r2, #0
 80017e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	2220      	movs	r2, #32
 80017ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2200      	movs	r2, #0
 80017f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	f043 0204 	orr.w	r2, r3, #4
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2200      	movs	r2, #0
 800180a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e046      	b.n	80018a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001818:	d021      	beq.n	800185e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800181a:	f7ff f9fb 	bl	8000c14 <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	429a      	cmp	r2, r3
 8001828:	d302      	bcc.n	8001830 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d116      	bne.n	800185e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2200      	movs	r2, #0
 8001834:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2220      	movs	r2, #32
 800183a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2200      	movs	r2, #0
 8001842:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	f043 0220 	orr.w	r2, r3, #32
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	2200      	movs	r2, #0
 8001856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e020      	b.n	80018a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	0c1b      	lsrs	r3, r3, #16
 8001862:	b2db      	uxtb	r3, r3
 8001864:	2b01      	cmp	r3, #1
 8001866:	d10c      	bne.n	8001882 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	695b      	ldr	r3, [r3, #20]
 800186e:	43da      	mvns	r2, r3
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	4013      	ands	r3, r2
 8001874:	b29b      	uxth	r3, r3
 8001876:	2b00      	cmp	r3, #0
 8001878:	bf14      	ite	ne
 800187a:	2301      	movne	r3, #1
 800187c:	2300      	moveq	r3, #0
 800187e:	b2db      	uxtb	r3, r3
 8001880:	e00b      	b.n	800189a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	43da      	mvns	r2, r3
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	4013      	ands	r3, r2
 800188e:	b29b      	uxth	r3, r3
 8001890:	2b00      	cmp	r3, #0
 8001892:	bf14      	ite	ne
 8001894:	2301      	movne	r3, #1
 8001896:	2300      	moveq	r3, #0
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b00      	cmp	r3, #0
 800189c:	d18d      	bne.n	80017ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800189e:	2300      	movs	r3, #0
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3710      	adds	r7, #16
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80018b4:	e02d      	b.n	8001912 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80018b6:	68f8      	ldr	r0, [r7, #12]
 80018b8:	f000 f878 	bl	80019ac <I2C_IsAcknowledgeFailed>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e02d      	b.n	8001922 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018cc:	d021      	beq.n	8001912 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018ce:	f7ff f9a1 	bl	8000c14 <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	68ba      	ldr	r2, [r7, #8]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d302      	bcc.n	80018e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d116      	bne.n	8001912 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2200      	movs	r2, #0
 80018e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2220      	movs	r2, #32
 80018ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	f043 0220 	orr.w	r2, r3, #32
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2200      	movs	r2, #0
 800190a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e007      	b.n	8001922 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	695b      	ldr	r3, [r3, #20]
 8001918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800191c:	2b80      	cmp	r3, #128	; 0x80
 800191e:	d1ca      	bne.n	80018b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b084      	sub	sp, #16
 800192e:	af00      	add	r7, sp, #0
 8001930:	60f8      	str	r0, [r7, #12]
 8001932:	60b9      	str	r1, [r7, #8]
 8001934:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001936:	e02d      	b.n	8001994 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001938:	68f8      	ldr	r0, [r7, #12]
 800193a:	f000 f837 	bl	80019ac <I2C_IsAcknowledgeFailed>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e02d      	b.n	80019a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800194e:	d021      	beq.n	8001994 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001950:	f7ff f960 	bl	8000c14 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	68ba      	ldr	r2, [r7, #8]
 800195c:	429a      	cmp	r2, r3
 800195e:	d302      	bcc.n	8001966 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d116      	bne.n	8001994 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2200      	movs	r2, #0
 800196a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2220      	movs	r2, #32
 8001970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2200      	movs	r2, #0
 8001978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001980:	f043 0220 	orr.w	r2, r3, #32
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e007      	b.n	80019a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	695b      	ldr	r3, [r3, #20]
 800199a:	f003 0304 	and.w	r3, r3, #4
 800199e:	2b04      	cmp	r3, #4
 80019a0:	d1ca      	bne.n	8001938 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80019a2:	2300      	movs	r3, #0
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3710      	adds	r7, #16
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	695b      	ldr	r3, [r3, #20]
 80019ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019c2:	d11b      	bne.n	80019fc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80019cc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2220      	movs	r2, #32
 80019d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e8:	f043 0204 	orr.w	r2, r3, #4
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e000      	b.n	80019fe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr

08001a08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b088      	sub	sp, #32
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d101      	bne.n	8001a1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e31d      	b.n	8002056 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a1a:	4b94      	ldr	r3, [pc, #592]	; (8001c6c <HAL_RCC_OscConfig+0x264>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f003 030c 	and.w	r3, r3, #12
 8001a22:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a24:	4b91      	ldr	r3, [pc, #580]	; (8001c6c <HAL_RCC_OscConfig+0x264>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a2c:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d07b      	beq.n	8001b32 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	2b08      	cmp	r3, #8
 8001a3e:	d006      	beq.n	8001a4e <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	2b0c      	cmp	r3, #12
 8001a44:	d10f      	bne.n	8001a66 <HAL_RCC_OscConfig+0x5e>
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a4c:	d10b      	bne.n	8001a66 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a4e:	4b87      	ldr	r3, [pc, #540]	; (8001c6c <HAL_RCC_OscConfig+0x264>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d06a      	beq.n	8001b30 <HAL_RCC_OscConfig+0x128>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d166      	bne.n	8001b30 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e2f7      	b.n	8002056 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d106      	bne.n	8001a7c <HAL_RCC_OscConfig+0x74>
 8001a6e:	4b7f      	ldr	r3, [pc, #508]	; (8001c6c <HAL_RCC_OscConfig+0x264>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a7e      	ldr	r2, [pc, #504]	; (8001c6c <HAL_RCC_OscConfig+0x264>)
 8001a74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a78:	6013      	str	r3, [r2, #0]
 8001a7a:	e02d      	b.n	8001ad8 <HAL_RCC_OscConfig+0xd0>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d10c      	bne.n	8001a9e <HAL_RCC_OscConfig+0x96>
 8001a84:	4b79      	ldr	r3, [pc, #484]	; (8001c6c <HAL_RCC_OscConfig+0x264>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a78      	ldr	r2, [pc, #480]	; (8001c6c <HAL_RCC_OscConfig+0x264>)
 8001a8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a8e:	6013      	str	r3, [r2, #0]
 8001a90:	4b76      	ldr	r3, [pc, #472]	; (8001c6c <HAL_RCC_OscConfig+0x264>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a75      	ldr	r2, [pc, #468]	; (8001c6c <HAL_RCC_OscConfig+0x264>)
 8001a96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a9a:	6013      	str	r3, [r2, #0]
 8001a9c:	e01c      	b.n	8001ad8 <HAL_RCC_OscConfig+0xd0>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	2b05      	cmp	r3, #5
 8001aa4:	d10c      	bne.n	8001ac0 <HAL_RCC_OscConfig+0xb8>
 8001aa6:	4b71      	ldr	r3, [pc, #452]	; (8001c6c <HAL_RCC_OscConfig+0x264>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a70      	ldr	r2, [pc, #448]	; (8001c6c <HAL_RCC_OscConfig+0x264>)
 8001aac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ab0:	6013      	str	r3, [r2, #0]
 8001ab2:	4b6e      	ldr	r3, [pc, #440]	; (8001c6c <HAL_RCC_OscConfig+0x264>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a6d      	ldr	r2, [pc, #436]	; (8001c6c <HAL_RCC_OscConfig+0x264>)
 8001ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001abc:	6013      	str	r3, [r2, #0]
 8001abe:	e00b      	b.n	8001ad8 <HAL_RCC_OscConfig+0xd0>
 8001ac0:	4b6a      	ldr	r3, [pc, #424]	; (8001c6c <HAL_RCC_OscConfig+0x264>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a69      	ldr	r2, [pc, #420]	; (8001c6c <HAL_RCC_OscConfig+0x264>)
 8001ac6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aca:	6013      	str	r3, [r2, #0]
 8001acc:	4b67      	ldr	r3, [pc, #412]	; (8001c6c <HAL_RCC_OscConfig+0x264>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a66      	ldr	r2, [pc, #408]	; (8001c6c <HAL_RCC_OscConfig+0x264>)
 8001ad2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ad6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d013      	beq.n	8001b08 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae0:	f7ff f898 	bl	8000c14 <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ae8:	f7ff f894 	bl	8000c14 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b64      	cmp	r3, #100	; 0x64
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e2ad      	b.n	8002056 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001afa:	4b5c      	ldr	r3, [pc, #368]	; (8001c6c <HAL_RCC_OscConfig+0x264>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d0f0      	beq.n	8001ae8 <HAL_RCC_OscConfig+0xe0>
 8001b06:	e014      	b.n	8001b32 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b08:	f7ff f884 	bl	8000c14 <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b10:	f7ff f880 	bl	8000c14 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b64      	cmp	r3, #100	; 0x64
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e299      	b.n	8002056 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b22:	4b52      	ldr	r3, [pc, #328]	; (8001c6c <HAL_RCC_OscConfig+0x264>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1f0      	bne.n	8001b10 <HAL_RCC_OscConfig+0x108>
 8001b2e:	e000      	b.n	8001b32 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d05a      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	2b04      	cmp	r3, #4
 8001b42:	d005      	beq.n	8001b50 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	2b0c      	cmp	r3, #12
 8001b48:	d119      	bne.n	8001b7e <HAL_RCC_OscConfig+0x176>
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d116      	bne.n	8001b7e <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b50:	4b46      	ldr	r3, [pc, #280]	; (8001c6c <HAL_RCC_OscConfig+0x264>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d005      	beq.n	8001b68 <HAL_RCC_OscConfig+0x160>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d001      	beq.n	8001b68 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e276      	b.n	8002056 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b68:	4b40      	ldr	r3, [pc, #256]	; (8001c6c <HAL_RCC_OscConfig+0x264>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	691b      	ldr	r3, [r3, #16]
 8001b74:	021b      	lsls	r3, r3, #8
 8001b76:	493d      	ldr	r1, [pc, #244]	; (8001c6c <HAL_RCC_OscConfig+0x264>)
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b7c:	e03a      	b.n	8001bf4 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d020      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b86:	4b3a      	ldr	r3, [pc, #232]	; (8001c70 <HAL_RCC_OscConfig+0x268>)
 8001b88:	2201      	movs	r2, #1
 8001b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8c:	f7ff f842 	bl	8000c14 <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b94:	f7ff f83e 	bl	8000c14 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e257      	b.n	8002056 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ba6:	4b31      	ldr	r3, [pc, #196]	; (8001c6c <HAL_RCC_OscConfig+0x264>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d0f0      	beq.n	8001b94 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bb2:	4b2e      	ldr	r3, [pc, #184]	; (8001c6c <HAL_RCC_OscConfig+0x264>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	691b      	ldr	r3, [r3, #16]
 8001bbe:	021b      	lsls	r3, r3, #8
 8001bc0:	492a      	ldr	r1, [pc, #168]	; (8001c6c <HAL_RCC_OscConfig+0x264>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	604b      	str	r3, [r1, #4]
 8001bc6:	e015      	b.n	8001bf4 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bc8:	4b29      	ldr	r3, [pc, #164]	; (8001c70 <HAL_RCC_OscConfig+0x268>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bce:	f7ff f821 	bl	8000c14 <HAL_GetTick>
 8001bd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001bd4:	e008      	b.n	8001be8 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bd6:	f7ff f81d 	bl	8000c14 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d901      	bls.n	8001be8 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e236      	b.n	8002056 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001be8:	4b20      	ldr	r3, [pc, #128]	; (8001c6c <HAL_RCC_OscConfig+0x264>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0302 	and.w	r3, r3, #2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d1f0      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0310 	and.w	r3, r3, #16
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	f000 80b8 	beq.w	8001d72 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d170      	bne.n	8001cea <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c08:	4b18      	ldr	r3, [pc, #96]	; (8001c6c <HAL_RCC_OscConfig+0x264>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d005      	beq.n	8001c20 <HAL_RCC_OscConfig+0x218>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d101      	bne.n	8001c20 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e21a      	b.n	8002056 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a1a      	ldr	r2, [r3, #32]
 8001c24:	4b11      	ldr	r3, [pc, #68]	; (8001c6c <HAL_RCC_OscConfig+0x264>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d921      	bls.n	8001c74 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a1b      	ldr	r3, [r3, #32]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f000 fc27 	bl	8002488 <RCC_SetFlashLatencyFromMSIRange>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e208      	b.n	8002056 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c44:	4b09      	ldr	r3, [pc, #36]	; (8001c6c <HAL_RCC_OscConfig+0x264>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a1b      	ldr	r3, [r3, #32]
 8001c50:	4906      	ldr	r1, [pc, #24]	; (8001c6c <HAL_RCC_OscConfig+0x264>)
 8001c52:	4313      	orrs	r3, r2
 8001c54:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c56:	4b05      	ldr	r3, [pc, #20]	; (8001c6c <HAL_RCC_OscConfig+0x264>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	69db      	ldr	r3, [r3, #28]
 8001c62:	061b      	lsls	r3, r3, #24
 8001c64:	4901      	ldr	r1, [pc, #4]	; (8001c6c <HAL_RCC_OscConfig+0x264>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	604b      	str	r3, [r1, #4]
 8001c6a:	e020      	b.n	8001cae <HAL_RCC_OscConfig+0x2a6>
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c74:	4b99      	ldr	r3, [pc, #612]	; (8001edc <HAL_RCC_OscConfig+0x4d4>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a1b      	ldr	r3, [r3, #32]
 8001c80:	4996      	ldr	r1, [pc, #600]	; (8001edc <HAL_RCC_OscConfig+0x4d4>)
 8001c82:	4313      	orrs	r3, r2
 8001c84:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c86:	4b95      	ldr	r3, [pc, #596]	; (8001edc <HAL_RCC_OscConfig+0x4d4>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	69db      	ldr	r3, [r3, #28]
 8001c92:	061b      	lsls	r3, r3, #24
 8001c94:	4991      	ldr	r1, [pc, #580]	; (8001edc <HAL_RCC_OscConfig+0x4d4>)
 8001c96:	4313      	orrs	r3, r2
 8001c98:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a1b      	ldr	r3, [r3, #32]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f000 fbf2 	bl	8002488 <RCC_SetFlashLatencyFromMSIRange>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e1d3      	b.n	8002056 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a1b      	ldr	r3, [r3, #32]
 8001cb2:	0b5b      	lsrs	r3, r3, #13
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001cbe:	4a87      	ldr	r2, [pc, #540]	; (8001edc <HAL_RCC_OscConfig+0x4d4>)
 8001cc0:	6892      	ldr	r2, [r2, #8]
 8001cc2:	0912      	lsrs	r2, r2, #4
 8001cc4:	f002 020f 	and.w	r2, r2, #15
 8001cc8:	4985      	ldr	r1, [pc, #532]	; (8001ee0 <HAL_RCC_OscConfig+0x4d8>)
 8001cca:	5c8a      	ldrb	r2, [r1, r2]
 8001ccc:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001cce:	4a85      	ldr	r2, [pc, #532]	; (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001cd0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001cd2:	4b85      	ldr	r3, [pc, #532]	; (8001ee8 <HAL_RCC_OscConfig+0x4e0>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7fe ff50 	bl	8000b7c <HAL_InitTick>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001ce0:	7bfb      	ldrb	r3, [r7, #15]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d045      	beq.n	8001d72 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8001ce6:	7bfb      	ldrb	r3, [r7, #15]
 8001ce8:	e1b5      	b.n	8002056 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d029      	beq.n	8001d46 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001cf2:	4b7e      	ldr	r3, [pc, #504]	; (8001eec <HAL_RCC_OscConfig+0x4e4>)
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf8:	f7fe ff8c 	bl	8000c14 <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d00:	f7fe ff88 	bl	8000c14 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e1a1      	b.n	8002056 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001d12:	4b72      	ldr	r3, [pc, #456]	; (8001edc <HAL_RCC_OscConfig+0x4d4>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d0f0      	beq.n	8001d00 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d1e:	4b6f      	ldr	r3, [pc, #444]	; (8001edc <HAL_RCC_OscConfig+0x4d4>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a1b      	ldr	r3, [r3, #32]
 8001d2a:	496c      	ldr	r1, [pc, #432]	; (8001edc <HAL_RCC_OscConfig+0x4d4>)
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d30:	4b6a      	ldr	r3, [pc, #424]	; (8001edc <HAL_RCC_OscConfig+0x4d4>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	69db      	ldr	r3, [r3, #28]
 8001d3c:	061b      	lsls	r3, r3, #24
 8001d3e:	4967      	ldr	r1, [pc, #412]	; (8001edc <HAL_RCC_OscConfig+0x4d4>)
 8001d40:	4313      	orrs	r3, r2
 8001d42:	604b      	str	r3, [r1, #4]
 8001d44:	e015      	b.n	8001d72 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d46:	4b69      	ldr	r3, [pc, #420]	; (8001eec <HAL_RCC_OscConfig+0x4e4>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d4c:	f7fe ff62 	bl	8000c14 <HAL_GetTick>
 8001d50:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001d52:	e008      	b.n	8001d66 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d54:	f7fe ff5e 	bl	8000c14 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e177      	b.n	8002056 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001d66:	4b5d      	ldr	r3, [pc, #372]	; (8001edc <HAL_RCC_OscConfig+0x4d4>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1f0      	bne.n	8001d54 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0308 	and.w	r3, r3, #8
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d030      	beq.n	8001de0 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	695b      	ldr	r3, [r3, #20]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d016      	beq.n	8001db4 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d86:	4b5a      	ldr	r3, [pc, #360]	; (8001ef0 <HAL_RCC_OscConfig+0x4e8>)
 8001d88:	2201      	movs	r2, #1
 8001d8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d8c:	f7fe ff42 	bl	8000c14 <HAL_GetTick>
 8001d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d92:	e008      	b.n	8001da6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d94:	f7fe ff3e 	bl	8000c14 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e157      	b.n	8002056 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001da6:	4b4d      	ldr	r3, [pc, #308]	; (8001edc <HAL_RCC_OscConfig+0x4d4>)
 8001da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d0f0      	beq.n	8001d94 <HAL_RCC_OscConfig+0x38c>
 8001db2:	e015      	b.n	8001de0 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001db4:	4b4e      	ldr	r3, [pc, #312]	; (8001ef0 <HAL_RCC_OscConfig+0x4e8>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dba:	f7fe ff2b 	bl	8000c14 <HAL_GetTick>
 8001dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001dc0:	e008      	b.n	8001dd4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dc2:	f7fe ff27 	bl	8000c14 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e140      	b.n	8002056 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001dd4:	4b41      	ldr	r3, [pc, #260]	; (8001edc <HAL_RCC_OscConfig+0x4d4>)
 8001dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d1f0      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0304 	and.w	r3, r3, #4
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f000 80b5 	beq.w	8001f58 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dee:	2300      	movs	r3, #0
 8001df0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001df2:	4b3a      	ldr	r3, [pc, #232]	; (8001edc <HAL_RCC_OscConfig+0x4d4>)
 8001df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d10d      	bne.n	8001e1a <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dfe:	4b37      	ldr	r3, [pc, #220]	; (8001edc <HAL_RCC_OscConfig+0x4d4>)
 8001e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e02:	4a36      	ldr	r2, [pc, #216]	; (8001edc <HAL_RCC_OscConfig+0x4d4>)
 8001e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e08:	6253      	str	r3, [r2, #36]	; 0x24
 8001e0a:	4b34      	ldr	r3, [pc, #208]	; (8001edc <HAL_RCC_OscConfig+0x4d4>)
 8001e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e12:	60bb      	str	r3, [r7, #8]
 8001e14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e16:	2301      	movs	r3, #1
 8001e18:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e1a:	4b36      	ldr	r3, [pc, #216]	; (8001ef4 <HAL_RCC_OscConfig+0x4ec>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d118      	bne.n	8001e58 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e26:	4b33      	ldr	r3, [pc, #204]	; (8001ef4 <HAL_RCC_OscConfig+0x4ec>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a32      	ldr	r2, [pc, #200]	; (8001ef4 <HAL_RCC_OscConfig+0x4ec>)
 8001e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e32:	f7fe feef 	bl	8000c14 <HAL_GetTick>
 8001e36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e38:	e008      	b.n	8001e4c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e3a:	f7fe feeb 	bl	8000c14 <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	2b64      	cmp	r3, #100	; 0x64
 8001e46:	d901      	bls.n	8001e4c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e104      	b.n	8002056 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e4c:	4b29      	ldr	r3, [pc, #164]	; (8001ef4 <HAL_RCC_OscConfig+0x4ec>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d0f0      	beq.n	8001e3a <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d106      	bne.n	8001e6e <HAL_RCC_OscConfig+0x466>
 8001e60:	4b1e      	ldr	r3, [pc, #120]	; (8001edc <HAL_RCC_OscConfig+0x4d4>)
 8001e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e64:	4a1d      	ldr	r2, [pc, #116]	; (8001edc <HAL_RCC_OscConfig+0x4d4>)
 8001e66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e6a:	6353      	str	r3, [r2, #52]	; 0x34
 8001e6c:	e02d      	b.n	8001eca <HAL_RCC_OscConfig+0x4c2>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d10c      	bne.n	8001e90 <HAL_RCC_OscConfig+0x488>
 8001e76:	4b19      	ldr	r3, [pc, #100]	; (8001edc <HAL_RCC_OscConfig+0x4d4>)
 8001e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e7a:	4a18      	ldr	r2, [pc, #96]	; (8001edc <HAL_RCC_OscConfig+0x4d4>)
 8001e7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e80:	6353      	str	r3, [r2, #52]	; 0x34
 8001e82:	4b16      	ldr	r3, [pc, #88]	; (8001edc <HAL_RCC_OscConfig+0x4d4>)
 8001e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e86:	4a15      	ldr	r2, [pc, #84]	; (8001edc <HAL_RCC_OscConfig+0x4d4>)
 8001e88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001e8c:	6353      	str	r3, [r2, #52]	; 0x34
 8001e8e:	e01c      	b.n	8001eca <HAL_RCC_OscConfig+0x4c2>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	2b05      	cmp	r3, #5
 8001e96:	d10c      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x4aa>
 8001e98:	4b10      	ldr	r3, [pc, #64]	; (8001edc <HAL_RCC_OscConfig+0x4d4>)
 8001e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e9c:	4a0f      	ldr	r2, [pc, #60]	; (8001edc <HAL_RCC_OscConfig+0x4d4>)
 8001e9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ea2:	6353      	str	r3, [r2, #52]	; 0x34
 8001ea4:	4b0d      	ldr	r3, [pc, #52]	; (8001edc <HAL_RCC_OscConfig+0x4d4>)
 8001ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ea8:	4a0c      	ldr	r2, [pc, #48]	; (8001edc <HAL_RCC_OscConfig+0x4d4>)
 8001eaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eae:	6353      	str	r3, [r2, #52]	; 0x34
 8001eb0:	e00b      	b.n	8001eca <HAL_RCC_OscConfig+0x4c2>
 8001eb2:	4b0a      	ldr	r3, [pc, #40]	; (8001edc <HAL_RCC_OscConfig+0x4d4>)
 8001eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eb6:	4a09      	ldr	r2, [pc, #36]	; (8001edc <HAL_RCC_OscConfig+0x4d4>)
 8001eb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ebc:	6353      	str	r3, [r2, #52]	; 0x34
 8001ebe:	4b07      	ldr	r3, [pc, #28]	; (8001edc <HAL_RCC_OscConfig+0x4d4>)
 8001ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ec2:	4a06      	ldr	r2, [pc, #24]	; (8001edc <HAL_RCC_OscConfig+0x4d4>)
 8001ec4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001ec8:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d024      	beq.n	8001f1c <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed2:	f7fe fe9f 	bl	8000c14 <HAL_GetTick>
 8001ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ed8:	e019      	b.n	8001f0e <HAL_RCC_OscConfig+0x506>
 8001eda:	bf00      	nop
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	08003350 	.word	0x08003350
 8001ee4:	20000010 	.word	0x20000010
 8001ee8:	20000014 	.word	0x20000014
 8001eec:	42470020 	.word	0x42470020
 8001ef0:	42470680 	.word	0x42470680
 8001ef4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ef8:	f7fe fe8c 	bl	8000c14 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e0a3      	b.n	8002056 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f0e:	4b54      	ldr	r3, [pc, #336]	; (8002060 <HAL_RCC_OscConfig+0x658>)
 8001f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d0ee      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x4f0>
 8001f1a:	e014      	b.n	8001f46 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f1c:	f7fe fe7a 	bl	8000c14 <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f22:	e00a      	b.n	8001f3a <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f24:	f7fe fe76 	bl	8000c14 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e08d      	b.n	8002056 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f3a:	4b49      	ldr	r3, [pc, #292]	; (8002060 <HAL_RCC_OscConfig+0x658>)
 8001f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1ee      	bne.n	8001f24 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f46:	7ffb      	ldrb	r3, [r7, #31]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d105      	bne.n	8001f58 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f4c:	4b44      	ldr	r3, [pc, #272]	; (8002060 <HAL_RCC_OscConfig+0x658>)
 8001f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f50:	4a43      	ldr	r2, [pc, #268]	; (8002060 <HAL_RCC_OscConfig+0x658>)
 8001f52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f56:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d079      	beq.n	8002054 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	2b0c      	cmp	r3, #12
 8001f64:	d056      	beq.n	8002014 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d13b      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f6e:	4b3d      	ldr	r3, [pc, #244]	; (8002064 <HAL_RCC_OscConfig+0x65c>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f74:	f7fe fe4e 	bl	8000c14 <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f7a:	e008      	b.n	8001f8e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f7c:	f7fe fe4a 	bl	8000c14 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e063      	b.n	8002056 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f8e:	4b34      	ldr	r3, [pc, #208]	; (8002060 <HAL_RCC_OscConfig+0x658>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1f0      	bne.n	8001f7c <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f9a:	4b31      	ldr	r3, [pc, #196]	; (8002060 <HAL_RCC_OscConfig+0x658>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001faa:	4319      	orrs	r1, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb0:	430b      	orrs	r3, r1
 8001fb2:	492b      	ldr	r1, [pc, #172]	; (8002060 <HAL_RCC_OscConfig+0x658>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fb8:	4b2a      	ldr	r3, [pc, #168]	; (8002064 <HAL_RCC_OscConfig+0x65c>)
 8001fba:	2201      	movs	r2, #1
 8001fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fbe:	f7fe fe29 	bl	8000c14 <HAL_GetTick>
 8001fc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001fc4:	e008      	b.n	8001fd8 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fc6:	f7fe fe25 	bl	8000c14 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e03e      	b.n	8002056 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001fd8:	4b21      	ldr	r3, [pc, #132]	; (8002060 <HAL_RCC_OscConfig+0x658>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d0f0      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x5be>
 8001fe4:	e036      	b.n	8002054 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fe6:	4b1f      	ldr	r3, [pc, #124]	; (8002064 <HAL_RCC_OscConfig+0x65c>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fec:	f7fe fe12 	bl	8000c14 <HAL_GetTick>
 8001ff0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ff4:	f7fe fe0e 	bl	8000c14 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e027      	b.n	8002056 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002006:	4b16      	ldr	r3, [pc, #88]	; (8002060 <HAL_RCC_OscConfig+0x658>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1f0      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x5ec>
 8002012:	e01f      	b.n	8002054 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002018:	2b01      	cmp	r3, #1
 800201a:	d101      	bne.n	8002020 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e01a      	b.n	8002056 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002020:	4b0f      	ldr	r3, [pc, #60]	; (8002060 <HAL_RCC_OscConfig+0x658>)
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002030:	429a      	cmp	r2, r3
 8002032:	d10d      	bne.n	8002050 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800203e:	429a      	cmp	r2, r3
 8002040:	d106      	bne.n	8002050 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800204c:	429a      	cmp	r2, r3
 800204e:	d001      	beq.n	8002054 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e000      	b.n	8002056 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3720      	adds	r7, #32
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40023800 	.word	0x40023800
 8002064:	42470060 	.word	0x42470060

08002068 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e11a      	b.n	80022b2 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800207c:	4b8f      	ldr	r3, [pc, #572]	; (80022bc <HAL_RCC_ClockConfig+0x254>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	429a      	cmp	r2, r3
 8002088:	d919      	bls.n	80020be <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d105      	bne.n	800209c <HAL_RCC_ClockConfig+0x34>
 8002090:	4b8a      	ldr	r3, [pc, #552]	; (80022bc <HAL_RCC_ClockConfig+0x254>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a89      	ldr	r2, [pc, #548]	; (80022bc <HAL_RCC_ClockConfig+0x254>)
 8002096:	f043 0304 	orr.w	r3, r3, #4
 800209a:	6013      	str	r3, [r2, #0]
 800209c:	4b87      	ldr	r3, [pc, #540]	; (80022bc <HAL_RCC_ClockConfig+0x254>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f023 0201 	bic.w	r2, r3, #1
 80020a4:	4985      	ldr	r1, [pc, #532]	; (80022bc <HAL_RCC_ClockConfig+0x254>)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ac:	4b83      	ldr	r3, [pc, #524]	; (80022bc <HAL_RCC_ClockConfig+0x254>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0301 	and.w	r3, r3, #1
 80020b4:	683a      	ldr	r2, [r7, #0]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d001      	beq.n	80020be <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e0f9      	b.n	80022b2 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d008      	beq.n	80020dc <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020ca:	4b7d      	ldr	r3, [pc, #500]	; (80022c0 <HAL_RCC_ClockConfig+0x258>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	497a      	ldr	r1, [pc, #488]	; (80022c0 <HAL_RCC_ClockConfig+0x258>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0301 	and.w	r3, r3, #1
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f000 808e 	beq.w	8002206 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d107      	bne.n	8002102 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80020f2:	4b73      	ldr	r3, [pc, #460]	; (80022c0 <HAL_RCC_ClockConfig+0x258>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d121      	bne.n	8002142 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e0d7      	b.n	80022b2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	2b03      	cmp	r3, #3
 8002108:	d107      	bne.n	800211a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800210a:	4b6d      	ldr	r3, [pc, #436]	; (80022c0 <HAL_RCC_ClockConfig+0x258>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d115      	bne.n	8002142 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e0cb      	b.n	80022b2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d107      	bne.n	8002132 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002122:	4b67      	ldr	r3, [pc, #412]	; (80022c0 <HAL_RCC_ClockConfig+0x258>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d109      	bne.n	8002142 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e0bf      	b.n	80022b2 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002132:	4b63      	ldr	r3, [pc, #396]	; (80022c0 <HAL_RCC_ClockConfig+0x258>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800213a:	2b00      	cmp	r3, #0
 800213c:	d101      	bne.n	8002142 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e0b7      	b.n	80022b2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002142:	4b5f      	ldr	r3, [pc, #380]	; (80022c0 <HAL_RCC_ClockConfig+0x258>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f023 0203 	bic.w	r2, r3, #3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	495c      	ldr	r1, [pc, #368]	; (80022c0 <HAL_RCC_ClockConfig+0x258>)
 8002150:	4313      	orrs	r3, r2
 8002152:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002154:	f7fe fd5e 	bl	8000c14 <HAL_GetTick>
 8002158:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	2b02      	cmp	r3, #2
 8002160:	d112      	bne.n	8002188 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002162:	e00a      	b.n	800217a <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002164:	f7fe fd56 	bl	8000c14 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002172:	4293      	cmp	r3, r2
 8002174:	d901      	bls.n	800217a <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e09b      	b.n	80022b2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800217a:	4b51      	ldr	r3, [pc, #324]	; (80022c0 <HAL_RCC_ClockConfig+0x258>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f003 030c 	and.w	r3, r3, #12
 8002182:	2b08      	cmp	r3, #8
 8002184:	d1ee      	bne.n	8002164 <HAL_RCC_ClockConfig+0xfc>
 8002186:	e03e      	b.n	8002206 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	2b03      	cmp	r3, #3
 800218e:	d112      	bne.n	80021b6 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002190:	e00a      	b.n	80021a8 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002192:	f7fe fd3f 	bl	8000c14 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	f241 3288 	movw	r2, #5000	; 0x1388
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e084      	b.n	80022b2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021a8:	4b45      	ldr	r3, [pc, #276]	; (80022c0 <HAL_RCC_ClockConfig+0x258>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f003 030c 	and.w	r3, r3, #12
 80021b0:	2b0c      	cmp	r3, #12
 80021b2:	d1ee      	bne.n	8002192 <HAL_RCC_ClockConfig+0x12a>
 80021b4:	e027      	b.n	8002206 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d11d      	bne.n	80021fa <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80021be:	e00a      	b.n	80021d6 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021c0:	f7fe fd28 	bl	8000c14 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e06d      	b.n	80022b2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80021d6:	4b3a      	ldr	r3, [pc, #232]	; (80022c0 <HAL_RCC_ClockConfig+0x258>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f003 030c 	and.w	r3, r3, #12
 80021de:	2b04      	cmp	r3, #4
 80021e0:	d1ee      	bne.n	80021c0 <HAL_RCC_ClockConfig+0x158>
 80021e2:	e010      	b.n	8002206 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021e4:	f7fe fd16 	bl	8000c14 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e05b      	b.n	80022b2 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80021fa:	4b31      	ldr	r3, [pc, #196]	; (80022c0 <HAL_RCC_ClockConfig+0x258>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 030c 	and.w	r3, r3, #12
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1ee      	bne.n	80021e4 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002206:	4b2d      	ldr	r3, [pc, #180]	; (80022bc <HAL_RCC_ClockConfig+0x254>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	429a      	cmp	r2, r3
 8002212:	d219      	bcs.n	8002248 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d105      	bne.n	8002226 <HAL_RCC_ClockConfig+0x1be>
 800221a:	4b28      	ldr	r3, [pc, #160]	; (80022bc <HAL_RCC_ClockConfig+0x254>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a27      	ldr	r2, [pc, #156]	; (80022bc <HAL_RCC_ClockConfig+0x254>)
 8002220:	f043 0304 	orr.w	r3, r3, #4
 8002224:	6013      	str	r3, [r2, #0]
 8002226:	4b25      	ldr	r3, [pc, #148]	; (80022bc <HAL_RCC_ClockConfig+0x254>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f023 0201 	bic.w	r2, r3, #1
 800222e:	4923      	ldr	r1, [pc, #140]	; (80022bc <HAL_RCC_ClockConfig+0x254>)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	4313      	orrs	r3, r2
 8002234:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002236:	4b21      	ldr	r3, [pc, #132]	; (80022bc <HAL_RCC_ClockConfig+0x254>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	683a      	ldr	r2, [r7, #0]
 8002240:	429a      	cmp	r2, r3
 8002242:	d001      	beq.n	8002248 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e034      	b.n	80022b2 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0304 	and.w	r3, r3, #4
 8002250:	2b00      	cmp	r3, #0
 8002252:	d008      	beq.n	8002266 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002254:	4b1a      	ldr	r3, [pc, #104]	; (80022c0 <HAL_RCC_ClockConfig+0x258>)
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	4917      	ldr	r1, [pc, #92]	; (80022c0 <HAL_RCC_ClockConfig+0x258>)
 8002262:	4313      	orrs	r3, r2
 8002264:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0308 	and.w	r3, r3, #8
 800226e:	2b00      	cmp	r3, #0
 8002270:	d009      	beq.n	8002286 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002272:	4b13      	ldr	r3, [pc, #76]	; (80022c0 <HAL_RCC_ClockConfig+0x258>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	490f      	ldr	r1, [pc, #60]	; (80022c0 <HAL_RCC_ClockConfig+0x258>)
 8002282:	4313      	orrs	r3, r2
 8002284:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002286:	f000 f823 	bl	80022d0 <HAL_RCC_GetSysClockFreq>
 800228a:	4602      	mov	r2, r0
 800228c:	4b0c      	ldr	r3, [pc, #48]	; (80022c0 <HAL_RCC_ClockConfig+0x258>)
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	091b      	lsrs	r3, r3, #4
 8002292:	f003 030f 	and.w	r3, r3, #15
 8002296:	490b      	ldr	r1, [pc, #44]	; (80022c4 <HAL_RCC_ClockConfig+0x25c>)
 8002298:	5ccb      	ldrb	r3, [r1, r3]
 800229a:	fa22 f303 	lsr.w	r3, r2, r3
 800229e:	4a0a      	ldr	r2, [pc, #40]	; (80022c8 <HAL_RCC_ClockConfig+0x260>)
 80022a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80022a2:	4b0a      	ldr	r3, [pc, #40]	; (80022cc <HAL_RCC_ClockConfig+0x264>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7fe fc68 	bl	8000b7c <HAL_InitTick>
 80022ac:	4603      	mov	r3, r0
 80022ae:	72fb      	strb	r3, [r7, #11]

  return status;
 80022b0:	7afb      	ldrb	r3, [r7, #11]
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40023c00 	.word	0x40023c00
 80022c0:	40023800 	.word	0x40023800
 80022c4:	08003350 	.word	0x08003350
 80022c8:	20000010 	.word	0x20000010
 80022cc:	20000014 	.word	0x20000014

080022d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022d4:	b08e      	sub	sp, #56	; 0x38
 80022d6:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80022d8:	4b58      	ldr	r3, [pc, #352]	; (800243c <HAL_RCC_GetSysClockFreq+0x16c>)
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e0:	f003 030c 	and.w	r3, r3, #12
 80022e4:	2b0c      	cmp	r3, #12
 80022e6:	d00d      	beq.n	8002304 <HAL_RCC_GetSysClockFreq+0x34>
 80022e8:	2b0c      	cmp	r3, #12
 80022ea:	f200 8092 	bhi.w	8002412 <HAL_RCC_GetSysClockFreq+0x142>
 80022ee:	2b04      	cmp	r3, #4
 80022f0:	d002      	beq.n	80022f8 <HAL_RCC_GetSysClockFreq+0x28>
 80022f2:	2b08      	cmp	r3, #8
 80022f4:	d003      	beq.n	80022fe <HAL_RCC_GetSysClockFreq+0x2e>
 80022f6:	e08c      	b.n	8002412 <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022f8:	4b51      	ldr	r3, [pc, #324]	; (8002440 <HAL_RCC_GetSysClockFreq+0x170>)
 80022fa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80022fc:	e097      	b.n	800242e <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022fe:	4b51      	ldr	r3, [pc, #324]	; (8002444 <HAL_RCC_GetSysClockFreq+0x174>)
 8002300:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002302:	e094      	b.n	800242e <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002306:	0c9b      	lsrs	r3, r3, #18
 8002308:	f003 020f 	and.w	r2, r3, #15
 800230c:	4b4e      	ldr	r3, [pc, #312]	; (8002448 <HAL_RCC_GetSysClockFreq+0x178>)
 800230e:	5c9b      	ldrb	r3, [r3, r2]
 8002310:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002314:	0d9b      	lsrs	r3, r3, #22
 8002316:	f003 0303 	and.w	r3, r3, #3
 800231a:	3301      	adds	r3, #1
 800231c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800231e:	4b47      	ldr	r3, [pc, #284]	; (800243c <HAL_RCC_GetSysClockFreq+0x16c>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d021      	beq.n	800236e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800232a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800232c:	2200      	movs	r2, #0
 800232e:	61bb      	str	r3, [r7, #24]
 8002330:	61fa      	str	r2, [r7, #28]
 8002332:	4b44      	ldr	r3, [pc, #272]	; (8002444 <HAL_RCC_GetSysClockFreq+0x174>)
 8002334:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002338:	464a      	mov	r2, r9
 800233a:	fb03 f202 	mul.w	r2, r3, r2
 800233e:	2300      	movs	r3, #0
 8002340:	4644      	mov	r4, r8
 8002342:	fb04 f303 	mul.w	r3, r4, r3
 8002346:	4413      	add	r3, r2
 8002348:	4a3e      	ldr	r2, [pc, #248]	; (8002444 <HAL_RCC_GetSysClockFreq+0x174>)
 800234a:	4644      	mov	r4, r8
 800234c:	fba4 0102 	umull	r0, r1, r4, r2
 8002350:	440b      	add	r3, r1
 8002352:	4619      	mov	r1, r3
 8002354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002356:	2200      	movs	r2, #0
 8002358:	613b      	str	r3, [r7, #16]
 800235a:	617a      	str	r2, [r7, #20]
 800235c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002360:	f7fd ff0c 	bl	800017c <__aeabi_uldivmod>
 8002364:	4602      	mov	r2, r0
 8002366:	460b      	mov	r3, r1
 8002368:	4613      	mov	r3, r2
 800236a:	637b      	str	r3, [r7, #52]	; 0x34
 800236c:	e04e      	b.n	800240c <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800236e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002370:	2200      	movs	r2, #0
 8002372:	469a      	mov	sl, r3
 8002374:	4693      	mov	fp, r2
 8002376:	4652      	mov	r2, sl
 8002378:	465b      	mov	r3, fp
 800237a:	f04f 0000 	mov.w	r0, #0
 800237e:	f04f 0100 	mov.w	r1, #0
 8002382:	0159      	lsls	r1, r3, #5
 8002384:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002388:	0150      	lsls	r0, r2, #5
 800238a:	4602      	mov	r2, r0
 800238c:	460b      	mov	r3, r1
 800238e:	ebb2 080a 	subs.w	r8, r2, sl
 8002392:	eb63 090b 	sbc.w	r9, r3, fp
 8002396:	f04f 0200 	mov.w	r2, #0
 800239a:	f04f 0300 	mov.w	r3, #0
 800239e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80023a2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80023a6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80023aa:	ebb2 0408 	subs.w	r4, r2, r8
 80023ae:	eb63 0509 	sbc.w	r5, r3, r9
 80023b2:	f04f 0200 	mov.w	r2, #0
 80023b6:	f04f 0300 	mov.w	r3, #0
 80023ba:	00eb      	lsls	r3, r5, #3
 80023bc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023c0:	00e2      	lsls	r2, r4, #3
 80023c2:	4614      	mov	r4, r2
 80023c4:	461d      	mov	r5, r3
 80023c6:	eb14 030a 	adds.w	r3, r4, sl
 80023ca:	603b      	str	r3, [r7, #0]
 80023cc:	eb45 030b 	adc.w	r3, r5, fp
 80023d0:	607b      	str	r3, [r7, #4]
 80023d2:	f04f 0200 	mov.w	r2, #0
 80023d6:	f04f 0300 	mov.w	r3, #0
 80023da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023de:	4629      	mov	r1, r5
 80023e0:	028b      	lsls	r3, r1, #10
 80023e2:	4620      	mov	r0, r4
 80023e4:	4629      	mov	r1, r5
 80023e6:	4604      	mov	r4, r0
 80023e8:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80023ec:	4601      	mov	r1, r0
 80023ee:	028a      	lsls	r2, r1, #10
 80023f0:	4610      	mov	r0, r2
 80023f2:	4619      	mov	r1, r3
 80023f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f6:	2200      	movs	r2, #0
 80023f8:	60bb      	str	r3, [r7, #8]
 80023fa:	60fa      	str	r2, [r7, #12]
 80023fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002400:	f7fd febc 	bl	800017c <__aeabi_uldivmod>
 8002404:	4602      	mov	r2, r0
 8002406:	460b      	mov	r3, r1
 8002408:	4613      	mov	r3, r2
 800240a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllvco;
 800240c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800240e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002410:	e00d      	b.n	800242e <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002412:	4b0a      	ldr	r3, [pc, #40]	; (800243c <HAL_RCC_GetSysClockFreq+0x16c>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	0b5b      	lsrs	r3, r3, #13
 8002418:	f003 0307 	and.w	r3, r3, #7
 800241c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800241e:	6a3b      	ldr	r3, [r7, #32]
 8002420:	3301      	adds	r3, #1
 8002422:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800242c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800242e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002430:	4618      	mov	r0, r3
 8002432:	3738      	adds	r7, #56	; 0x38
 8002434:	46bd      	mov	sp, r7
 8002436:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800243a:	bf00      	nop
 800243c:	40023800 	.word	0x40023800
 8002440:	00f42400 	.word	0x00f42400
 8002444:	016e3600 	.word	0x016e3600
 8002448:	08003344 	.word	0x08003344

0800244c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002450:	4b02      	ldr	r3, [pc, #8]	; (800245c <HAL_RCC_GetHCLKFreq+0x10>)
 8002452:	681b      	ldr	r3, [r3, #0]
}
 8002454:	4618      	mov	r0, r3
 8002456:	46bd      	mov	sp, r7
 8002458:	bc80      	pop	{r7}
 800245a:	4770      	bx	lr
 800245c:	20000010 	.word	0x20000010

08002460 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002464:	f7ff fff2 	bl	800244c <HAL_RCC_GetHCLKFreq>
 8002468:	4602      	mov	r2, r0
 800246a:	4b05      	ldr	r3, [pc, #20]	; (8002480 <HAL_RCC_GetPCLK1Freq+0x20>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	0a1b      	lsrs	r3, r3, #8
 8002470:	f003 0307 	and.w	r3, r3, #7
 8002474:	4903      	ldr	r1, [pc, #12]	; (8002484 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002476:	5ccb      	ldrb	r3, [r1, r3]
 8002478:	fa22 f303 	lsr.w	r3, r2, r3
}
 800247c:	4618      	mov	r0, r3
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40023800 	.word	0x40023800
 8002484:	08003360 	.word	0x08003360

08002488 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8002488:	b480      	push	{r7}
 800248a:	b087      	sub	sp, #28
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002490:	2300      	movs	r3, #0
 8002492:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002494:	4b29      	ldr	r3, [pc, #164]	; (800253c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d12c      	bne.n	80024fa <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80024a0:	4b26      	ldr	r3, [pc, #152]	; (800253c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80024a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d005      	beq.n	80024b8 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80024ac:	4b24      	ldr	r3, [pc, #144]	; (8002540 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80024b4:	617b      	str	r3, [r7, #20]
 80024b6:	e016      	b.n	80024e6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024b8:	4b20      	ldr	r3, [pc, #128]	; (800253c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80024ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024bc:	4a1f      	ldr	r2, [pc, #124]	; (800253c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80024be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024c2:	6253      	str	r3, [r2, #36]	; 0x24
 80024c4:	4b1d      	ldr	r3, [pc, #116]	; (800253c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80024c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024cc:	60fb      	str	r3, [r7, #12]
 80024ce:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80024d0:	4b1b      	ldr	r3, [pc, #108]	; (8002540 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80024d8:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80024da:	4b18      	ldr	r3, [pc, #96]	; (800253c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80024dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024de:	4a17      	ldr	r2, [pc, #92]	; (800253c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80024e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024e4:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80024ec:	d105      	bne.n	80024fa <RCC_SetFlashLatencyFromMSIRange+0x72>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80024f4:	d101      	bne.n	80024fa <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80024f6:	2301      	movs	r3, #1
 80024f8:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d105      	bne.n	800250c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8002500:	4b10      	ldr	r3, [pc, #64]	; (8002544 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a0f      	ldr	r2, [pc, #60]	; (8002544 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002506:	f043 0304 	orr.w	r3, r3, #4
 800250a:	6013      	str	r3, [r2, #0]
 800250c:	4b0d      	ldr	r3, [pc, #52]	; (8002544 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f023 0201 	bic.w	r2, r3, #1
 8002514:	490b      	ldr	r1, [pc, #44]	; (8002544 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	4313      	orrs	r3, r2
 800251a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800251c:	4b09      	ldr	r3, [pc, #36]	; (8002544 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0301 	and.w	r3, r3, #1
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	429a      	cmp	r2, r3
 8002528:	d001      	beq.n	800252e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e000      	b.n	8002530 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800252e:	2300      	movs	r3, #0
}
 8002530:	4618      	mov	r0, r3
 8002532:	371c      	adds	r7, #28
 8002534:	46bd      	mov	sp, r7
 8002536:	bc80      	pop	{r7}
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	40023800 	.word	0x40023800
 8002540:	40007000 	.word	0x40007000
 8002544:	40023c00 	.word	0x40023c00

08002548 <__libc_init_array>:
 8002548:	b570      	push	{r4, r5, r6, lr}
 800254a:	2600      	movs	r6, #0
 800254c:	4d0c      	ldr	r5, [pc, #48]	; (8002580 <__libc_init_array+0x38>)
 800254e:	4c0d      	ldr	r4, [pc, #52]	; (8002584 <__libc_init_array+0x3c>)
 8002550:	1b64      	subs	r4, r4, r5
 8002552:	10a4      	asrs	r4, r4, #2
 8002554:	42a6      	cmp	r6, r4
 8002556:	d109      	bne.n	800256c <__libc_init_array+0x24>
 8002558:	f000 f822 	bl	80025a0 <_init>
 800255c:	2600      	movs	r6, #0
 800255e:	4d0a      	ldr	r5, [pc, #40]	; (8002588 <__libc_init_array+0x40>)
 8002560:	4c0a      	ldr	r4, [pc, #40]	; (800258c <__libc_init_array+0x44>)
 8002562:	1b64      	subs	r4, r4, r5
 8002564:	10a4      	asrs	r4, r4, #2
 8002566:	42a6      	cmp	r6, r4
 8002568:	d105      	bne.n	8002576 <__libc_init_array+0x2e>
 800256a:	bd70      	pop	{r4, r5, r6, pc}
 800256c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002570:	4798      	blx	r3
 8002572:	3601      	adds	r6, #1
 8002574:	e7ee      	b.n	8002554 <__libc_init_array+0xc>
 8002576:	f855 3b04 	ldr.w	r3, [r5], #4
 800257a:	4798      	blx	r3
 800257c:	3601      	adds	r6, #1
 800257e:	e7f2      	b.n	8002566 <__libc_init_array+0x1e>
 8002580:	08003370 	.word	0x08003370
 8002584:	08003370 	.word	0x08003370
 8002588:	08003370 	.word	0x08003370
 800258c:	08003374 	.word	0x08003374

08002590 <memset>:
 8002590:	4603      	mov	r3, r0
 8002592:	4402      	add	r2, r0
 8002594:	4293      	cmp	r3, r2
 8002596:	d100      	bne.n	800259a <memset+0xa>
 8002598:	4770      	bx	lr
 800259a:	f803 1b01 	strb.w	r1, [r3], #1
 800259e:	e7f9      	b.n	8002594 <memset+0x4>

080025a0 <_init>:
 80025a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025a2:	bf00      	nop
 80025a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025a6:	bc08      	pop	{r3}
 80025a8:	469e      	mov	lr, r3
 80025aa:	4770      	bx	lr

080025ac <_fini>:
 80025ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ae:	bf00      	nop
 80025b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025b2:	bc08      	pop	{r3}
 80025b4:	469e      	mov	lr, r3
 80025b6:	4770      	bx	lr
